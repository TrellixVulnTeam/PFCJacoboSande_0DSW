{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { initializeComponentRef, warnDeprecations, warnMutuallyExclusive, classNamesFunction, find, getId, isControlled, getNativeProps, divProperties } from '../../Utilities';\nimport { ChoiceGroupOption } from './ChoiceGroupOption/index';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory ChoiceGroup}\n */\n\nvar ChoiceGroupBase =\n/** @class */\nfunction (_super) {\n  __extends(ChoiceGroupBase, _super);\n\n  function ChoiceGroupBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusCallbacks = {};\n    _this._changeCallbacks = {};\n\n    _this._onBlur = function (ev, option) {\n      _this.setState({\n        keyFocused: undefined\n      });\n    };\n\n    initializeComponentRef(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('ChoiceGroup', props, {\n        onChanged: 'onChange'\n      });\n      warnMutuallyExclusive('ChoiceGroup', props, {\n        selectedKey: 'defaultSelectedKey'\n      });\n    }\n\n    var defaultSelectedKey = props.defaultSelectedKey,\n        _a = props.options,\n        options = _a === void 0 ? [] : _a;\n    var validDefaultSelectedKey = !_isControlled(props) && defaultSelectedKey !== undefined && options.some(function (option) {\n      return option.key === defaultSelectedKey;\n    });\n    _this.state = {\n      keyChecked: validDefaultSelectedKey ? defaultSelectedKey : _this._getKeyChecked(props)\n    };\n    _this._id = getId('ChoiceGroup');\n    _this._labelId = getId('ChoiceGroupLabel');\n    return _this;\n  }\n\n  Object.defineProperty(ChoiceGroupBase.prototype, \"checkedOption\", {\n    /**\n     * Gets the current checked option.\n     */\n    get: function () {\n      var _this = this;\n\n      var _a = this.props.options,\n          options = _a === void 0 ? [] : _a;\n      return find(options, function (value) {\n        return value.key === _this.state.keyChecked;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ChoiceGroupBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // Only update if a new props object has been passed in (don't care about state updates)\n    if (prevProps !== this.props) {\n      var newKeyChecked = this._getKeyChecked(this.props);\n\n      var oldKeyChecked = this._getKeyChecked(prevProps);\n\n      if (newKeyChecked !== oldKeyChecked) {\n        this.setState({\n          keyChecked: newKeyChecked\n        });\n      }\n    }\n  };\n\n  ChoiceGroupBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        className = _a.className,\n        theme = _a.theme,\n        styles = _a.styles,\n        _b = _a.options,\n        options = _b === void 0 ? [] : _b,\n        label = _a.label,\n        required = _a.required,\n        disabled = _a.disabled,\n        name = _a.name;\n    var _c = this.state,\n        keyChecked = _c.keyChecked,\n        keyFocused = _c.keyFocused;\n    var divProps = getNativeProps(this.props, divProperties, ['onChange', 'className', 'required']);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      optionsContainIconOrImage: options.some(function (option) {\n        return !!(option.iconProps || option.imageSrc);\n      })\n    });\n    var labelId = this._id + '-label';\n    var ariaLabelledBy = this.props.ariaLabelledBy || (label ? labelId : this.props['aria-labelledby']); // TODO (Fabric 8?) - if possible, move `root` class to the actual root and eliminate\n    // `applicationRole` class (but the div structure will stay the same by necessity)\n\n    return (// eslint-disable-next-line deprecation/deprecation\n      React.createElement(\"div\", __assign({\n        className: classNames.applicationRole\n      }, divProps), React.createElement(\"div\", __assign({\n        className: classNames.root,\n        role: \"radiogroup\"\n      }, ariaLabelledBy && {\n        'aria-labelledby': ariaLabelledBy\n      }), label && React.createElement(Label, {\n        className: classNames.label,\n        required: required,\n        id: labelId,\n        disabled: disabled\n      }, label), React.createElement(\"div\", {\n        className: classNames.flexContainer\n      }, options.map(function (option) {\n        var innerOptionProps = __assign(__assign({}, option), {\n          focused: option.key === keyFocused,\n          checked: option.key === keyChecked,\n          disabled: option.disabled || disabled,\n          id: _this._getOptionId(option),\n          labelId: _this._getOptionLabelId(option),\n          name: name || _this._id,\n          required: required\n        });\n\n        return React.createElement(ChoiceGroupOption, __assign({\n          key: option.key,\n          onBlur: _this._onBlur,\n          onFocus: _this._onFocus(option.key),\n          onChange: _this._onChange(option.key)\n        }, innerOptionProps));\n      }))))\n    );\n  };\n\n  ChoiceGroupBase.prototype.focus = function () {\n    var _a = this.props.options,\n        options = _a === void 0 ? [] : _a;\n    var optionToFocus = this.checkedOption || options.filter(function (option) {\n      return !option.disabled;\n    })[0];\n    var elementToFocus = optionToFocus && document.getElementById(this._getOptionId(optionToFocus));\n\n    if (elementToFocus) {\n      elementToFocus.focus();\n    }\n  };\n\n  ChoiceGroupBase.prototype._onFocus = function (key) {\n    var _this = this; // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n\n\n    if (!this._focusCallbacks[key]) {\n      this._focusCallbacks[key] = function (ev, option) {\n        _this.setState({\n          keyFocused: key\n        });\n      };\n    }\n\n    return this._focusCallbacks[key];\n  };\n\n  ChoiceGroupBase.prototype._onChange = function (key) {\n    var _this = this; // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n\n\n    if (!this._changeCallbacks[key]) {\n      this._changeCallbacks[key] = function (evt, option) {\n        // eslint-disable-next-line deprecation/deprecation\n        var _a = _this.props,\n            onChanged = _a.onChanged,\n            onChange = _a.onChange; // Only manage state in uncontrolled scenarios.\n\n        if (!_isControlled(_this.props)) {\n          _this.setState({\n            keyChecked: key\n          });\n        } // Get the original option without the `key` prop removed\n\n\n        var originalOption = find(_this.props.options || [], function (value) {\n          return value.key === key;\n        }); // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\n\n        if (onChange) {\n          onChange(evt, originalOption);\n        } else if (onChanged) {\n          onChanged(originalOption, evt);\n        }\n      };\n    }\n\n    return this._changeCallbacks[key];\n  };\n  /**\n   * Returns `selectedKey` if provided, or the key of the first option with the `checked` prop set.\n   */\n\n\n  ChoiceGroupBase.prototype._getKeyChecked = function (props) {\n    if (props.selectedKey !== undefined) {\n      return props.selectedKey;\n    }\n\n    var _a = props.options,\n        options = _a === void 0 ? [] : _a; // eslint-disable-next-line deprecation/deprecation\n\n    var optionsChecked = options.filter(function (option) {\n      return option.checked;\n    });\n    return optionsChecked[0] && optionsChecked[0].key;\n  };\n\n  ChoiceGroupBase.prototype._getOptionId = function (option) {\n    return option.id || this._id + \"-\" + option.key;\n  };\n\n  ChoiceGroupBase.prototype._getOptionLabelId = function (option) {\n    return option.labelId || this._labelId + \"-\" + option.key;\n  };\n\n  return ChoiceGroupBase;\n}(React.Component);\n\nexport { ChoiceGroupBase };\n\nfunction _isControlled(props) {\n  return isControlled(props, 'selectedKey');\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,KAAT,QAAsB,aAAtB;AACA,SACEC,sBADF,EAEEC,gBAFF,EAGEC,qBAHF,EAIEC,kBAJF,EAKEC,IALF,EAMEC,KANF,EAOEC,YAPF,EAQEC,cARF,EASEC,aATF,QAUO,iBAVP;AAkBA,SAASC,iBAAT,QAA2D,2BAA3D;AAEA,IAAMC,aAAa,GAAGP,kBAAkB,EAAxC;AAiBA;;;;AAGA;AAAA;AAAA;EAAqCQ;;EAMnC,yBAAYC,KAAZ,EAAoC;IAApC,YACEC,kBAAMD,KAAN,KAAY,IADd;;IAHQE,wBAAyE,EAAzE;IACAA,yBAAyE,EAAzE;;IAyIAA,gBAAU,UAACC,EAAD,EAAoCC,MAApC,EAA8D;MAC9EF,KAAI,CAACG,QAAL,CAAc;QACZC,UAAU,EAAEC;MADA,CAAd;IAGD,CAJO;;IApINnB,sBAAsB,CAACc,KAAD,CAAtB;;IAEA,IAAIM,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzCrB,gBAAgB,CAAC,aAAD,EAAgBW,KAAhB,EAAuB;QAAEW,SAAS,EAAE;MAAb,CAAvB,CAAhB;MACArB,qBAAqB,CAAC,aAAD,EAAgBU,KAAhB,EAAuB;QAC1CY,WAAW,EAAE;MAD6B,CAAvB,CAArB;IAGD;;IAEO;IAAA,IAAoBC,kBAApB;IAAA,IAAoBC,iCAApB;IACR,IAAMC,uBAAuB,GAC3B,CAACC,aAAa,CAAChB,KAAD,CAAd,IACAiB,kBAAkB,KAAKV,SADvB,IAEAO,OAAO,CAACI,IAAR,CAAa,kBAAM;MAAI,aAAM,CAACC,GAAP,KAAeF,kBAAf;IAAiC,CAAxD,CAHF;IAKAf,KAAI,CAACkB,KAAL,GAAa;MACXC,UAAU,EAAEN,uBAAuB,GAAGE,kBAAH,GAAwBf,KAAI,CAACoB,cAAL,CAAoBtB,KAApB;IADhD,CAAb;IAIAE,KAAI,CAACqB,GAAL,GAAW9B,KAAK,CAAC,aAAD,CAAhB;IACAS,KAAI,CAACsB,QAAL,GAAgB/B,KAAK,CAAC,kBAAD,CAArB;;EACD;;EAKDgC,sBAAWC,yBAAX,EAAW,eAAX,EAAwB;IAHxB;;;SAGA;MAAA;;MACU;MAAA;MACR,OAAOlC,IAAI,CAACsB,OAAD,EAAU,UAACa,KAAD,EAA0B;QAAK,YAAK,CAACR,GAAN,KAAcjB,KAAI,CAACkB,KAAL,CAAWC,UAAzB;MAAmC,CAA5E,CAAX;IACD,CAHuB;oBAAA;;EAAA,CAAxB;;EAKOK,+CAAP,UAA0BE,SAA1B,EAAwDC,SAAxD,EAAoF;IAClF;IACA,IAAID,SAAS,KAAK,KAAK5B,KAAvB,EAA8B;MAC5B,IAAM8B,aAAa,GAAG,KAAKR,cAAL,CAAoB,KAAKtB,KAAzB,CAAtB;;MACA,IAAM+B,aAAa,GAAG,KAAKT,cAAL,CAAoBM,SAApB,CAAtB;;MAEA,IAAIE,aAAa,KAAKC,aAAtB,EAAqC;QACnC,KAAK1B,QAAL,CAAc;UACZgB,UAAU,EAAES;QADA,CAAd;MAGD;IACF;EACF,CAZM;;EAcAJ,mCAAP;IAAA;;IACQ;IAAA,IAAEM,wBAAF;IAAA,IAAaC,gBAAb;IAAA,IAAoBC,kBAApB;IAAA,IAA4BC,eAA5B;IAAA,IAA4BrB,iCAA5B;IAAA,IAA0CsB,gBAA1C;IAAA,IAAiDC,sBAAjD;IAAA,IAA2DC,sBAA3D;IAAA,IAAqEC,cAArE;IACA;IAAA,IAAElB,0BAAF;IAAA,IAAcf,0BAAd;IAEN,IAAMkC,QAAQ,GAAG7C,cAAc,CAAuC,KAAKK,KAA5C,EAAmDJ,aAAnD,EAAkE,CAC/F,UAD+F,EAE/F,WAF+F,EAG/F,UAH+F,CAAlE,CAA/B;IAMA,IAAM6C,UAAU,GAAG3C,aAAa,CAACoC,MAAD,EAAU;MACxCD,KAAK,EAAEA,KADiC;MAExCD,SAAS,WAF+B;MAGxCU,yBAAyB,EAAE5B,OAAO,CAACI,IAAR,CAAa,kBAAM;QAAI,QAAC,EAAEd,MAAM,CAACuC,SAAP,IAAoBvC,MAAM,CAACwC,QAA7B,CAAD;MAAuC,CAA9D;IAHa,CAAV,CAAhC;IAMA,IAAMC,OAAO,GAAG,KAAKtB,GAAL,GAAW,QAA3B;IACA,IAAMuB,cAAc,GAAG,KAAK9C,KAAL,CAAW8C,cAAX,KAA8BV,KAAK,GAAGS,OAAH,GAAa,KAAK7C,KAAL,CAAW,iBAAX,CAAhD,CAAvB,CAjBF,CAmBE;IACA;;IACA,OACE;MACAd;QAAK8C,SAAS,EAAES,UAAU,CAACM;MAA3B,GAAgDP,QAAhD,GACEtD;QACE8C,SAAS,EAAES,UAAU,CAACO,IADxB;QAEEC,IAAI,EAAC;MAFP,GAGOH,cAAc,IAAI;QAAE,mBAAmBA;MAArB,CAHzB,GAKGV,KAAK,IACJlD,oBAACC,KAAD,EAAM;QAAC6C,SAAS,EAAES,UAAU,CAACL,KAAvB;QAA8BC,QAAQ,EAAEA,QAAxC;QAAkDa,EAAE,EAAEL,OAAtD;QAA+DP,QAAQ,EAAEA;MAAzE,CAAN,EACGF,KADH,CANJ,EAUElD;QAAK8C,SAAS,EAAES,UAAU,CAACU;MAA3B,GACGrC,OAAO,CAACsC,GAAR,CAAY,UAAChD,MAAD,EAA2B;QACtC,IAAMiD,gBAAgB,yBACjBjD,MADiB,GACX;UACTkD,OAAO,EAAElD,MAAM,CAACe,GAAP,KAAeb,UADf;UAETiD,OAAO,EAAEnD,MAAM,CAACe,GAAP,KAAeE,UAFf;UAGTiB,QAAQ,EAAElC,MAAM,CAACkC,QAAP,IAAmBA,QAHpB;UAITY,EAAE,EAAEhD,KAAI,CAACsD,YAAL,CAAkBpD,MAAlB,CAJK;UAKTyC,OAAO,EAAE3C,KAAI,CAACuD,iBAAL,CAAuBrD,MAAvB,CALA;UAMTmC,IAAI,EAAEA,IAAI,IAAIrC,KAAI,CAACqB,GANV;UAOTc,QAAQ;QAPC,CADW,CAAtB;;QAWA,OACEnD,oBAACW,iBAAD,EAAkB6D;UAChBvC,GAAG,EAAEf,MAAM,CAACe,GADI;UAEhBwC,MAAM,EAAEzD,KAAI,CAAC0D,OAFG;UAGhBC,OAAO,EAAE3D,KAAI,CAAC4D,QAAL,CAAc1D,MAAM,CAACe,GAArB,CAHO;UAIhB4C,QAAQ,EAAE7D,KAAI,CAAC8D,SAAL,CAAe5D,MAAM,CAACe,GAAtB;QAJM,GAKZkC,gBALY,CAAlB,CADF;MASD,CArBA,CADH,CAVF,CADF;IAFF;EAwCD,CA7DM;;EA+DA3B,kCAAP;IACU;IAAA;IACR,IAAMuC,aAAa,GAAG,KAAKC,aAAL,IAAsBpD,OAAO,CAACqD,MAAR,CAAe,kBAAM;MAAI,QAAC/D,MAAM,CAACkC,QAAR;IAAgB,CAAzC,EAA2C,CAA3C,CAA5C;IACA,IAAM8B,cAAc,GAAGH,aAAa,IAAII,QAAQ,CAACC,cAAT,CAAwB,KAAKd,YAAL,CAAkBS,aAAlB,CAAxB,CAAxC;;IACA,IAAIG,cAAJ,EAAoB;MAClBA,cAAc,CAACG,KAAf;IACD;EACF,CAPM;;EASC7C,qCAAR,UAAiBP,GAAjB,EAA4B;IAA5B,iBAA4B,CAC1B;;;IACA,IAAI,CAAC,KAAKqD,eAAL,CAAqBrD,GAArB,CAAL,EAAgC;MAC9B,KAAKqD,eAAL,CAAqBrD,GAArB,IAA4B,UAC1BhB,EAD0B,EAE1BC,MAF0B,EAEA;QAE1BF,KAAI,CAACG,QAAL,CAAc;UACZC,UAAU,EAAEa;QADA,CAAd;MAGD,CAPD;IAQD;;IACD,OAAO,KAAKqD,eAAL,CAAqBrD,GAArB,CAAP;EACD,CAbO;;EAqBAO,sCAAR,UAAkBP,GAAlB,EAA6B;IAA7B,iBAA6B,CAC3B;;;IACA,IAAI,CAAC,KAAKsD,gBAAL,CAAsBtD,GAAtB,CAAL,EAAiC;MAC/B,KAAKsD,gBAAL,CAAsBtD,GAAtB,IAA6B,UAC3BuD,GAD2B,EAE3BtE,MAF2B,EAED;QAE1B;QACM;QAAA,IAAEO,wBAAF;QAAA,IAAaoD,sBAAb,CAHoB,CAK1B;;QACA,IAAI,CAAC/C,aAAa,CAACd,KAAI,CAACF,KAAN,CAAlB,EAAgC;UAC9BE,KAAI,CAACG,QAAL,CAAc;YACZgB,UAAU,EAAEF;UADA,CAAd;QAGD,CAVyB,CAY1B;;;QACA,IAAMwD,cAAc,GAAGnF,IAAI,CAACU,KAAI,CAACF,KAAL,CAAWc,OAAX,IAAsB,EAAvB,EAA2B,UAACa,KAAD,EAA0B;UAAK,YAAK,CAACR,GAAN,KAAcA,GAAd;QAAiB,CAA3E,CAA3B,CAb0B,CAe1B;;QACA,IAAI4C,QAAJ,EAAc;UACZA,QAAQ,CAACW,GAAD,EAAMC,cAAN,CAAR;QACD,CAFD,MAEO,IAAIhE,SAAJ,EAAe;UACpBA,SAAS,CAACgE,cAAD,EAAkBD,GAAlB,CAAT;QACD;MACF,CAvBD;IAwBD;;IACD,OAAO,KAAKD,gBAAL,CAAsBtD,GAAtB,CAAP;EACD,CA7BO;EA+BR;;;;;EAGQO,2CAAR,UAAuB1B,KAAvB,EAA+C;IAC7C,IAAIA,KAAK,CAACY,WAAN,KAAsBL,SAA1B,EAAqC;MACnC,OAAOP,KAAK,CAACY,WAAb;IACD;;IAEO;IAAA,sCALqC,CAM7C;;IACA,IAAMgE,cAAc,GAAG9D,OAAO,CAACqD,MAAR,CAAe,UAAC/D,MAAD,EAA2B;MAAK,aAAM,CAACmD,OAAP;IAAc,CAA7D,CAAvB;IACA,OAAOqB,cAAc,CAAC,CAAD,CAAd,IAAqBA,cAAc,CAAC,CAAD,CAAd,CAAkBzD,GAA9C;EACD,CATO;;EAWAO,yCAAR,UAAqBtB,MAArB,EAA+C;IAC7C,OAAOA,MAAM,CAAC8C,EAAP,IAAgB,KAAK3B,GAAL,GAAQ,GAAR,GAAYnB,MAAM,CAACe,GAA1C;EACD,CAFO;;EAIAO,8CAAR,UAA0BtB,MAA1B,EAAoD;IAClD,OAAOA,MAAM,CAACyC,OAAP,IAAqB,KAAKrB,QAAL,GAAa,GAAb,GAAiBpB,MAAM,CAACe,GAApD;EACD,CAFO;;EAGV;AAAC,CAvMD,CAAqCjC,KAAK,CAAC2F,SAA3C;;;;AAyMA,SAAS7D,aAAT,CAAuBhB,KAAvB,EAA+C;EAC7C,OAAON,YAAY,CAACM,KAAD,EAAQ,aAAR,CAAnB;AACD","names":["React","Label","initializeComponentRef","warnDeprecations","warnMutuallyExclusive","classNamesFunction","find","getId","isControlled","getNativeProps","divProperties","ChoiceGroupOption","getClassNames","__extends","props","_super","_this","ev","option","setState","keyFocused","undefined","process","env","NODE_ENV","onChanged","selectedKey","_a","options","validDefaultSelectedKey","_isControlled","defaultSelectedKey","some","key","state","keyChecked","_getKeyChecked","_id","_labelId","Object","ChoiceGroupBase","value","prevProps","prevState","newKeyChecked","oldKeyChecked","className","theme","styles","_b","label","required","disabled","name","divProps","classNames","optionsContainIconOrImage","iconProps","imageSrc","labelId","ariaLabelledBy","applicationRole","root","role","id","flexContainer","map","innerOptionProps","focused","checked","_getOptionId","_getOptionLabelId","__assign","onBlur","_onBlur","onFocus","_onFocus","onChange","_onChange","optionToFocus","checkedOption","filter","elementToFocus","document","getElementById","focus","_focusCallbacks","_changeCallbacks","evt","originalOption","optionsChecked","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\ChoiceGroup\\ChoiceGroup.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Label } from '../../Label';\nimport {\n  initializeComponentRef,\n  warnDeprecations,\n  warnMutuallyExclusive,\n  classNamesFunction,\n  find,\n  getId,\n  isControlled,\n  getNativeProps,\n  divProperties,\n} from '../../Utilities';\nimport {\n  IChoiceGroup,\n  IChoiceGroupOption,\n  IChoiceGroupProps,\n  IChoiceGroupStyleProps,\n  IChoiceGroupStyles,\n} from './ChoiceGroup.types';\nimport { ChoiceGroupOption, IChoiceGroupOptionProps } from './ChoiceGroupOption/index';\n\nconst getClassNames = classNamesFunction<IChoiceGroupStyleProps, IChoiceGroupStyles>();\n\nexport interface IChoiceGroupState {\n  /**\n   * Current selected option, for **internal use only**.\n   * External users should access `IChoiceGroup.checkedOption` instead.\n   */\n  // TODO (Fabric 8?) - once we removed the checked property from individual options,\n  // we can probably store only the uncontrolled value in the state (right now it tracks\n  // the value regardless of controlled/uncontrolled--though if controlled, it only updates\n  // the value in state when the selectedKey prop updates)\n  keyChecked?: string | number;\n\n  /** Is set when the control has focus. */\n  keyFocused?: string | number;\n}\n\n/**\n * {@docCategory ChoiceGroup}\n */\nexport class ChoiceGroupBase extends React.Component<IChoiceGroupProps, IChoiceGroupState> implements IChoiceGroup {\n  private _id: string;\n  private _labelId: string;\n  private _focusCallbacks: { [key: string]: IChoiceGroupOptionProps['onFocus'] } = {};\n  private _changeCallbacks: { [key: string]: IChoiceGroupOptionProps['onBlur'] } = {};\n\n  constructor(props: IChoiceGroupProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('ChoiceGroup', props, { onChanged: 'onChange' });\n      warnMutuallyExclusive('ChoiceGroup', props, {\n        selectedKey: 'defaultSelectedKey',\n      });\n    }\n\n    const { defaultSelectedKey, options = [] } = props;\n    const validDefaultSelectedKey =\n      !_isControlled(props) &&\n      defaultSelectedKey !== undefined &&\n      options.some(option => option.key === defaultSelectedKey);\n\n    this.state = {\n      keyChecked: validDefaultSelectedKey ? defaultSelectedKey : this._getKeyChecked(props),\n    };\n\n    this._id = getId('ChoiceGroup');\n    this._labelId = getId('ChoiceGroupLabel');\n  }\n\n  /**\n   * Gets the current checked option.\n   */\n  public get checkedOption(): IChoiceGroupOption | undefined {\n    const { options = [] } = this.props;\n    return find(options, (value: IChoiceGroupOption) => value.key === this.state.keyChecked);\n  }\n\n  public componentDidUpdate(prevProps: IChoiceGroupProps, prevState: IChoiceGroupState): void {\n    // Only update if a new props object has been passed in (don't care about state updates)\n    if (prevProps !== this.props) {\n      const newKeyChecked = this._getKeyChecked(this.props);\n      const oldKeyChecked = this._getKeyChecked(prevProps);\n\n      if (newKeyChecked !== oldKeyChecked) {\n        this.setState({\n          keyChecked: newKeyChecked,\n        });\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const { className, theme, styles, options = [], label, required, disabled, name } = this.props;\n    const { keyChecked, keyFocused } = this.state;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, [\n      'onChange',\n      'className',\n      'required',\n    ]);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      optionsContainIconOrImage: options.some(option => !!(option.iconProps || option.imageSrc)),\n    });\n\n    const labelId = this._id + '-label';\n    const ariaLabelledBy = this.props.ariaLabelledBy || (label ? labelId : this.props['aria-labelledby']);\n\n    // TODO (Fabric 8?) - if possible, move `root` class to the actual root and eliminate\n    // `applicationRole` class (but the div structure will stay the same by necessity)\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div className={classNames.applicationRole} {...divProps}>\n        <div\n          className={classNames.root}\n          role=\"radiogroup\"\n          {...(ariaLabelledBy && { 'aria-labelledby': ariaLabelledBy })}\n        >\n          {label && (\n            <Label className={classNames.label} required={required} id={labelId} disabled={disabled}>\n              {label}\n            </Label>\n          )}\n          <div className={classNames.flexContainer}>\n            {options.map((option: IChoiceGroupOption) => {\n              const innerOptionProps = {\n                ...option,\n                focused: option.key === keyFocused,\n                checked: option.key === keyChecked,\n                disabled: option.disabled || disabled,\n                id: this._getOptionId(option),\n                labelId: this._getOptionLabelId(option),\n                name: name || this._id,\n                required,\n              };\n\n              return (\n                <ChoiceGroupOption\n                  key={option.key}\n                  onBlur={this._onBlur}\n                  onFocus={this._onFocus(option.key)}\n                  onChange={this._onChange(option.key)}\n                  {...innerOptionProps}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public focus() {\n    const { options = [] } = this.props;\n    const optionToFocus = this.checkedOption || options.filter(option => !option.disabled)[0];\n    const elementToFocus = optionToFocus && document.getElementById(this._getOptionId(optionToFocus));\n    if (elementToFocus) {\n      elementToFocus.focus();\n    }\n  }\n\n  private _onFocus(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._focusCallbacks[key]) {\n      this._focusCallbacks[key] = (\n        ev: React.FocusEvent<HTMLElement | HTMLInputElement>,\n        option: IChoiceGroupOption,\n      ) => {\n        this.setState({\n          keyFocused: key,\n        });\n      };\n    }\n    return this._focusCallbacks[key];\n  }\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>, option: IChoiceGroupOption) => {\n    this.setState({\n      keyFocused: undefined,\n    });\n  };\n\n  private _onChange(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._changeCallbacks[key]) {\n      this._changeCallbacks[key] = (\n        evt: React.FormEvent<HTMLElement | HTMLInputElement>,\n        option: IChoiceGroupOption,\n      ) => {\n        // eslint-disable-next-line deprecation/deprecation\n        const { onChanged, onChange } = this.props;\n\n        // Only manage state in uncontrolled scenarios.\n        if (!_isControlled(this.props)) {\n          this.setState({\n            keyChecked: key,\n          });\n        }\n\n        // Get the original option without the `key` prop removed\n        const originalOption = find(this.props.options || [], (value: IChoiceGroupOption) => value.key === key);\n\n        // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\n        if (onChange) {\n          onChange(evt, originalOption);\n        } else if (onChanged) {\n          onChanged(originalOption!, evt);\n        }\n      };\n    }\n    return this._changeCallbacks[key];\n  }\n\n  /**\n   * Returns `selectedKey` if provided, or the key of the first option with the `checked` prop set.\n   */\n  private _getKeyChecked(props: IChoiceGroupProps): string | number | undefined {\n    if (props.selectedKey !== undefined) {\n      return props.selectedKey;\n    }\n\n    const { options = [] } = props;\n    // eslint-disable-next-line deprecation/deprecation\n    const optionsChecked = options.filter((option: IChoiceGroupOption) => option.checked);\n    return optionsChecked[0] && optionsChecked[0].key;\n  }\n\n  private _getOptionId(option: IChoiceGroupOption): string {\n    return option.id || `${this._id}-${option.key}`;\n  }\n\n  private _getOptionLabelId(option: IChoiceGroupOption): string {\n    return option.labelId || `${this._labelId}-${option.key}`;\n  }\n}\n\nfunction _isControlled(props: IChoiceGroupProps): boolean {\n  return isControlled(props, 'selectedKey');\n}\n"]},"metadata":{},"sourceType":"module"}