{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, getRTL, getId, KeyCodes, classNamesFunction } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\nimport { DragDropHelper } from '../../utilities/dragdrop/index';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nvar getClassNames = classNamesFunction();\nvar MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nvar MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nvar NO_COLUMNS = [];\n\nvar DetailsHeaderBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsHeaderBase, _super);\n\n  function DetailsHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._rootElement = React.createRef();\n    _this._rootComponent = React.createRef();\n    _this._draggedColumnIndex = -1;\n    _this._dropHintDetails = {};\n\n    _this._updateDroppingState = function (newValue, event) {\n      if (_this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n        _this._resetDropHints();\n      }\n    };\n\n    _this._onDragOver = function (item, event) {\n      if (_this._draggedColumnIndex >= 0) {\n        event.stopPropagation();\n\n        _this._computeDropHintToBeShown(event.clientX);\n      }\n    };\n\n    _this._onDrop = function (item, event) {\n      // Safe to assume this is defined since we're handling a drop event\n      var columnReorderProps = _this._getColumnReorderProps(); // Target index will not get changed if draggeditem is after target item.\n\n\n      if (_this._draggedColumnIndex >= 0 && event) {\n        var targetIndex = _this._draggedColumnIndex > _this._currentDropHintIndex ? _this._currentDropHintIndex : _this._currentDropHintIndex - 1;\n\n        var isValidDrop = _this._isValidCurrentDropHintIndex();\n\n        event.stopPropagation();\n\n        if (isValidDrop) {\n          _this._onDropIndexInfo.sourceIndex = _this._draggedColumnIndex;\n          _this._onDropIndexInfo.targetIndex = targetIndex;\n\n          if (columnReorderProps.onColumnDrop) {\n            var dragDropDetails = {\n              draggedIndex: _this._draggedColumnIndex,\n              targetIndex: targetIndex\n            };\n            columnReorderProps.onColumnDrop(dragDropDetails);\n            /* eslint-disable deprecation/deprecation */\n          } else if (columnReorderProps.handleColumnReorder) {\n            columnReorderProps.handleColumnReorder(_this._draggedColumnIndex, targetIndex);\n            /* eslint-enable deprecation/deprecation */\n          }\n        }\n      }\n\n      _this._resetDropHints();\n\n      _this._dropHintDetails = {};\n      _this._draggedColumnIndex = -1;\n    };\n\n    _this._updateDragInfo = function (props, event) {\n      // Safe to assume this is defined since we're handling a drag event\n      var columnReorderProps = _this._getColumnReorderProps();\n\n      var itemIndex = props.itemIndex;\n\n      if (itemIndex >= 0) {\n        // Column index is set based on the checkbox\n        _this._draggedColumnIndex = _this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\n\n        _this._getDropHintPositions();\n\n        if (columnReorderProps.onColumnDragStart) {\n          columnReorderProps.onColumnDragStart(true);\n        }\n      } else if (event && _this._draggedColumnIndex >= 0) {\n        _this._resetDropHints();\n\n        _this._draggedColumnIndex = -1;\n        _this._dropHintDetails = {};\n\n        if (columnReorderProps.onColumnDragEnd) {\n          var columnDragEndLocation = _this._isEventOnHeader(event);\n\n          columnReorderProps.onColumnDragEnd({\n            dropLocation: columnDragEndLocation\n          }, event);\n        }\n      }\n    };\n\n    _this._getDropHintPositions = function () {\n      var _a = _this.props.columns,\n          columns = _a === void 0 ? NO_COLUMNS : _a; // Safe to assume this is defined since we're handling a drag/drop event\n\n      var columnReorderProps = _this._getColumnReorderProps();\n\n      var prevX = 0;\n      var prevMid = 0;\n      var prevRef;\n      var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n      for (var i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n        if (_this._rootElement.current) {\n          var dropHintElement = _this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0];\n\n          if (dropHintElement) {\n            if (i === frozenColumnCountFromStart) {\n              prevX = dropHintElement.offsetLeft;\n              prevMid = dropHintElement.offsetLeft;\n              prevRef = dropHintElement;\n            } else {\n              var newMid = (dropHintElement.offsetLeft + prevX) / 2;\n              _this._dropHintDetails[i - 1] = {\n                originX: prevX,\n                startX: prevMid,\n                endX: newMid,\n                dropHintElementRef: prevRef\n              };\n              prevMid = newMid;\n              prevRef = dropHintElement;\n              prevX = dropHintElement.offsetLeft;\n\n              if (i === columns.length - frozenColumnCountFromEnd) {\n                _this._dropHintDetails[i] = {\n                  originX: prevX,\n                  startX: prevMid,\n                  endX: dropHintElement.offsetLeft,\n                  dropHintElementRef: prevRef\n                };\n              }\n            }\n          }\n        }\n      }\n    };\n    /**\n     * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n     */\n\n\n    _this._computeDropHintToBeShown = function (clientX) {\n      var isRtl = getRTL(_this.props.theme);\n\n      if (_this._rootElement.current) {\n        var clientRect = _this._rootElement.current.getBoundingClientRect();\n\n        var headerOriginX = clientRect.left;\n        var eventXRelativePosition = clientX - headerOriginX;\n        var currentDropHintIndex = _this._currentDropHintIndex;\n\n        if (_this._isValidCurrentDropHintIndex()) {\n          if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex].startX, _this._dropHintDetails[currentDropHintIndex].endX)) {\n            return;\n          }\n        }\n\n        var _a = _this.props.columns,\n            columns = _a === void 0 ? NO_COLUMNS : _a; // Safe to assume this is defined since we're handling a drag/drop event\n\n        var columnReorderProps = _this._getColumnReorderProps();\n\n        var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n        var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n        var currentIndex = frozenColumnCountFromStart;\n        var lastValidColumn = columns.length - frozenColumnCountFromEnd;\n        var indexToUpdate = -1;\n\n        if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[currentIndex].endX)) {\n          indexToUpdate = currentIndex;\n        } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[lastValidColumn].startX)) {\n          indexToUpdate = lastValidColumn;\n        } else if (_this._isValidCurrentDropHintIndex()) {\n          if (_this._dropHintDetails[currentDropHintIndex + 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex + 1].startX, _this._dropHintDetails[currentDropHintIndex + 1].endX)) {\n            indexToUpdate = currentDropHintIndex + 1;\n          } else if (_this._dropHintDetails[currentDropHintIndex - 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex - 1].startX, _this._dropHintDetails[currentDropHintIndex - 1].endX)) {\n            indexToUpdate = currentDropHintIndex - 1;\n          }\n        }\n\n        if (indexToUpdate === -1) {\n          var startIndex = frozenColumnCountFromStart;\n          var endIndex = lastValidColumn;\n\n          while (startIndex < endIndex) {\n            var middleIndex = Math.ceil((endIndex + startIndex) / 2);\n\n            if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].startX, _this._dropHintDetails[middleIndex].endX)) {\n              indexToUpdate = middleIndex;\n              break;\n            } else if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              endIndex = middleIndex;\n            } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              startIndex = middleIndex;\n            }\n          }\n        }\n\n        if (indexToUpdate === _this._draggedColumnIndex || indexToUpdate === _this._draggedColumnIndex + 1) {\n          if (_this._isValidCurrentDropHintIndex()) {\n            _this._resetDropHints();\n          }\n        } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n          _this._resetDropHints();\n\n          _this._updateDropHintElement(_this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n\n          _this._currentDropHintIndex = indexToUpdate;\n        }\n      }\n    };\n\n    _this._renderColumnSizer = function (_a) {\n      var _b;\n\n      var columnIndex = _a.columnIndex;\n      var _c = _this.props.columns,\n          columns = _c === void 0 ? NO_COLUMNS : _c;\n      var column = columns[columnIndex];\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      var classNames = _this._classNames;\n      return column.isResizable ? React.createElement(\"div\", {\n        key: column.key + \"_sizer\",\n        \"aria-hidden\": true,\n        role: \"button\",\n        \"data-is-focusable\": false,\n        onClick: _stopPropagation,\n        \"data-sizer-index\": columnIndex,\n        onBlur: _this._onSizerBlur,\n        className: css(classNames.cellSizer, columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd, (_b = {}, _b[classNames.cellIsResizing] = columnResizeDetails && columnResizeDetails.columnIndex === columnIndex, _b)),\n        onDoubleClick: _this._onSizerDoubleClick.bind(_this, columnIndex)\n      }) : null;\n    };\n\n    _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {\n      return React.createElement(\"span\", {\n        className: tooltipHostProps.hostClassName\n      }, tooltipHostProps.children);\n    };\n    /**\n     * Called when the select all toggle is clicked.\n     */\n\n\n    _this._onSelectAllClicked = function () {\n      var selection = _this.props.selection;\n\n      if (selection) {\n        selection.toggleAllSelected();\n      }\n    };\n\n    _this._onRootMouseDown = function (ev) {\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n      var columnIndex = Number(columnIndexAttr);\n      var _a = _this.props.columns,\n          columns = _a === void 0 ? NO_COLUMNS : _a;\n\n      if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n        // Ignore anything except the primary button.\n        return;\n      }\n\n      _this.setState({\n        columnResizeDetails: {\n          columnIndex: columnIndex,\n          columnMinWidth: columns[columnIndex].calculatedWidth,\n          originX: ev.clientX\n        }\n      });\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._onRootMouseMove = function (ev) {\n      var _a = _this.state,\n          columnResizeDetails = _a.columnResizeDetails,\n          isSizing = _a.isSizing;\n\n      if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n        _this.setState({\n          isSizing: true\n        });\n      }\n    };\n\n    _this._onRootKeyDown = function (ev) {\n      var _a = _this.state,\n          columnResizeDetails = _a.columnResizeDetails,\n          isSizing = _a.isSizing;\n      var _b = _this.props,\n          _c = _b.columns,\n          columns = _c === void 0 ? NO_COLUMNS : _c,\n          onColumnResized = _b.onColumnResized;\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n\n      if (!columnIndexAttr || isSizing) {\n        return;\n      }\n\n      var columnIndex = Number(columnIndexAttr);\n\n      if (!columnResizeDetails) {\n        // eslint-disable-next-line deprecation/deprecation\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: {\n              columnIndex: columnIndex,\n              columnMinWidth: columns[columnIndex].calculatedWidth\n            }\n          });\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      } else {\n        var increment = void 0; // eslint-disable-next-line deprecation/deprecation\n\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: undefined\n          });\n\n          ev.preventDefault();\n          ev.stopPropagation(); // eslint-disable-next-line deprecation/deprecation\n        } else if (ev.which === KeyCodes.left) {\n          increment = getRTL(_this.props.theme) ? 1 : -1; // eslint-disable-next-line deprecation/deprecation\n        } else if (ev.which === KeyCodes.right) {\n          increment = getRTL(_this.props.theme) ? -1 : 1;\n        }\n\n        if (increment) {\n          if (!ev.shiftKey) {\n            increment *= 10;\n          }\n\n          _this.setState({\n            columnResizeDetails: __assign(__assign({}, columnResizeDetails), {\n              columnMinWidth: columnResizeDetails.columnMinWidth + increment\n            })\n          });\n\n          if (onColumnResized) {\n            onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    };\n    /**\n     * mouse move event handler in the header\n     * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n     *\n     * @param ev - mouse move event\n     */\n\n\n    _this._onSizerMouseMove = function (ev) {\n      var // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = ev.buttons;\n      var _a = _this.props,\n          onColumnIsSizingChanged = _a.onColumnIsSizingChanged,\n          onColumnResized = _a.onColumnResized,\n          _b = _a.columns,\n          columns = _b === void 0 ? NO_COLUMNS : _b;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n\n      if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n        // cancel mouse down event and return early when the primary button is not pressed\n        _this._onSizerMouseUp(ev);\n\n        return;\n      }\n\n      if (ev.clientX !== columnResizeDetails.originX) {\n        if (onColumnIsSizingChanged) {\n          onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], true);\n        }\n      }\n\n      if (onColumnResized) {\n        var movement = ev.clientX - columnResizeDetails.originX;\n\n        if (getRTL(_this.props.theme)) {\n          movement = -movement;\n        }\n\n        onColumnResized(columns[columnResizeDetails.columnIndex], columnResizeDetails.columnMinWidth + movement, columnResizeDetails.columnIndex);\n      }\n    };\n\n    _this._onSizerBlur = function (ev) {\n      var columnResizeDetails = _this.state.columnResizeDetails;\n\n      if (columnResizeDetails) {\n        _this.setState({\n          columnResizeDetails: undefined,\n          isSizing: false\n        });\n      }\n    };\n    /**\n     * mouse up event handler in the header\n     * clear the resize related state.\n     * This is to ensure we can catch double click event\n     *\n     * @param ev - mouse up event\n     */\n\n\n    _this._onSizerMouseUp = function (ev) {\n      var _a = _this.props,\n          _b = _a.columns,\n          columns = _b === void 0 ? NO_COLUMNS : _b,\n          onColumnIsSizingChanged = _a.onColumnIsSizingChanged;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n\n      _this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false\n      });\n\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], false);\n      }\n    };\n\n    _this._onToggleCollapseAll = function () {\n      var onToggleCollapseAll = _this.props.onToggleCollapseAll;\n      var newCollapsed = !_this.state.isAllCollapsed;\n\n      _this.setState({\n        isAllCollapsed: newCollapsed\n      });\n\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(newCollapsed);\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: _this.props.isAllCollapsed,\n      isAllSelected: !!_this.props.selection && _this.props.selection.isAllSelected()\n    };\n    _this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1\n    };\n    _this._id = getId('header');\n    _this._currentDropHintIndex = -1; // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n\n    _this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: function getSelection() {\n          return;\n        }\n      },\n      minimumPixelsForDrag: _this.props.minimumPixelsForDrag\n    });\n    return _this;\n  }\n\n  DetailsHeaderBase.prototype.componentDidMount = function () {\n    var selection = this.props.selection;\n\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged); // this._rootElement.current will be null in tests using react-test-renderer\n\n\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n      }\n    }\n  };\n\n  DetailsHeaderBase.prototype.componentDidUpdate = function (prevProps) {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n\n      delete this._subscriptionObject;\n    }\n\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      var _a = prevProps.columns,\n          previousColumns = _a === void 0 ? NO_COLUMNS : _a;\n      var _b = this.props.columns,\n          columns = _b === void 0 ? NO_COLUMNS : _b;\n\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1\n        };\n      }\n    }\n\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({\n        isAllCollapsed: this.props.isAllCollapsed\n      });\n    }\n  };\n\n  DetailsHeaderBase.prototype.componentWillUnmount = function () {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n\n      delete this._subscriptionObject;\n    }\n\n    this._dragDropHelper.dispose();\n\n    this._events.dispose();\n  };\n\n  DetailsHeaderBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b,\n        ariaLabel = _a.ariaLabel,\n        ariaLabelForToggleAllGroupsButton = _a.ariaLabelForToggleAllGroupsButton,\n        ariaLabelForSelectAllCheckbox = _a.ariaLabelForSelectAllCheckbox,\n        selectAllVisibility = _a.selectAllVisibility,\n        ariaLabelForSelectionColumn = _a.ariaLabelForSelectionColumn,\n        indentWidth = _a.indentWidth,\n        onColumnClick = _a.onColumnClick,\n        onColumnContextMenu = _a.onColumnContextMenu,\n        _c = _a.onRenderColumnHeaderTooltip,\n        onRenderColumnHeaderTooltip = _c === void 0 ? this._onRenderColumnHeaderTooltip : _c,\n        styles = _a.styles,\n        selectionMode = _a.selectionMode,\n        theme = _a.theme,\n        onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox,\n        groupNestingDepth = _a.groupNestingDepth,\n        useFastIcons = _a.useFastIcons,\n        checkboxVisibility = _a.checkboxVisibility,\n        className = _a.className;\n    var _d = this.state,\n        isAllSelected = _d.isAllSelected,\n        columnResizeDetails = _d.columnResizeDetails,\n        isSizing = _d.isSizing,\n        isAllCollapsed = _d.isAllCollapsed;\n    var showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    var isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    var isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n\n    var columnReorderProps = this._getColumnReorderProps();\n\n    var frozenColumnCountFromStart = columnReorderProps && columnReorderProps.frozenColumnCountFromStart ? columnReorderProps.frozenColumnCountFromStart : 0;\n    var frozenColumnCountFromEnd = columnReorderProps && columnReorderProps.frozenColumnCountFromEnd ? columnReorderProps.frozenColumnCountFromEnd : 0;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      isAllSelected: isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing: isSizing,\n      isAllCollapsed: isAllCollapsed,\n      isCheckboxHidden: isCheckboxHidden,\n      className: className\n    });\n    var classNames = this._classNames;\n    var IconComponent = useFastIcons ? FontIcon : Icon;\n    var isRTL = getRTL(theme);\n    return React.createElement(FocusZone, {\n      role: \"row\",\n      \"aria-label\": ariaLabel,\n      className: classNames.root,\n      componentRef: this._rootComponent,\n      elementRef: this._rootElement,\n      onMouseMove: this._onRootMouseMove,\n      \"data-automationid\": \"DetailsHeader\",\n      direction: FocusZoneDirection.horizontal\n    }, showCheckbox ? [React.createElement(\"div\", {\n      key: \"__checkbox\",\n      className: classNames.cellIsCheck,\n      \"aria-labelledby\": this._id + \"-check\",\n      onClick: !isCheckboxHidden ? this._onSelectAllClicked : undefined,\n      \"aria-colindex\": 1,\n      role: 'columnheader'\n    }, onRenderColumnHeaderTooltip({\n      hostClassName: classNames.checkTooltip,\n      id: this._id + \"-checkTooltip\",\n      setAriaDescribedBy: false,\n      content: ariaLabelForSelectAllCheckbox,\n      children: React.createElement(DetailsRowCheck, {\n        id: this._id + \"-check\",\n        \"aria-label\": selectionMode === SelectionMode.multiple ? ariaLabelForSelectAllCheckbox : ariaLabelForSelectionColumn,\n        \"aria-describedby\": !isCheckboxHidden ? ariaLabelForSelectAllCheckbox && !this.props.onRenderColumnHeaderTooltip ? this._id + \"-checkTooltip\" : undefined : ariaLabelForSelectionColumn && !this.props.onRenderColumnHeaderTooltip ? this._id + \"-checkTooltip\" : undefined,\n        \"data-is-focusable\": !isCheckboxHidden || undefined,\n        isHeader: true,\n        selected: isAllSelected,\n        anySelected: false,\n        canSelect: !isCheckboxHidden,\n        className: classNames.check,\n        onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n        useFastIcons: useFastIcons,\n        isVisible: isCheckboxAlwaysVisible\n      })\n    }, this._onRenderColumnHeaderTooltip)), !this.props.onRenderColumnHeaderTooltip ? ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: this._id + \"-checkTooltip\",\n      className: classNames.accessibleLabel,\n      \"aria-hidden\": true\n    }, ariaLabelForSelectAllCheckbox) : ariaLabelForSelectionColumn && isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: this._id + \"-checkTooltip\",\n      className: classNames.accessibleLabel,\n      \"aria-hidden\": true\n    }, ariaLabelForSelectionColumn) : null : null] : null, groupNestingDepth > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible ? React.createElement(\"div\", {\n      className: classNames.cellIsGroupExpander,\n      onClick: this._onToggleCollapseAll,\n      \"data-is-focusable\": true,\n      \"aria-label\": ariaLabelForToggleAllGroupsButton,\n      \"aria-expanded\": !isAllCollapsed,\n      role: \"columnheader\"\n    }, React.createElement(IconComponent, {\n      className: classNames.collapseButton,\n      iconName: isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'\n    })) : null, React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      role: \"gridcell\",\n      count: groupNestingDepth - 1\n    }), columns.map(function (column, columnIndex) {\n      var _isDraggable = columnReorderProps ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd : false;\n\n      return [columnReorderProps && (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) && _this._renderDropHint(columnIndex), React.createElement(DetailsColumn, {\n        column: column,\n        styles: column.styles,\n        key: column.key,\n        columnIndex: (showCheckbox ? 2 : 1) + columnIndex,\n        parentId: _this._id,\n        isDraggable: _isDraggable,\n        updateDragInfo: _this._updateDragInfo,\n        dragDropHelper: _this._dragDropHelper,\n        onColumnClick: onColumnClick,\n        onColumnContextMenu: onColumnContextMenu,\n        // Do not render tooltips by default, but allow for override via props.\n        onRenderColumnHeaderTooltip: _this.props.onRenderColumnHeaderTooltip,\n        isDropped: _this._onDropIndexInfo.targetIndex === columnIndex,\n        cellStyleProps: _this.props.cellStyleProps,\n        useFastIcons: useFastIcons\n      }), _this._renderColumnDivider(columnIndex)];\n    }), columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length), isSizing && React.createElement(Layer, null, React.createElement(\"div\", {\n      className: classNames.sizingOverlay,\n      onMouseMove: this._onSizerMouseMove,\n      onMouseUp: this._onSizerMouseUp\n    })));\n  };\n  /** Set focus to the active thing in the focus area. */\n\n\n  DetailsHeaderBase.prototype.focus = function () {\n    var _a;\n\n    return !!((_a = this._rootComponent.current) === null || _a === void 0 ? void 0 : _a.focus());\n  };\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n\n\n  DetailsHeaderBase.prototype._getColumnReorderProps = function () {\n    var _a = this.props,\n        columnReorderOptions = _a.columnReorderOptions,\n        columnReorderProps = _a.columnReorderProps;\n    return columnReorderProps || columnReorderOptions && __assign(__assign({}, columnReorderOptions), {\n      onColumnDragEnd: undefined\n    });\n  };\n\n  DetailsHeaderBase.prototype._getHeaderDragDropOptions = function () {\n    var options = {\n      selectionIndex: 1,\n      context: {\n        data: this,\n        index: 0\n      },\n      canDrag: function canDrag() {\n        return false;\n      },\n      canDrop: function canDrop() {\n        return true;\n      },\n      onDragStart: function onDragStart() {\n        return undefined;\n      },\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: function onDragEnd() {\n        return undefined;\n      },\n      onDragOver: this._onDragOver\n    };\n    return options;\n  };\n\n  DetailsHeaderBase.prototype._isValidCurrentDropHintIndex = function () {\n    return this._currentDropHintIndex >= 0;\n  };\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n\n\n  DetailsHeaderBase.prototype._isCheckboxColumnHidden = function () {\n    var _a = this.props,\n        selectionMode = _a.selectionMode,\n        checkboxVisibility = _a.checkboxVisibility;\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  };\n\n  DetailsHeaderBase.prototype._resetDropHints = function () {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n\n      this._currentDropHintIndex = -1;\n    }\n  };\n\n  DetailsHeaderBase.prototype._updateDropHintElement = function (element, displayProperty) {\n    element.childNodes[1].style.display = displayProperty;\n    element.childNodes[0].style.display = displayProperty;\n  };\n\n  DetailsHeaderBase.prototype._isEventOnHeader = function (event) {\n    if (this._rootElement.current) {\n      var clientRect = this._rootElement.current.getBoundingClientRect();\n\n      if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  };\n\n  DetailsHeaderBase.prototype._renderColumnDivider = function (columnIndex) {\n    var _a = this.props.columns,\n        columns = _a === void 0 ? NO_COLUMNS : _a;\n    var column = columns[columnIndex];\n    var onRenderDivider = column.onRenderDivider;\n    return onRenderDivider ? onRenderDivider({\n      column: column,\n      columnIndex: columnIndex\n    }, this._renderColumnSizer) : this._renderColumnSizer({\n      column: column,\n      columnIndex: columnIndex\n    });\n  };\n\n  DetailsHeaderBase.prototype._renderDropHint = function (dropHintIndex) {\n    var classNames = this._classNames;\n    var IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return React.createElement(\"div\", {\n      key: 'dropHintKey',\n      className: classNames.dropHintStyle,\n      id: \"columnDropHint_\" + dropHintIndex\n    }, React.createElement(\"div\", {\n      role: \"presentation\",\n      key: \"dropHintCircleKey\",\n      className: classNames.dropHintCaretStyle,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      \"aria-hidden\": true\n    }, React.createElement(IconComponent, {\n      iconName: 'CircleShapeSolid'\n    })), React.createElement(\"div\", {\n      key: \"dropHintLineKey\",\n      \"aria-hidden\": true,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      className: classNames.dropHintLineStyle\n    }));\n  };\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n\n\n  DetailsHeaderBase.prototype._onSizerDoubleClick = function (columnIndex, ev) {\n    var _a = this.props,\n        onColumnAutoResized = _a.onColumnAutoResized,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b;\n\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  };\n\n  DetailsHeaderBase.prototype._onSelectionChanged = function () {\n    var isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected: isAllSelected\n      });\n    }\n  };\n\n  DetailsHeaderBase.defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true\n  };\n  return DetailsHeaderBase;\n}(React.Component);\n\nexport { DetailsHeaderBase };\n\nfunction _liesBetween(rtl, target, left, right) {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\n\nfunction _isBefore(rtl, a, b) {\n  return rtl ? a >= b : a <= b;\n}\n\nfunction _isAfter(rtl, a, b) {\n  return rtl ? a <= b : a >= b;\n}\n\nfunction _stopPropagation(ev) {\n  ev.stopPropagation();\n}","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","EventGroup","css","getRTL","getId","KeyCodes","classNamesFunction","ColumnDragEndLocation","CheckboxVisibility","FocusZone","FocusZoneDirection","Icon","FontIcon","Layer","GroupSpacer","CollapseAllVisibility","DetailsRowCheck","SelectionMode","SELECTION_CHANGE","DragDropHelper","DetailsColumn","SelectAllVisibility","getClassNames","MOUSEDOWN_PRIMARY_BUTTON","MOUSEMOVE_PRIMARY_BUTTON","NO_COLUMNS","__extends","props","_super","_this","createRef","newValue","event","_draggedColumnIndex","type","_resetDropHints","item","stopPropagation","_computeDropHintToBeShown","clientX","columnReorderProps","_getColumnReorderProps","targetIndex","_currentDropHintIndex","isValidDrop","_isValidCurrentDropHintIndex","_onDropIndexInfo","sourceIndex","onColumnDrop","dragDropDetails","draggedIndex","handleColumnReorder","_dropHintDetails","itemIndex","_isCheckboxColumnHidden","_getDropHintPositions","onColumnDragStart","onColumnDragEnd","columnDragEndLocation","_isEventOnHeader","dropLocation","prevX","prevMid","prevRef","frozenColumnCountFromStart","frozenColumnCountFromEnd","i","columns","length","_rootElement","current","dropHintElement","querySelectorAll","offsetLeft","newMid","originX","startX","endX","dropHintElementRef","isRtl","theme","clientRect","getBoundingClientRect","headerOriginX","left","eventXRelativePosition","currentDropHintIndex","_liesBetween","currentIndex","lastValidColumn","indexToUpdate","_isBefore","_isAfter","startIndex","endIndex","middleIndex","Math","ceil","_updateDropHintElement","_a","columnIndex","column","classNames","_classNames","isResizable","key","role","onClick","_stopPropagation","onBlur","_onSizerBlur","className","cellSizer","cellSizerStart","cellSizerEnd","_b","cellIsResizing","columnResizeDetails","onDoubleClick","_onSizerDoubleClick","bind","tooltipHostProps","hostClassName","children","selection","toggleAllSelected","ev","columnIndexAttr","target","getAttribute","Number","button","setState","columnMinWidth","calculatedWidth","preventDefault","isSizing","_c","onColumnResized","which","enter","increment","undefined","right","shiftKey","buttons","onColumnIsSizingChanged","_onSizerMouseUp","movement","newCollapsed","state","isAllCollapsed","onToggleCollapseAll","_events","isAllSelected","_id","_dragDropHelper","getSelection","minimumPixelsForDrag","DetailsHeaderBase","on","_onSelectionChanged","_onRootMouseDown","_onRootKeyDown","_subscriptionObject","subscribe","_getHeaderDragDropOptions","prevProps","dispose","previousColumns","ariaLabel","ariaLabelForToggleAllGroupsButton","ariaLabelForSelectAllCheckbox","selectAllVisibility","ariaLabelForSelectionColumn","indentWidth","onColumnClick","onColumnContextMenu","onRenderColumnHeaderTooltip","styles","selectionMode","onRenderDetailsCheckbox","groupNestingDepth","useFastIcons","checkboxVisibility","showCheckbox","none","isCheckboxHidden","hidden","isCheckboxAlwaysVisible","always","isSelectAllHidden","isResizingColumn","IconComponent","isRTL","root","componentRef","_rootComponent","elementRef","onMouseMove","_onRootMouseMove","direction","horizontal","cellIsCheck","_onSelectAllClicked","checkTooltip","id","setAriaDescribedBy","content","multiple","isHeader","selected","anySelected","canSelect","check","isVisible","_onRenderColumnHeaderTooltip","accessibleLabel","collapseAllVisibility","visible","cellIsGroupExpander","_onToggleCollapseAll","collapseButton","iconName","count","map","_isDraggable","_renderDropHint","parentId","isDraggable","updateDragInfo","_updateDragInfo","dragDropHelper","isDropped","cellStyleProps","_renderColumnDivider","sizingOverlay","_onSizerMouseMove","onMouseUp","focus","columnReorderOptions","options","selectionIndex","context","data","index","canDrag","canDrop","onDragStart","updateDropState","_updateDroppingState","onDrop","_onDrop","onDragEnd","onDragOver","_onDragOver","element","displayProperty","childNodes","style","display","clientY","top","bottom","header","onRenderDivider","_renderColumnSizer","dropHintIndex","dropHintStyle","dropHintCaretStyle","dropHintLineStyle","onColumnAutoResized","Component","rtl","a","b"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\DetailsList\\DetailsHeader.base.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { IProcessedStyleSet } from '../../Styling';\r\nimport {\r\n  initializeComponentRef,\r\n  EventGroup,\r\n  IDisposable,\r\n  css,\r\n  getRTL,\r\n  getId,\r\n  KeyCodes,\r\n  classNamesFunction,\r\n} from '../../Utilities';\r\nimport {\r\n  IColumn,\r\n  IDetailsHeaderBaseProps,\r\n  IColumnDragDropDetails,\r\n  ColumnDragEndLocation,\r\n  CheckboxVisibility,\r\n} from './DetailsList.types';\r\nimport { IFocusZone, FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport { Icon, FontIcon } from '../../Icon';\r\nimport { Layer } from '../../Layer';\r\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\r\nimport { CollapseAllVisibility } from '../../GroupedList';\r\nimport { DetailsRowCheck } from './DetailsRowCheck';\r\nimport { ITooltipHostProps } from '../../Tooltip';\r\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\r\nimport { IDragDropOptions, DragDropHelper } from '../../utilities/dragdrop/index';\r\nimport { DetailsColumn, IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\r\nimport {\r\n  SelectAllVisibility,\r\n  IDropHintDetails,\r\n  IColumnReorderHeaderProps,\r\n  IDetailsHeaderState,\r\n} from './DetailsHeader.types';\r\nimport { IDetailsHeaderStyleProps, IDetailsHeaderStyles, IDetailsHeader } from './DetailsHeader.types';\r\n\r\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\r\n\r\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\r\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\r\n\r\nconst NO_COLUMNS: IColumn[] = [];\r\n\r\nexport class DetailsHeaderBase extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\r\n  implements IDetailsHeader {\r\n  public static defaultProps = {\r\n    selectAllVisibility: SelectAllVisibility.visible,\r\n    collapseAllVisibility: CollapseAllVisibility.visible,\r\n    useFastIcons: true,\r\n  };\r\n\r\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\r\n  private _rootElement = React.createRef<HTMLElement>();\r\n  private _events: EventGroup;\r\n  private _rootComponent = React.createRef<IFocusZone>();\r\n  private _id: string;\r\n  private _draggedColumnIndex = -1;\r\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\r\n  private _dragDropHelper: DragDropHelper;\r\n  private _currentDropHintIndex: number;\r\n  private _subscriptionObject: IDisposable;\r\n  private _onDropIndexInfo: {\r\n    sourceIndex: number;\r\n    targetIndex: number;\r\n  };\r\n\r\n  constructor(props: IDetailsHeaderBaseProps) {\r\n    super(props);\r\n\r\n    initializeComponentRef(this);\r\n    this._events = new EventGroup(this);\r\n\r\n    this.state = {\r\n      columnResizeDetails: undefined,\r\n      isAllCollapsed: this.props.isAllCollapsed,\r\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\r\n    };\r\n\r\n    this._onDropIndexInfo = {\r\n      sourceIndex: -1,\r\n      targetIndex: -1,\r\n    };\r\n    this._id = getId('header');\r\n    this._currentDropHintIndex = -1;\r\n\r\n    // The drag drop handler won't do any work until subscribe() is called,\r\n    // so always set it up for convenience\r\n    this._dragDropHelper = new DragDropHelper({\r\n      selection: {\r\n        getSelection: () => {\r\n          return;\r\n        },\r\n      } as ISelection,\r\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\r\n    });\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    const { selection } = this.props;\r\n\r\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\r\n\r\n    // this._rootElement.current will be null in tests using react-test-renderer\r\n    if (this._rootElement.current) {\r\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\r\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\r\n\r\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\r\n\r\n      if (this._getColumnReorderProps()) {\r\n        this._subscriptionObject = this._dragDropHelper.subscribe(\r\n          this._rootElement.current,\r\n          this._events,\r\n          this._getHeaderDragDropOptions(),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\r\n    if (this._getColumnReorderProps()) {\r\n      if (!this._subscriptionObject && this._rootElement.current) {\r\n        this._subscriptionObject = this._dragDropHelper.subscribe(\r\n          this._rootElement.current,\r\n          this._events,\r\n          this._getHeaderDragDropOptions(),\r\n        );\r\n      }\r\n    } else if (this._subscriptionObject) {\r\n      this._subscriptionObject.dispose();\r\n      delete this._subscriptionObject;\r\n    }\r\n\r\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\r\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\r\n      const { columns = NO_COLUMNS } = this.props;\r\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\r\n        this._onDropIndexInfo = {\r\n          sourceIndex: -1,\r\n          targetIndex: -1,\r\n        };\r\n      }\r\n    }\r\n\r\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\r\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    if (this._subscriptionObject) {\r\n      this._subscriptionObject.dispose();\r\n      delete this._subscriptionObject;\r\n    }\r\n\r\n    this._dragDropHelper.dispose();\r\n\r\n    this._events.dispose();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      columns = NO_COLUMNS,\r\n      ariaLabel,\r\n      ariaLabelForToggleAllGroupsButton,\r\n      ariaLabelForSelectAllCheckbox,\r\n      selectAllVisibility,\r\n      ariaLabelForSelectionColumn,\r\n      indentWidth,\r\n      onColumnClick,\r\n      onColumnContextMenu,\r\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\r\n      styles,\r\n      selectionMode,\r\n      theme,\r\n      onRenderDetailsCheckbox,\r\n      groupNestingDepth,\r\n      useFastIcons,\r\n      checkboxVisibility,\r\n      className,\r\n    } = this.props;\r\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\r\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\r\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\r\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\r\n\r\n    const columnReorderProps = this._getColumnReorderProps();\r\n    const frozenColumnCountFromStart =\r\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\r\n        ? columnReorderProps.frozenColumnCountFromStart\r\n        : 0;\r\n    const frozenColumnCountFromEnd =\r\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\r\n        ? columnReorderProps.frozenColumnCountFromEnd\r\n        : 0;\r\n\r\n    this._classNames = getClassNames(styles, {\r\n      theme: theme!,\r\n      isAllSelected,\r\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\r\n      isResizingColumn: !!columnResizeDetails && isSizing,\r\n      isSizing,\r\n      isAllCollapsed,\r\n      isCheckboxHidden,\r\n      className,\r\n    });\r\n\r\n    const classNames = this._classNames;\r\n    const IconComponent = useFastIcons ? FontIcon : Icon;\r\n\r\n    const isRTL = getRTL(theme);\r\n    return (\r\n      <FocusZone\r\n        role=\"row\"\r\n        aria-label={ariaLabel}\r\n        className={classNames.root}\r\n        componentRef={this._rootComponent}\r\n        elementRef={this._rootElement}\r\n        onMouseMove={this._onRootMouseMove}\r\n        data-automationid=\"DetailsHeader\"\r\n        direction={FocusZoneDirection.horizontal}\r\n      >\r\n        {showCheckbox\r\n          ? [\r\n              <div\r\n                key=\"__checkbox\"\r\n                className={classNames.cellIsCheck}\r\n                aria-labelledby={`${this._id}-check`}\r\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\r\n                aria-colindex={1}\r\n                role={'columnheader'}\r\n              >\r\n                {onRenderColumnHeaderTooltip(\r\n                  {\r\n                    hostClassName: classNames.checkTooltip,\r\n                    id: `${this._id}-checkTooltip`,\r\n                    setAriaDescribedBy: false,\r\n                    content: ariaLabelForSelectAllCheckbox,\r\n                    children: (\r\n                      <DetailsRowCheck\r\n                        id={`${this._id}-check`}\r\n                        aria-label={\r\n                          selectionMode === SelectionMode.multiple\r\n                            ? ariaLabelForSelectAllCheckbox\r\n                            : ariaLabelForSelectionColumn\r\n                        }\r\n                        aria-describedby={\r\n                          !isCheckboxHidden\r\n                            ? ariaLabelForSelectAllCheckbox && !this.props.onRenderColumnHeaderTooltip\r\n                              ? `${this._id}-checkTooltip`\r\n                              : undefined\r\n                            : ariaLabelForSelectionColumn && !this.props.onRenderColumnHeaderTooltip\r\n                            ? `${this._id}-checkTooltip`\r\n                            : undefined\r\n                        }\r\n                        data-is-focusable={!isCheckboxHidden || undefined}\r\n                        isHeader={true}\r\n                        selected={isAllSelected}\r\n                        anySelected={false}\r\n                        canSelect={!isCheckboxHidden}\r\n                        className={classNames.check}\r\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\r\n                        useFastIcons={useFastIcons}\r\n                        isVisible={isCheckboxAlwaysVisible}\r\n                      />\r\n                    ),\r\n                  },\r\n                  this._onRenderColumnHeaderTooltip,\r\n                )}\r\n              </div>,\r\n              !this.props.onRenderColumnHeaderTooltip ? (\r\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\r\n                  <label\r\n                    key=\"__checkboxLabel\"\r\n                    id={`${this._id}-checkTooltip`}\r\n                    className={classNames.accessibleLabel}\r\n                    aria-hidden={true}\r\n                  >\r\n                    {ariaLabelForSelectAllCheckbox}\r\n                  </label>\r\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\r\n                  <label\r\n                    key=\"__checkboxLabel\"\r\n                    id={`${this._id}-checkTooltip`}\r\n                    className={classNames.accessibleLabel}\r\n                    aria-hidden={true}\r\n                  >\r\n                    {ariaLabelForSelectionColumn}\r\n                  </label>\r\n                ) : null\r\n              ) : null,\r\n            ]\r\n          : null}\r\n        {groupNestingDepth! > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible ? (\r\n          <div\r\n            className={classNames.cellIsGroupExpander}\r\n            onClick={this._onToggleCollapseAll}\r\n            data-is-focusable={true}\r\n            aria-label={ariaLabelForToggleAllGroupsButton}\r\n            aria-expanded={!isAllCollapsed}\r\n            role=\"columnheader\"\r\n          >\r\n            <IconComponent\r\n              className={classNames.collapseButton}\r\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\r\n            />\r\n          </div>\r\n        ) : null}\r\n        <GroupSpacer indentWidth={indentWidth} role=\"gridcell\" count={groupNestingDepth! - 1} />\r\n        {columns.map((column: IColumn, columnIndex: number) => {\r\n          const _isDraggable = columnReorderProps\r\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\r\n            : false;\r\n          return [\r\n            columnReorderProps &&\r\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\r\n              this._renderDropHint(columnIndex),\r\n            <DetailsColumn\r\n              column={column}\r\n              styles={column.styles}\r\n              key={column.key}\r\n              columnIndex={(showCheckbox ? 2 : 1) + columnIndex}\r\n              parentId={this._id}\r\n              isDraggable={_isDraggable}\r\n              updateDragInfo={this._updateDragInfo}\r\n              dragDropHelper={this._dragDropHelper}\r\n              onColumnClick={onColumnClick}\r\n              onColumnContextMenu={onColumnContextMenu}\r\n              // Do not render tooltips by default, but allow for override via props.\r\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\r\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\r\n              cellStyleProps={this.props.cellStyleProps}\r\n              useFastIcons={useFastIcons}\r\n            />,\r\n            this._renderColumnDivider(columnIndex),\r\n          ];\r\n        })}\r\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\r\n        {isSizing && (\r\n          <Layer>\r\n            <div\r\n              className={classNames.sizingOverlay}\r\n              onMouseMove={this._onSizerMouseMove}\r\n              onMouseUp={this._onSizerMouseUp}\r\n            />\r\n          </Layer>\r\n        )}\r\n      </FocusZone>\r\n    );\r\n  }\r\n\r\n  /** Set focus to the active thing in the focus area. */\r\n  public focus(): boolean {\r\n    return !!this._rootComponent.current?.focus();\r\n  }\r\n\r\n  /**\r\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\r\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\r\n   * (because drag/drop handling will only be set up if reorder props are given).\r\n   */\r\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\r\n    const { columnReorderOptions, columnReorderProps } = this.props;\r\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\r\n  }\r\n\r\n  private _getHeaderDragDropOptions(): IDragDropOptions {\r\n    const options = {\r\n      selectionIndex: 1,\r\n      context: { data: this, index: 0 },\r\n      canDrag: () => false,\r\n      canDrop: () => true,\r\n      onDragStart: () => undefined,\r\n      updateDropState: this._updateDroppingState,\r\n      onDrop: this._onDrop,\r\n      onDragEnd: () => undefined,\r\n      onDragOver: this._onDragOver,\r\n    };\r\n    return options;\r\n  }\r\n\r\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\r\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\r\n      this._resetDropHints();\r\n    }\r\n  };\r\n\r\n  private _isValidCurrentDropHintIndex() {\r\n    return this._currentDropHintIndex >= 0;\r\n  }\r\n\r\n  private _onDragOver = (item: any, event: DragEvent): void => {\r\n    if (this._draggedColumnIndex >= 0) {\r\n      event.stopPropagation();\r\n      this._computeDropHintToBeShown(event.clientX);\r\n    }\r\n  };\r\n\r\n  private _onDrop = (item?: any, event?: DragEvent): void => {\r\n    // Safe to assume this is defined since we're handling a drop event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n\r\n    // Target index will not get changed if draggeditem is after target item.\r\n    if (this._draggedColumnIndex >= 0 && event) {\r\n      const targetIndex =\r\n        this._draggedColumnIndex > this._currentDropHintIndex\r\n          ? this._currentDropHintIndex\r\n          : this._currentDropHintIndex - 1;\r\n      const isValidDrop = this._isValidCurrentDropHintIndex();\r\n      event.stopPropagation();\r\n      if (isValidDrop) {\r\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\r\n        this._onDropIndexInfo.targetIndex = targetIndex;\r\n\r\n        if (columnReorderProps.onColumnDrop) {\r\n          const dragDropDetails: IColumnDragDropDetails = {\r\n            draggedIndex: this._draggedColumnIndex,\r\n            targetIndex: targetIndex,\r\n          };\r\n          columnReorderProps.onColumnDrop(dragDropDetails);\r\n          /* eslint-disable deprecation/deprecation */\r\n        } else if (columnReorderProps.handleColumnReorder) {\r\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\r\n          /* eslint-enable deprecation/deprecation */\r\n        }\r\n      }\r\n    }\r\n\r\n    this._resetDropHints();\r\n    this._dropHintDetails = {};\r\n    this._draggedColumnIndex = -1;\r\n  };\r\n\r\n  /**\r\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\r\n   */\r\n  private _isCheckboxColumnHidden(): boolean {\r\n    const { selectionMode, checkboxVisibility } = this.props;\r\n\r\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\r\n  }\r\n\r\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\r\n    // Safe to assume this is defined since we're handling a drag event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n    const itemIndex = props.itemIndex;\r\n    if (itemIndex >= 0) {\r\n      // Column index is set based on the checkbox\r\n      this._draggedColumnIndex = this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\r\n      this._getDropHintPositions();\r\n      if (columnReorderProps.onColumnDragStart) {\r\n        columnReorderProps.onColumnDragStart(true);\r\n      }\r\n    } else if (event && this._draggedColumnIndex >= 0) {\r\n      this._resetDropHints();\r\n      this._draggedColumnIndex = -1;\r\n      this._dropHintDetails = {};\r\n      if (columnReorderProps.onColumnDragEnd) {\r\n        const columnDragEndLocation = this._isEventOnHeader(event);\r\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\r\n      }\r\n    }\r\n  };\r\n\r\n  private _resetDropHints(): void {\r\n    if (this._currentDropHintIndex >= 0) {\r\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\r\n      this._currentDropHintIndex = -1;\r\n    }\r\n  }\r\n\r\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\r\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\r\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\r\n  }\r\n\r\n  private _getDropHintPositions = (): void => {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    // Safe to assume this is defined since we're handling a drag/drop event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n    let prevX = 0;\r\n    let prevMid = 0;\r\n    let prevRef: HTMLElement;\r\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\r\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\r\n\r\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\r\n      if (this._rootElement.current) {\r\n        const dropHintElement = this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\r\n        if (dropHintElement) {\r\n          if (i === frozenColumnCountFromStart) {\r\n            prevX = dropHintElement.offsetLeft;\r\n            prevMid = dropHintElement.offsetLeft;\r\n            prevRef = dropHintElement;\r\n          } else {\r\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\r\n            this._dropHintDetails[i - 1] = {\r\n              originX: prevX,\r\n              startX: prevMid!,\r\n              endX: newMid,\r\n              dropHintElementRef: prevRef!,\r\n            };\r\n            prevMid = newMid;\r\n            prevRef = dropHintElement;\r\n            prevX = dropHintElement.offsetLeft;\r\n            if (i === columns.length - frozenColumnCountFromEnd) {\r\n              this._dropHintDetails[i] = {\r\n                originX: prevX,\r\n                startX: prevMid!,\r\n                endX: dropHintElement.offsetLeft,\r\n                dropHintElementRef: prevRef,\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\r\n   */\r\n  private _computeDropHintToBeShown = (clientX: number): void => {\r\n    const isRtl = getRTL(this.props.theme);\r\n    if (this._rootElement.current) {\r\n      const clientRect = this._rootElement.current.getBoundingClientRect();\r\n      const headerOriginX = clientRect.left;\r\n      const eventXRelativePosition = clientX - headerOriginX;\r\n      const currentDropHintIndex = this._currentDropHintIndex;\r\n      if (this._isValidCurrentDropHintIndex()) {\r\n        if (\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex!].startX,\r\n            this._dropHintDetails[currentDropHintIndex!].endX,\r\n          )\r\n        ) {\r\n          return;\r\n        }\r\n      }\r\n      const { columns = NO_COLUMNS } = this.props;\r\n      // Safe to assume this is defined since we're handling a drag/drop event\r\n      const columnReorderProps = this._getColumnReorderProps()!;\r\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\r\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\r\n\r\n      const currentIndex: number = frozenColumnCountFromStart;\r\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\r\n      let indexToUpdate = -1;\r\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\r\n        indexToUpdate = currentIndex;\r\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\r\n        indexToUpdate = lastValidColumn;\r\n      } else if (this._isValidCurrentDropHintIndex()) {\r\n        if (\r\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\r\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\r\n          )\r\n        ) {\r\n          indexToUpdate = currentDropHintIndex! + 1;\r\n        } else if (\r\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\r\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\r\n          )\r\n        ) {\r\n          indexToUpdate = currentDropHintIndex! - 1;\r\n        }\r\n      }\r\n      if (indexToUpdate === -1) {\r\n        let startIndex = frozenColumnCountFromStart;\r\n        let endIndex = lastValidColumn;\r\n        while (startIndex < endIndex) {\r\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\r\n          if (\r\n            _liesBetween(\r\n              isRtl,\r\n              eventXRelativePosition,\r\n              this._dropHintDetails[middleIndex].startX,\r\n              this._dropHintDetails[middleIndex].endX,\r\n            )\r\n          ) {\r\n            indexToUpdate = middleIndex;\r\n            break;\r\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\r\n            endIndex = middleIndex;\r\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\r\n            startIndex = middleIndex;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\r\n        if (this._isValidCurrentDropHintIndex()) {\r\n          this._resetDropHints();\r\n        }\r\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\r\n        this._resetDropHints();\r\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\r\n        this._currentDropHintIndex = indexToUpdate;\r\n      }\r\n    }\r\n  };\r\n\r\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\r\n    if (this._rootElement.current) {\r\n      const clientRect = this._rootElement.current.getBoundingClientRect();\r\n      if (\r\n        event.clientX > clientRect.left &&\r\n        event.clientX < clientRect.right &&\r\n        event.clientY > clientRect.top &&\r\n        event.clientY < clientRect.bottom\r\n      ) {\r\n        return ColumnDragEndLocation.header;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    const column = columns[columnIndex];\r\n    const { columnResizeDetails } = this.state;\r\n    const classNames = this._classNames;\r\n\r\n    return column.isResizable ? (\r\n      <div\r\n        key={`${column.key}_sizer`}\r\n        aria-hidden={true}\r\n        role=\"button\"\r\n        data-is-focusable={false}\r\n        onClick={_stopPropagation}\r\n        data-sizer-index={columnIndex}\r\n        onBlur={this._onSizerBlur}\r\n        className={css(\r\n          classNames.cellSizer,\r\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\r\n          {\r\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\r\n          },\r\n        )}\r\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\r\n      />\r\n    ) : null;\r\n  };\r\n\r\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    const column = columns[columnIndex];\r\n    const { onRenderDivider } = column;\r\n    return onRenderDivider\r\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\r\n      : this._renderColumnSizer({ column, columnIndex });\r\n  }\r\n\r\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\r\n    const classNames = this._classNames;\r\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\r\n    return (\r\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\r\n        <div\r\n          role=\"presentation\"\r\n          key={`dropHintCircleKey`}\r\n          className={classNames.dropHintCaretStyle}\r\n          data-is-focusable={false}\r\n          data-sizer-index={dropHintIndex}\r\n          aria-hidden={true}\r\n        >\r\n          <IconComponent iconName={'CircleShapeSolid'} />\r\n        </div>\r\n        <div\r\n          key={`dropHintLineKey`}\r\n          aria-hidden={true}\r\n          data-is-focusable={false}\r\n          data-sizer-index={dropHintIndex}\r\n          className={classNames.dropHintLineStyle}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\r\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\r\n  };\r\n\r\n  /**\r\n   * double click on the column sizer will auto ajust column width\r\n   * to fit the longest content among current rendered rows.\r\n   *\r\n   * @param columnIndex - index of the column user double clicked\r\n   * @param ev - mouse double click event\r\n   */\r\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\r\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\r\n    if (onColumnAutoResized) {\r\n      onColumnAutoResized(columns[columnIndex], columnIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the select all toggle is clicked.\r\n   */\r\n  private _onSelectAllClicked = (): void => {\r\n    const { selection } = this.props;\r\n\r\n    if (selection) {\r\n      selection.toggleAllSelected();\r\n    }\r\n  };\r\n\r\n  private _onRootMouseDown = (ev: MouseEvent): void => {\r\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\r\n    const columnIndex = Number(columnIndexAttr);\r\n    const { columns = NO_COLUMNS } = this.props;\r\n\r\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\r\n      // Ignore anything except the primary button.\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      columnResizeDetails: {\r\n        columnIndex: columnIndex,\r\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\r\n        originX: ev.clientX,\r\n      },\r\n    });\r\n\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  };\r\n\r\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { columnResizeDetails, isSizing } = this.state;\r\n\r\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\r\n      this.setState({ isSizing: true });\r\n    }\r\n  };\r\n\r\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\r\n    const { columnResizeDetails, isSizing } = this.state;\r\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\r\n\r\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\r\n\r\n    if (!columnIndexAttr || isSizing) {\r\n      return;\r\n    }\r\n\r\n    const columnIndex = Number(columnIndexAttr);\r\n\r\n    if (!columnResizeDetails) {\r\n      // eslint-disable-next-line deprecation/deprecation\r\n      if (ev.which === KeyCodes.enter) {\r\n        this.setState({\r\n          columnResizeDetails: {\r\n            columnIndex: columnIndex,\r\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\r\n          },\r\n        });\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n      }\r\n    } else {\r\n      let increment: number | undefined;\r\n\r\n      // eslint-disable-next-line deprecation/deprecation\r\n      if (ev.which === KeyCodes.enter) {\r\n        this.setState({\r\n          columnResizeDetails: undefined,\r\n        });\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n        // eslint-disable-next-line deprecation/deprecation\r\n      } else if (ev.which === KeyCodes.left) {\r\n        increment = getRTL(this.props.theme) ? 1 : -1;\r\n        // eslint-disable-next-line deprecation/deprecation\r\n      } else if (ev.which === KeyCodes.right) {\r\n        increment = getRTL(this.props.theme) ? -1 : 1;\r\n      }\r\n\r\n      if (increment) {\r\n        if (!ev.shiftKey) {\r\n          increment *= 10;\r\n        }\r\n\r\n        this.setState({\r\n          columnResizeDetails: {\r\n            ...columnResizeDetails,\r\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\r\n          },\r\n        });\r\n\r\n        if (onColumnResized) {\r\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\r\n        }\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * mouse move event handler in the header\r\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\r\n   *\r\n   * @param ev - mouse move event\r\n   */\r\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const {\r\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\r\n      // but firefox doesn't support it, so we set the default value when it is not defined.\r\n      buttons,\r\n    } = ev;\r\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\r\n      // cancel mouse down event and return early when the primary button is not pressed\r\n      this._onSizerMouseUp(ev);\r\n      return;\r\n    }\r\n\r\n    if (ev.clientX !== columnResizeDetails!.originX) {\r\n      if (onColumnIsSizingChanged) {\r\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\r\n      }\r\n    }\r\n\r\n    if (onColumnResized) {\r\n      let movement = ev.clientX - columnResizeDetails!.originX!;\r\n\r\n      if (getRTL(this.props.theme)) {\r\n        movement = -movement;\r\n      }\r\n\r\n      onColumnResized(\r\n        columns[columnResizeDetails!.columnIndex],\r\n        columnResizeDetails!.columnMinWidth + movement,\r\n        columnResizeDetails!.columnIndex,\r\n      );\r\n    }\r\n  };\r\n\r\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    if (columnResizeDetails) {\r\n      this.setState({\r\n        columnResizeDetails: undefined,\r\n        isSizing: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * mouse up event handler in the header\r\n   * clear the resize related state.\r\n   * This is to ensure we can catch double click event\r\n   *\r\n   * @param ev - mouse up event\r\n   */\r\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    this.setState({\r\n      columnResizeDetails: undefined,\r\n      isSizing: false,\r\n    });\r\n\r\n    if (onColumnIsSizingChanged) {\r\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\r\n    }\r\n  };\r\n\r\n  private _onSelectionChanged(): void {\r\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\r\n\r\n    if (this.state.isAllSelected !== isAllSelected) {\r\n      this.setState({\r\n        isAllSelected: isAllSelected,\r\n      });\r\n    }\r\n  }\r\n\r\n  private _onToggleCollapseAll = (): void => {\r\n    const { onToggleCollapseAll } = this.props;\r\n    const newCollapsed = !this.state.isAllCollapsed;\r\n    this.setState({\r\n      isAllCollapsed: newCollapsed,\r\n    });\r\n    if (onToggleCollapseAll) {\r\n      onToggleCollapseAll(newCollapsed);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\r\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\r\n}\r\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\r\n  return rtl ? a >= b : a <= b;\r\n}\r\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\r\n  return rtl ? a <= b : a >= b;\r\n}\r\n\r\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\r\n  ev.stopPropagation();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}