{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, getId, inputProperties, getNativeProps, warnDeprecations, warnMutuallyExclusive, FocusRects } from '../../Utilities';\nimport { Label } from '../../Label';\nimport { KeytipData } from '../../KeytipData';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Toggle';\n\nvar ToggleBase =\n/** @class */\nfunction (_super) {\n  __extends(ToggleBase, _super);\n\n  function ToggleBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._toggleButton = React.createRef();\n\n    _this._onClick = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          disabled = _a.disabled,\n          checkedProp = _a.checked,\n          onChange = _a.onChange,\n          onChanged = _a.onChanged,\n          onClick = _a.onClick;\n      var checked = _this.state.checked;\n\n      if (!disabled) {\n        // Only update the state if the user hasn't provided it.\n        if (checkedProp === undefined) {\n          _this.setState({\n            checked: !checked\n          });\n        }\n\n        if (onChange) {\n          onChange(ev, !checked);\n        }\n\n        if (onChanged) {\n          onChanged(!checked);\n        }\n\n        if (onClick) {\n          onClick(ev);\n        }\n      }\n    };\n\n    initializeComponentRef(_this);\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      checked: 'defaultChecked'\n    });\n    warnDeprecations(COMPONENT_NAME, props, {\n      onAriaLabel: 'ariaLabel',\n      offAriaLabel: undefined,\n      onChanged: 'onChange'\n    });\n    _this.state = {\n      checked: !!(props.checked || props.defaultChecked)\n    };\n    _this._id = props.id || getId('Toggle');\n    return _this;\n  }\n\n  ToggleBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    if (nextProps.checked === undefined) {\n      return null;\n    }\n\n    return {\n      checked: !!nextProps.checked\n    };\n  };\n\n  Object.defineProperty(ToggleBase.prototype, \"checked\", {\n    /**\n     * Gets the current checked state of the toggle.\n     */\n    get: function () {\n      return this.state.checked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ToggleBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.as,\n        RootType = _b === void 0 ? 'div' : _b,\n        className = _a.className,\n        theme = _a.theme,\n        disabled = _a.disabled,\n        keytipProps = _a.keytipProps,\n        label = _a.label,\n        ariaLabel = _a.ariaLabel,\n\n    /* eslint-disable deprecation/deprecation */\n    onAriaLabel = _a.onAriaLabel,\n        offAriaLabel = _a.offAriaLabel,\n\n    /* eslint-enable deprecation/deprecation */\n    offText = _a.offText,\n        onText = _a.onText,\n        styles = _a.styles,\n        inlineLabel = _a.inlineLabel;\n    var checked = this.state.checked;\n    var stateText = checked ? onText : offText;\n    var badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    var toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      checked: checked,\n      inlineLabel: inlineLabel,\n      onOffMissing: !onText && !offText\n    });\n    var labelId = this._id + \"-label\";\n    var stateTextId = this._id + \"-stateText\"; // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label AND stateText, if existent\n\n    var labelledById = undefined;\n\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n\n      if (stateText) {\n        labelledById = labelledById ? labelledById + \" \" + stateTextId : stateTextId;\n      }\n    }\n\n    var ariaRole = this.props.role ? this.props.role : 'switch';\n\n    var renderPill = function (keytipAttributes) {\n      if (keytipAttributes === void 0) {\n        keytipAttributes = {};\n      }\n\n      return React.createElement(\"button\", __assign({}, toggleNativeProps, keytipAttributes, {\n        className: classNames.pill,\n        disabled: disabled,\n        id: _this._id,\n        type: \"button\",\n        role: ariaRole,\n        ref: _this._toggleButton,\n        \"aria-disabled\": disabled,\n        \"aria-checked\": checked,\n        \"aria-label\": ariaLabel ? ariaLabel : badAriaLabel,\n        \"data-is-focusable\": true,\n        onChange: _this._noop,\n        onClick: _this._onClick,\n        \"aria-labelledby\": labelledById\n      }), React.createElement(\"span\", {\n        className: classNames.thumb\n      }));\n    };\n\n    var pillContent = keytipProps ? React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      ariaDescribedBy: toggleNativeProps['aria-describedby'],\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return renderPill(keytipAttributes);\n    }) : renderPill();\n    return React.createElement(RootType, {\n      className: classNames.root,\n      hidden: toggleNativeProps.hidden\n    }, label && React.createElement(Label, {\n      htmlFor: this._id,\n      className: classNames.label,\n      id: labelId\n    }, label), React.createElement(\"div\", {\n      className: classNames.container\n    }, pillContent, stateText && // This second \"htmlFor\" property is needed to allow the\n    // toggle's stateText to also trigger a state change when clicked.\n    React.createElement(Label, {\n      htmlFor: this._id,\n      className: classNames.text,\n      id: stateTextId\n    }, stateText)), React.createElement(FocusRects, null));\n  };\n\n  ToggleBase.prototype.focus = function () {\n    if (this._toggleButton.current) {\n      this._toggleButton.current.focus();\n    }\n  };\n\n  ToggleBase.prototype._noop = function () {\n    /* no-op */\n  };\n\n  return ToggleBase;\n}(React.Component);\n\nexport { ToggleBase };","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","classNamesFunction","getId","inputProperties","getNativeProps","warnDeprecations","warnMutuallyExclusive","FocusRects","Label","KeytipData","getClassNames","COMPONENT_NAME","__extends","props","_super","_this","createRef","ev","disabled","checkedProp","onChange","onChanged","onClick","undefined","setState","checked","onAriaLabel","offAriaLabel","state","defaultChecked","_id","id","ToggleBase","nextProps","prevState","Object","_b","RootType","className","theme","keytipProps","label","ariaLabel","offText","onText","styles","inlineLabel","stateText","badAriaLabel","toggleNativeProps","classNames","onOffMissing","labelId","stateTextId","labelledById","ariaRole","role","renderPill","keytipAttributes","pill","type","ref","_toggleButton","_noop","_onClick","thumb","pillContent","ariaDescribedBy","root","hidden","htmlFor","container","text","current","focus","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Toggle\\Toggle.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  initializeComponentRef,\n  classNamesFunction,\n  getId,\n  inputProperties,\n  getNativeProps,\n  warnDeprecations,\n  warnMutuallyExclusive,\n  FocusRects,\n} from '../../Utilities';\nimport { IToggleProps, IToggle, IToggleStyleProps, IToggleStyles } from './Toggle.types';\nimport { Label } from '../../Label';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface IToggleState {\n  checked: boolean;\n}\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\nconst COMPONENT_NAME = 'Toggle';\n\nexport class ToggleBase extends React.Component<IToggleProps, IToggleState> implements IToggle {\n  private _id: string;\n  private _toggleButton = React.createRef<HTMLButtonElement>();\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<IToggleProps>,\n    prevState: Readonly<IToggleState>,\n  ): Partial<IToggleState> | null {\n    if (nextProps.checked === undefined) {\n      return null;\n    }\n\n    return {\n      checked: !!nextProps.checked,\n    };\n  }\n\n  constructor(props: IToggleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      checked: 'defaultChecked',\n    });\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      onAriaLabel: 'ariaLabel',\n      offAriaLabel: undefined,\n      onChanged: 'onChange',\n    });\n\n    this.state = {\n      checked: !!(props.checked || props.defaultChecked),\n    };\n    this._id = props.id || getId('Toggle');\n  }\n\n  /**\n   * Gets the current checked state of the toggle.\n   */\n  public get checked(): boolean {\n    return this.state.checked;\n  }\n\n  public render(): JSX.Element {\n    const {\n      as: RootType = 'div',\n      className,\n      theme,\n      disabled,\n      keytipProps,\n      label,\n      ariaLabel,\n      /* eslint-disable deprecation/deprecation */\n      onAriaLabel,\n      offAriaLabel,\n      /* eslint-enable deprecation/deprecation */\n      offText,\n      onText,\n      styles,\n      inlineLabel,\n    } = this.props;\n    const { checked } = this.state;\n    const stateText = checked ? onText : offText;\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText,\n    });\n\n    const labelId = `${this._id}-label`;\n    const stateTextId = `${this._id}-stateText`;\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label AND stateText, if existent\n\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n      if (stateText) {\n        labelledById = labelledById ? `${labelledById} ${stateTextId}` : stateTextId;\n      }\n    }\n\n    const ariaRole = this.props.role ? this.props.role : 'switch';\n\n    const renderPill = (keytipAttributes: any = {}) => (\n      <button\n        {...toggleNativeProps}\n        {...keytipAttributes}\n        className={classNames.pill}\n        disabled={disabled}\n        id={this._id}\n        type=\"button\"\n        role={ariaRole}\n        ref={this._toggleButton}\n        aria-disabled={disabled}\n        aria-checked={checked}\n        aria-label={ariaLabel ? ariaLabel : badAriaLabel}\n        data-is-focusable={true}\n        onChange={this._noop}\n        onClick={this._onClick}\n        aria-labelledby={labelledById}\n      >\n        <span className={classNames.thumb} />\n      </button>\n    );\n\n    const pillContent = keytipProps ? (\n      <KeytipData\n        keytipProps={keytipProps}\n        ariaDescribedBy={(toggleNativeProps as any)['aria-describedby']}\n        disabled={disabled}\n      >\n        {(keytipAttributes: any): JSX.Element => renderPill(keytipAttributes)}\n      </KeytipData>\n    ) : (\n      renderPill()\n    );\n\n    return (\n      <RootType className={classNames.root} hidden={(toggleNativeProps as any).hidden}>\n        {label && (\n          <Label htmlFor={this._id} className={classNames.label} id={labelId}>\n            {label}\n          </Label>\n        )}\n\n        <div className={classNames.container}>\n          {pillContent}\n          {stateText && (\n            // This second \"htmlFor\" property is needed to allow the\n            // toggle's stateText to also trigger a state change when clicked.\n            <Label htmlFor={this._id} className={classNames.text} id={stateTextId}>\n              {stateText}\n            </Label>\n          )}\n        </div>\n        <FocusRects />\n      </RootType>\n    );\n  }\n\n  public focus() {\n    if (this._toggleButton.current) {\n      this._toggleButton.current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { disabled, checked: checkedProp, onChange, onChanged, onClick } = this.props;\n    const { checked } = this.state;\n\n    if (!disabled) {\n      // Only update the state if the user hasn't provided it.\n      if (checkedProp === undefined) {\n        this.setState({\n          checked: !checked,\n        });\n      }\n\n      if (onChange) {\n        onChange(ev, !checked);\n      }\n\n      if (onChanged) {\n        onChanged(!checked);\n      }\n\n      if (onClick) {\n        onClick(ev);\n      }\n    }\n  };\n\n  private _noop(): void {\n    /* no-op */\n  }\n}\n"]},"metadata":{},"sourceType":"module"}