{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, css } from '../../../Utilities';\nimport { SuggestionsItem } from '../../../Pickers';\nimport * as stylesImport from './SuggestionsCore.scss';\nvar styles = stylesImport;\n/**\n * Class when used with SuggestionsStore, renders a basic suggestions control\n */\n\nvar SuggestionsCore =\n/** @class */\nfunction (_super) {\n  __extends(SuggestionsCore, _super);\n\n  function SuggestionsCore(suggestionsProps) {\n    var _this = _super.call(this, suggestionsProps) || this;\n\n    _this._selectedElement = React.createRef();\n    _this.SuggestionsItemOfProperType = SuggestionsItem;\n\n    _this._onClickTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        _this.props.onSuggestionClick(ev, item, index);\n      };\n    };\n\n    _this._onRemoveTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        var onSuggestionRemove = _this.props.onSuggestionRemove;\n        onSuggestionRemove(ev, item, index);\n        ev.stopPropagation();\n      };\n    };\n\n    initializeComponentRef(_this);\n    _this.currentIndex = -1;\n    return _this;\n  }\n  /**\n   * Increments the selected suggestion index\n   */\n\n\n  SuggestionsCore.prototype.nextSuggestion = function () {\n    var suggestions = this.props.suggestions;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      } else if (this.currentIndex < suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Decrements the selected suggestion index\n   */\n\n\n  SuggestionsCore.prototype.previousSuggestion = function () {\n    var suggestions = this.props.suggestions;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      } else if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === 0) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(SuggestionsCore.prototype, \"selectedElement\", {\n    get: function () {\n      return this._selectedElement.current || undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SuggestionsCore.prototype.getCurrentItem = function () {\n    return this.props.suggestions[this.currentIndex];\n  };\n\n  SuggestionsCore.prototype.getSuggestionAtIndex = function (index) {\n    return this.props.suggestions[index];\n  };\n\n  SuggestionsCore.prototype.hasSuggestionSelected = function () {\n    return this.currentIndex !== -1 && this.currentIndex < this.props.suggestions.length;\n  };\n\n  SuggestionsCore.prototype.removeSuggestion = function (index) {\n    this.props.suggestions.splice(index, 1);\n  };\n\n  SuggestionsCore.prototype.deselectAllSuggestions = function () {\n    if (this.currentIndex > -1 && this.props.suggestions[this.currentIndex]) {\n      this.props.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n      this.forceUpdate();\n    }\n  };\n\n  SuggestionsCore.prototype.setSelectedSuggestion = function (index) {\n    var suggestions = this.props.suggestions;\n\n    if (index > suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion.selected = false;\n      this.currentSuggestion = suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1 && suggestions[this.currentIndex]) {\n        suggestions[this.currentIndex].selected = false;\n      }\n\n      suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = suggestions[index];\n    }\n\n    this.forceUpdate();\n  };\n\n  SuggestionsCore.prototype.componentDidUpdate = function () {\n    this.scrollSelected();\n  };\n\n  SuggestionsCore.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        onRenderSuggestion = _a.onRenderSuggestion,\n        suggestionsItemClassName = _a.suggestionsItemClassName,\n        resultsMaximumNumber = _a.resultsMaximumNumber,\n        showRemoveButtons = _a.showRemoveButtons,\n        suggestionsContainerAriaLabel = _a.suggestionsContainerAriaLabel;\n    var TypedSuggestionsItem = this.SuggestionsItemOfProperType;\n    var suggestions = this.props.suggestions;\n\n    if (resultsMaximumNumber) {\n      suggestions = suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    return React.createElement(\"div\", {\n      className: css('ms-Suggestions-container', styles.suggestionsContainer),\n      id: \"suggestion-list\",\n      role: \"list\",\n      \"aria-label\": suggestionsContainerAriaLabel\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(\"div\", {\n        ref: suggestion.selected || index === _this.currentIndex ? _this._selectedElement : undefined,\n        key: suggestion.item.key ? suggestion.item.key : index,\n        id: 'sug-' + index,\n        role: \"listitem\",\n        \"aria-label\": suggestion.ariaLabel\n      }, React.createElement(TypedSuggestionsItem, {\n        id: 'sug-item' + index,\n        suggestionModel: suggestion,\n        RenderSuggestion: onRenderSuggestion,\n        onClick: _this._onClickTypedSuggestionsItem(suggestion.item, index),\n        className: suggestionsItemClassName,\n        showRemoveButton: showRemoveButtons,\n        onRemoveItem: _this._onRemoveTypedSuggestionsItem(suggestion.item, index),\n        isSelectedOverride: index === _this.currentIndex\n      }));\n    }));\n  }; // TODO get the element to scroll into view properly regardless of direction.\n\n\n  SuggestionsCore.prototype.scrollSelected = function () {\n    var _a;\n\n    if (((_a = this._selectedElement.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView) !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  };\n\n  return SuggestionsCore;\n}(React.Component);\n\nexport { SuggestionsCore };","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","css","SuggestionsItem","stylesImport","styles","__extends","suggestionsProps","_super","_this","createRef","item","index","ev","props","onSuggestionClick","onSuggestionRemove","stopPropagation","currentIndex","SuggestionsCore","suggestions","length","setSelectedSuggestion","shouldLoopSelection","Object","_selectedElement","current","undefined","splice","selected","forceUpdate","currentSuggestion","scrollSelected","onRenderSuggestion","suggestionsItemClassName","resultsMaximumNumber","showRemoveButtons","suggestionsContainerAriaLabel","TypedSuggestionsItem","SuggestionsItemOfProperType","slice","className","suggestionsContainer","id","role","map","suggestion","ref","key","ariaLabel","suggestionModel","RenderSuggestion","onClick","_onClickTypedSuggestionsItem","showRemoveButton","onRemoveItem","_onRemoveTypedSuggestionsItem","isSelectedOverride","_a","scrollIntoView","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\FloatingPicker\\src\\components\\FloatingPicker\\Suggestions\\SuggestionsCore.tsx"],"sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, css } from '../../../Utilities';\nimport { ISuggestionItemProps, SuggestionsItem, ISuggestionModel } from '../../../Pickers';\nimport { ISuggestionsCoreProps } from './Suggestions.types';\nimport * as stylesImport from './SuggestionsCore.scss';\nconst styles: any = stylesImport;\n\n/**\n * Class when used with SuggestionsStore, renders a basic suggestions control\n */\nexport class SuggestionsCore<T> extends React.Component<ISuggestionsCoreProps<T>, {}> {\n  public currentIndex: number;\n  public currentSuggestion: ISuggestionModel<T> | undefined;\n  protected _selectedElement = React.createRef<HTMLDivElement>();\n  private SuggestionsItemOfProperType: new (props: ISuggestionItemProps<T>) => SuggestionsItem<T> = SuggestionsItem;\n\n  constructor(suggestionsProps: ISuggestionsCoreProps<T>) {\n    super(suggestionsProps);\n\n    initializeComponentRef(this);\n    this.currentIndex = -1;\n  }\n\n  /**\n   * Increments the selected suggestion index\n   */\n  public nextSuggestion(): boolean {\n    const { suggestions } = this.props;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      } else if (this.currentIndex < suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrements the selected suggestion index\n   */\n  public previousSuggestion(): boolean {\n    const { suggestions } = this.props;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      } else if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === 0) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public get selectedElement(): HTMLDivElement | undefined {\n    return this._selectedElement.current || undefined;\n  }\n\n  public getCurrentItem(): ISuggestionModel<T> {\n    return this.props.suggestions[this.currentIndex];\n  }\n\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\n    return this.props.suggestions[index];\n  }\n\n  public hasSuggestionSelected(): boolean {\n    return this.currentIndex !== -1 && this.currentIndex < this.props.suggestions.length;\n  }\n\n  public removeSuggestion(index: number): void {\n    this.props.suggestions.splice(index, 1);\n  }\n\n  public deselectAllSuggestions(): void {\n    if (this.currentIndex > -1 && this.props.suggestions[this.currentIndex]) {\n      this.props.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n      this.forceUpdate();\n    }\n  }\n\n  public setSelectedSuggestion(index: number): void {\n    const { suggestions } = this.props;\n\n    if (index > suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion!.selected = false;\n      this.currentSuggestion = suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1 && suggestions[this.currentIndex]) {\n        suggestions[this.currentIndex].selected = false;\n      }\n      suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = suggestions[index];\n    }\n\n    this.forceUpdate();\n  }\n\n  public componentDidUpdate(): void {\n    this.scrollSelected();\n  }\n\n  public render(): JSX.Element {\n    const {\n      onRenderSuggestion,\n      suggestionsItemClassName,\n      resultsMaximumNumber,\n      showRemoveButtons,\n      suggestionsContainerAriaLabel,\n    } = this.props;\n    const TypedSuggestionsItem = this.SuggestionsItemOfProperType;\n    let { suggestions } = this.props;\n\n    if (resultsMaximumNumber) {\n      suggestions = suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    return (\n      <div\n        className={css('ms-Suggestions-container', styles.suggestionsContainer)}\n        id=\"suggestion-list\"\n        role=\"list\"\n        aria-label={suggestionsContainerAriaLabel}\n      >\n        {suggestions.map((suggestion: ISuggestionModel<T>, index: number) => (\n          <div\n            ref={suggestion.selected || index === this.currentIndex ? this._selectedElement : undefined}\n            key={(suggestion.item as any).key ? (suggestion.item as any).key : index}\n            id={'sug-' + index}\n            role=\"listitem\"\n            aria-label={suggestion.ariaLabel}\n          >\n            <TypedSuggestionsItem\n              id={'sug-item' + index}\n              suggestionModel={suggestion}\n              RenderSuggestion={onRenderSuggestion as any}\n              onClick={this._onClickTypedSuggestionsItem(suggestion.item, index)}\n              className={suggestionsItemClassName}\n              showRemoveButton={showRemoveButtons}\n              onRemoveItem={this._onRemoveTypedSuggestionsItem(suggestion.item, index)}\n              isSelectedOverride={index === this.currentIndex}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  // TODO get the element to scroll into view properly regardless of direction.\n  public scrollSelected(): void {\n    if (this._selectedElement.current?.scrollIntoView !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  }\n\n  private _onClickTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      this.props.onSuggestionClick(ev, item, index);\n    };\n  };\n\n  private _onRemoveTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      const onSuggestionRemove = this.props.onSuggestionRemove!;\n      onSuggestionRemove(ev, item, index);\n      ev.stopPropagation();\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}