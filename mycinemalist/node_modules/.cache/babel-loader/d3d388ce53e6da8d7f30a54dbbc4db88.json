{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, KeyCodes, css, elementContains, getId, classNamesFunction, styled, initializeComponentRef } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Callout, DirectionalHint } from '../../Callout';\nimport { Selection, SelectionZone, SelectionMode } from '../../utilities/selection/index';\nimport { Suggestions } from './Suggestions/Suggestions';\nimport { getStyles as suggestionsStyles } from './Suggestions/Suggestions.styles';\nimport { SuggestionsController } from './Suggestions/SuggestionsController';\nimport { ValidationState } from './BasePicker.types';\nimport { Autofill } from '../Autofill/index';\nimport * as stylesImport from './BasePicker.scss';\nvar legacyStyles = stylesImport;\nvar getClassNames = classNamesFunction();\n/**\n * Should be removed once new picker without inheritance is created\n */\n\nfunction getStyledSuggestions(suggestionsType) {\n  return styled(suggestionsType, suggestionsStyles, undefined, {\n    scope: 'Suggestions'\n  });\n}\n/**\n * {@docCategory Pickers}\n */\n\n\nvar BasePicker =\n/** @class */\nfunction (_super) {\n  __extends(BasePicker, _super);\n\n  function BasePicker(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this; // Refs\n\n\n    _this.root = React.createRef();\n    _this.input = React.createRef();\n    _this.focusZone = React.createRef();\n    _this.suggestionElement = React.createRef();\n    /**\n     * @deprecated this is no longer necessary as typescript now supports generic elements\n     */\n\n    _this.SuggestionOfProperType = Suggestions; // eslint-disable-next-line deprecation/deprecation\n\n    _this._styledSuggestions = getStyledSuggestions(_this.SuggestionOfProperType);\n\n    _this.dismissSuggestions = function (ev) {\n      var selectItemFunction = function selectItemFunction() {\n        var addItemOnDismiss = true;\n\n        if (_this.props.onDismiss) {\n          addItemOnDismiss = _this.props.onDismiss(ev, _this.suggestionStore.currentSuggestion ? _this.suggestionStore.currentSuggestion.item : undefined);\n        }\n\n        if (!ev || ev && !ev.defaultPrevented) {\n          // Select the first suggestion if one is available and permitted by onDismiss when user leaves.\n          if (addItemOnDismiss !== false && _this.canAddItems() && _this.suggestionStore.hasSelectedSuggestion() && _this.state.suggestedDisplayValue) {\n            _this.addItemByIndex(0);\n          }\n        }\n      };\n\n      if (_this.currentPromise) {\n        _this.currentPromise.then(function () {\n          return selectItemFunction();\n        });\n      } else {\n        selectItemFunction();\n      }\n\n      _this.setState({\n        suggestionsVisible: false\n      });\n    };\n\n    _this.refocusSuggestions = function (keyCode) {\n      _this.resetFocus();\n\n      if (_this.suggestionStore.suggestions && _this.suggestionStore.suggestions.length > 0) {\n        if (keyCode === KeyCodes.up) {\n          _this.suggestionStore.setSelectedSuggestion(_this.suggestionStore.suggestions.length - 1);\n        } else if (keyCode === KeyCodes.down) {\n          _this.suggestionStore.setSelectedSuggestion(0);\n        }\n      }\n    };\n\n    _this.onInputChange = function (value) {\n      _this.updateValue(value);\n\n      _this.setState({\n        moreSuggestionsAvailable: true,\n        isMostRecentlyUsedVisible: false\n      });\n    };\n\n    _this.onSuggestionClick = function (ev, item, index) {\n      _this.addItemByIndex(index);\n    };\n\n    _this.onSuggestionRemove = function (ev, item, index) {\n      if (_this.props.onRemoveSuggestion) {\n        _this.props.onRemoveSuggestion(item);\n      }\n\n      _this.suggestionStore.removeSuggestion(index);\n    };\n\n    _this.onInputFocus = function (ev) {\n      _this.selection.setAllSelected(false); // Only trigger all of the focus if this component isn't already focused.\n      // For example when an item is selected or removed from the selected list it should be treated\n      // as though the input is still focused.\n\n\n      if (!_this.state.isFocused) {\n        _this.setState({\n          isFocused: true\n        });\n\n        _this._userTriggeredSuggestions();\n\n        if (_this.props.inputProps && _this.props.inputProps.onFocus) {\n          _this.props.inputProps.onFocus(ev);\n        }\n      }\n    };\n\n    _this.onInputBlur = function (ev) {\n      if (_this.props.inputProps && _this.props.inputProps.onBlur) {\n        _this.props.inputProps.onBlur(ev);\n      }\n    };\n\n    _this.onBlur = function (ev) {\n      if (_this.state.isFocused) {\n        // Only blur the entire component if an unrelated element gets focus.\n        // Otherwise treat it as though it still has focus.\n        // Do nothing if the blur is coming from something\n        // inside the comboBox root or the comboBox menu since\n        // it we are not really bluring from the whole comboBox\n        var relatedTarget = ev.relatedTarget;\n\n        if (ev.relatedTarget === null) {\n          // In IE11, due to lack of support, event.relatedTarget is always\n          // null making every onBlur call to be \"outside\" of the ComboBox\n          // even when it's not. Using document.activeElement is another way\n          // for us to be able to get what the relatedTarget without relying\n          // on the event\n          relatedTarget = document.activeElement;\n        }\n\n        if (relatedTarget && !elementContains(_this.root.current, relatedTarget)) {\n          _this.setState({\n            isFocused: false\n          });\n\n          if (_this.props.onBlur) {\n            _this.props.onBlur(ev);\n          }\n        }\n      }\n    };\n    /**\n     * Reveals suggestions any time the user clicks on the input element\n     * without shifting focus.\n     */\n\n\n    _this.onClick = function (ev) {\n      if (_this.props.inputProps !== undefined && _this.props.inputProps.onClick !== undefined) {\n        _this.props.inputProps.onClick(ev);\n      } // Only primary (left) clicks show suggestions.\n\n\n      if (ev.button === 0) {\n        _this._userTriggeredSuggestions();\n      }\n    };\n\n    _this.onKeyDown = function (ev) {\n      var keyCode = ev.which;\n\n      switch (keyCode) {\n        case KeyCodes.escape:\n          if (_this.state.suggestionsVisible) {\n            _this.setState({\n              suggestionsVisible: false\n            });\n\n            ev.preventDefault();\n            ev.stopPropagation();\n          }\n\n          break;\n\n        case KeyCodes.tab:\n        case KeyCodes.enter:\n          if (_this.suggestionElement.current && _this.suggestionElement.current.hasSuggestedActionSelected()) {\n            _this.suggestionElement.current.executeSelectedAction();\n          } else if (!ev.shiftKey && _this.suggestionStore.hasSelectedSuggestion() && _this.state.suggestionsVisible) {\n            _this.completeSuggestion();\n\n            ev.preventDefault();\n            ev.stopPropagation();\n          } else {\n            _this._completeGenericSuggestion();\n          }\n\n          break;\n\n        case KeyCodes.backspace:\n          if (!_this.props.disabled) {\n            _this.onBackspace(ev);\n          }\n\n          ev.stopPropagation();\n          break;\n\n        case KeyCodes.del:\n          if (!_this.props.disabled) {\n            if (_this.input.current && ev.target === _this.input.current.inputElement && _this.state.suggestionsVisible && _this.suggestionStore.currentIndex !== -1) {\n              if (_this.props.onRemoveSuggestion) {\n                _this.props.onRemoveSuggestion(_this.suggestionStore.currentSuggestion.item);\n              }\n\n              _this.suggestionStore.removeSuggestion(_this.suggestionStore.currentIndex);\n\n              _this.forceUpdate();\n            } else {\n              _this.onBackspace(ev);\n            }\n          }\n\n          ev.stopPropagation();\n          break;\n\n        case KeyCodes.up:\n          if (_this.input.current && ev.target === _this.input.current.inputElement && _this.state.suggestionsVisible) {\n            if (_this.suggestionElement.current && _this.suggestionElement.current.tryHandleKeyDown(keyCode, _this.suggestionStore.currentIndex)) {\n              ev.preventDefault();\n              ev.stopPropagation();\n\n              _this.forceUpdate();\n            } else {\n              if (_this.suggestionElement.current && _this.suggestionElement.current.hasSuggestedAction() && _this.suggestionStore.currentIndex === 0) {\n                ev.preventDefault();\n                ev.stopPropagation();\n\n                _this.suggestionElement.current.focusAboveSuggestions();\n\n                _this.suggestionStore.deselectAllSuggestions();\n\n                _this.forceUpdate();\n              } else {\n                if (_this.suggestionStore.previousSuggestion()) {\n                  ev.preventDefault();\n                  ev.stopPropagation();\n\n                  _this.onSuggestionSelect();\n                }\n              }\n            }\n          }\n\n          break;\n\n        case KeyCodes.down:\n          if (_this.input.current && ev.target === _this.input.current.inputElement && _this.state.suggestionsVisible) {\n            if (_this.suggestionElement.current && _this.suggestionElement.current.tryHandleKeyDown(keyCode, _this.suggestionStore.currentIndex)) {\n              ev.preventDefault();\n              ev.stopPropagation();\n\n              _this.forceUpdate();\n            } else {\n              if (_this.suggestionElement.current && _this.suggestionElement.current.hasSuggestedAction() && _this.suggestionStore.currentIndex + 1 === _this.suggestionStore.suggestions.length) {\n                ev.preventDefault();\n                ev.stopPropagation();\n\n                _this.suggestionElement.current.focusBelowSuggestions();\n\n                _this.suggestionStore.deselectAllSuggestions();\n\n                _this.forceUpdate();\n              } else {\n                if (_this.suggestionStore.nextSuggestion()) {\n                  ev.preventDefault();\n                  ev.stopPropagation();\n\n                  _this.onSuggestionSelect();\n                }\n              }\n            }\n          }\n\n          break;\n      }\n    };\n\n    _this.onItemChange = function (changedItem, index) {\n      var items = _this.state.items;\n\n      if (index >= 0) {\n        var newItems = items;\n        newItems[index] = changedItem;\n\n        _this._updateSelectedItems(newItems);\n      }\n    };\n\n    _this.onGetMoreResults = function () {\n      _this.setState({\n        isSearching: true\n      }, function () {\n        if (_this.props.onGetMoreResults && _this.input.current) {\n          var suggestions = _this.props.onGetMoreResults(_this.input.current.value, _this.state.items);\n\n          var suggestionsArray = suggestions;\n          var suggestionsPromiseLike = suggestions;\n\n          if (Array.isArray(suggestionsArray)) {\n            _this.updateSuggestions(suggestionsArray);\n\n            _this.setState({\n              isSearching: false\n            });\n          } else if (suggestionsPromiseLike.then) {\n            suggestionsPromiseLike.then(function (newSuggestions) {\n              _this.updateSuggestions(newSuggestions);\n\n              _this.setState({\n                isSearching: false\n              });\n            });\n          }\n        } else {\n          _this.setState({\n            isSearching: false\n          });\n        }\n\n        if (_this.input.current) {\n          _this.input.current.focus();\n        }\n\n        _this.setState({\n          moreSuggestionsAvailable: false,\n          isResultsFooterVisible: true\n        });\n      });\n    };\n\n    _this.completeSelection = function (item) {\n      _this.addItem(item);\n\n      _this.updateValue('');\n\n      if (_this.input.current) {\n        _this.input.current.clear();\n      }\n\n      _this.setState({\n        suggestionsVisible: false\n      });\n    };\n\n    _this.addItemByIndex = function (index) {\n      _this.completeSelection(_this.suggestionStore.getSuggestionAtIndex(index).item);\n    };\n\n    _this.addItem = function (item) {\n      var processedItem = _this.props.onItemSelected ? _this.props.onItemSelected(item) : item;\n\n      if (processedItem === null) {\n        return;\n      }\n\n      var processedItemObject = processedItem;\n      var processedItemPromiseLike = processedItem;\n\n      if (processedItemPromiseLike && processedItemPromiseLike.then) {\n        processedItemPromiseLike.then(function (resolvedProcessedItem) {\n          var newItems = _this.state.items.concat([resolvedProcessedItem]);\n\n          _this._updateSelectedItems(newItems);\n        });\n      } else {\n        var newItems = _this.state.items.concat([processedItemObject]);\n\n        _this._updateSelectedItems(newItems);\n      }\n\n      _this.setState({\n        suggestedDisplayValue: ''\n      });\n    };\n\n    _this.removeItem = function (item, focusNextItem) {\n      var items = _this.state.items;\n      var index = items.indexOf(item);\n\n      if (index >= 0) {\n        var newItems = items.slice(0, index).concat(items.slice(index + 1));\n\n        _this._updateSelectedItems(newItems);\n      }\n    };\n\n    _this.removeItems = function (itemsToRemove) {\n      var items = _this.state.items;\n      var newItems = items.filter(function (item) {\n        return itemsToRemove.indexOf(item) === -1;\n      });\n\n      _this._updateSelectedItems(newItems);\n    };\n\n    _this._shouldFocusZoneEnterInnerZone = function (ev) {\n      // If suggestions are shown const up/down keys control them, otherwise allow them through to control the focusZone.\n      if (_this.state.suggestionsVisible) {\n        switch (ev.which) {\n          case KeyCodes.up:\n          case KeyCodes.down:\n            return true;\n        }\n      }\n\n      if (ev.which === KeyCodes.enter) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this._onResolveSuggestions = function (updatedValue) {\n      var suggestions = _this.props.onResolveSuggestions(updatedValue, _this.state.items);\n\n      if (suggestions !== null) {\n        _this.updateSuggestionsList(suggestions, updatedValue);\n      }\n    };\n\n    _this._completeGenericSuggestion = function () {\n      if (_this.props.onValidateInput && _this.input.current && _this.props.onValidateInput(_this.input.current.value) !== ValidationState.invalid && _this.props.createGenericItem) {\n        var itemToConvert = _this.props.createGenericItem(_this.input.current.value, _this.props.onValidateInput(_this.input.current.value));\n\n        _this.suggestionStore.createGenericSuggestion(itemToConvert);\n\n        _this.completeSuggestion();\n      }\n    };\n    /**\n     * This should be called when the user does something other than use text entry to trigger suggestions.\n     *\n     */\n\n\n    _this._userTriggeredSuggestions = function () {\n      if (!_this.state.suggestionsVisible) {\n        var input = _this.input.current ? _this.input.current.value : '';\n\n        if (!input) {\n          _this.onEmptyInputFocus();\n        } else {\n          if (_this.suggestionStore.suggestions.length === 0) {\n            _this._onResolveSuggestions(input);\n          } else {\n            _this.setState({\n              isMostRecentlyUsedVisible: false,\n              suggestionsVisible: true\n            });\n          }\n        }\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    var items = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n    _this._id = getId();\n    _this._ariaMap = {\n      selectedItems: \"selected-items-\" + _this._id,\n      selectedSuggestionAlert: \"selected-suggestion-alert-\" + _this._id,\n      suggestionList: \"suggestion-list-\" + _this._id,\n      combobox: \"combobox-\" + _this._id\n    };\n    _this.suggestionStore = new SuggestionsController();\n    _this.selection = new Selection({\n      onSelectionChanged: function onSelectionChanged() {\n        return _this.onSelectionChange();\n      }\n    });\n\n    _this.selection.setItems(items);\n\n    _this.state = {\n      items: items,\n      suggestedDisplayValue: '',\n      isMostRecentlyUsedVisible: false,\n      moreSuggestionsAvailable: false,\n      isFocused: false,\n      isSearching: false,\n      selectedIndices: []\n    };\n    return _this;\n  }\n\n  BasePicker.getDerivedStateFromProps = function (newProps) {\n    if (newProps.selectedItems) {\n      return {\n        items: newProps.selectedItems\n      };\n    }\n\n    return null;\n  };\n\n  Object.defineProperty(BasePicker.prototype, \"items\", {\n    get: function get() {\n      return this.state.items;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BasePicker.prototype.componentDidMount = function () {\n    this.selection.setItems(this.state.items);\n    this._onResolveSuggestions = this._async.debounce(this._onResolveSuggestions, this.props.resolveDelay);\n  };\n\n  BasePicker.prototype.componentDidUpdate = function (oldProps, oldState) {\n    if (this.state.items && this.state.items !== oldState.items) {\n      var currentSelectedIndex = this.selection.getSelectedIndices()[0];\n      this.selection.setItems(this.state.items);\n\n      if (this.state.isFocused) {\n        // Reset focus and selection so that selected item stays in sync if something\n        // has been removed\n        if (this.state.items.length < oldState.items.length) {\n          this.selection.setIndexSelected(currentSelectedIndex, true, true);\n          this.resetFocus(currentSelectedIndex);\n        }\n      }\n    }\n  };\n\n  BasePicker.prototype.componentWillUnmount = function () {\n    if (this.currentPromise) {\n      this.currentPromise = undefined;\n    }\n\n    this._async.dispose();\n  };\n\n  BasePicker.prototype.focus = function () {\n    if (this.focusZone.current) {\n      this.focusZone.current.focus();\n    }\n  };\n\n  BasePicker.prototype.focusInput = function () {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  };\n\n  BasePicker.prototype.completeSuggestion = function (forceComplete) {\n    if (this.suggestionStore.hasSelectedSuggestion() && this.input.current) {\n      this.completeSelection(this.suggestionStore.currentSuggestion.item);\n    } else if (forceComplete) {\n      this._completeGenericSuggestion();\n    }\n  };\n\n  BasePicker.prototype.render = function () {\n    var _a = this.state,\n        suggestedDisplayValue = _a.suggestedDisplayValue,\n        isFocused = _a.isFocused,\n        items = _a.items;\n    var _b = this.props,\n        className = _b.className,\n        inputProps = _b.inputProps,\n        disabled = _b.disabled,\n        theme = _b.theme,\n        styles = _b.styles;\n    var selectedSuggestionAlertId = this.props.enableSelectedSuggestionAlert ? this._ariaMap.selectedSuggestionAlert : '';\n    var suggestionsAvailable = this.state.suggestionsVisible ? this._ariaMap.suggestionList : ''; // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from BasePicker class because it\n    // might be used by consumers who created custom pickers from extending from\n    // this base class and have not used the new 'styles' prop.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n\n    var classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isFocused: isFocused,\n      disabled: disabled,\n      inputClassName: inputProps && inputProps.className\n    }) : {\n      root: css('ms-BasePicker', className ? className : ''),\n      text: css('ms-BasePicker-text', legacyStyles.pickerText, this.state.isFocused && legacyStyles.inputFocused),\n      itemsWrapper: legacyStyles.pickerItems,\n      input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\n      screenReaderText: legacyStyles.screenReaderOnly\n    };\n    return React.createElement(\"div\", {\n      ref: this.root,\n      className: classNames.root,\n      onKeyDown: this.onKeyDown,\n      onBlur: this.onBlur\n    }, React.createElement(FocusZone, {\n      componentRef: this.focusZone,\n      direction: FocusZoneDirection.bidirectional,\n      shouldEnterInnerZone: this._shouldFocusZoneEnterInnerZone,\n      role: 'combobox',\n      id: this._ariaMap.combobox,\n      \"aria-label\": this.props['aria-label'],\n      \"aria-expanded\": !!this.state.suggestionsVisible,\n      \"aria-owns\": suggestionsAvailable || undefined,\n      \"aria-haspopup\": suggestionsAvailable && this.suggestionStore.suggestions.length > 0 ? 'listbox' : 'dialog'\n    }, this.getSuggestionsAlert(classNames.screenReaderText), React.createElement(SelectionZone, {\n      selection: this.selection,\n      selectionMode: SelectionMode.multiple\n    }, React.createElement(\"div\", {\n      className: classNames.text\n    }, items.length > 0 && React.createElement(\"span\", {\n      id: this._ariaMap.selectedItems,\n      className: classNames.itemsWrapper,\n      role: 'list'\n    }, this.renderItems()), this.canAddItems() && React.createElement(Autofill, __assign({\n      spellCheck: false\n    }, inputProps, {\n      className: classNames.input,\n      componentRef: this.input,\n      onClick: this.onClick,\n      onFocus: this.onInputFocus,\n      onBlur: this.onInputBlur,\n      onInputValueChange: this.onInputChange,\n      suggestedDisplayValue: suggestedDisplayValue,\n      \"arial-labelledby\": this.props['aria-label'] ? this._ariaMap.combobox : undefined,\n      \"aria-describedby\": items.length > 0 ? this._ariaMap.selectedItems : undefined,\n      \"aria-controls\": suggestionsAvailable + \" \" + selectedSuggestionAlertId || undefined,\n      \"aria-activedescendant\": this.getActiveDescendant(),\n      role: 'textbox',\n      disabled: disabled,\n      onInputChange: this.props.onInputChange\n    }))))), this.renderSuggestions());\n  };\n\n  BasePicker.prototype.canAddItems = function () {\n    var items = this.state.items;\n    var itemLimit = this.props.itemLimit;\n    return itemLimit === undefined || items.length < itemLimit;\n  };\n\n  BasePicker.prototype.renderSuggestions = function () {\n    var StyledTypedSuggestions = this._styledSuggestions;\n    return this.state.suggestionsVisible && this.input ? React.createElement(Callout, __assign({\n      isBeakVisible: false,\n      gapSpace: 5,\n      target: this.input.current ? this.input.current.inputElement : undefined,\n      onDismiss: this.dismissSuggestions,\n      directionalHint: DirectionalHint.bottomLeftEdge,\n      directionalHintForRTL: DirectionalHint.bottomRightEdge\n    }, this.props.pickerCalloutProps), React.createElement(StyledTypedSuggestions // Assumed to set in derived component's defaultProps\n    , __assign({\n      // Assumed to set in derived component's defaultProps\n      onRenderSuggestion: this.props.onRenderSuggestionsItem,\n      onSuggestionClick: this.onSuggestionClick,\n      onSuggestionRemove: this.onSuggestionRemove,\n      suggestions: this.suggestionStore.getSuggestions(),\n      componentRef: this.suggestionElement,\n      onGetMoreResults: this.onGetMoreResults,\n      moreSuggestionsAvailable: this.state.moreSuggestionsAvailable,\n      isLoading: this.state.suggestionsLoading,\n      isSearching: this.state.isSearching,\n      isMostRecentlyUsedVisible: this.state.isMostRecentlyUsedVisible,\n      isResultsFooterVisible: this.state.isResultsFooterVisible,\n      refocusSuggestions: this.refocusSuggestions,\n      removeSuggestionAriaLabel: this.props.removeButtonAriaLabel,\n      suggestionsListId: this._ariaMap.suggestionList,\n      createGenericItem: this._completeGenericSuggestion\n    }, this.props.pickerSuggestionsProps))) : null;\n  };\n\n  BasePicker.prototype.renderItems = function () {\n    var _this = this;\n\n    var _a = this.props,\n        disabled = _a.disabled,\n        removeButtonAriaLabel = _a.removeButtonAriaLabel;\n    var onRenderItem = this.props.onRenderItem;\n    var _b = this.state,\n        items = _b.items,\n        selectedIndices = _b.selectedIndices;\n    return items.map(function (item, index) {\n      return onRenderItem({\n        item: item,\n        index: index,\n        key: item.key ? item.key : index,\n        selected: selectedIndices.indexOf(index) !== -1,\n        onRemoveItem: function onRemoveItem() {\n          return _this.removeItem(item, true);\n        },\n        disabled: disabled,\n        onItemChange: _this.onItemChange,\n        removeButtonAriaLabel: removeButtonAriaLabel\n      });\n    });\n  };\n\n  BasePicker.prototype.resetFocus = function (index) {\n    var items = this.state.items;\n\n    if (items.length && index >= 0) {\n      var newEl = this.root.current && this.root.current.querySelectorAll('[data-selection-index]')[Math.min(index, items.length - 1)];\n\n      if (newEl && this.focusZone.current) {\n        this.focusZone.current.focusElement(newEl);\n      }\n    } else if (!this.canAddItems()) {\n      this.resetFocus(items.length - 1);\n    } else {\n      if (this.input.current) {\n        this.input.current.focus();\n      }\n    }\n  };\n\n  BasePicker.prototype.onSuggestionSelect = function () {\n    if (this.suggestionStore.currentSuggestion) {\n      var currentValue = this.input.current ? this.input.current.value : '';\n\n      var itemValue = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, currentValue);\n\n      this.setState({\n        suggestedDisplayValue: itemValue\n      });\n    }\n  };\n\n  BasePicker.prototype.onSelectionChange = function () {\n    this.setState({\n      selectedIndices: this.selection.getSelectedIndices()\n    });\n  };\n\n  BasePicker.prototype.updateSuggestions = function (suggestions) {\n    this.suggestionStore.updateSuggestions(suggestions, 0);\n    this.forceUpdate();\n  };\n  /**\n   * Only to be called when there is nothing in the input. Checks to see if the consumer has\n   * provided a function to resolve suggestions\n   */\n\n\n  BasePicker.prototype.onEmptyInputFocus = function () {\n    var emptyResolveSuggestions = this.props.onEmptyResolveSuggestions ? this.props.onEmptyResolveSuggestions : // eslint-disable-next-line deprecation/deprecation\n    this.props.onEmptyInputFocus; // Only attempt to resolve suggestions if it exists\n\n    if (emptyResolveSuggestions) {\n      var suggestions = emptyResolveSuggestions(this.state.items);\n      this.updateSuggestionsList(suggestions);\n      this.setState({\n        isMostRecentlyUsedVisible: true,\n        suggestionsVisible: true,\n        moreSuggestionsAvailable: false\n      });\n    }\n  };\n\n  BasePicker.prototype.updateValue = function (updatedValue) {\n    this._onResolveSuggestions(updatedValue);\n  };\n\n  BasePicker.prototype.updateSuggestionsList = function (suggestions, updatedValue) {\n    var _this = this;\n\n    var suggestionsArray = suggestions;\n    var suggestionsPromiseLike = suggestions; // Check to see if the returned value is an array, if it is then just pass it into the next function .\n    // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n    // If it is then resolve it asynchronously.\n\n    if (Array.isArray(suggestionsArray)) {\n      this._updateAndResolveValue(updatedValue, suggestionsArray);\n    } else if (suggestionsPromiseLike && suggestionsPromiseLike.then) {\n      this.setState({\n        suggestionsLoading: true\n      }); // Clear suggestions\n\n      this.suggestionStore.updateSuggestions([]);\n\n      if (updatedValue !== undefined) {\n        this.setState({\n          suggestionsVisible: this._getShowSuggestions()\n        });\n      } else {\n        this.setState({\n          suggestionsVisible: this.input.current && this.input.current.inputElement === document.activeElement\n        });\n      } // Ensure that the promise will only use the callback if it was the most recent one.\n\n\n      var promise_1 = this.currentPromise = suggestionsPromiseLike;\n      promise_1.then(function (newSuggestions) {\n        if (promise_1 === _this.currentPromise) {\n          _this._updateAndResolveValue(updatedValue, newSuggestions);\n        }\n      });\n    }\n  };\n\n  BasePicker.prototype.resolveNewValue = function (updatedValue, suggestions) {\n    var _this = this;\n\n    this.updateSuggestions(suggestions);\n    var itemValue = undefined;\n\n    if (this.suggestionStore.currentSuggestion) {\n      itemValue = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, updatedValue);\n    } // Only set suggestionloading to false after there has been time for the new suggestions to flow\n    // to the suggestions list. This is to ensure that the suggestions are available before aria-activedescendant\n    // is set so that screen readers will read out the first selected option.\n\n\n    this.setState({\n      suggestedDisplayValue: itemValue,\n      suggestionsVisible: this._getShowSuggestions()\n    }, function () {\n      return _this.setState({\n        suggestionsLoading: false\n      });\n    });\n  };\n\n  BasePicker.prototype.onChange = function (items) {\n    if (this.props.onChange) {\n      this.props.onChange(items);\n    }\n  }; // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n  // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n\n\n  BasePicker.prototype.onBackspace = function (ev) {\n    if (this.state.items.length && !this.input.current || this.input.current && !this.input.current.isValueSelected && this.input.current.cursorLocation === 0) {\n      if (this.selection.getSelectedCount() > 0) {\n        this.removeItems(this.selection.getSelection());\n      } else {\n        this.removeItem(this.state.items[this.state.items.length - 1]);\n      }\n    }\n  };\n\n  BasePicker.prototype.getActiveDescendant = function () {\n    if (this.state.suggestionsLoading) {\n      return undefined;\n    }\n\n    var currentIndex = this.suggestionStore.currentIndex; // if the suggestions element has actions and the currentIndex does not point to a suggestion, return the action id\n\n    if (currentIndex < 0 && this.suggestionElement.current && this.suggestionElement.current.hasSuggestedAction()) {\n      return 'sug-selectedAction';\n    }\n\n    return currentIndex > -1 && !this.state.suggestionsLoading ? 'sug-' + currentIndex : undefined;\n  };\n\n  BasePicker.prototype.getSuggestionsAlert = function (suggestionAlertClassName) {\n    if (suggestionAlertClassName === void 0) {\n      suggestionAlertClassName = legacyStyles.screenReaderOnly;\n    }\n\n    var currentIndex = this.suggestionStore.currentIndex;\n\n    if (this.props.enableSelectedSuggestionAlert) {\n      var selectedSuggestion = currentIndex > -1 ? this.suggestionStore.getSuggestionAtIndex(this.suggestionStore.currentIndex) : undefined;\n      var selectedSuggestionAlertText = selectedSuggestion ? selectedSuggestion.ariaLabel : undefined;\n      return React.createElement(\"div\", {\n        className: suggestionAlertClassName,\n        role: \"alert\",\n        id: this._ariaMap.selectedSuggestionAlert,\n        \"aria-live\": \"assertive\"\n      }, selectedSuggestionAlertText, ' ');\n    }\n  };\n  /**\n   * Takes in the current updated value and either resolves it with the new suggestions\n   * or if updated value is undefined then it clears out currently suggested items\n   */\n\n\n  BasePicker.prototype._updateAndResolveValue = function (updatedValue, newSuggestions) {\n    if (updatedValue !== undefined) {\n      this.resolveNewValue(updatedValue, newSuggestions);\n    } else {\n      this.suggestionStore.updateSuggestions(newSuggestions, -1);\n\n      if (this.state.suggestionsLoading) {\n        this.setState({\n          suggestionsLoading: false\n        });\n      }\n    }\n  };\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If `selectedItems` is provided, this will act as a controlled component and it will not update its own state.\n   */\n\n\n  BasePicker.prototype._updateSelectedItems = function (items) {\n    var _this = this;\n\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to add or remove the items.\n      this.onChange(items);\n    } else {\n      this.setState({\n        items: items\n      }, function () {\n        _this._onSelectedItemsUpdated(items);\n      });\n    }\n  };\n\n  BasePicker.prototype._onSelectedItemsUpdated = function (items) {\n    this.onChange(items);\n  };\n  /**\n   * Suggestions are normally shown after the user updates text and the text\n   * is non-empty, but also when the user clicks on the input element.\n   * @returns True if suggestions should be shown.\n   */\n\n\n  BasePicker.prototype._getShowSuggestions = function () {\n    var areSuggestionsVisible = this.input.current !== undefined && this.input.current !== null && this.input.current.inputElement === document.activeElement && this.input.current.value !== '';\n    return areSuggestionsVisible;\n  };\n\n  BasePicker.prototype._getTextFromItem = function (item, currentValue) {\n    if (this.props.getTextFromItem) {\n      return this.props.getTextFromItem(item, currentValue);\n    } else {\n      return '';\n    }\n  };\n\n  return BasePicker;\n}(React.Component);\n\nexport { BasePicker };\n\nvar BasePickerListBelow =\n/** @class */\nfunction (_super) {\n  __extends(BasePickerListBelow, _super);\n\n  function BasePickerListBelow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  BasePickerListBelow.prototype.render = function () {\n    var _a = this.state,\n        suggestedDisplayValue = _a.suggestedDisplayValue,\n        isFocused = _a.isFocused;\n    var _b = this.props,\n        className = _b.className,\n        inputProps = _b.inputProps,\n        disabled = _b.disabled,\n        theme = _b.theme,\n        styles = _b.styles;\n    var selectedSuggestionAlertId = this.props.enableSelectedSuggestionAlert ? this._ariaMap.selectedSuggestionAlert : '';\n    var suggestionsAvailable = this.state.suggestionsVisible ? this._ariaMap.suggestionList : ''; // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from BasePicker class because it\n    // might be used by consumers who created custom pickers from extending from\n    // this base class and have not used the new 'styles' prop.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n\n    var classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isFocused: isFocused,\n      inputClassName: inputProps && inputProps.className\n    }) : {\n      root: css('ms-BasePicker', className ? className : ''),\n      text: css('ms-BasePicker-text', legacyStyles.pickerText, this.state.isFocused && legacyStyles.inputFocused),\n      input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\n      screenReaderText: legacyStyles.screenReaderOnly\n    };\n    return React.createElement(\"div\", {\n      ref: this.root,\n      onBlur: this.onBlur\n    }, React.createElement(\"div\", {\n      className: classNames.root,\n      onKeyDown: this.onKeyDown\n    }, this.getSuggestionsAlert(classNames.screenReaderText), React.createElement(\"div\", {\n      className: classNames.text,\n      \"aria-owns\": suggestionsAvailable || undefined,\n      \"aria-expanded\": !!this.state.suggestionsVisible,\n      \"aria-haspopup\": suggestionsAvailable && this.suggestionStore.suggestions.length > 0 ? 'listbox' : 'dialog',\n      role: \"combobox\"\n    }, React.createElement(Autofill, __assign({}, inputProps, {\n      className: classNames.input,\n      componentRef: this.input,\n      onFocus: this.onInputFocus,\n      onBlur: this.onInputBlur,\n      onClick: this.onClick,\n      onInputValueChange: this.onInputChange,\n      suggestedDisplayValue: suggestedDisplayValue,\n      \"aria-activedescendant\": this.getActiveDescendant(),\n      role: \"textbox\",\n      disabled: disabled,\n      \"aria-controls\": suggestionsAvailable + \" \" + selectedSuggestionAlertId || undefined,\n      onInputChange: this.props.onInputChange\n    })))), this.renderSuggestions(), React.createElement(SelectionZone, {\n      selection: this.selection,\n      selectionMode: SelectionMode.single\n    }, React.createElement(FocusZone, {\n      componentRef: this.focusZone,\n      className: \"ms-BasePicker-selectedItems\" // just a className hook without any styles applied to it.\n      ,\n      isCircularNavigation: true,\n      direction: FocusZoneDirection.bidirectional,\n      shouldEnterInnerZone: this._shouldFocusZoneEnterInnerZone,\n      id: this._ariaMap.selectedItems,\n      role: 'list'\n    }, this.renderItems())));\n  };\n\n  BasePickerListBelow.prototype.onBackspace = function (ev) {// override the existing backspace method to not do anything because the list items appear below.\n  };\n\n  return BasePickerListBelow;\n}(BasePicker);\n\nexport { BasePickerListBelow };","map":{"version":3,"mappings":"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","names":["React","Async","KeyCodes","css","elementContains","getId","classNamesFunction","styled","initializeComponentRef","FocusZone","FocusZoneDirection","Callout","DirectionalHint","Selection","SelectionZone","SelectionMode","Suggestions","getStyles","suggestionsStyles","SuggestionsController","ValidationState","Autofill","stylesImport","legacyStyles","getClassNames","getStyledSuggestions","suggestionsType","undefined","scope","__extends","basePickerProps","_super","_this","createRef","SuggestionOfProperType","ev","selectItemFunction","addItemOnDismiss","props","onDismiss","suggestionStore","currentSuggestion","item","defaultPrevented","canAddItems","hasSelectedSuggestion","state","suggestedDisplayValue","addItemByIndex","currentPromise","then","setState","suggestionsVisible","keyCode","resetFocus","suggestions","length","up","setSelectedSuggestion","down","value","updateValue","moreSuggestionsAvailable","isMostRecentlyUsedVisible","index","onRemoveSuggestion","removeSuggestion","selection","setAllSelected","isFocused","_userTriggeredSuggestions","inputProps","onFocus","onBlur","relatedTarget","document","activeElement","root","current","onClick","button","which","escape","preventDefault","stopPropagation","tab","enter","suggestionElement","hasSuggestedActionSelected","executeSelectedAction","shiftKey","completeSuggestion","_completeGenericSuggestion","backspace","disabled","onBackspace","del","input","target","inputElement","currentIndex","forceUpdate","tryHandleKeyDown","hasSuggestedAction","focusAboveSuggestions","deselectAllSuggestions","previousSuggestion","onSuggestionSelect","focusBelowSuggestions","nextSuggestion","changedItem","newItems","items","_updateSelectedItems","isSearching","onGetMoreResults","suggestionsArray","suggestionsPromiseLike","Array","isArray","updateSuggestions","newSuggestions","focus","isResultsFooterVisible","addItem","clear","completeSelection","getSuggestionAtIndex","processedItem","onItemSelected","processedItemObject","processedItemPromiseLike","resolvedProcessedItem","concat","focusNextItem","indexOf","slice","itemsToRemove","filter","updatedValue","onResolveSuggestions","updateSuggestionsList","onValidateInput","invalid","createGenericItem","itemToConvert","createGenericSuggestion","onEmptyInputFocus","_onResolveSuggestions","_async","selectedItems","defaultSelectedItems","_id","_ariaMap","selectedSuggestionAlert","suggestionList","combobox","onSelectionChanged","onSelectionChange","setItems","selectedIndices","BasePicker","newProps","Object","debounce","resolveDelay","oldProps","oldState","currentSelectedIndex","getSelectedIndices","setIndexSelected","dispose","focusZone","forceComplete","className","theme","styles","selectedSuggestionAlertId","enableSelectedSuggestionAlert","suggestionsAvailable","classNames","inputClassName","text","pickerText","inputFocused","itemsWrapper","pickerItems","pickerInput","screenReaderText","screenReaderOnly","ref","onKeyDown","componentRef","direction","bidirectional","shouldEnterInnerZone","_shouldFocusZoneEnterInnerZone","role","id","getSuggestionsAlert","selectionMode","multiple","renderItems","__assign","spellCheck","onInputFocus","onInputBlur","onInputValueChange","onInputChange","getActiveDescendant","renderSuggestions","itemLimit","StyledTypedSuggestions","_styledSuggestions","isBeakVisible","gapSpace","dismissSuggestions","directionalHint","bottomLeftEdge","directionalHintForRTL","bottomRightEdge","pickerCalloutProps","onRenderSuggestion","onRenderSuggestionsItem","onSuggestionClick","onSuggestionRemove","getSuggestions","isLoading","suggestionsLoading","refocusSuggestions","removeSuggestionAriaLabel","removeButtonAriaLabel","suggestionsListId","pickerSuggestionsProps","onRenderItem","map","key","selected","onRemoveItem","removeItem","onItemChange","newEl","querySelectorAll","Math","min","focusElement","currentValue","itemValue","_getTextFromItem","emptyResolveSuggestions","onEmptyResolveSuggestions","_updateAndResolveValue","_getShowSuggestions","promise_1","onChange","isValueSelected","cursorLocation","getSelectedCount","removeItems","getSelection","suggestionAlertClassName","selectedSuggestion","selectedSuggestionAlertText","ariaLabel","resolveNewValue","_onSelectedItemsUpdated","areSuggestionsVisible","getTextFromItem","Component","BasePickerListBelow","single","isCircularNavigation"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\pickers\\BasePicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Async,\n  KeyCodes,\n  css,\n  elementContains,\n  getId,\n  classNamesFunction,\n  styled,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { IFocusZone, FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Callout, DirectionalHint } from '../../Callout';\nimport { Selection, SelectionZone, SelectionMode } from '../../utilities/selection/index';\nimport { Suggestions } from './Suggestions/Suggestions';\nimport {\n  ISuggestions,\n  ISuggestionsProps,\n  ISuggestionsStyleProps,\n  ISuggestionsStyles,\n} from './Suggestions/Suggestions.types';\nimport { getStyles as suggestionsStyles } from './Suggestions/Suggestions.styles';\nimport { SuggestionsController } from './Suggestions/SuggestionsController';\nimport {\n  IBasePicker,\n  IBasePickerProps,\n  ValidationState,\n  IBasePickerStyleProps,\n  IBasePickerStyles,\n} from './BasePicker.types';\nimport { IAutofill, Autofill } from '../Autofill/index';\nimport { IPickerItemProps } from './PickerItem.types';\nimport * as stylesImport from './BasePicker.scss';\nconst legacyStyles: any = stylesImport;\n\nexport interface IBasePickerState {\n  items?: any;\n  suggestedDisplayValue?: string;\n  moreSuggestionsAvailable?: boolean;\n  isFocused?: boolean;\n  isSearching?: boolean;\n  isMostRecentlyUsedVisible?: boolean;\n  suggestionsVisible?: boolean;\n  suggestionsLoading?: boolean;\n  isResultsFooterVisible?: boolean;\n  selectedIndices?: number[];\n}\n\n/**\n * Aria id's for internal picker components\n * {@docCategory Pickers}\n */\nexport type IPickerAriaIds = {\n  /**\n   * Aria id for selected suggestion alert component\n   */\n  selectedSuggestionAlert: string;\n  /**\n   * Aria id for selected items container component\n   */\n  selectedItems: string;\n  /**\n   * Aria id for suggestions list component\n   */\n  suggestionList: string;\n  /**\n   * Aria id for the component that has role=combobox\n   */\n  combobox: string;\n};\n\nconst getClassNames = classNamesFunction<IBasePickerStyleProps, IBasePickerStyles>();\n\n/**\n * Should be removed once new picker without inheritance is created\n */\nfunction getStyledSuggestions<T>(suggestionsType: new (props: ISuggestionsProps<T>) => Suggestions<T>) {\n  return styled<ISuggestionsProps<any>, ISuggestionsStyleProps, ISuggestionsStyles>(\n    suggestionsType,\n    suggestionsStyles,\n    undefined,\n    {\n      scope: 'Suggestions',\n    },\n  );\n}\n\n/**\n * {@docCategory Pickers}\n */\nexport class BasePicker<T, P extends IBasePickerProps<T>> extends React.Component<P, IBasePickerState>\n  implements IBasePicker<T> {\n  // Refs\n  protected root = React.createRef<HTMLDivElement>();\n  protected input = React.createRef<IAutofill>();\n  protected focusZone = React.createRef<IFocusZone>();\n  protected suggestionElement = React.createRef<ISuggestions<T>>();\n\n  protected selection: Selection;\n  protected suggestionStore: SuggestionsController<T>;\n  /**\n   * @deprecated this is no longer necessary as typescript now supports generic elements\n   */\n  protected SuggestionOfProperType = Suggestions as new (props: ISuggestionsProps<T>) => Suggestions<T>;\n  protected currentPromise: PromiseLike<any> | undefined;\n  protected _ariaMap: IPickerAriaIds;\n  // eslint-disable-next-line deprecation/deprecation\n  private _styledSuggestions = getStyledSuggestions(this.SuggestionOfProperType);\n  private _id: string;\n  private _async: Async;\n\n  public static getDerivedStateFromProps(newProps: IBasePickerProps<any>) {\n    if (newProps.selectedItems) {\n      return { items: newProps.selectedItems };\n    }\n    return null;\n  }\n\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    const items: T[] = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n\n    this._id = getId();\n    this._ariaMap = {\n      selectedItems: `selected-items-${this._id}`,\n      selectedSuggestionAlert: `selected-suggestion-alert-${this._id}`,\n      suggestionList: `suggestion-list-${this._id}`,\n      combobox: `combobox-${this._id}`,\n    };\n    this.suggestionStore = new SuggestionsController<T>();\n    this.selection = new Selection({ onSelectionChanged: () => this.onSelectionChange() });\n    this.selection.setItems(items);\n    this.state = {\n      items: items,\n      suggestedDisplayValue: '',\n      isMostRecentlyUsedVisible: false,\n      moreSuggestionsAvailable: false,\n      isFocused: false,\n      isSearching: false,\n      selectedIndices: [],\n    };\n  }\n\n  public get items(): T[] {\n    return this.state.items;\n  }\n\n  public componentDidMount(): void {\n    this.selection.setItems(this.state.items);\n    this._onResolveSuggestions = this._async.debounce(this._onResolveSuggestions, this.props.resolveDelay);\n  }\n\n  public componentDidUpdate(oldProps: P, oldState: IBasePickerState) {\n    if (this.state.items && this.state.items !== oldState.items) {\n      const currentSelectedIndex = this.selection.getSelectedIndices()[0];\n      this.selection.setItems(this.state.items);\n      if (this.state.isFocused) {\n        // Reset focus and selection so that selected item stays in sync if something\n        // has been removed\n        if (this.state.items.length < oldState.items.length) {\n          this.selection.setIndexSelected(currentSelectedIndex, true, true);\n          this.resetFocus(currentSelectedIndex);\n        }\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this.currentPromise) {\n      this.currentPromise = undefined;\n    }\n    this._async.dispose();\n  }\n\n  public focus() {\n    if (this.focusZone.current) {\n      this.focusZone.current.focus();\n    }\n  }\n\n  public focusInput() {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  }\n\n  public dismissSuggestions = (ev?: any): void => {\n    const selectItemFunction = () => {\n      let addItemOnDismiss: boolean | void = true;\n      if (this.props.onDismiss) {\n        addItemOnDismiss = this.props.onDismiss(\n          ev,\n          this.suggestionStore.currentSuggestion ? this.suggestionStore.currentSuggestion.item : undefined,\n        );\n      }\n\n      if (!ev || (ev && !ev.defaultPrevented)) {\n        // Select the first suggestion if one is available and permitted by onDismiss when user leaves.\n        if (\n          addItemOnDismiss !== false &&\n          this.canAddItems() &&\n          this.suggestionStore.hasSelectedSuggestion() &&\n          this.state.suggestedDisplayValue\n        ) {\n          this.addItemByIndex(0);\n        }\n      }\n    };\n\n    if (this.currentPromise) {\n      this.currentPromise.then(() => selectItemFunction());\n    } else {\n      selectItemFunction();\n    }\n\n    this.setState({ suggestionsVisible: false });\n  };\n\n  public completeSuggestion(forceComplete?: boolean) {\n    if (this.suggestionStore.hasSelectedSuggestion() && this.input.current) {\n      this.completeSelection(this.suggestionStore.currentSuggestion!.item);\n    } else if (forceComplete) {\n      this._completeGenericSuggestion();\n    }\n  }\n\n  public refocusSuggestions = (keyCode: KeyCodes): void => {\n    this.resetFocus();\n    if (this.suggestionStore.suggestions && this.suggestionStore.suggestions.length > 0) {\n      if (keyCode === KeyCodes.up) {\n        this.suggestionStore.setSelectedSuggestion(this.suggestionStore.suggestions.length - 1);\n      } else if (keyCode === KeyCodes.down) {\n        this.suggestionStore.setSelectedSuggestion(0);\n      }\n    }\n  };\n\n  public render(): JSX.Element {\n    const { suggestedDisplayValue, isFocused, items } = this.state;\n    const { className, inputProps, disabled, theme, styles } = this.props;\n\n    const selectedSuggestionAlertId = this.props.enableSelectedSuggestionAlert\n      ? this._ariaMap.selectedSuggestionAlert\n      : '';\n    const suggestionsAvailable = this.state.suggestionsVisible ? this._ariaMap.suggestionList : '';\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from BasePicker class because it\n    // might be used by consumers who created custom pickers from extending from\n    // this base class and have not used the new 'styles' prop.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    const classNames: Partial<IProcessedStyleSet<IBasePickerStyles>> = styles\n      ? getClassNames(styles, {\n          theme,\n          className,\n          isFocused,\n          disabled,\n          inputClassName: inputProps && inputProps.className,\n        })\n      : {\n          root: css('ms-BasePicker', className ? className : ''),\n          text: css('ms-BasePicker-text', legacyStyles.pickerText, this.state.isFocused && legacyStyles.inputFocused),\n          itemsWrapper: legacyStyles.pickerItems,\n          input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\n          screenReaderText: legacyStyles.screenReaderOnly,\n        };\n\n    return (\n      <div ref={this.root} className={classNames.root} onKeyDown={this.onKeyDown} onBlur={this.onBlur}>\n        <FocusZone\n          componentRef={this.focusZone}\n          direction={FocusZoneDirection.bidirectional}\n          shouldEnterInnerZone={this._shouldFocusZoneEnterInnerZone}\n          role={'combobox'}\n          id={this._ariaMap.combobox}\n          aria-label={this.props['aria-label']}\n          aria-expanded={!!this.state.suggestionsVisible}\n          aria-owns={suggestionsAvailable || undefined}\n          // Dialog is an acceptable child of a combobox according to the aria specs: https://www.w3.org/TR/wai-aria-practices/#combobox\n          // Currently accessibility insights will flag this as not a valid child because the AXE rules are\n          // out of date. Tracking issue: https://github.com/dequelabs/axe-core/issues/1009\n          aria-haspopup={suggestionsAvailable && this.suggestionStore.suggestions.length > 0 ? 'listbox' : 'dialog'}\n        >\n          {this.getSuggestionsAlert(classNames.screenReaderText)}\n          <SelectionZone selection={this.selection} selectionMode={SelectionMode.multiple}>\n            <div className={classNames.text}>\n              {items.length > 0 && (\n                <span id={this._ariaMap.selectedItems} className={classNames.itemsWrapper} role={'list'}>\n                  {this.renderItems()}\n                </span>\n              )}\n              {this.canAddItems() && (\n                <Autofill\n                  spellCheck={false}\n                  {...(inputProps as any)}\n                  className={classNames.input}\n                  componentRef={this.input}\n                  onClick={this.onClick}\n                  onFocus={this.onInputFocus}\n                  onBlur={this.onInputBlur}\n                  onInputValueChange={this.onInputChange}\n                  suggestedDisplayValue={suggestedDisplayValue}\n                  arial-labelledby={this.props['aria-label'] ? this._ariaMap.combobox : undefined}\n                  aria-describedby={items.length > 0 ? this._ariaMap.selectedItems : undefined}\n                  aria-controls={`${suggestionsAvailable} ${selectedSuggestionAlertId}` || undefined}\n                  aria-activedescendant={this.getActiveDescendant()}\n                  role={'textbox'}\n                  disabled={disabled}\n                  onInputChange={this.props.onInputChange}\n                />\n              )}\n            </div>\n          </SelectionZone>\n        </FocusZone>\n        {this.renderSuggestions()}\n      </div>\n    );\n  }\n\n  protected canAddItems(): boolean {\n    const { items } = this.state;\n    const { itemLimit } = this.props;\n    return itemLimit === undefined || items.length < itemLimit;\n  }\n\n  protected renderSuggestions(): JSX.Element | null {\n    const StyledTypedSuggestions: React.FunctionComponent<ISuggestionsProps<T>> = this._styledSuggestions;\n\n    return this.state.suggestionsVisible && this.input ? (\n      <Callout\n        isBeakVisible={false}\n        gapSpace={5}\n        target={this.input.current ? this.input.current.inputElement : undefined}\n        onDismiss={this.dismissSuggestions}\n        directionalHint={DirectionalHint.bottomLeftEdge}\n        directionalHintForRTL={DirectionalHint.bottomRightEdge}\n        {...this.props.pickerCalloutProps}\n      >\n        <StyledTypedSuggestions\n          // Assumed to set in derived component's defaultProps\n          onRenderSuggestion={this.props.onRenderSuggestionsItem!}\n          onSuggestionClick={this.onSuggestionClick}\n          onSuggestionRemove={this.onSuggestionRemove}\n          suggestions={this.suggestionStore.getSuggestions()}\n          componentRef={this.suggestionElement}\n          onGetMoreResults={this.onGetMoreResults}\n          moreSuggestionsAvailable={this.state.moreSuggestionsAvailable}\n          isLoading={this.state.suggestionsLoading}\n          isSearching={this.state.isSearching}\n          isMostRecentlyUsedVisible={this.state.isMostRecentlyUsedVisible}\n          isResultsFooterVisible={this.state.isResultsFooterVisible}\n          refocusSuggestions={this.refocusSuggestions}\n          removeSuggestionAriaLabel={this.props.removeButtonAriaLabel}\n          suggestionsListId={this._ariaMap.suggestionList}\n          createGenericItem={this._completeGenericSuggestion}\n          {...this.props.pickerSuggestionsProps}\n        />\n      </Callout>\n    ) : null;\n  }\n\n  protected renderItems(): JSX.Element[] {\n    const { disabled, removeButtonAriaLabel } = this.props;\n    const onRenderItem = this.props.onRenderItem as (props: IPickerItemProps<T>) => JSX.Element;\n\n    const { items, selectedIndices } = this.state;\n    return items.map((item: any, index: number) =>\n      onRenderItem({\n        item,\n        index,\n        key: item.key ? item.key : index,\n        selected: selectedIndices!.indexOf(index) !== -1,\n        onRemoveItem: () => this.removeItem(item, true),\n        disabled: disabled,\n        onItemChange: this.onItemChange,\n        removeButtonAriaLabel: removeButtonAriaLabel,\n      }),\n    );\n  }\n\n  protected resetFocus(index?: number) {\n    const { items } = this.state;\n\n    if (items.length && index! >= 0) {\n      const newEl: HTMLElement | null =\n        this.root.current &&\n        (this.root.current.querySelectorAll('[data-selection-index]')[\n          Math.min(index!, items.length - 1)\n        ] as HTMLElement | null);\n      if (newEl && this.focusZone.current) {\n        this.focusZone.current.focusElement(newEl);\n      }\n    } else if (!this.canAddItems()) {\n      this.resetFocus(items.length - 1);\n    } else {\n      if (this.input.current) {\n        this.input.current.focus();\n      }\n    }\n  }\n\n  protected onSuggestionSelect() {\n    if (this.suggestionStore.currentSuggestion) {\n      const currentValue: string = this.input.current ? this.input.current.value : '';\n      const itemValue: string = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, currentValue);\n      this.setState({ suggestedDisplayValue: itemValue });\n    }\n  }\n\n  protected onSelectionChange() {\n    this.setState({\n      selectedIndices: this.selection.getSelectedIndices(),\n    });\n  }\n\n  protected updateSuggestions(suggestions: any[]) {\n    this.suggestionStore.updateSuggestions(suggestions, 0);\n    this.forceUpdate();\n  }\n\n  /**\n   * Only to be called when there is nothing in the input. Checks to see if the consumer has\n   * provided a function to resolve suggestions\n   */\n  protected onEmptyInputFocus() {\n    const emptyResolveSuggestions = this.props.onEmptyResolveSuggestions\n      ? this.props.onEmptyResolveSuggestions\n      : // eslint-disable-next-line deprecation/deprecation\n        this.props.onEmptyInputFocus;\n\n    // Only attempt to resolve suggestions if it exists\n    if (emptyResolveSuggestions) {\n      const suggestions = emptyResolveSuggestions(this.state.items);\n\n      this.updateSuggestionsList(suggestions);\n\n      this.setState({\n        isMostRecentlyUsedVisible: true,\n        suggestionsVisible: true,\n        moreSuggestionsAvailable: false,\n      });\n    }\n  }\n\n  protected updateValue(updatedValue: string) {\n    this._onResolveSuggestions(updatedValue);\n  }\n\n  protected updateSuggestionsList(suggestions: T[] | PromiseLike<T[]>, updatedValue?: string) {\n    const suggestionsArray: T[] = suggestions as T[];\n    const suggestionsPromiseLike: PromiseLike<T[]> = suggestions as PromiseLike<T[]>;\n\n    // Check to see if the returned value is an array, if it is then just pass it into the next function .\n    // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n    // If it is then resolve it asynchronously.\n    if (Array.isArray(suggestionsArray)) {\n      this._updateAndResolveValue(updatedValue, suggestionsArray);\n    } else if (suggestionsPromiseLike && suggestionsPromiseLike.then) {\n      this.setState({\n        suggestionsLoading: true,\n      });\n\n      // Clear suggestions\n      this.suggestionStore.updateSuggestions([]);\n\n      if (updatedValue !== undefined) {\n        this.setState({\n          suggestionsVisible: this._getShowSuggestions(),\n        });\n      } else {\n        this.setState({\n          suggestionsVisible: this.input.current! && this.input.current!.inputElement === document.activeElement,\n        });\n      }\n\n      // Ensure that the promise will only use the callback if it was the most recent one.\n      const promise: PromiseLike<T[]> = (this.currentPromise = suggestionsPromiseLike);\n      promise.then((newSuggestions: T[]) => {\n        if (promise === this.currentPromise) {\n          this._updateAndResolveValue(updatedValue, newSuggestions);\n        }\n      });\n    }\n  }\n\n  protected resolveNewValue(updatedValue: string, suggestions: T[]) {\n    this.updateSuggestions(suggestions);\n    let itemValue: string | undefined = undefined;\n\n    if (this.suggestionStore.currentSuggestion) {\n      itemValue = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, updatedValue);\n    }\n\n    // Only set suggestionloading to false after there has been time for the new suggestions to flow\n    // to the suggestions list. This is to ensure that the suggestions are available before aria-activedescendant\n    // is set so that screen readers will read out the first selected option.\n    this.setState(\n      {\n        suggestedDisplayValue: itemValue,\n        suggestionsVisible: this._getShowSuggestions(),\n      },\n      () => this.setState({ suggestionsLoading: false }),\n    );\n  }\n\n  protected onChange(items?: T[]) {\n    if (this.props.onChange) {\n      (this.props.onChange as any)(items);\n    }\n  }\n\n  protected onInputChange = (value: string): void => {\n    this.updateValue(value);\n    this.setState({\n      moreSuggestionsAvailable: true,\n      isMostRecentlyUsedVisible: false,\n    });\n  };\n\n  protected onSuggestionClick = (ev: React.MouseEvent<HTMLElement>, item: any, index: number): void => {\n    this.addItemByIndex(index);\n  };\n\n  protected onSuggestionRemove = (ev: React.MouseEvent<HTMLElement>, item: T, index: number): void => {\n    if (this.props.onRemoveSuggestion) {\n      this.props.onRemoveSuggestion(item);\n    }\n    this.suggestionStore.removeSuggestion(index);\n  };\n\n  protected onInputFocus = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\n    this.selection.setAllSelected(false);\n    // Only trigger all of the focus if this component isn't already focused.\n    // For example when an item is selected or removed from the selected list it should be treated\n    // as though the input is still focused.\n    if (!this.state.isFocused) {\n      this.setState({ isFocused: true });\n\n      this._userTriggeredSuggestions();\n\n      if (this.props.inputProps && this.props.inputProps.onFocus) {\n        this.props.inputProps.onFocus(ev as React.FocusEvent<HTMLInputElement>);\n      }\n    }\n  };\n\n  protected onInputBlur = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\n    if (this.props.inputProps && this.props.inputProps.onBlur) {\n      this.props.inputProps.onBlur(ev as React.FocusEvent<HTMLInputElement>);\n    }\n  };\n\n  protected onBlur = (ev: React.FocusEvent<HTMLElement | Autofill>): void => {\n    if (this.state.isFocused) {\n      // Only blur the entire component if an unrelated element gets focus.\n      // Otherwise treat it as though it still has focus.\n      // Do nothing if the blur is coming from something\n      // inside the comboBox root or the comboBox menu since\n      // it we are not really bluring from the whole comboBox\n      let relatedTarget: EventTarget | null = ev.relatedTarget;\n\n      if (ev.relatedTarget === null) {\n        // In IE11, due to lack of support, event.relatedTarget is always\n        // null making every onBlur call to be \"outside\" of the ComboBox\n        // even when it's not. Using document.activeElement is another way\n        // for us to be able to get what the relatedTarget without relying\n        // on the event\n        relatedTarget = document.activeElement;\n      }\n      if (relatedTarget && !elementContains(this.root.current!, relatedTarget as HTMLElement)) {\n        this.setState({ isFocused: false });\n        if (this.props.onBlur) {\n          this.props.onBlur(ev as React.FocusEvent<HTMLInputElement>);\n        }\n      }\n    }\n  };\n\n  /**\n   * Reveals suggestions any time the user clicks on the input element\n   * without shifting focus.\n   */\n  protected onClick = (ev: React.MouseEvent<HTMLInputElement>): void => {\n    if (this.props.inputProps !== undefined && this.props.inputProps.onClick !== undefined) {\n      this.props.inputProps.onClick(ev);\n    }\n\n    // Only primary (left) clicks show suggestions.\n    if (ev.button === 0) {\n      this._userTriggeredSuggestions();\n    }\n  };\n\n  protected onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const keyCode = ev.which;\n    switch (keyCode) {\n      case KeyCodes.escape:\n        if (this.state.suggestionsVisible) {\n          this.setState({ suggestionsVisible: false });\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n        break;\n\n      case KeyCodes.tab:\n      case KeyCodes.enter:\n        if (this.suggestionElement.current && this.suggestionElement.current.hasSuggestedActionSelected()) {\n          this.suggestionElement.current.executeSelectedAction();\n        } else if (!ev.shiftKey && this.suggestionStore.hasSelectedSuggestion() && this.state.suggestionsVisible) {\n          this.completeSuggestion();\n          ev.preventDefault();\n          ev.stopPropagation();\n        } else {\n          this._completeGenericSuggestion();\n        }\n\n        break;\n\n      case KeyCodes.backspace:\n        if (!this.props.disabled) {\n          this.onBackspace(ev);\n        }\n        ev.stopPropagation();\n        break;\n\n      case KeyCodes.del:\n        if (!this.props.disabled) {\n          if (\n            this.input.current &&\n            ev.target === this.input.current.inputElement &&\n            this.state.suggestionsVisible &&\n            this.suggestionStore.currentIndex !== -1\n          ) {\n            if (this.props.onRemoveSuggestion) {\n              this.props.onRemoveSuggestion(this.suggestionStore.currentSuggestion!.item);\n            }\n            this.suggestionStore.removeSuggestion(this.suggestionStore.currentIndex);\n            this.forceUpdate();\n          } else {\n            this.onBackspace(ev);\n          }\n        }\n        ev.stopPropagation();\n        break;\n\n      case KeyCodes.up:\n        if (this.input.current && ev.target === this.input.current.inputElement && this.state.suggestionsVisible) {\n          if (\n            this.suggestionElement.current &&\n            this.suggestionElement.current.tryHandleKeyDown(keyCode, this.suggestionStore.currentIndex)\n          ) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.forceUpdate();\n          } else {\n            if (\n              this.suggestionElement.current &&\n              this.suggestionElement.current.hasSuggestedAction() &&\n              this.suggestionStore.currentIndex === 0\n            ) {\n              ev.preventDefault();\n              ev.stopPropagation();\n              this.suggestionElement.current.focusAboveSuggestions();\n              this.suggestionStore.deselectAllSuggestions();\n              this.forceUpdate();\n            } else {\n              if (this.suggestionStore.previousSuggestion()) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.onSuggestionSelect();\n              }\n            }\n          }\n        }\n        break;\n\n      case KeyCodes.down:\n        if (this.input.current && ev.target === this.input.current.inputElement && this.state.suggestionsVisible) {\n          if (\n            this.suggestionElement.current &&\n            this.suggestionElement.current.tryHandleKeyDown(keyCode, this.suggestionStore.currentIndex)\n          ) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.forceUpdate();\n          } else {\n            if (\n              this.suggestionElement.current &&\n              this.suggestionElement.current.hasSuggestedAction() &&\n              this.suggestionStore.currentIndex + 1 === this.suggestionStore.suggestions.length\n            ) {\n              ev.preventDefault();\n              ev.stopPropagation();\n              this.suggestionElement.current.focusBelowSuggestions();\n              this.suggestionStore.deselectAllSuggestions();\n              this.forceUpdate();\n            } else {\n              if (this.suggestionStore.nextSuggestion()) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.onSuggestionSelect();\n              }\n            }\n          }\n        }\n        break;\n    }\n  };\n\n  protected onItemChange = (changedItem: T, index: number): void => {\n    const { items } = this.state;\n\n    if (index >= 0) {\n      const newItems: T[] = items;\n      newItems[index] = changedItem;\n\n      this._updateSelectedItems(newItems);\n    }\n  };\n\n  protected onGetMoreResults = (): void => {\n    this.setState(\n      {\n        isSearching: true,\n      },\n      () => {\n        if (this.props.onGetMoreResults && this.input.current) {\n          const suggestions: T[] | PromiseLike<T[]> = (this.props.onGetMoreResults as any)(\n            this.input.current.value,\n            this.state.items,\n          );\n          const suggestionsArray: T[] = suggestions as T[];\n          const suggestionsPromiseLike: PromiseLike<T[]> = suggestions as PromiseLike<T[]>;\n\n          if (Array.isArray(suggestionsArray)) {\n            this.updateSuggestions(suggestionsArray);\n            this.setState({ isSearching: false });\n          } else if (suggestionsPromiseLike.then) {\n            suggestionsPromiseLike.then((newSuggestions: T[]) => {\n              this.updateSuggestions(newSuggestions);\n              this.setState({ isSearching: false });\n            });\n          }\n        } else {\n          this.setState({ isSearching: false });\n        }\n\n        if (this.input.current) {\n          this.input.current.focus();\n        }\n\n        this.setState({\n          moreSuggestionsAvailable: false,\n          isResultsFooterVisible: true,\n        });\n      },\n    );\n  };\n\n  protected completeSelection = (item: T) => {\n    this.addItem(item);\n    this.updateValue('');\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n    this.setState({ suggestionsVisible: false });\n  };\n\n  protected addItemByIndex = (index: number): void => {\n    this.completeSelection(this.suggestionStore.getSuggestionAtIndex(index).item);\n  };\n\n  protected addItem = (item: T): void => {\n    const processedItem: T | PromiseLike<T> | null = this.props.onItemSelected\n      ? (this.props.onItemSelected as any)(item)\n      : item;\n\n    if (processedItem === null) {\n      return;\n    }\n\n    const processedItemObject: T = processedItem as T;\n    const processedItemPromiseLike: PromiseLike<T> = processedItem as PromiseLike<T>;\n\n    if (processedItemPromiseLike && processedItemPromiseLike.then) {\n      processedItemPromiseLike.then((resolvedProcessedItem: T) => {\n        const newItems: T[] = this.state.items.concat([resolvedProcessedItem]);\n        this._updateSelectedItems(newItems);\n      });\n    } else {\n      const newItems: T[] = this.state.items.concat([processedItemObject]);\n      this._updateSelectedItems(newItems);\n    }\n    this.setState({ suggestedDisplayValue: '' });\n  };\n\n  protected removeItem = (item: IPickerItemProps<T>, focusNextItem?: boolean): void => {\n    const { items } = this.state;\n    const index: number = items.indexOf(item);\n\n    if (index >= 0) {\n      const newItems: T[] = items.slice(0, index).concat(items.slice(index + 1));\n      this._updateSelectedItems(newItems);\n    }\n  };\n\n  protected removeItems = (itemsToRemove: any[]): void => {\n    const { items } = this.state;\n    const newItems: T[] = items.filter((item: any) => itemsToRemove.indexOf(item) === -1);\n\n    this._updateSelectedItems(newItems);\n  };\n\n  // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n  // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n  protected onBackspace(ev: React.KeyboardEvent<HTMLElement>) {\n    if (\n      (this.state.items.length && !this.input.current) ||\n      (this.input.current && !this.input.current.isValueSelected && this.input.current.cursorLocation === 0)\n    ) {\n      if (this.selection.getSelectedCount() > 0) {\n        this.removeItems(this.selection.getSelection());\n      } else {\n        this.removeItem(this.state.items[this.state.items.length - 1]);\n      }\n    }\n  }\n\n  protected _shouldFocusZoneEnterInnerZone = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    // If suggestions are shown const up/down keys control them, otherwise allow them through to control the focusZone.\n    if (this.state.suggestionsVisible) {\n      switch (ev.which) {\n        case KeyCodes.up:\n        case KeyCodes.down:\n          return true;\n      }\n    }\n\n    if (ev.which === KeyCodes.enter) {\n      return true;\n    }\n\n    return false;\n  };\n\n  protected getActiveDescendant() {\n    if (this.state.suggestionsLoading) {\n      return undefined;\n    }\n\n    const currentIndex = this.suggestionStore.currentIndex;\n    // if the suggestions element has actions and the currentIndex does not point to a suggestion, return the action id\n    if (currentIndex < 0 && this.suggestionElement.current && this.suggestionElement.current.hasSuggestedAction()) {\n      return 'sug-selectedAction';\n    }\n\n    return currentIndex > -1 && !this.state.suggestionsLoading ? 'sug-' + currentIndex : undefined;\n  }\n\n  protected getSuggestionsAlert(suggestionAlertClassName: string = legacyStyles.screenReaderOnly) {\n    const currentIndex = this.suggestionStore.currentIndex;\n    if (this.props.enableSelectedSuggestionAlert) {\n      const selectedSuggestion =\n        currentIndex > -1 ? this.suggestionStore.getSuggestionAtIndex(this.suggestionStore.currentIndex) : undefined;\n      const selectedSuggestionAlertText = selectedSuggestion ? selectedSuggestion.ariaLabel : undefined;\n      return (\n        <div\n          className={suggestionAlertClassName}\n          role=\"alert\"\n          id={this._ariaMap.selectedSuggestionAlert}\n          aria-live=\"assertive\"\n        >\n          {selectedSuggestionAlertText}{' '}\n        </div>\n      );\n    }\n  }\n\n  /**\n   * Takes in the current updated value and either resolves it with the new suggestions\n   * or if updated value is undefined then it clears out currently suggested items\n   */\n  private _updateAndResolveValue(updatedValue: string | undefined, newSuggestions: T[]) {\n    if (updatedValue !== undefined) {\n      this.resolveNewValue(updatedValue, newSuggestions);\n    } else {\n      this.suggestionStore.updateSuggestions(newSuggestions, -1);\n      if (this.state.suggestionsLoading) {\n        this.setState({\n          suggestionsLoading: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If `selectedItems` is provided, this will act as a controlled component and it will not update its own state.\n   */\n  private _updateSelectedItems(items: T[]): void {\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to add or remove the items.\n      this.onChange(items);\n    } else {\n      this.setState({ items: items }, () => {\n        this._onSelectedItemsUpdated(items);\n      });\n    }\n  }\n\n  private _onSelectedItemsUpdated(items?: T[]): void {\n    this.onChange(items);\n  }\n\n  /**\n   * Suggestions are normally shown after the user updates text and the text\n   * is non-empty, but also when the user clicks on the input element.\n   * @returns True if suggestions should be shown.\n   */\n  private _getShowSuggestions(): boolean {\n    const areSuggestionsVisible =\n      this.input.current !== undefined &&\n      this.input.current !== null &&\n      this.input.current.inputElement === document.activeElement &&\n      this.input.current.value !== '';\n\n    return areSuggestionsVisible;\n  }\n\n  private _onResolveSuggestions = (updatedValue: string): void => {\n    const suggestions: T[] | PromiseLike<T[]> | null = this.props.onResolveSuggestions(updatedValue, this.state.items);\n\n    if (suggestions !== null) {\n      this.updateSuggestionsList(suggestions, updatedValue);\n    }\n  };\n\n  private _completeGenericSuggestion = (): void => {\n    if (\n      this.props.onValidateInput &&\n      this.input.current &&\n      (this.props.onValidateInput as any)(this.input.current.value) !== ValidationState.invalid &&\n      this.props.createGenericItem\n    ) {\n      const itemToConvert = this.props.createGenericItem(\n        this.input.current.value,\n        this.props.onValidateInput(this.input.current.value),\n      );\n      this.suggestionStore.createGenericSuggestion(itemToConvert);\n      this.completeSuggestion();\n    }\n  };\n\n  private _getTextFromItem(item: T, currentValue?: string): string {\n    if (this.props.getTextFromItem) {\n      return (this.props.getTextFromItem as any)(item, currentValue);\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * This should be called when the user does something other than use text entry to trigger suggestions.\n   *\n   */\n  private _userTriggeredSuggestions = () => {\n    if (!this.state.suggestionsVisible) {\n      const input = this.input.current ? this.input.current.value : '';\n      if (!input) {\n        this.onEmptyInputFocus();\n      } else {\n        if (this.suggestionStore.suggestions.length === 0) {\n          this._onResolveSuggestions(input);\n        } else {\n          this.setState({\n            isMostRecentlyUsedVisible: false,\n            suggestionsVisible: true,\n          });\n        }\n      }\n    }\n  };\n}\n\nexport class BasePickerListBelow<T, P extends IBasePickerProps<T>> extends BasePicker<T, P> {\n  public render(): JSX.Element {\n    const { suggestedDisplayValue, isFocused } = this.state;\n    const { className, inputProps, disabled, theme, styles } = this.props;\n\n    const selectedSuggestionAlertId: string | undefined = this.props.enableSelectedSuggestionAlert\n      ? this._ariaMap.selectedSuggestionAlert\n      : '';\n    const suggestionsAvailable: string | undefined = this.state.suggestionsVisible ? this._ariaMap.suggestionList : '';\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from BasePicker class because it\n    // might be used by consumers who created custom pickers from extending from\n    // this base class and have not used the new 'styles' prop.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    const classNames: Partial<IProcessedStyleSet<IBasePickerStyles>> = styles\n      ? getClassNames(styles, {\n          theme,\n          className,\n          isFocused,\n          inputClassName: inputProps && inputProps.className,\n        })\n      : {\n          root: css('ms-BasePicker', className ? className : ''),\n          text: css('ms-BasePicker-text', legacyStyles.pickerText, this.state.isFocused && legacyStyles.inputFocused),\n          input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\n          screenReaderText: legacyStyles.screenReaderOnly,\n        };\n\n    return (\n      <div ref={this.root} onBlur={this.onBlur}>\n        <div className={classNames.root} onKeyDown={this.onKeyDown}>\n          {this.getSuggestionsAlert(classNames.screenReaderText)}\n          <div\n            className={classNames.text}\n            aria-owns={suggestionsAvailable || undefined}\n            aria-expanded={!!this.state.suggestionsVisible}\n            // Dialog is an acceptable child of a combobox according to the aria specs: https://www.w3.org/TR/wai-aria-practices/#combobox\n            // Currently accessibility insights will flag this as not a valid child because the AXE rules are\n            // out of date. Tracking issue: https://github.com/dequelabs/axe-core/issues/1009\n            aria-haspopup={suggestionsAvailable && this.suggestionStore.suggestions.length > 0 ? 'listbox' : 'dialog'}\n            role=\"combobox\"\n          >\n            <Autofill\n              {...(inputProps as any)}\n              className={classNames.input}\n              componentRef={this.input}\n              onFocus={this.onInputFocus}\n              onBlur={this.onInputBlur}\n              onClick={this.onClick}\n              onInputValueChange={this.onInputChange}\n              suggestedDisplayValue={suggestedDisplayValue}\n              aria-activedescendant={this.getActiveDescendant()}\n              role=\"textbox\"\n              disabled={disabled}\n              aria-controls={`${suggestionsAvailable} ${selectedSuggestionAlertId}` || undefined}\n              onInputChange={this.props.onInputChange}\n            />\n          </div>\n        </div>\n        {this.renderSuggestions()}\n        <SelectionZone selection={this.selection} selectionMode={SelectionMode.single}>\n          <FocusZone\n            componentRef={this.focusZone}\n            className=\"ms-BasePicker-selectedItems\" // just a className hook without any styles applied to it.\n            isCircularNavigation={true}\n            direction={FocusZoneDirection.bidirectional}\n            shouldEnterInnerZone={this._shouldFocusZoneEnterInnerZone}\n            id={this._ariaMap.selectedItems}\n            role={'list'}\n          >\n            {this.renderItems()}\n          </FocusZone>\n        </SelectionZone>\n      </div>\n    );\n  }\n\n  protected onBackspace(ev: React.KeyboardEvent<HTMLElement>) {\n    // override the existing backspace method to not do anything because the list items appear below.\n  }\n}\n"]},"metadata":{},"sourceType":"module"}