{"ast":null,"code":"import * as React from 'react';\nimport { css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nvar getCellText = function (item, column) {\n  var value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\n\n\nexport var DetailsRowFields = function (props) {\n  var columns = props.columns,\n      columnStartIndex = props.columnStartIndex,\n      rowClassNames = props.rowClassNames,\n      _a = props.cellStyleProps,\n      cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a,\n      item = props.item,\n      itemIndex = props.itemIndex,\n      onRenderItemColumn = props.onRenderItemColumn,\n      getCellValueKey = props.getCellValueKey,\n      cellsByColumn = props.cellsByColumn,\n      enableUpdateAnimations = props.enableUpdateAnimations;\n  var cellValueKeysRef = React.useRef();\n  var cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n  return React.createElement(\"div\", {\n    className: rowClassNames.fields,\n    \"data-automationid\": \"DetailsRowFields\",\n    role: \"presentation\"\n  }, columns.map(function (column, columnIndex) {\n    var width = typeof column.calculatedWidth === 'undefined' ? 'auto' : column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n    var _a = column.onRender,\n        onRender = _a === void 0 ? onRenderItemColumn : _a,\n        _b = column.getValueKey,\n        getValueKey = _b === void 0 ? getCellValueKey : _b;\n    var cellContentsRender = cellsByColumn && column.key in cellsByColumn ? cellsByColumn[column.key] : onRender ? onRender(item, itemIndex, column) : getCellText(item, column);\n    var previousValueKey = cellValueKeys[column.key];\n    var cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n    var showAnimation = false;\n\n    if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n      showAnimation = true;\n    }\n\n    cellValueKeys[column.key] = cellValueKey; // generate a key that auto-dirties when content changes, to force the container to re-render,\n    // to trigger animation\n\n    var key = \"\" + column.key + (cellValueKey !== undefined ? \"-\" + cellValueKey : '');\n    return React.createElement(\"div\", {\n      key: key,\n      role: column.isRowHeader ? 'rowheader' : 'gridcell',\n      \"aria-readonly\": true,\n      \"aria-colindex\": columnIndex + columnStartIndex + 1,\n      className: css(column.className, column.isMultiline && rowClassNames.isMultiline, column.isRowHeader && rowClassNames.isRowHeader, rowClassNames.cell, column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded, showAnimation && rowClassNames.cellAnimation),\n      style: {\n        width: width\n      },\n      \"data-automationid\": \"DetailsRowCell\",\n      \"data-automation-key\": column.key\n    }, cellContentsRender);\n  }));\n};","map":{"version":3,"mappings":"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","names":["React","css","DEFAULT_CELL_STYLE_PROPS","getCellText","item","column","value","fieldName","undefined","toString","DetailsRowFields","columnStartIndex","rowClassNames","_a","cellStyleProps","itemIndex","onRenderItemColumn","getCellValueKey","cellsByColumn","enableUpdateAnimations","cellValueKeysRef","useRef","cellValueKeys","current","className","fields","role","columns","map","columnIndex","width","calculatedWidth","cellLeftPadding","cellRightPadding","isPadded","cellExtraRightPadding","_b","getValueKey","cellContentsRender","key","onRender","previousValueKey","cellValueKey","showAnimation","isRowHeader","isMultiline","cell","cellPadded","cellUnpadded","cellAnimation","style"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\DetailsList\\DetailsRowFields.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IColumn } from './DetailsList.types';\nimport { css } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    columnStartIndex,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    onRenderItemColumn,\n    getCellValueKey,\n    cellsByColumn,\n    enableUpdateAnimations,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map((column, columnIndex) => {\n        const width: string | number =\n          typeof column.calculatedWidth === 'undefined'\n            ? 'auto'\n            : column.calculatedWidth +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n        const { onRender = onRenderItemColumn, getValueKey = getCellValueKey } = column;\n        const cellContentsRender =\n          cellsByColumn && column.key in cellsByColumn\n            ? cellsByColumn[column.key]\n            : onRender\n            ? onRender(item, itemIndex, column)\n            : getCellText(item, column);\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        // generate a key that auto-dirties when content changes, to force the container to re-render,\n        // to trigger animation\n        const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n        return (\n          <div\n            key={key}\n            role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n            aria-readonly\n            aria-colindex={columnIndex + columnStartIndex + 1}\n            className={css(\n              column.className,\n              column.isMultiline && rowClassNames.isMultiline,\n              column.isRowHeader && rowClassNames.isRowHeader,\n              rowClassNames.cell,\n              column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n              showAnimation && rowClassNames.cellAnimation,\n            )}\n            style={{ width }}\n            data-automationid=\"DetailsRowCell\"\n            data-automation-key={column.key}\n          >\n            {cellContentsRender}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}