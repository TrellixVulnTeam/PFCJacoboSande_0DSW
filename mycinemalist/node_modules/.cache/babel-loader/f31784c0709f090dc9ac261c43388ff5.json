{"ast":null,"code":"/**\n * Concatination helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\nexport function css() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var classes = [];\n\n  for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n    var arg = args_1[_a];\n\n    if (arg) {\n      if (typeof arg === 'string') {\n        classes.push(arg);\n      } else if (arg.hasOwnProperty('toString') && typeof arg.toString === 'function') {\n        classes.push(arg.toString());\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        for (var key in arg) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          if (arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n  }\n\n  return classes.join(' ');\n}","map":{"version":3,"mappings":"AAyBA;;;;;AAKA,OAAM,SAAUA,GAAV,GAAa;EAAC;;OAAA,yCAAoB;IAApBC;;;EAClB,IAAIC,OAAO,GAAG,EAAd;;EAEA,KAAgB,yBAAhB,EAAgBC,kBAAhB,EAAgBA,IAAhB,EAAsB;IAAjB,IAAIC,GAAG,aAAP;;IACH,IAAIA,GAAJ,EAAS;MACP,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;QAC3BF,OAAO,CAACG,IAAR,CAAaD,GAAb;MACD,CAFD,MAEO,IAAIA,GAAG,CAACE,cAAJ,CAAmB,UAAnB,KAAkC,OAAOF,GAAG,CAACG,QAAX,KAAwB,UAA9D,EAA0E;QAC/EL,OAAO,CAACG,IAAR,CAAaD,GAAG,CAACG,QAAJ,EAAb;MACD,CAFM,MAEA;QACL;QACA,KAAK,IAAIC,GAAT,IAAgBJ,GAAhB,EAA4B;UAC1B;UACA,IAAKA,GAAW,CAACI,GAAD,CAAhB,EAAuB;YACrBN,OAAO,CAACG,IAAR,CAAaG,GAAb;UACD;QACF;MACF;IACF;EACF;;EAED,OAAON,OAAO,CAACO,IAAR,CAAa,GAAb,CAAP;AACD","names":["css","args","classes","_a","arg","push","hasOwnProperty","toString","key","join"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\utilities\\src\\css.ts"],"sourcesContent":["/**\n * Dictionary of booleans.\n *\n * @internal\n */\nexport interface IDictionary {\n  [className: string]: boolean;\n}\n\n/**\n * Serializable object.\n *\n * @internal\n */\nexport interface ISerializableObject {\n  toString?: () => string;\n}\n\n/**\n * css input type.\n *\n * @internal\n */\nexport type ICssInput = string | ISerializableObject | IDictionary | null | undefined | boolean;\n\n/**\n * Concatination helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\nexport function css(...args: ICssInput[]): string {\n  let classes = [];\n\n  for (let arg of args) {\n    if (arg) {\n      if (typeof arg === 'string') {\n        classes.push(arg);\n      } else if (arg.hasOwnProperty('toString') && typeof arg.toString === 'function') {\n        classes.push(arg.toString());\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        for (let key in arg as any) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          if ((arg as any)[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n  }\n\n  return classes.join(' ');\n}\n"]},"metadata":{},"sourceType":"module"}