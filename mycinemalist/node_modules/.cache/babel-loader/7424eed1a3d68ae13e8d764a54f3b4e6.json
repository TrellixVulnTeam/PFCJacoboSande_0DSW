{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { ActionButton } from '../../Button';\nimport { buttonStyles } from './Nav.styles';\nimport { classNamesFunction, divProperties, getNativeProps, getWindow, initializeComponentRef } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon } from '../../Icon';\nimport { composeComponentAs, composeRenderFunction } from '@uifabric/utilities'; // The number pixels per indentation level for Nav links.\n\nvar _indentationSize = 14; // The number of pixels of left margin\n\nvar _baseIndent = 3; // global var used in _isLinkSelectedKey\n\nvar _urlResolver;\n\nexport function isRelativeUrl(url) {\n  // A URL is relative if it has no protocol.\n  return !!url && !/^[a-z0-9+-.]+:\\/\\//i.test(url);\n}\nvar getClassNames = classNamesFunction();\n\nvar NavBase =\n/** @class */\nfunction (_super) {\n  __extends(NavBase, _super);\n\n  function NavBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusZone = React.createRef();\n\n    _this._onRenderLink = function (link) {\n      var _a = _this.props,\n          styles = _a.styles,\n          groups = _a.groups,\n          theme = _a.theme;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        groups: groups\n      });\n      return React.createElement(\"div\", {\n        className: classNames.linkText\n      }, link.name);\n    };\n\n    _this._renderGroup = function (group, groupIndex) {\n      var _a = _this.props,\n          styles = _a.styles,\n          groups = _a.groups,\n          theme = _a.theme,\n          _b = _a.onRenderGroupHeader,\n          onRenderGroupHeader = _b === void 0 ? _this._renderGroupHeader : _b;\n\n      var isExpanded = _this._isGroupExpanded(group);\n\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        isGroup: true,\n        isExpanded: isExpanded,\n        groups: groups\n      });\n\n      var finalOnHeaderClick = function finalOnHeaderClick(ev, isCollapsing) {\n        _this._onGroupHeaderClicked(group, ev);\n      };\n\n      var groupProps = __assign(__assign({}, group), {\n        isExpanded: isExpanded,\n        onHeaderClick: finalOnHeaderClick\n      });\n\n      return React.createElement(\"div\", {\n        key: groupIndex,\n        className: classNames.group\n      }, groupProps.name ? onRenderGroupHeader(groupProps, _this._renderGroupHeader) : null, React.createElement(\"div\", {\n        className: classNames.groupContent\n      }, _this._renderLinks(groupProps.links, 0\n      /* nestingLevel */\n      )));\n    };\n\n    _this._renderGroupHeader = function (group) {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          styles = _a.styles,\n          groups = _a.groups,\n          theme = _a.theme,\n          expandButtonAriaLabel = _a.expandButtonAriaLabel;\n      var isExpanded = group.isExpanded;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        isGroup: true,\n        isExpanded: isExpanded,\n        groups: groups\n      });\n      var label = (isExpanded ? group.collapseAriaLabel : group.expandAriaLabel) || expandButtonAriaLabel;\n      var onHeaderClick = group.onHeaderClick;\n      var onClick = onHeaderClick ? function (ev) {\n        onHeaderClick(ev, isExpanded);\n      } : undefined;\n      return React.createElement(\"button\", {\n        className: classNames.chevronButton,\n        onClick: onClick,\n        \"aria-label\": label,\n        \"aria-expanded\": isExpanded\n      }, React.createElement(Icon, {\n        className: classNames.chevronIcon,\n        iconName: \"ChevronDown\"\n      }), group.name);\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      isGroupCollapsed: {},\n      // TODO: consider removing\n      // eslint-disable-next-line react/no-unused-state\n      isLinkExpandStateChanged: false,\n      selectedKey: props.initialSelectedKey || props.selectedKey\n    };\n    return _this;\n  }\n\n  NavBase.prototype.render = function () {\n    var _a = this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        className = _a.className,\n        isOnTop = _a.isOnTop,\n        theme = _a.theme;\n\n    if (!groups) {\n      return null;\n    }\n\n    var groupElements = groups.map(this._renderGroup);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isOnTop: isOnTop,\n      groups: groups\n    });\n    return React.createElement(FocusZone, {\n      direction: FocusZoneDirection.vertical,\n      componentRef: this._focusZone\n    }, React.createElement(\"nav\", {\n      role: \"navigation\",\n      className: classNames.root,\n      \"aria-label\": this.props.ariaLabel\n    }, groupElements));\n  };\n\n  Object.defineProperty(NavBase.prototype, \"selectedKey\", {\n    get: function get() {\n      return this.state.selectedKey;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n\n  NavBase.prototype.focus = function (forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    if (this._focusZone && this._focusZone.current) {\n      return this._focusZone.current.focus(forceIntoFirstElement);\n    }\n\n    return false;\n  };\n\n  NavBase.prototype._renderNavLink = function (link, linkIndex, nestingLevel) {\n    var _a = this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme;\n    var isLinkWithIcon = link.icon || link.iconProps;\n\n    var isSelectedLink = this._isLinkSelected(link);\n\n    var _b = link.ariaCurrent,\n        ariaCurrent = _b === void 0 ? 'page' : _b;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      isSelected: isSelectedLink,\n      isDisabled: link.disabled,\n      isButtonEntry: link.onClick && !link.forceAnchor,\n      leftPadding: _indentationSize * nestingLevel + _baseIndent + (isLinkWithIcon ? 0 : 24),\n      groups: groups\n    }); // Prevent hijacking of the parent window if link.target is defined\n\n    var rel = link.url && link.target && !isRelativeUrl(link.url) ? 'noopener noreferrer' : undefined;\n    var LinkAs = this.props.linkAs ? composeComponentAs(this.props.linkAs, ActionButton) : ActionButton;\n    var onRenderLink = this.props.onRenderLink ? composeRenderFunction(this.props.onRenderLink, this._onRenderLink) : this._onRenderLink;\n    return React.createElement(LinkAs, {\n      className: classNames.link,\n      styles: buttonStyles,\n      href: link.url || (link.forceAnchor ? '#' : undefined),\n      iconProps: link.iconProps || {\n        iconName: link.icon\n      },\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick: link.onClick ? this._onNavButtonLinkClicked.bind(this, link) : this._onNavAnchorLinkClicked.bind(this, link),\n      title: link.title !== undefined ? link.title : link.name,\n      target: link.target,\n      rel: rel,\n      disabled: link.disabled,\n      \"aria-current\": isSelectedLink ? ariaCurrent : undefined,\n      \"aria-label\": link.ariaLabel ? link.ariaLabel : undefined,\n      link: link\n    }, onRenderLink(link));\n  };\n\n  NavBase.prototype._renderCompositeLink = function (link, linkIndex, nestingLevel) {\n    var divProps = __assign({}, getNativeProps(link, divProperties, ['onClick'])); // eslint-disable-next-line deprecation/deprecation\n\n\n    var _a = this.props,\n        expandButtonAriaLabel = _a.expandButtonAriaLabel,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      isExpanded: !!link.isExpanded,\n      isSelected: this._isLinkSelected(link),\n      isLink: true,\n      isDisabled: link.disabled,\n      position: _indentationSize * nestingLevel + 1,\n      groups: groups\n    });\n    var finalExpandBtnAriaLabel = '';\n\n    if (link.links && link.links.length > 0) {\n      if (link.collapseAriaLabel || link.expandAriaLabel) {\n        finalExpandBtnAriaLabel = link.isExpanded ? link.collapseAriaLabel : link.expandAriaLabel;\n      } else {\n        // TODO remove when `expandButtonAriaLabel` is removed. This is not an ideal concatenation for localization.\n        finalExpandBtnAriaLabel = expandButtonAriaLabel ? link.name + \" \" + expandButtonAriaLabel : link.name;\n      }\n    }\n\n    return React.createElement(\"div\", __assign({}, divProps, {\n      key: link.key || linkIndex,\n      className: classNames.compositeLink\n    }), link.links && link.links.length > 0 ? React.createElement(\"button\", {\n      className: classNames.chevronButton,\n      onClick: this._onLinkExpandClicked.bind(this, link),\n      \"aria-label\": finalExpandBtnAriaLabel,\n      \"aria-expanded\": link.isExpanded ? 'true' : 'false'\n    }, React.createElement(Icon, {\n      className: classNames.chevronIcon,\n      iconName: \"ChevronDown\"\n    })) : null, this._renderNavLink(link, linkIndex, nestingLevel));\n  };\n\n  NavBase.prototype._renderLink = function (link, linkIndex, nestingLevel) {\n    var _a = this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      groups: groups\n    });\n    return React.createElement(\"li\", {\n      key: link.key || linkIndex,\n      role: \"listitem\",\n      className: classNames.navItem\n    }, this._renderCompositeLink(link, linkIndex, nestingLevel), link.isExpanded ? this._renderLinks(link.links, ++nestingLevel) : null);\n  };\n\n  NavBase.prototype._renderLinks = function (links, nestingLevel) {\n    var _this = this;\n\n    if (!links || !links.length) {\n      return null;\n    }\n\n    var linkElements = links.map(function (link, linkIndex) {\n      return _this._renderLink(link, linkIndex, nestingLevel);\n    });\n    var _a = this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      groups: groups\n    });\n    return React.createElement(\"ul\", {\n      role: \"list\",\n      className: classNames.navItems\n    }, linkElements);\n  };\n\n  NavBase.prototype._onGroupHeaderClicked = function (group, ev) {\n    if (group.onHeaderClick) {\n      group.onHeaderClick(ev, this._isGroupExpanded(group));\n    }\n\n    this._toggleCollapsed(group);\n\n    if (ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n\n  NavBase.prototype._onLinkExpandClicked = function (link, ev) {\n    var onLinkExpandClick = this.props.onLinkExpandClick;\n\n    if (onLinkExpandClick) {\n      onLinkExpandClick(ev, link);\n    }\n\n    if (!ev.defaultPrevented) {\n      link.isExpanded = !link.isExpanded; // eslint-disable-next-line react/no-unused-state\n\n      this.setState({\n        isLinkExpandStateChanged: true\n      });\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  NavBase.prototype._preventBounce = function (link, ev) {\n    if (!link.url && link.forceAnchor) {\n      ev.preventDefault();\n    }\n  };\n\n  NavBase.prototype._onNavAnchorLinkClicked = function (link, ev) {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n\n    if (this.props.onLinkClick) {\n      this.props.onLinkClick(ev, link);\n    }\n\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({\n      selectedKey: link.key\n    });\n  };\n\n  NavBase.prototype._onNavButtonLinkClicked = function (link, ev) {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n\n    if (link.onClick) {\n      link.onClick(ev, link);\n    }\n\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({\n      selectedKey: link.key\n    });\n  };\n\n  NavBase.prototype._isLinkSelected = function (link) {\n    // if caller passes in selectedKey, use it as first choice or\n    // if current state.selectedKey (from addressbar) is match to the link or\n    // check if URL is matching location.href (if link.url exists)\n    if (this.props.selectedKey !== undefined) {\n      return link.key === this.props.selectedKey;\n    } else if (this.state.selectedKey !== undefined) {\n      return link.key === this.state.selectedKey;\n    } else if (typeof getWindow() === 'undefined' || !link.url) {\n      // resolve is not supported for ssr\n      return false;\n    } else {\n      // If selectedKey is undefined in props and state, then check URL\n      _urlResolver = _urlResolver || document.createElement('a');\n      _urlResolver.href = link.url || '';\n      var target = _urlResolver.href;\n\n      if (location.href === target) {\n        return true;\n      } // If selectedKey is not defined in state, then check URL to determine link selected status\n\n\n      if (location.protocol + '//' + location.host + location.pathname === target) {\n        return true;\n      }\n\n      if (location.hash) {\n        // Match the hash to the url.\n        if (location.hash === link.url) {\n          return true;\n        } // Match a rebased url. (e.g. #foo becomes http://hostname/foo)\n\n\n        _urlResolver.href = location.hash.substring(1);\n        return _urlResolver.href === target;\n      }\n    }\n\n    return false;\n  };\n\n  NavBase.prototype._isGroupExpanded = function (group) {\n    if (group.name && this.state.isGroupCollapsed.hasOwnProperty(group.name)) {\n      return !this.state.isGroupCollapsed[group.name];\n    }\n\n    if (group.collapseByDefault !== undefined) {\n      return !group.collapseByDefault;\n    }\n\n    return true;\n  };\n\n  NavBase.prototype._toggleCollapsed = function (group) {\n    var _a;\n\n    if (group.name) {\n      var newGroupCollapsed = __assign(__assign({}, this.state.isGroupCollapsed), (_a = {}, _a[group.name] = this._isGroupExpanded(group), _a));\n\n      this.setState({\n        isGroupCollapsed: newGroupCollapsed\n      });\n    }\n  };\n\n  NavBase.defaultProps = {\n    groups: null\n  };\n  return NavBase;\n}(React.Component);\n\nexport { NavBase };","map":{"version":3,"mappings":"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","names":["React","ActionButton","buttonStyles","classNamesFunction","divProperties","getNativeProps","getWindow","initializeComponentRef","FocusZone","FocusZoneDirection","Icon","composeComponentAs","composeRenderFunction","_indentationSize","_baseIndent","_urlResolver","isRelativeUrl","url","test","getClassNames","__extends","props","_super","_this","createRef","link","styles","groups","theme","classNames","className","linkText","name","group","groupIndex","_b","onRenderGroupHeader","isExpanded","_isGroupExpanded","isGroup","finalOnHeaderClick","ev","isCollapsing","_onGroupHeaderClicked","groupProps","onHeaderClick","key","_renderGroupHeader","groupContent","_renderLinks","links","expandButtonAriaLabel","label","collapseAriaLabel","expandAriaLabel","onClick","undefined","chevronButton","chevronIcon","iconName","state","isGroupCollapsed","isLinkExpandStateChanged","selectedKey","initialSelectedKey","NavBase","isOnTop","groupElements","map","_renderGroup","direction","vertical","componentRef","_focusZone","role","root","ariaLabel","Object","forceIntoFirstElement","current","focus","linkIndex","nestingLevel","isLinkWithIcon","icon","iconProps","isSelectedLink","_isLinkSelected","isSelected","isDisabled","disabled","isButtonEntry","forceAnchor","leftPadding","rel","target","LinkAs","linkAs","onRenderLink","_onRenderLink","href","_onNavButtonLinkClicked","bind","_onNavAnchorLinkClicked","title","ariaCurrent","divProps","isLink","position","finalExpandBtnAriaLabel","length","compositeLink","_onLinkExpandClicked","_renderNavLink","navItem","_renderCompositeLink","linkElements","_renderLink","navItems","_toggleCollapsed","preventDefault","stopPropagation","onLinkExpandClick","defaultPrevented","setState","_preventBounce","onLinkClick","document","createElement","location","protocol","host","pathname","hash","substring","hasOwnProperty","collapseByDefault","newGroupCollapsed","_a","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Nav\\Nav.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ActionButton } from '../../Button';\nimport { buttonStyles } from './Nav.styles';\nimport { classNamesFunction, divProperties, getNativeProps, getWindow, initializeComponentRef } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection, IFocusZone } from '../../FocusZone';\nimport { Icon } from '../../Icon';\nimport {\n  INav,\n  INavLink,\n  INavLinkGroup,\n  INavProps,\n  INavStyleProps,\n  INavStyles,\n  IRenderGroupHeaderProps,\n} from './Nav.types';\nimport { composeComponentAs, composeRenderFunction } from '@uifabric/utilities';\n\n// The number pixels per indentation level for Nav links.\nconst _indentationSize = 14;\n\n// The number of pixels of left margin\nconst _baseIndent = 3;\n\n// global var used in _isLinkSelectedKey\nlet _urlResolver: HTMLAnchorElement | undefined;\n\nexport function isRelativeUrl(url: string): boolean {\n  // A URL is relative if it has no protocol.\n  return !!url && !/^[a-z0-9+-.]+:\\/\\//i.test(url);\n}\n\nconst getClassNames = classNamesFunction<INavStyleProps, INavStyles>();\n\nexport interface INavState {\n  isGroupCollapsed: { [key: string]: boolean };\n  isLinkExpandStateChanged?: boolean;\n  selectedKey?: string;\n}\n\nexport class NavBase extends React.Component<INavProps, INavState> implements INav {\n  public static defaultProps: INavProps = {\n    groups: null,\n  };\n\n  private _focusZone = React.createRef<IFocusZone>();\n  constructor(props: INavProps) {\n    super(props);\n    initializeComponentRef(this);\n    this.state = {\n      isGroupCollapsed: {},\n      // TODO: consider removing\n      // eslint-disable-next-line react/no-unused-state\n      isLinkExpandStateChanged: false,\n      selectedKey: props.initialSelectedKey || props.selectedKey,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const { styles, groups, className, isOnTop, theme } = this.props;\n\n    if (!groups) {\n      return null;\n    }\n\n    const groupElements: React.ReactElement<{}>[] = groups.map(this._renderGroup);\n\n    const classNames = getClassNames(styles!, { theme: theme!, className, isOnTop, groups });\n\n    return (\n      <FocusZone direction={FocusZoneDirection.vertical} componentRef={this._focusZone}>\n        <nav role=\"navigation\" className={classNames.root} aria-label={this.props.ariaLabel}>\n          {groupElements}\n        </nav>\n      </FocusZone>\n    );\n  }\n\n  public get selectedKey(): string | undefined {\n    return this.state.selectedKey;\n  }\n\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    if (this._focusZone && this._focusZone.current) {\n      return this._focusZone.current.focus(forceIntoFirstElement);\n    }\n    return false;\n  }\n\n  private _onRenderLink = (link: INavLink): JSX.Element => {\n    const { styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, { theme: theme!, groups });\n    return <div className={classNames.linkText}>{link.name}</div>;\n  };\n\n  private _renderNavLink(link: INavLink, linkIndex: number, nestingLevel: number): JSX.Element {\n    const { styles, groups, theme } = this.props;\n    const isLinkWithIcon = link.icon || link.iconProps;\n    const isSelectedLink = this._isLinkSelected(link);\n    const { ariaCurrent = 'page' } = link;\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isSelected: isSelectedLink,\n      isDisabled: link.disabled,\n      isButtonEntry: link.onClick && !link.forceAnchor,\n      leftPadding: _indentationSize * nestingLevel + _baseIndent + (isLinkWithIcon ? 0 : 24),\n      groups,\n    });\n\n    // Prevent hijacking of the parent window if link.target is defined\n    const rel = link.url && link.target && !isRelativeUrl(link.url) ? 'noopener noreferrer' : undefined;\n\n    const LinkAs = this.props.linkAs ? composeComponentAs(this.props.linkAs, ActionButton) : ActionButton;\n    const onRenderLink = this.props.onRenderLink\n      ? composeRenderFunction(this.props.onRenderLink, this._onRenderLink)\n      : this._onRenderLink;\n\n    return (\n      <LinkAs\n        className={classNames.link}\n        styles={buttonStyles}\n        href={link.url || (link.forceAnchor ? '#' : undefined)}\n        iconProps={link.iconProps || { iconName: link.icon }}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={\n          link.onClick ? this._onNavButtonLinkClicked.bind(this, link) : this._onNavAnchorLinkClicked.bind(this, link)\n        }\n        title={link.title !== undefined ? link.title : link.name}\n        target={link.target}\n        rel={rel}\n        disabled={link.disabled}\n        aria-current={isSelectedLink ? ariaCurrent : undefined}\n        aria-label={link.ariaLabel ? link.ariaLabel : undefined}\n        link={link}\n      >\n        {onRenderLink(link)}\n      </LinkAs>\n    );\n  }\n\n  private _renderCompositeLink(link: INavLink, linkIndex: number, nestingLevel: number): React.ReactElement<{}> {\n    const divProps: React.HTMLProps<HTMLDivElement> = { ...getNativeProps(link, divProperties, ['onClick']) };\n    // eslint-disable-next-line deprecation/deprecation\n    const { expandButtonAriaLabel, styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isExpanded: !!link.isExpanded,\n      isSelected: this._isLinkSelected(link),\n      isLink: true,\n      isDisabled: link.disabled,\n      position: _indentationSize * nestingLevel + 1,\n      groups,\n    });\n\n    let finalExpandBtnAriaLabel = '';\n    if (link.links && link.links.length > 0) {\n      if (link.collapseAriaLabel || link.expandAriaLabel) {\n        finalExpandBtnAriaLabel = link.isExpanded ? link.collapseAriaLabel! : link.expandAriaLabel!;\n      } else {\n        // TODO remove when `expandButtonAriaLabel` is removed. This is not an ideal concatenation for localization.\n        finalExpandBtnAriaLabel = expandButtonAriaLabel ? `${link.name} ${expandButtonAriaLabel}` : link.name;\n      }\n    }\n\n    return (\n      <div {...divProps} key={link.key || linkIndex} className={classNames.compositeLink}>\n        {link.links && link.links.length > 0 ? (\n          <button\n            className={classNames.chevronButton}\n            onClick={this._onLinkExpandClicked.bind(this, link)}\n            aria-label={finalExpandBtnAriaLabel}\n            aria-expanded={link.isExpanded ? 'true' : 'false'}\n          >\n            <Icon className={classNames.chevronIcon} iconName=\"ChevronDown\" />\n          </button>\n        ) : null}\n        {this._renderNavLink(link, linkIndex, nestingLevel)}\n      </div>\n    );\n  }\n\n  private _renderLink(link: INavLink, linkIndex: number, nestingLevel: number): React.ReactElement<{}> {\n    const { styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, { theme: theme!, groups });\n\n    return (\n      <li key={link.key || linkIndex} role=\"listitem\" className={classNames.navItem}>\n        {this._renderCompositeLink(link, linkIndex, nestingLevel)}\n        {link.isExpanded ? this._renderLinks(link.links, ++nestingLevel) : null}\n      </li>\n    );\n  }\n\n  private _renderLinks(links: INavLink[] | undefined, nestingLevel: number): React.ReactElement<{}> | null {\n    if (!links || !links.length) {\n      return null;\n    }\n    const linkElements: React.ReactElement<{}>[] = links.map((link: INavLink, linkIndex: number) =>\n      this._renderLink(link, linkIndex, nestingLevel),\n    );\n\n    const { styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, { theme: theme!, groups });\n\n    return (\n      <ul role=\"list\" className={classNames.navItems}>\n        {linkElements}\n      </ul>\n    );\n  }\n\n  private _renderGroup = (group: INavLinkGroup, groupIndex: number): React.ReactElement<{}> => {\n    const { styles, groups, theme, onRenderGroupHeader = this._renderGroupHeader } = this.props;\n\n    const isExpanded = this._isGroupExpanded(group);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isGroup: true,\n      isExpanded,\n      groups,\n    });\n\n    const finalOnHeaderClick = (\n      ev?: React.MouseEvent<HTMLElement, MouseEvent> | undefined,\n      isCollapsing?: boolean | undefined,\n    ) => {\n      this._onGroupHeaderClicked(group, ev);\n    };\n\n    const groupProps: IRenderGroupHeaderProps = {\n      ...group,\n      isExpanded,\n      onHeaderClick: finalOnHeaderClick,\n    };\n\n    return (\n      <div key={groupIndex} className={classNames.group}>\n        {groupProps.name ? onRenderGroupHeader(groupProps, this._renderGroupHeader) : null}\n        <div className={classNames.groupContent}>{this._renderLinks(groupProps.links, 0 /* nestingLevel */)}</div>\n      </div>\n    );\n  };\n\n  private _renderGroupHeader = (group: IRenderGroupHeaderProps): React.ReactElement<{}> => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { styles, groups, theme, expandButtonAriaLabel } = this.props;\n\n    const { isExpanded } = group;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isGroup: true,\n      isExpanded,\n      groups,\n    });\n\n    const label = (isExpanded ? group.collapseAriaLabel : group.expandAriaLabel) || expandButtonAriaLabel;\n\n    const { onHeaderClick } = group;\n\n    const onClick = onHeaderClick\n      ? (ev?: React.MouseEvent<HTMLElement, MouseEvent> | undefined) => {\n          onHeaderClick(ev, isExpanded);\n        }\n      : undefined;\n\n    return (\n      <button className={classNames.chevronButton} onClick={onClick} aria-label={label} aria-expanded={isExpanded}>\n        <Icon className={classNames.chevronIcon} iconName=\"ChevronDown\" />\n        {group.name}\n      </button>\n    );\n  };\n\n  private _onGroupHeaderClicked(group: INavLinkGroup, ev?: React.MouseEvent<HTMLElement>): void {\n    if (group.onHeaderClick) {\n      group.onHeaderClick(ev, this._isGroupExpanded(group));\n    }\n\n    this._toggleCollapsed(group);\n\n    if (ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onLinkExpandClicked(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    const { onLinkExpandClick } = this.props;\n\n    if (onLinkExpandClick) {\n      onLinkExpandClick(ev, link);\n    }\n\n    if (!ev.defaultPrevented) {\n      link.isExpanded = !link.isExpanded;\n      // eslint-disable-next-line react/no-unused-state\n      this.setState({ isLinkExpandStateChanged: true });\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  private _preventBounce(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    if (!link.url && link.forceAnchor) {\n      ev.preventDefault();\n    }\n  }\n\n  private _onNavAnchorLinkClicked(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n\n    if (this.props.onLinkClick) {\n      this.props.onLinkClick(ev, link);\n    }\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({ selectedKey: link.key });\n  }\n\n  private _onNavButtonLinkClicked(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n\n    if (link.onClick) {\n      link.onClick(ev, link);\n    }\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({ selectedKey: link.key });\n  }\n\n  private _isLinkSelected(link: INavLink): boolean {\n    // if caller passes in selectedKey, use it as first choice or\n    // if current state.selectedKey (from addressbar) is match to the link or\n    // check if URL is matching location.href (if link.url exists)\n    if (this.props.selectedKey !== undefined) {\n      return link.key === this.props.selectedKey;\n    } else if (this.state.selectedKey !== undefined) {\n      return link.key === this.state.selectedKey;\n    } else if (typeof getWindow() === 'undefined' || !link.url) {\n      // resolve is not supported for ssr\n      return false;\n    } else {\n      // If selectedKey is undefined in props and state, then check URL\n      _urlResolver = _urlResolver || document.createElement('a');\n\n      _urlResolver.href = link.url || '';\n      const target: string = _urlResolver.href;\n\n      if (location.href === target) {\n        return true;\n      }\n\n      // If selectedKey is not defined in state, then check URL to determine link selected status\n      if (location.protocol + '//' + location.host + location.pathname === target) {\n        return true;\n      }\n\n      if (location.hash) {\n        // Match the hash to the url.\n        if (location.hash === link.url) {\n          return true;\n        }\n\n        // Match a rebased url. (e.g. #foo becomes http://hostname/foo)\n        _urlResolver.href = location.hash.substring(1);\n\n        return _urlResolver.href === target;\n      }\n    }\n\n    return false;\n  }\n\n  private _isGroupExpanded(group: INavLinkGroup): boolean {\n    if (group.name && this.state.isGroupCollapsed.hasOwnProperty(group.name)) {\n      return !this.state.isGroupCollapsed[group.name];\n    }\n    if (group.collapseByDefault !== undefined) {\n      return !group.collapseByDefault;\n    }\n    return true;\n  }\n\n  private _toggleCollapsed(group: INavLinkGroup): void {\n    if (group.name) {\n      const newGroupCollapsed = {\n        ...this.state.isGroupCollapsed, // Make a copy in order to not modify state\n        [group.name]: this._isGroupExpanded(group), // sic - presently open will be collapsed after setState\n      };\n      this.setState({ isGroupCollapsed: newGroupCollapsed });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}