{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, css, getId, EventGroup } from '../../Utilities';\nimport { SELECTION_CHANGE } from '../../utilities/selection/index';\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\nimport { List } from '../../List';\nvar DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nvar GroupedListSection =\n/** @class */\nfunction (_super) {\n  __extends(GroupedListSection, _super);\n\n  function GroupedListSection(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._list = React.createRef();\n    _this._subGroupRefs = {};\n    _this._droppingClassName = '';\n\n    _this._onRenderGroupHeader = function (props) {\n      return React.createElement(GroupHeader, __assign({}, props));\n    };\n\n    _this._onRenderGroupShowAll = function (props) {\n      return React.createElement(GroupShowAll, __assign({}, props));\n    };\n\n    _this._onRenderGroupFooter = function (props) {\n      return React.createElement(GroupFooter, __assign({}, props));\n    };\n\n    _this._renderSubGroup = function (subGroup, subGroupIndex) {\n      var _a = _this.props,\n          dragDropEvents = _a.dragDropEvents,\n          dragDropHelper = _a.dragDropHelper,\n          eventsToRegister = _a.eventsToRegister,\n          getGroupItemLimit = _a.getGroupItemLimit,\n          groupNestingDepth = _a.groupNestingDepth,\n          groupProps = _a.groupProps,\n          items = _a.items,\n          headerProps = _a.headerProps,\n          showAllProps = _a.showAllProps,\n          footerProps = _a.footerProps,\n          listProps = _a.listProps,\n          onRenderCell = _a.onRenderCell,\n          selection = _a.selection,\n          selectionMode = _a.selectionMode,\n          viewport = _a.viewport,\n          onRenderGroupHeader = _a.onRenderGroupHeader,\n          onRenderGroupShowAll = _a.onRenderGroupShowAll,\n          onRenderGroupFooter = _a.onRenderGroupFooter,\n          onShouldVirtualize = _a.onShouldVirtualize,\n          group = _a.group,\n          compact = _a.compact;\n      var nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n      return !subGroup || subGroup.count > 0 || groupProps && groupProps.showEmptyGroups ? React.createElement(GroupedListSection, {\n        ref: function (ref) {\n          return _this._subGroupRefs['subGroup_' + subGroupIndex] = ref;\n        },\n        key: _this._getGroupKey(subGroup, subGroupIndex),\n        dragDropEvents: dragDropEvents,\n        dragDropHelper: dragDropHelper,\n        eventsToRegister: eventsToRegister,\n        footerProps: footerProps,\n        getGroupItemLimit: getGroupItemLimit,\n        group: subGroup,\n        groupIndex: subGroupIndex,\n        groupNestingDepth: nestingDepth,\n        groupProps: groupProps,\n        headerProps: headerProps,\n        items: items,\n        listProps: listProps,\n        onRenderCell: onRenderCell,\n        selection: selection,\n        selectionMode: selectionMode,\n        showAllProps: showAllProps,\n        viewport: viewport,\n        onRenderGroupHeader: onRenderGroupHeader,\n        onRenderGroupShowAll: onRenderGroupShowAll,\n        onRenderGroupFooter: onRenderGroupFooter,\n        onShouldVirtualize: onShouldVirtualize,\n        groups: group ? group.children : [],\n        compact: compact\n      }) : null;\n    };\n    /**\n     * collect all the data we need to enable drag/drop for a group\n     */\n\n\n    _this._getGroupDragDropOptions = function () {\n      var _a = _this.props,\n          group = _a.group,\n          groupIndex = _a.groupIndex,\n          dragDropEvents = _a.dragDropEvents,\n          eventsToRegister = _a.eventsToRegister;\n      var options = {\n        eventMap: eventsToRegister,\n        selectionIndex: -1,\n        context: {\n          data: group,\n          index: groupIndex,\n          isGroup: true\n        },\n        updateDropState: _this._updateDroppingState,\n        canDrag: dragDropEvents.canDrag,\n        canDrop: dragDropEvents.canDrop,\n        onDrop: dragDropEvents.onDrop,\n        onDragStart: dragDropEvents.onDragStart,\n        onDragEnter: dragDropEvents.onDragEnter,\n        onDragLeave: dragDropEvents.onDragLeave,\n        onDragEnd: dragDropEvents.onDragEnd,\n        onDragOver: dragDropEvents.onDragOver\n      };\n      return options;\n    };\n    /**\n     * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n     *\n     * @param newValue - new isDropping state value\n     * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n     */\n\n\n    _this._updateDroppingState = function (newIsDropping, event) {\n      var isDropping = _this.state.isDropping;\n      var _a = _this.props,\n          dragDropEvents = _a.dragDropEvents,\n          group = _a.group;\n\n      if (isDropping !== newIsDropping) {\n        if (isDropping) {\n          if (dragDropEvents && dragDropEvents.onDragLeave) {\n            dragDropEvents.onDragLeave(group, event);\n          }\n        } else {\n          if (dragDropEvents && dragDropEvents.onDragEnter) {\n            _this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n          }\n        }\n\n        _this.setState({\n          isDropping: newIsDropping\n        });\n      }\n    };\n\n    var selection = props.selection,\n        group = props.group;\n    initializeComponentRef(_this);\n    _this._id = getId('GroupedListSection');\n    _this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false\n    };\n    _this._events = new EventGroup(_this);\n    return _this;\n  }\n\n  GroupedListSection.prototype.componentDidMount = function () {\n    var _a = this.props,\n        dragDropHelper = _a.dragDropHelper,\n        selection = _a.selection;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  };\n\n  GroupedListSection.prototype.componentWillUnmount = function () {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  };\n\n  GroupedListSection.prototype.componentDidUpdate = function (previousProps) {\n    if (this.props.group !== previousProps.group || this.props.groupIndex !== previousProps.groupIndex || this.props.dragDropHelper !== previousProps.dragDropHelper) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\n      }\n    }\n  };\n\n  GroupedListSection.prototype.render = function () {\n    var _a = this.props,\n        getGroupItemLimit = _a.getGroupItemLimit,\n        group = _a.group,\n        groupIndex = _a.groupIndex,\n        headerProps = _a.headerProps,\n        showAllProps = _a.showAllProps,\n        footerProps = _a.footerProps,\n        viewport = _a.viewport,\n        selectionMode = _a.selectionMode,\n        _b = _a.onRenderGroupHeader,\n        onRenderGroupHeader = _b === void 0 ? this._onRenderGroupHeader : _b,\n        _c = _a.onRenderGroupShowAll,\n        onRenderGroupShowAll = _c === void 0 ? this._onRenderGroupShowAll : _c,\n        _d = _a.onRenderGroupFooter,\n        onRenderGroupFooter = _d === void 0 ? this._onRenderGroupFooter : _d,\n        onShouldVirtualize = _a.onShouldVirtualize,\n        groupedListClassNames = _a.groupedListClassNames,\n        groups = _a.groups,\n        compact = _a.compact,\n        _e = _a.listProps,\n        listProps = _e === void 0 ? {} : _e;\n    var isSelected = this.state.isSelected;\n    var renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    var isShowAllVisible = group && !group.children && !group.isCollapsed && !group.isShowingAll && (group.count > renderCount || group.hasMoreData);\n    var hasNestedGroups = group && group.children && group.children.length > 0;\n    var version = listProps.version;\n    var dividerProps = {\n      group: group,\n      groupIndex: groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected: isSelected,\n      selected: isSelected,\n      viewport: viewport,\n      selectionMode: selectionMode,\n      groups: groups,\n      compact: compact\n    };\n    var ariaControlsProps = {\n      groupedListId: this._id,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined\n    };\n\n    var groupHeaderProps = __assign(__assign(__assign({}, headerProps), dividerProps), ariaControlsProps);\n\n    var groupShowAllProps = __assign(__assign({}, showAllProps), dividerProps);\n\n    var groupFooterProps = __assign(__assign({}, footerProps), dividerProps);\n\n    var isDraggable = !!this.props.dragDropHelper && this._getGroupDragDropOptions().canDrag(group) && !!this.props.dragDropEvents.canDragGroups;\n    return React.createElement(\"div\", __assign({\n      ref: this._root\n    }, isDraggable && {\n      draggable: true\n    }, {\n      className: css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName()),\n      role: \"presentation\"\n    }), onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader), group && group.isCollapsed ? null : hasNestedGroups ? React.createElement(List, {\n      role: \"presentation\",\n      ref: this._list,\n      items: group ? group.children : [],\n      onRenderCell: this._renderSubGroup,\n      getItemCountForPage: this._returnOne,\n      onShouldVirtualize: onShouldVirtualize,\n      version: version,\n      id: this._id\n    }) : this._onRenderGroup(renderCount), group && group.isCollapsed ? null : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll), onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter));\n  };\n\n  GroupedListSection.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n\n    this.forceListUpdate();\n  };\n\n  GroupedListSection.prototype.forceListUpdate = function () {\n    var group = this.props.group;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        var subGroupCount = group.children.length;\n\n        for (var i = 0; i < subGroupCount; i++) {\n          var subGroup = this._list.current.pageRefs['subGroup_' + String(i)];\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      var subGroup = this._subGroupRefs['subGroup_' + String(0)];\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  };\n\n  GroupedListSection.prototype._onSelectionChange = function () {\n    var _a = this.props,\n        group = _a.group,\n        selection = _a.selection;\n\n    if (selection && group) {\n      var isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n      if (isSelected !== this.state.isSelected) {\n        this.setState({\n          isSelected: isSelected\n        });\n      }\n    }\n  };\n\n  GroupedListSection.prototype._onRenderGroupCell = function (onRenderCell, groupNestingDepth) {\n    return function (item, itemIndex) {\n      return onRenderCell(groupNestingDepth, item, itemIndex);\n    };\n  };\n\n  GroupedListSection.prototype._onRenderGroup = function (renderCount) {\n    var _a = this.props,\n        group = _a.group,\n        items = _a.items,\n        onRenderCell = _a.onRenderCell,\n        listProps = _a.listProps,\n        groupNestingDepth = _a.groupNestingDepth,\n        onShouldVirtualize = _a.onShouldVirtualize,\n        groupProps = _a.groupProps;\n    var count = group && !group.isShowingAll ? group.count : items.length;\n    var startIndex = group ? group.startIndex : 0;\n    return React.createElement(List, __assign({\n      role: groupProps && groupProps.role ? groupProps.role : 'presentation',\n      items: items,\n      onRenderCell: this._onRenderGroupCell(onRenderCell, groupNestingDepth),\n      ref: this._list,\n      renderCount: Math.min(count, renderCount),\n      startIndex: startIndex,\n      onShouldVirtualize: onShouldVirtualize,\n      id: this._id\n    }, listProps));\n  };\n\n  GroupedListSection.prototype._returnOne = function () {\n    return 1;\n  };\n\n  GroupedListSection.prototype._getGroupKey = function (group, index) {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  };\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n\n\n  GroupedListSection.prototype._getDroppingClassName = function () {\n    var isDropping = this.state.isDropping;\n    var _a = this.props,\n        group = _a.group,\n        groupedListClassNames = _a.groupedListClassNames;\n    isDropping = !!(group && isDropping);\n    return css(isDropping && this._droppingClassName, isDropping && DEFAULT_DROPPING_CSS_CLASS, isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping);\n  };\n\n  return GroupedListSection;\n}(React.Component);\n\nexport { GroupedListSection };","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","css","getId","EventGroup","SELECTION_CHANGE","GroupHeader","GroupShowAll","GroupFooter","List","DEFAULT_DROPPING_CSS_CLASS","__extends","props","_super","_this","createRef","__assign","subGroup","subGroupIndex","dragDropEvents","dragDropHelper","eventsToRegister","getGroupItemLimit","groupNestingDepth","groupProps","items","headerProps","showAllProps","footerProps","listProps","onRenderCell","selection","selectionMode","viewport","onRenderGroupHeader","onRenderGroupShowAll","onRenderGroupFooter","onShouldVirtualize","group","compact","nestingDepth","level","count","showEmptyGroups","GroupedListSection","ref","_subGroupRefs","key","_getGroupKey","groupIndex","groups","children","options","eventMap","selectionIndex","context","data","index","isGroup","updateDropState","_updateDroppingState","canDrag","canDrop","onDrop","onDragStart","onDragEnter","onDragLeave","onDragEnd","onDragOver","newIsDropping","event","isDropping","_droppingClassName","setState","_id","state","isSelected","isRangeSelected","startIndex","_events","_root","current","_dragDropSubscription","subscribe","_getGroupDragDropOptions","on","_onSelectionChange","dispose","previousProps","_b","_c","_d","groupedListClassNames","_e","renderCount","Infinity","isShowAllVisible","isCollapsed","isShowingAll","hasMoreData","hasNestedGroups","length","dividerProps","groupLevel","selected","ariaControlsProps","groupedListId","ariaSetSize","undefined","ariaPosInSet","groupHeaderProps","groupShowAllProps","groupFooterProps","isDraggable","canDragGroups","draggable","className","_getDroppingClassName","role","_onRenderGroupHeader","_list","_renderSubGroup","getItemCountForPage","_returnOne","version","id","_onRenderGroup","_onRenderGroupShowAll","_onRenderGroupFooter","forceUpdate","call","forceListUpdate","subGroupCount","i","pageRefs","String","item","itemIndex","_onRenderGroupCell","Math","min","groupIsDropping","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\GroupedList\\GroupedListSection.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\nimport { IGroupHeaderProps } from './GroupHeader.types';\nimport { IGroupFooterProps } from './GroupFooter.types';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\n\nimport { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../utilities/dragdrop/index';\n\nimport { IProcessedStyleSet } from '../../Styling';\nimport { initializeComponentRef, IRenderFunction, IDisposable, css, getId, EventGroup } from '../../Utilities';\n\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/index';\n\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\n\nimport { List } from '../../List';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { IViewport } from '../../utilities/decorators/withViewport';\nimport { IListProps } from '../List/index';\n\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\n  /** GroupedList resolved class names */\n  groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /** Whether to render in compact mode */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Information to pass in to the group Show All footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Override for rendering the group Show All link. */\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n  isSelected?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\n  private _root = React.createRef<HTMLDivElement>();\n  private _list = React.createRef<List>();\n  private _subGroupRefs: Record<string, GroupedListSection | null> = {};\n  private _id: string;\n  private _events: EventGroup;\n\n  private _dragDropSubscription: IDisposable;\n  private _droppingClassName: string = '';\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    const { selection, group } = props;\n\n    initializeComponentRef(this);\n\n    this._id = getId('GroupedListSection');\n\n    this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,\n    };\n\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper, selection } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getGroupDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  }\n\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\n    if (\n      this.props.group !== previousProps.group ||\n      this.props.groupIndex !== previousProps.groupIndex ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getGroupDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      showAllProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\n      onRenderGroupFooter = this._onRenderGroupFooter,\n      onShouldVirtualize,\n      groupedListClassNames,\n      groups,\n      compact,\n      listProps = {},\n    } = this.props;\n    const { isSelected } = this.state;\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    const isShowAllVisible =\n      group &&\n      !group.children &&\n      !group.isCollapsed &&\n      !group.isShowingAll &&\n      (group.count > renderCount || group.hasMoreData);\n    const hasNestedGroups = group && group.children && group.children.length > 0;\n\n    const { version } = listProps;\n\n    const dividerProps: IGroupDividerProps = {\n      group,\n      groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected,\n      selected: isSelected,\n      viewport,\n      selectionMode,\n      groups,\n      compact,\n    };\n\n    const ariaControlsProps: IGroupHeaderProps = {\n      groupedListId: this._id,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,\n    };\n\n    const groupHeaderProps: IGroupHeaderProps = { ...headerProps, ...dividerProps, ...ariaControlsProps };\n    const groupShowAllProps: IGroupShowAllProps = { ...showAllProps, ...dividerProps };\n    const groupFooterProps: IGroupFooterProps = { ...footerProps, ...dividerProps };\n\n    const isDraggable: boolean =\n      !!this.props.dragDropHelper &&\n      this._getGroupDragDropOptions().canDrag!(group) &&\n      !!this.props.dragDropEvents!.canDragGroups;\n\n    return (\n      <div\n        ref={this._root}\n        {...(isDraggable && { draggable: true })}\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\n        role=\"presentation\"\n      >\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\n          <List\n            role=\"presentation\"\n            ref={this._list}\n            items={group ? group.children : []}\n            onRenderCell={this._renderSubGroup}\n            getItemCountForPage={this._returnOne}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            id={this._id}\n          />\n        ) : (\n          this._onRenderGroup(renderCount)\n        )}\n        {group && group.isCollapsed\n          ? null\n          : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    const { group } = this.props;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        const subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          const subGroup = this._list.current.pageRefs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      const subGroup = this._subGroupRefs['subGroup_' + String(0)];\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n    return <GroupHeader {...props} />;\n  };\n\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n    return <GroupShowAll {...props} />;\n  };\n\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\n    return <GroupFooter {...props} />;\n  };\n\n  private _onSelectionChange(): void {\n    const { group, selection } = this.props;\n    if (selection && group) {\n      const isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n      if (isSelected !== this.state.isSelected) {\n        this.setState({ isSelected });\n      }\n    }\n  }\n\n  private _onRenderGroupCell(\n    onRenderCell: any,\n    groupNestingDepth: number | undefined,\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\n      return onRenderCell(groupNestingDepth, item, itemIndex);\n    };\n  }\n\n  private _onRenderGroup(renderCount: number): JSX.Element {\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize, groupProps } = this.props;\n    const count = group && !group.isShowingAll ? group.count : items.length;\n    const startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        role={groupProps && groupProps.role ? groupProps.role : 'presentation'}\n        items={items}\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth)}\n        ref={this._list}\n        renderCount={Math.min(count, renderCount)}\n        startIndex={startIndex}\n        onShouldVirtualize={onShouldVirtualize}\n        id={this._id}\n        {...listProps}\n      />\n    );\n  }\n\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      groupProps,\n      items,\n      headerProps,\n      showAllProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport,\n      onRenderGroupHeader,\n      onRenderGroupShowAll,\n      onRenderGroupFooter,\n      onShouldVirtualize,\n      group,\n      compact,\n    } = this.props;\n\n    const nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\n      <GroupedListSection\n        ref={ref => (this._subGroupRefs['subGroup_' + subGroupIndex] = ref)}\n        key={this._getGroupKey(subGroup, subGroupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={getGroupItemLimit}\n        group={subGroup}\n        groupIndex={subGroupIndex}\n        groupNestingDepth={nestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        items={items}\n        listProps={listProps}\n        onRenderCell={onRenderCell}\n        selection={selection}\n        selectionMode={selectionMode}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onRenderGroupHeader={onRenderGroupHeader}\n        onRenderGroupShowAll={onRenderGroupShowAll}\n        onRenderGroupFooter={onRenderGroupFooter}\n        onShouldVirtualize={onShouldVirtualize}\n        groups={group ? group.children : []}\n        compact={compact}\n      />\n    ) : null;\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      updateDropState: this._updateDroppingState,\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDrop: dragDropEvents!.onDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      onDragEnter: dragDropEvents!.onDragEnter,\n      onDragLeave: dragDropEvents!.onDragLeave,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n    return options as IDragDropOptions;\n  };\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @param newValue - new isDropping state value\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, group } = this.props;\n\n    if (isDropping !== newIsDropping) {\n      if (isDropping) {\n        if (dragDropEvents && dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(group, event);\n        }\n      } else {\n        if (dragDropEvents && dragDropEvents.onDragEnter) {\n          this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n        }\n      }\n\n      this.setState({ isDropping: newIsDropping });\n    }\n  };\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    const { group, groupedListClassNames } = this.props;\n\n    isDropping = !!(group && isDropping);\n\n    return css(\n      isDropping && this._droppingClassName,\n      isDropping && DEFAULT_DROPPING_CSS_CLASS,\n      isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping,\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}