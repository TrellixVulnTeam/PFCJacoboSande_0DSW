{"ast":null,"code":"import { __assign, __decorate, __extends, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, FocusRects, Async, KeyCodes, elementContains, getRTLSafeKeyCode, classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { CheckboxVisibility, ColumnActionsMode, ConstrainMode, DetailsListLayoutMode, ColumnDragEndLocation } from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../utilities/selection/index';\nimport { DragDropHelper } from '../../utilities/dragdrop/DragDropHelper';\nimport { GroupedList } from '../../GroupedList';\nimport { List } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles'; // For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\n\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction } from '@uifabric/utilities';\nimport { useConst } from '@uifabric/react-hooks';\nvar getClassNames = classNamesFunction();\nvar MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nvar DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nvar DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\n\nvar DetailsListInner = function DetailsListInner(props) {\n  var selection = props.selection;\n  var ariaLabelForListHeader = props.ariaLabelForListHeader,\n      ariaLabelForSelectAllCheckbox = props.ariaLabelForSelectAllCheckbox,\n      ariaLabelForSelectionColumn = props.ariaLabelForSelectionColumn,\n      className = props.className,\n      checkboxVisibility = props.checkboxVisibility,\n      compact = props.compact,\n      constrainMode = props.constrainMode,\n      dragDropEvents = props.dragDropEvents,\n      groups = props.groups,\n      groupProps = props.groupProps,\n      indentWidth = props.indentWidth,\n      items = props.items,\n      isPlaceholderData = props.isPlaceholderData,\n      isHeaderVisible = props.isHeaderVisible,\n      layoutMode = props.layoutMode,\n      onItemInvoked = props.onItemInvoked,\n      onItemContextMenu = props.onItemContextMenu,\n      onColumnHeaderClick = props.onColumnHeaderClick,\n      onColumnHeaderContextMenu = props.onColumnHeaderContextMenu,\n      _a = props.selectionMode,\n      selectionMode = _a === void 0 ? selection.mode : _a,\n      selectionPreservedOnEmptyClick = props.selectionPreservedOnEmptyClick,\n      selectionZoneProps = props.selectionZoneProps,\n      ariaLabel = props.ariaLabel,\n      ariaLabelForGrid = props.ariaLabelForGrid,\n      rowElementEventMap = props.rowElementEventMap,\n      _b = props.shouldApplyApplicationRole,\n      shouldApplyApplicationRole = _b === void 0 ? false : _b,\n      getKey = props.getKey,\n      listProps = props.listProps,\n      usePageCache = props.usePageCache,\n      onShouldVirtualize = props.onShouldVirtualize,\n      viewport = props.viewport,\n      minimumPixelsForDrag = props.minimumPixelsForDrag,\n      getGroupHeight = props.getGroupHeight,\n      styles = props.styles,\n      theme = props.theme,\n      _c = props.cellStyleProps,\n      cellStyleProps = _c === void 0 ? DEFAULT_CELL_STYLE_PROPS : _c,\n      onRenderCheckbox = props.onRenderCheckbox,\n      useFastIcons = props.useFastIcons,\n      dragDropHelper = props.dragDropHelper,\n      adjustedColumns = props.adjustedColumns,\n      isCollapsed = props.isCollapsed,\n      isSizing = props.isSizing,\n      isSomeGroupExpanded = props.isSomeGroupExpanded,\n      version = props.version,\n      rootRef = props.rootRef,\n      listRef = props.listRef,\n      focusZoneRef = props.focusZoneRef,\n      columnReorderOptions = props.columnReorderOptions,\n      groupedListRef = props.groupedListRef,\n      headerRef = props.headerRef,\n      onGroupExpandStateChanged = props.onGroupExpandStateChanged,\n      onColumnIsSizingChanged = props.onColumnIsSizingChanged,\n      onRowDidMount = props.onRowDidMount,\n      onRowWillUnmount = props.onRowWillUnmount,\n      disableSelectionZone = props.disableSelectionZone,\n      onColumnResized = props.onColumnResized,\n      onColumnAutoResized = props.onColumnAutoResized,\n      onToggleCollapse = props.onToggleCollapse,\n      onActiveRowChanged = props.onActiveRowChanged,\n      onBlur = props.onBlur,\n      eventsToRegister = props.rowElementEventMap,\n      onRenderMissingItem = props.onRenderMissingItem,\n      onRenderItemColumn = props.onRenderItemColumn,\n      getCellValueKey = props.getCellValueKey,\n      getRowAriaLabel = props.getRowAriaLabel,\n      getRowAriaDescribedBy = props.getRowAriaDescribedBy,\n      checkButtonAriaLabel = props.checkButtonAriaLabel,\n      checkboxCellClassName = props.checkboxCellClassName,\n      useReducedRowRenderer = props.useReducedRowRenderer,\n      enableUpdateAnimations = props.enableUpdateAnimations,\n      enterModalSelectionOnTouch = props.enterModalSelectionOnTouch,\n      onRenderDefaultRow = props.onRenderDefaultRow,\n      selectionZoneRef = props.selectionZoneRef;\n  var groupNestingDepth = getGroupNestingDepth(groups);\n  var additionalListProps = React.useMemo(function () {\n    return __assign({\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey: getKey,\n      version: version\n    }, listProps);\n  }, [isSizing, getKey, version, listProps]);\n  var selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    var isCollapsedGroupSelectVisible = groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n\n    var isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  var defaultOnRenderDetailsHeader = React.useCallback(function (detailsHeaderProps) {\n    return React.createElement(DetailsHeader, __assign({}, detailsHeaderProps));\n  }, []);\n  var defaultOnRenderDetailsFooter = React.useCallback(function () {\n    return null;\n  }, []);\n  var propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n  var onRenderDetailsHeader = React.useMemo(function () {\n    return propsOnRenderDetailsHeader ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader) : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n  var propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n  var onRenderDetailsFooter = React.useMemo(function () {\n    return propsOnRenderDetailsFooter ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter) : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n  var detailsFooterProps = React.useMemo(function () {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth: groupNestingDepth,\n      selection: selection,\n      selectionMode: selectionMode,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps\n    };\n  }, [adjustedColumns, groupNestingDepth, selection, selectionMode, viewport, checkboxVisibility, indentWidth, cellStyleProps]);\n  var columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n  var onColumnDragEnd = React.useCallback(function (_a, event) {\n    var dropLocation = _a.dropLocation;\n    var finalDropLocation = ColumnDragEndLocation.outside;\n\n    if (columnReorderOnDragEnd) {\n      if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n        finalDropLocation = dropLocation;\n      } else if (rootRef.current) {\n        var clientRect = rootRef.current.getBoundingClientRect();\n\n        if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n          finalDropLocation = ColumnDragEndLocation.surface;\n        }\n      }\n\n      columnReorderOnDragEnd(finalDropLocation);\n    }\n  }, [columnReorderOnDragEnd, rootRef]);\n  var columnReorderProps = React.useMemo(function () {\n    if (columnReorderOptions) {\n      return __assign(__assign({}, columnReorderOptions), {\n        onColumnDragEnd: onColumnDragEnd\n      });\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n  var rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  var colCount = (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) + (adjustedColumns ? adjustedColumns.length : 0) + (groups ? 1 : 0);\n  var classNames = React.useMemo(function () {\n    return getClassNames(styles, {\n      theme: theme,\n      compact: compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className: className\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n  var onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n  var finalOnRenderDetailsGroupFooter = React.useMemo(function () {\n    return onRenderDetailsGroupFooter ? function (groupFooterProps, defaultRender) {\n      return onRenderDetailsGroupFooter(__assign(__assign({}, groupFooterProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: selectionMode,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps\n      }), defaultRender);\n    } : undefined;\n  }, [onRenderDetailsGroupFooter, adjustedColumns, groupNestingDepth, indentWidth, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps]);\n  var onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n  var finalOnRenderDetailsGroupHeader = React.useMemo(function () {\n    return onRenderDetailsGroupHeader ? function (groupHeaderProps, defaultRender) {\n      return onRenderDetailsGroupHeader(__assign(__assign({}, groupHeaderProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: selectionMode,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps,\n        ariaColSpan: adjustedColumns.length\n      }), defaultRender);\n    } : function (groupHeaderProps, defaultRender) {\n      return defaultRender(__assign(__assign({}, groupHeaderProps), {\n        ariaColSpan: adjustedColumns.length\n      }));\n    };\n  }, [onRenderDetailsGroupHeader, adjustedColumns, groupNestingDepth, indentWidth, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps]);\n  var finalGroupProps = React.useMemo(function () {\n    return __assign(__assign({}, groupProps), {\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader\n    });\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader]);\n  var sumColumnWidths = useConst(function () {\n    return memoizeFunction(function (columns) {\n      var totalWidth = 0;\n      columns.forEach(function (column) {\n        return totalWidth += column.calculatedWidth || column.minWidth;\n      });\n      return totalWidth;\n    });\n  });\n  var collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n  var rowWidth = React.useMemo(function () {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n  var onRenderCell = React.useCallback(function (nestingDepth, item, index) {\n    var finalOnRenderRow = props.onRenderRow ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow) : onRenderDefaultRow;\n    var rowProps = {\n      item: item,\n      itemIndex: index,\n      compact: compact,\n      columns: adjustedColumns,\n      groupNestingDepth: nestingDepth,\n      selectionMode: selectionMode,\n      selection: selection,\n      onDidMount: onRowDidMount,\n      onWillUnmount: onRowWillUnmount,\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey,\n      eventsToRegister: eventsToRegister,\n      dragDropEvents: dragDropEvents,\n      dragDropHelper: dragDropHelper,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      collapseAllVisibility: collapseAllVisibility,\n      getRowAriaLabel: getRowAriaLabel,\n      getRowAriaDescribedBy: getRowAriaDescribedBy,\n      checkButtonAriaLabel: checkButtonAriaLabel,\n      checkboxCellClassName: checkboxCellClassName,\n      useReducedRowRenderer: useReducedRowRenderer,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps,\n      onRenderDetailsCheckbox: onRenderCheckbox,\n      enableUpdateAnimations: enableUpdateAnimations,\n      rowWidth: rowWidth,\n      useFastIcons: useFastIcons\n    };\n\n    if (!item) {\n      if (onRenderMissingItem) {\n        return onRenderMissingItem(index, rowProps);\n      }\n\n      return null;\n    }\n\n    return finalOnRenderRow(rowProps);\n  }, [compact, adjustedColumns, selectionMode, selection, onRowDidMount, onRowWillUnmount, onRenderItemColumn, getCellValueKey, eventsToRegister, dragDropEvents, dragDropHelper, viewport, checkboxVisibility, collapseAllVisibility, getRowAriaLabel, getRowAriaDescribedBy, checkButtonAriaLabel, checkboxCellClassName, useReducedRowRenderer, indentWidth, cellStyleProps, onRenderCheckbox, enableUpdateAnimations, useFastIcons, onRenderDefaultRow, onRenderMissingItem, props.onRenderRow, rowWidth]);\n  var onRenderListCell = React.useCallback(function (nestingDepth) {\n    return function (item, itemIndex) {\n      return onRenderCell(nestingDepth, item, itemIndex);\n    };\n  }, [onRenderCell]);\n  var isRightArrow = React.useCallback(function (event) {\n    return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n  }, [theme]);\n  var focusZoneProps = {\n    componentRef: focusZoneRef,\n    className: classNames.focusZone,\n    direction: FocusZoneDirection.vertical,\n    shouldEnterInnerZone: isRightArrow,\n    onActiveElementChanged: onActiveRowChanged,\n    shouldRaiseClicks: false,\n    onBlur: onBlur\n  };\n  var list = groups ? React.createElement(GroupedList, {\n    focusZoneProps: focusZoneProps,\n    componentRef: groupedListRef,\n    groups: groups,\n    groupProps: finalGroupProps,\n    items: items,\n    onRenderCell: onRenderCell,\n    role: \"presentation\",\n    selection: selection,\n    selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n    dragDropEvents: dragDropEvents,\n    dragDropHelper: dragDropHelper,\n    eventsToRegister: rowElementEventMap,\n    listProps: additionalListProps,\n    onGroupExpandStateChanged: onGroupExpandStateChanged,\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize,\n    getGroupHeight: getGroupHeight,\n    compact: compact\n  }) : React.createElement(FocusZone, __assign({}, focusZoneProps), React.createElement(List, __assign({\n    ref: listRef,\n    role: \"presentation\",\n    items: items,\n    onRenderCell: onRenderListCell(0),\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize\n  }, additionalListProps)));\n  var onHeaderKeyDown = React.useCallback(function (ev) {\n    if (ev.which === KeyCodes.down) {\n      if (focusZoneRef.current && focusZoneRef.current.focus()) {\n        // select the first item in list after down arrow key event\n        // only if nothing was selected; otherwise start with the already-selected item\n        if (selection.getSelectedIndices().length === 0) {\n          selection.setIndexSelected(0, true, false);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [selection, focusZoneRef]);\n  var onContentKeyDown = React.useCallback(function (ev) {\n    if (ev.which === KeyCodes.up && !ev.altKey) {\n      if (headerRef.current && headerRef.current.focus()) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [headerRef]);\n  return (// If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n    // with JAWS.\n    React.createElement(\"div\", __assign({\n      ref: rootRef,\n      className: classNames.root,\n      \"data-automationid\": \"DetailsList\",\n      \"data-is-scrollable\": \"false\",\n      \"aria-label\": ariaLabel\n    }, shouldApplyApplicationRole ? {\n      role: 'application'\n    } : {}), React.createElement(FocusRects, null), React.createElement(\"div\", {\n      role: \"grid\",\n      \"aria-label\": ariaLabelForGrid,\n      \"aria-rowcount\": isPlaceholderData ? -1 : rowCount,\n      \"aria-colcount\": colCount,\n      \"aria-readonly\": \"true\",\n      \"aria-busy\": isPlaceholderData\n    }, React.createElement(\"div\", {\n      onKeyDown: onHeaderKeyDown,\n      role: \"presentation\",\n      className: classNames.headerWrapper\n    }, isHeaderVisible && onRenderDetailsHeader({\n      componentRef: headerRef,\n      selectionMode: selectionMode,\n      layoutMode: layoutMode,\n      selection: selection,\n      columns: adjustedColumns,\n      onColumnClick: onColumnHeaderClick,\n      onColumnContextMenu: onColumnHeaderContextMenu,\n      onColumnResized: onColumnResized,\n      onColumnIsSizingChanged: onColumnIsSizingChanged,\n      onColumnAutoResized: onColumnAutoResized,\n      groupNestingDepth: groupNestingDepth,\n      isAllCollapsed: isCollapsed,\n      onToggleCollapseAll: onToggleCollapse,\n      ariaLabel: ariaLabelForListHeader,\n      ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n      ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n      selectAllVisibility: selectAllVisibility,\n      collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n      viewport: viewport,\n      columnReorderProps: columnReorderProps,\n      minimumPixelsForDrag: minimumPixelsForDrag,\n      cellStyleProps: cellStyleProps,\n      checkboxVisibility: checkboxVisibility,\n      indentWidth: indentWidth,\n      onRenderDetailsCheckbox: onRenderCheckbox,\n      rowWidth: sumColumnWidths(adjustedColumns),\n      useFastIcons: useFastIcons\n    }, onRenderDetailsHeader)), React.createElement(\"div\", {\n      onKeyDown: onContentKeyDown,\n      role: \"presentation\",\n      className: classNames.contentWrapper\n    }, !disableSelectionZone ? React.createElement(SelectionZone, __assign({\n      ref: selectionZoneRef,\n      selection: selection,\n      selectionPreservedOnEmptyClick: selectionPreservedOnEmptyClick,\n      selectionMode: selectionMode,\n      onItemInvoked: onItemInvoked,\n      onItemContextMenu: onItemContextMenu,\n      enterModalOnTouch: enterModalSelectionOnTouch\n    }, selectionZoneProps || {}), list) : list), onRenderDetailsFooter(__assign({}, detailsFooterProps))))\n  );\n};\n\nvar DetailsListBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsListBase, _super);\n\n  function DetailsListBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._header = React.createRef();\n    _this._groupedList = React.createRef();\n    _this._list = React.createRef();\n    _this._focusZone = React.createRef();\n    _this._selectionZone = React.createRef();\n\n    _this._onRenderRow = function (props, defaultRender) {\n      return React.createElement(DetailsRow, __assign({}, props));\n    };\n\n    _this._getDerivedStateFromProps = function (nextProps, previousState) {\n      var _a = _this.props,\n          checkboxVisibility = _a.checkboxVisibility,\n          items = _a.items,\n          setKey = _a.setKey,\n          _b = _a.selectionMode,\n          selectionMode = _b === void 0 ? _this._selection.mode : _b,\n          columns = _a.columns,\n          viewport = _a.viewport,\n          compact = _a.compact,\n          dragDropEvents = _a.dragDropEvents;\n      var _c = (_this.props.groupProps || {}).isAllGroupsCollapsed,\n          isAllGroupsCollapsed = _c === void 0 ? undefined : _c;\n      var newViewportWidth = nextProps.viewport && nextProps.viewport.width || 0;\n      var oldViewportWidth = viewport && viewport.width || 0;\n      var shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n      var shouldForceUpdates = false;\n\n      if (nextProps.layoutMode !== _this.props.layoutMode) {\n        shouldForceUpdates = true;\n      }\n\n      var nextState = previousState;\n\n      if (shouldResetSelection) {\n        _this._initialFocusedIndex = nextProps.initialFocusedIndex; // reset focusedItemIndex when setKey changes\n\n        nextState = __assign(__assign({}, nextState), {\n          focusedItemIndex: _this._initialFocusedIndex !== undefined ? _this._initialFocusedIndex : -1\n        });\n      }\n\n      if (!_this.props.disableSelectionZone && nextProps.items !== items) {\n        _this._selection.setItems(nextProps.items, shouldResetSelection);\n      }\n\n      if (nextProps.checkboxVisibility !== checkboxVisibility || nextProps.columns !== columns || newViewportWidth !== oldViewportWidth || nextProps.compact !== compact) {\n        shouldForceUpdates = true;\n      }\n\n      nextState = __assign(__assign({}, nextState), _this._adjustColumns(nextProps, nextState, true));\n\n      if (nextProps.selectionMode !== selectionMode) {\n        shouldForceUpdates = true;\n      }\n\n      if (isAllGroupsCollapsed === undefined && nextProps.groupProps && nextProps.groupProps.isAllGroupsCollapsed !== undefined) {\n        nextState = __assign(__assign({}, nextState), {\n          isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n          isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed\n        });\n      }\n\n      if (nextProps.dragDropEvents !== dragDropEvents) {\n        _this._dragDropHelper && _this._dragDropHelper.dispose();\n        _this._dragDropHelper = nextProps.dragDropEvents ? new DragDropHelper({\n          selection: _this._selection,\n          minimumPixelsForDrag: nextProps.minimumPixelsForDrag\n        }) : undefined;\n        shouldForceUpdates = true;\n      }\n\n      if (shouldForceUpdates) {\n        nextState = __assign(__assign({}, nextState), {\n          version: {}\n        });\n      }\n\n      return nextState;\n    };\n\n    _this._onGroupExpandStateChanged = function (isSomeGroupExpanded) {\n      _this.setState({\n        isSomeGroupExpanded: isSomeGroupExpanded\n      });\n    };\n\n    _this._onColumnIsSizingChanged = function (column, isSizing) {\n      _this.setState({\n        isSizing: isSizing\n      });\n    };\n\n    _this._onRowDidMount = function (row) {\n      var _a = row.props,\n          item = _a.item,\n          itemIndex = _a.itemIndex;\n\n      var itemKey = _this._getItemKey(item, itemIndex);\n\n      _this._activeRows[itemKey] = row; // this is used for column auto resize\n\n      _this._setFocusToRowIfPending(row);\n\n      var onRowDidMount = _this.props.onRowDidMount;\n\n      if (onRowDidMount) {\n        onRowDidMount(item, itemIndex);\n      }\n    };\n\n    _this._onRowWillUnmount = function (row) {\n      var onRowWillUnmount = _this.props.onRowWillUnmount;\n      var _a = row.props,\n          item = _a.item,\n          itemIndex = _a.itemIndex;\n\n      var itemKey = _this._getItemKey(item, itemIndex);\n\n      delete _this._activeRows[itemKey];\n\n      if (onRowWillUnmount) {\n        onRowWillUnmount(item, itemIndex);\n      }\n    };\n\n    _this._onToggleCollapse = function (collapsed) {\n      _this.setState({\n        isCollapsed: collapsed\n      });\n\n      if (_this._groupedList.current) {\n        _this._groupedList.current.toggleCollapseAll(collapsed);\n      }\n    };\n\n    _this._onColumnResized = function (resizingColumn, newWidth, resizingColumnIndex) {\n      var newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n\n      if (_this.props.onColumnResize) {\n        _this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n      }\n\n      _this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n      _this.setState(__assign(__assign({}, _this._adjustColumns(_this.props, _this.state, true, resizingColumnIndex)), {\n        version: {}\n      }));\n    };\n    /**\n     * Callback function when double clicked on the details header column resizer\n     * which will measure the column cells of all the active rows and resize the\n     * column to the max cell width.\n     *\n     * @param column - double clicked column definition\n     * @param columnIndex - double clicked column index\n     * TODO: min width 100 should be changed to const value and should be consistent with the\n     * value used on _onSizerMove method in DetailsHeader\n     */\n\n\n    _this._onColumnAutoResized = function (column, columnIndex) {\n      var max = 0;\n      var count = 0;\n      var totalCount = Object.keys(_this._activeRows).length;\n\n      for (var key in _this._activeRows) {\n        if (_this._activeRows.hasOwnProperty(key)) {\n          var currentRow = _this._activeRows[key];\n          currentRow.measureCell(columnIndex, function (width) {\n            max = Math.max(max, width);\n            count++;\n\n            if (count === totalCount) {\n              _this._onColumnResized(column, max, columnIndex);\n            }\n          });\n        }\n      }\n    };\n    /**\n     * Call back function when an element in FocusZone becomes active. It will translate it into item\n     * and call onActiveItemChanged callback if specified.\n     *\n     * @param row - element that became active in Focus Zone\n     * @param focus - event from Focus Zone\n     */\n\n\n    _this._onActiveRowChanged = function (el, ev) {\n      var _a = _this.props,\n          items = _a.items,\n          onActiveItemChanged = _a.onActiveItemChanged;\n\n      if (!el) {\n        return;\n      } // Check and assign index only if the event was raised from any DetailsRow element\n\n\n      if (el.getAttribute('data-item-index')) {\n        var index = Number(el.getAttribute('data-item-index'));\n\n        if (index >= 0) {\n          if (onActiveItemChanged) {\n            onActiveItemChanged(items[index], index, ev);\n          }\n\n          _this.setState({\n            focusedItemIndex: index\n          });\n        }\n      }\n    };\n\n    _this._onBlur = function (event) {\n      _this.setState({\n        focusedItemIndex: -1\n      });\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._activeRows = {};\n    _this._columnOverrides = {};\n    _this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: _this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: _this._getDerivedStateFromProps\n    };\n    _this._selection = props.selection || new Selection({\n      onSelectionChanged: undefined,\n      getKey: props.getKey,\n      selectionMode: props.selectionMode\n    });\n\n    if (!_this.props.disableSelectionZone) {\n      _this._selection.setItems(props.items, false);\n    }\n\n    _this._dragDropHelper = props.dragDropEvents ? new DragDropHelper({\n      selection: _this._selection,\n      minimumPixelsForDrag: props.minimumPixelsForDrag\n    }) : undefined;\n    _this._initialFocusedIndex = props.initialFocusedIndex;\n    return _this;\n  }\n\n  DetailsListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  };\n\n  DetailsListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  };\n\n  DetailsListBase.prototype.focusIndex = function (index, forceIntoFirstElement, measureItem, scrollToMode) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    var item = this.props.items[index];\n\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      var itemKey = this._getItemKey(item, index);\n\n      var row = this._activeRows[itemKey];\n\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  };\n\n  DetailsListBase.prototype.getStartItemIndexInView = function () {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n\n    return 0;\n  };\n\n  DetailsListBase.prototype.componentWillUnmount = function () {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n\n    this._async.dispose();\n  };\n\n  DetailsListBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      var item = this.props.items[this._initialFocusedIndex];\n\n      if (item) {\n        var itemKey = this._getItemKey(item, this._initialFocusedIndex);\n\n        var row = this._activeRows[itemKey];\n\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (this.props.items !== prevProps.items && this.props.items.length > 0 && this.state.focusedItemIndex !== -1 && !elementContains(this._root.current, document.activeElement, false)) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      var index = this.state.focusedItemIndex < this.props.items.length ? this.state.focusedItemIndex : this.props.items.length - 1;\n      var item = this.props.items[index];\n\n      var itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n\n      var row = this._activeRows[itemKey];\n\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  };\n\n  DetailsListBase.prototype.render = function () {\n    return React.createElement(DetailsListInner, __assign({}, this.props, this.state, {\n      selection: this._selection,\n      dragDropHelper: this._dragDropHelper,\n      rootRef: this._root,\n      listRef: this._list,\n      groupedListRef: this._groupedList,\n      focusZoneRef: this._focusZone,\n      headerRef: this._header,\n      selectionZoneRef: this._selectionZone,\n      onGroupExpandStateChanged: this._onGroupExpandStateChanged,\n      onColumnIsSizingChanged: this._onColumnIsSizingChanged,\n      onRowDidMount: this._onRowDidMount,\n      onRowWillUnmount: this._onRowWillUnmount,\n      onColumnResized: this._onColumnResized,\n      onColumnAutoResized: this._onColumnAutoResized,\n      onToggleCollapse: this._onToggleCollapse,\n      onActiveRowChanged: this._onActiveRowChanged,\n      onBlur: this._onBlur,\n      onRenderDefaultRow: this._onRenderRow\n    }));\n  };\n\n  DetailsListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n\n    this._forceListUpdates();\n  };\n\n  DetailsListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.props.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  };\n\n  DetailsListBase.prototype._setFocusToRowIfPending = function (row) {\n    var itemIndex = row.props.itemIndex;\n\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n\n      delete this._initialFocusedIndex;\n    }\n  };\n\n  DetailsListBase.prototype._setFocusToRow = function (row, forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n\n    this._async.setTimeout(function () {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  };\n\n  DetailsListBase.prototype._forceListUpdates = function () {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  };\n\n  DetailsListBase.prototype._notifyColumnsResized = function () {\n    this.state.adjustedColumns.forEach(function (column) {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  };\n\n  DetailsListBase.prototype._adjustColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n\n    var viewport = this.props.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    return __assign(__assign({}, previousState), {\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth\n    });\n  };\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n\n\n  DetailsListBase.prototype._getAdjustedColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var _this = this;\n\n    var newItems = newProps.items,\n        layoutMode = newProps.layoutMode,\n        selectionMode = newProps.selectionMode,\n        viewport = newProps.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    var newColumns = newProps.columns;\n    var columns = this.props ? this.props.columns : [];\n    var lastWidth = previousState ? previousState.lastWidth : -1;\n    var lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (!forceUpdate && lastWidth === viewportWidth && lastSelectionMode === selectionMode && (!columns || newColumns === columns)) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n    var adjustedColumns;\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns); // Preserve adjusted column calculated widths.\n\n      adjustedColumns.forEach(function (column) {\n        _this._rememberCalculatedWidth(column, column.calculatedWidth);\n      });\n    } else {\n      if (resizingColumnIndex !== undefined) {\n        adjustedColumns = this._getJustifiedColumnsAfterResize(newColumns, viewportWidth, newProps, resizingColumnIndex);\n      } else {\n        adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps, 0);\n      }\n\n      adjustedColumns.forEach(function (column) {\n        _this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  };\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n\n\n  DetailsListBase.prototype._getFixedColumns = function (newColumns) {\n    var _this = this;\n\n    return newColumns.map(function (column) {\n      var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]);\n\n      if (!newColumn.calculatedWidth) {\n        newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n      }\n\n      return newColumn;\n    });\n  };\n\n  DetailsListBase.prototype._getJustifiedColumnsAfterResize = function (newColumns, viewportWidth, props, resizingColumnIndex) {\n    var _this = this;\n\n    var fixedColumns = newColumns.slice(0, resizingColumnIndex);\n    fixedColumns.forEach(function (column) {\n      return column.calculatedWidth = _this._getColumnOverride(column.key).currentWidth;\n    });\n    var fixedWidth = fixedColumns.reduce(function (total, column, i) {\n      return total + getPaddedWidth(column, i === 0, props);\n    }, 0);\n    var remainingColumns = newColumns.slice(resizingColumnIndex);\n    var remainingWidth = viewportWidth - fixedWidth;\n    return __spreadArrays(fixedColumns, this._getJustifiedColumns(remainingColumns, remainingWidth, props, resizingColumnIndex));\n  };\n  /** Builds a set of columns to fix within the viewport width. */\n\n\n  DetailsListBase.prototype._getJustifiedColumns = function (newColumns, viewportWidth, props, firstIndex) {\n    var _this = this;\n\n    var _a = props.selectionMode,\n        selectionMode = _a === void 0 ? this._selection.mode : _a,\n        checkboxVisibility = props.checkboxVisibility;\n    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    var groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    var totalWidth = 0; // offset because we have one less inner padding.\n\n    var availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    var adjustedColumns = newColumns.map(function (column, i) {\n      var newColumn = __assign(__assign(__assign({}, column), {\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH\n      }), _this._columnOverrides[column.key]);\n\n      var isFirst = i + firstIndex === 0;\n      totalWidth += getPaddedWidth(newColumn, isFirst, props);\n      return newColumn;\n    });\n    var lastIndex = adjustedColumns.length - 1; // Shrink or remove collapsable columns.\n\n    while (lastIndex > 0 && totalWidth > availableWidth) {\n      var column = adjustedColumns[lastIndex];\n      var minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      var overflowWidth = totalWidth - availableWidth; // eslint-disable-next-line deprecation/deprecation\n\n      if (column.calculatedWidth - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        var originalWidth = column.calculatedWidth;\n        column.calculatedWidth = Math.max(column.calculatedWidth - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, false, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n\n      lastIndex--;\n    } // Then expand columns starting at the beginning, until we've filled the width.\n\n\n    for (var i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      var column = adjustedColumns[i];\n      var isLast = i === adjustedColumns.length - 1;\n      var overrides = this._columnOverrides[column.key];\n\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      var spaceLeft = availableWidth - totalWidth;\n      var increment = void 0;\n\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        var maxWidth = column.maxWidth;\n        var minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = column.calculatedWidth + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  };\n\n  DetailsListBase.prototype._rememberCalculatedWidth = function (column, newCalculatedWidth) {\n    var overrides = this._getColumnOverride(column.key);\n\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  };\n\n  DetailsListBase.prototype._getColumnOverride = function (key) {\n    return this._columnOverrides[key] = this._columnOverrides[key] || {};\n  };\n\n  DetailsListBase.prototype._getItemKey = function (item, itemIndex) {\n    var getKey = this.props.getKey;\n    var itemKey = undefined;\n\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  };\n\n  DetailsListBase.defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true\n  };\n  DetailsListBase = __decorate([withViewport], DetailsListBase);\n  return DetailsListBase;\n}(React.Component);\n\nexport { DetailsListBase };\nexport function buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending, groupedColumnKey, isMultiline) {\n  var columns = [];\n\n  if (items && items.length) {\n    var firstItem = items[0];\n\n    for (var propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column, isFirst, props) {\n  var _a = props.cellStyleProps,\n      cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n  return column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n}\n\nfunction getGroupNestingDepth(groups) {\n  var level = 0;\n  var groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","FocusRects","Async","KeyCodes","elementContains","getRTLSafeKeyCode","classNamesFunction","memoizeFunction","CheckboxVisibility","ColumnActionsMode","ConstrainMode","DetailsListLayoutMode","ColumnDragEndLocation","DetailsHeader","SelectAllVisibility","DetailsRow","FocusZone","FocusZoneDirection","Selection","SelectionMode","SelectionZone","DragDropHelper","GroupedList","List","withViewport","GetGroupCount","DEFAULT_CELL_STYLE_PROPS","CHECK_CELL_WIDTH","CHECKBOX_WIDTH","SPACER_WIDTH","GROUP_EXPAND_WIDTH","composeRenderFunction","useConst","getClassNames","MIN_COLUMN_WIDTH","DEFAULT_RENDERED_WINDOWS_AHEAD","DEFAULT_RENDERED_WINDOWS_BEHIND","DetailsListInner","props","ariaLabelForSelectAllCheckbox","ariaLabelForSelectionColumn","className","checkboxVisibility","compact","constrainMode","dragDropEvents","groups","groupProps","indentWidth","items","isPlaceholderData","isHeaderVisible","layoutMode","onItemInvoked","onItemContextMenu","onColumnHeaderClick","onColumnHeaderContextMenu","_a","selectionMode","selectionPreservedOnEmptyClick","selectionZoneProps","ariaLabel","ariaLabelForGrid","rowElementEventMap","_b","shouldApplyApplicationRole","getKey","listProps","usePageCache","onShouldVirtualize","viewport","minimumPixelsForDrag","getGroupHeight","styles","theme","_c","cellStyleProps","onRenderCheckbox","useFastIcons","dragDropHelper","adjustedColumns","isCollapsed","isSizing","isSomeGroupExpanded","version","rootRef","listRef","focusZoneRef","columnReorderOptions","groupedListRef","headerRef","onGroupExpandStateChanged","onColumnIsSizingChanged","onRowDidMount","onRowWillUnmount","disableSelectionZone","onColumnResized","onColumnAutoResized","onToggleCollapse","onActiveRowChanged","onBlur","eventsToRegister","onRenderMissingItem","onRenderItemColumn","getCellValueKey","getRowAriaLabel","getRowAriaDescribedBy","checkButtonAriaLabel","checkboxCellClassName","useReducedRowRenderer","enableUpdateAnimations","enterModalSelectionOnTouch","onRenderDefaultRow","selectionZoneRef","groupNestingDepth","getGroupNestingDepth","additionalListProps","useMemo","renderedWindowsAhead","renderedWindowsBehind","selectAllVisibility","none","single","hidden","multiple","isCollapsedGroupSelectVisible","headerProps","undefined","isSelectAllVisible","visible","defaultOnRenderDetailsHeader","useCallback","detailsHeaderProps","__assign","defaultOnRenderDetailsFooter","propsOnRenderDetailsHeader","onRenderDetailsHeader","propsOnRenderDetailsFooter","onRenderDetailsFooter","detailsFooterProps","columns","selection","columnReorderOnDragEnd","onDragEnd","onColumnDragEnd","event","dropLocation","finalDropLocation","outside","header","current","clientRect","getBoundingClientRect","clientX","left","right","clientY","top","bottom","surface","columnReorderProps","rowCount","length","colCount","classNames","isFixed","fixedColumns","isHorizontalConstrained","horizontalConstrained","onRenderDetailsGroupFooter","onRenderFooter","finalOnRenderDetailsGroupFooter","groupFooterProps","defaultRender","onRenderDetailsGroupHeader","onRenderHeader","finalOnRenderDetailsGroupHeader","groupHeaderProps","ariaColSpan","finalGroupProps","sumColumnWidths","totalWidth","forEach","column","calculatedWidth","minWidth","collapseAllVisibility","rowWidth","onRenderCell","nestingDepth","item","index","finalOnRenderRow","onRenderRow","rowProps","itemIndex","onDidMount","onWillUnmount","onRenderDetailsCheckbox","onRenderListCell","isRightArrow","which","focusZoneProps","componentRef","focusZone","direction","vertical","shouldEnterInnerZone","onActiveElementChanged","shouldRaiseClicks","list","role","ref","onHeaderKeyDown","ev","down","focus","getSelectedIndices","setIndexSelected","preventDefault","stopPropagation","onContentKeyDown","up","altKey","root","onKeyDown","headerWrapper","onColumnClick","onColumnContextMenu","isAllCollapsed","onToggleCollapseAll","ariaLabelForListHeader","contentWrapper","enterModalOnTouch","__extends","_super","_this","createRef","nextProps","previousState","setKey","newViewportWidth","width","oldViewportWidth","shouldResetSelection","shouldForceUpdates","nextState","_initialFocusedIndex","initialFocusedIndex","focusedItemIndex","_selection","setItems","_adjustColumns","isAllGroupsCollapsed","_dragDropHelper","dispose","setState","row","itemKey","_getItemKey","_activeRows","_setFocusToRowIfPending","collapsed","_groupedList","toggleCollapseAll","resizingColumn","newWidth","resizingColumnIndex","newCalculatedWidth","Math","max","onColumnResize","_rememberCalculatedWidth","state","columnIndex","count","totalCount","Object","keys","key","hasOwnProperty","currentRow","measureCell","_onColumnResized","el","onActiveItemChanged","getAttribute","Number","_async","_columnOverrides","lastWidth","_getAdjustedColumns","getDerivedStateFromProps","_getDerivedStateFromProps","onSelectionChanged","DetailsListBase","measureItem","scrollToMode","_list","scrollToIndex","forceIntoFirstElement","_setFocusToRow","getStartItemIndexInView","prevProps","prevState","_notifyColumnsResized","_root","document","activeElement","onDidUpdate","_focusZone","_header","_selectionZone","_onGroupExpandStateChanged","_onColumnIsSizingChanged","_onRowDidMount","_onRowWillUnmount","_onColumnAutoResized","_onToggleCollapse","_onActiveRowChanged","_onBlur","_onRenderRow","forceUpdate","call","_forceListUpdates","level","groupsInLevel","children","ignoreNextFocus","setTimeout","currentWidth","newProps","viewportWidth","lastSelectionMode","newColumns","buildColumns","newItems","_getFixedColumns","_getJustifiedColumnsAfterResize","_getJustifiedColumns","_getColumnOverride","map","newColumn","maxWidth","slice","fixedWidth","reduce","total","i","getPaddedWidth","remainingColumns","remainingWidth","firstIndex","rowCheckWidth","groupExpandWidth","_getGroupNestingDepth","availableWidth","isFirst","lastIndex","overflowWidth","isCollapsible","isCollapsable","originalWidth","splice","isLast","overrides","spaceLeft","increment","min","justified","onHover","Component","canResizeColumns","sortedColumnKey","isSortedDescending","groupedColumnKey","isMultiline","firstItem","propName","push","name","fieldName","isSorted","isRowHeader","columnActionsMode","clickable","isResizable","isGrouped","cellLeftPadding","cellRightPadding","isPadded","cellExtraRightPadding"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\DetailsList\\DetailsList.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  IRenderFunction,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n  ColumnDragEndLocation,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport {\n  IDetailsHeader,\n  SelectAllVisibility,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport { IFocusZone, FocusZone, FocusZoneDirection, IFocusZoneProps } from '../../FocusZone';\nimport { IObjectWithKey, ISelection, Selection, SelectionMode, SelectionZone } from '../../utilities/selection/index';\n\nimport { DragDropHelper } from '../../utilities/dragdrop/DragDropHelper';\nimport { IGroupedList, GroupedList, IGroupDividerProps, IGroupRenderProps } from '../../GroupedList';\nimport { List, IListProps, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction } from '@uifabric/utilities';\nimport { useConst } from '@uifabric/react-hooks';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n  } = props;\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const rowProps: IDetailsRowProps = {\n        item: item,\n        itemIndex: index,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneProps: IFocusZoneProps = {\n    componentRef: focusZoneRef,\n    className: classNames.focusZone,\n    direction: FocusZoneDirection.vertical,\n    shouldEnterInnerZone: isRightArrow,\n    onActiveElementChanged: onActiveRowChanged,\n    shouldRaiseClicks: false,\n    onBlur: onBlur,\n  };\n\n  const list = groups ? (\n    <GroupedList\n      focusZoneProps={focusZoneProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n    // with JAWS.\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      aria-label={ariaLabel}\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role=\"grid\"\n        aria-label={ariaLabelForGrid}\n        aria-rowcount={isPlaceholderData ? -1 : rowCount}\n        aria-colcount={colCount}\n        aria-readonly=\"true\"\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode: selectionMode,\n                layoutMode: layoutMode!,\n                selection: selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized: onColumnResized,\n                onColumnIsSizingChanged: onColumnIsSizingChanged,\n                onColumnAutoResized: onColumnAutoResized,\n                groupNestingDepth: groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                selectAllVisibility: selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport: viewport,\n                columnReorderProps: columnReorderProps,\n                minimumPixelsForDrag: minimumPixelsForDrag,\n                cellStyleProps: cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      if (resizingColumnIndex !== undefined) {\n        adjustedColumns = this._getJustifiedColumnsAfterResize(\n          newColumns,\n          viewportWidth,\n          newProps,\n          resizingColumnIndex,\n        );\n      } else {\n        adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps, 0);\n      }\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[]): IColumn[] {\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      if (!newColumn.calculatedWidth) {\n        newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n      }\n\n      return newColumn;\n    });\n  }\n\n  private _getJustifiedColumnsAfterResize(\n    newColumns: IColumn[],\n    viewportWidth: number,\n    props: IDetailsListProps,\n    resizingColumnIndex: number,\n  ): IColumn[] {\n    const fixedColumns = newColumns.slice(0, resizingColumnIndex);\n    fixedColumns.forEach(column => (column.calculatedWidth = this._getColumnOverride(column.key).currentWidth));\n\n    const fixedWidth = fixedColumns.reduce((total, column, i) => total + getPaddedWidth(column, i === 0, props), 0);\n\n    const remainingColumns = newColumns.slice(resizingColumnIndex);\n    const remainingWidth = viewportWidth - fixedWidth;\n\n    return [\n      ...fixedColumns,\n      ...this._getJustifiedColumns(remainingColumns, remainingWidth, props, resizingColumnIndex),\n    ];\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(\n    newColumns: IColumn[],\n    viewportWidth: number,\n    props: IDetailsListProps,\n    firstIndex: number,\n  ): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const newColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n        ...this._columnOverrides[column.key],\n      };\n\n      const isFirst = i + firstIndex === 0;\n      totalWidth += getPaddedWidth(newColumn, isFirst, props);\n\n      return newColumn;\n    });\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex > 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, false, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, isFirst: boolean, props: IDetailsListProps): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    column.calculatedWidth! +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n"]},"metadata":{},"sourceType":"module"}