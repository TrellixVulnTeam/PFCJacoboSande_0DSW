{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, initializeComponentRef } from '../../Utilities';\nimport { Autofill } from '../../Autofill';\nimport * as stylesImport from './BaseExtendedPicker.scss';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\nvar styles = stylesImport;\n\nvar BaseExtendedPicker =\n/** @class */\nfunction (_super) {\n  __extends(BaseExtendedPicker, _super);\n\n  function BaseExtendedPicker(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this;\n\n    _this.floatingPicker = React.createRef();\n    _this.selectedItemsList = React.createRef();\n    _this.root = React.createRef();\n    _this.input = React.createRef();\n\n    _this.onSelectionChange = function () {\n      _this.forceUpdate();\n    };\n\n    _this.onInputChange = function (value, composing) {\n      // We don't want to update the picker's suggestions when the input is still being composed\n      if (!composing) {\n        _this.setState({\n          queryString: value\n        });\n\n        if (_this.floatingPicker.current) {\n          _this.floatingPicker.current.onQueryStringChanged(value);\n        }\n      }\n    };\n\n    _this.onInputFocus = function (ev) {\n      if (_this.selectedItemsList.current) {\n        _this.selectedItemsList.current.unselectAll();\n      }\n\n      if (_this.props.inputProps && _this.props.inputProps.onFocus) {\n        _this.props.inputProps.onFocus(ev);\n      }\n    };\n\n    _this.onInputClick = function (ev) {\n      if (_this.selectedItemsList.current) {\n        _this.selectedItemsList.current.unselectAll();\n      }\n\n      if (_this.floatingPicker.current && _this.inputElement) {\n        // Update the value if the input value is empty or is different than the current inputText from the floatingPicker\n        var shoudUpdateValue = _this.inputElement.value === '' || _this.inputElement.value !== _this.floatingPicker.current.inputText;\n\n        _this.floatingPicker.current.showPicker(shoudUpdateValue);\n      }\n    }; // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n    // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n\n\n    _this.onBackspace = function (ev) {\n      if (ev.which !== KeyCodes.backspace) {\n        return;\n      }\n\n      if (_this.selectedItemsList.current && _this.items.length) {\n        if (_this.input.current && !_this.input.current.isValueSelected && _this.input.current.inputElement === document.activeElement && _this.input.current.cursorLocation === 0) {\n          if (_this.floatingPicker.current) {\n            _this.floatingPicker.current.hidePicker();\n          }\n\n          ev.preventDefault();\n\n          _this.selectedItemsList.current.removeItemAt(_this.items.length - 1);\n\n          _this._onSelectedItemsChanged();\n        } else if (_this.selectedItemsList.current.hasSelectedItems()) {\n          if (_this.floatingPicker.current) {\n            _this.floatingPicker.current.hidePicker();\n          }\n\n          ev.preventDefault();\n\n          _this.selectedItemsList.current.removeSelectedItems();\n\n          _this._onSelectedItemsChanged();\n        }\n      }\n    };\n\n    _this.onCopy = function (ev) {\n      if (_this.selectedItemsList.current) {\n        // Pass it down into the selected items list\n        _this.selectedItemsList.current.onCopy(ev);\n      }\n    };\n\n    _this.onPaste = function (ev) {\n      if (_this.props.onPaste) {\n        var inputText = ev.clipboardData.getData('Text');\n        ev.preventDefault();\n\n        _this.props.onPaste(inputText);\n      }\n    };\n\n    _this._onSuggestionSelected = function (item) {\n      var currentRenderedQueryString = _this.props.currentRenderedQueryString;\n      var queryString = _this.state.queryString;\n\n      if (currentRenderedQueryString === undefined || currentRenderedQueryString === queryString) {\n        var processedItem = _this.props.onItemSelected ? _this.props.onItemSelected(item) : item;\n\n        if (processedItem === null) {\n          return;\n        }\n\n        var processedItemObject = processedItem;\n        var processedItemPromiseLike = processedItem;\n        var newItem_1;\n\n        if (processedItemPromiseLike && processedItemPromiseLike.then) {\n          processedItemPromiseLike.then(function (resolvedProcessedItem) {\n            newItem_1 = resolvedProcessedItem;\n\n            _this._addProcessedItem(newItem_1);\n          });\n        } else {\n          newItem_1 = processedItemObject;\n\n          _this._addProcessedItem(newItem_1);\n        }\n      }\n    };\n\n    _this._onSelectedItemsChanged = function () {\n      _this.focus();\n    };\n    /**\n     * The floating picker is the source of truth for if the menu has been opened or not.\n     *\n     * Because this isn't tracked inside the state of this component, we need to\n     * force an update here to keep the rendered output that depends on the picker being open\n     * in sync with the state\n     *\n     * Called when the suggestions is shown or closed\n     */\n\n\n    _this._onSuggestionsShownOrHidden = function () {\n      _this.forceUpdate();\n    };\n\n    initializeComponentRef(_this);\n    _this.selection = new Selection({\n      onSelectionChanged: function onSelectionChanged() {\n        return _this.onSelectionChange();\n      }\n    });\n    _this.state = {\n      queryString: '',\n      // TODO: determine whether this can be removed\n      // eslint-disable-next-line react/no-unused-state\n      suggestionItems: _this.props.suggestionItems ? _this.props.suggestionItems : null,\n      selectedItems: _this.props.defaultSelectedItems ? _this.props.defaultSelectedItems : _this.props.selectedItems ? _this.props.selectedItems : null\n    };\n    _this.floatingPickerProps = _this.props.floatingPickerProps;\n    _this.selectedItemsListProps = _this.props.selectedItemsListProps;\n    return _this;\n  }\n\n  Object.defineProperty(BaseExtendedPicker.prototype, \"items\", {\n    get: function get() {\n      var _a, _b, _c;\n\n      return _c = (_a = this.state.selectedItems, _a !== null && _a !== void 0 ? _a : (_b = this.selectedItemsList.current) === null || _b === void 0 ? void 0 : _b.items), _c !== null && _c !== void 0 ? _c : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BaseExtendedPicker.prototype.componentDidMount = function () {\n    this.forceUpdate();\n  };\n\n  BaseExtendedPicker.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    if (newProps.floatingPickerProps) {\n      this.floatingPickerProps = newProps.floatingPickerProps;\n    }\n\n    if (newProps.selectedItemsListProps) {\n      this.selectedItemsListProps = newProps.selectedItemsListProps;\n    }\n\n    if (newProps.selectedItems) {\n      this.setState({\n        selectedItems: newProps.selectedItems\n      });\n    }\n  };\n\n  BaseExtendedPicker.prototype.focus = function () {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  };\n\n  BaseExtendedPicker.prototype.clearInput = function () {\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n  };\n\n  Object.defineProperty(BaseExtendedPicker.prototype, \"inputElement\", {\n    get: function get() {\n      return this.input.current && this.input.current.inputElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseExtendedPicker.prototype, \"highlightedItems\", {\n    get: function get() {\n      return this.selectedItemsList.current ? this.selectedItemsList.current.highlightedItems() : [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BaseExtendedPicker.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        inputProps = _a.inputProps,\n        disabled = _a.disabled,\n        focusZoneProps = _a.focusZoneProps;\n    var activeDescendant = this.floatingPicker.current && this.floatingPicker.current.currentSelectedSuggestionIndex !== -1 ? 'sug-' + this.floatingPicker.current.currentSelectedSuggestionIndex : undefined;\n    var isExpanded = this.floatingPicker.current ? this.floatingPicker.current.isSuggestionsShown : false;\n    return React.createElement(\"div\", {\n      ref: this.root,\n      className: css('ms-BasePicker ms-BaseExtendedPicker', className ? className : ''),\n      onKeyDown: this.onBackspace,\n      onCopy: this.onCopy\n    }, React.createElement(FocusZone, __assign({\n      direction: FocusZoneDirection.bidirectional\n    }, focusZoneProps), React.createElement(SelectionZone, {\n      selection: this.selection,\n      selectionMode: SelectionMode.multiple\n    }, React.createElement(\"div\", {\n      className: css('ms-BasePicker-text', styles.pickerText),\n      role: 'list'\n    }, this.props.headerComponent, this.renderSelectedItemsList(), this.canAddItems() && React.createElement(Autofill, __assign({}, inputProps, {\n      className: css('ms-BasePicker-input', styles.pickerInput),\n      ref: this.input,\n      onFocus: this.onInputFocus,\n      onClick: this.onInputClick,\n      onInputValueChange: this.onInputChange,\n      \"aria-activedescendant\": activeDescendant,\n      \"aria-owns\": isExpanded ? 'suggestion-list' : undefined,\n      \"aria-expanded\": isExpanded,\n      \"aria-haspopup\": \"true\",\n      role: \"combobox\",\n      disabled: disabled,\n      onPaste: this.onPaste\n    }))))), this.renderFloatingPicker());\n  };\n\n  BaseExtendedPicker.prototype.canAddItems = function () {\n    var itemLimit = this.props.itemLimit;\n    return itemLimit === undefined || this.items.length < itemLimit;\n  };\n\n  BaseExtendedPicker.prototype.renderFloatingPicker = function () {\n    var FloatingPicker = this.props.onRenderFloatingPicker;\n    return React.createElement(FloatingPicker, __assign({\n      componentRef: this.floatingPicker,\n      onChange: this._onSuggestionSelected,\n      onSuggestionsHidden: this._onSuggestionsShownOrHidden,\n      onSuggestionsShown: this._onSuggestionsShownOrHidden,\n      inputElement: this.input.current ? this.input.current.inputElement : undefined,\n      selectedItems: this.items,\n      suggestionItems: this.props.suggestionItems ? this.props.suggestionItems : undefined\n    }, this.floatingPickerProps));\n  };\n\n  BaseExtendedPicker.prototype.renderSelectedItemsList = function () {\n    var SelectedItems = this.props.onRenderSelectedItems;\n    return React.createElement(SelectedItems, __assign({\n      componentRef: this.selectedItemsList,\n      selection: this.selection,\n      selectedItems: this.props.selectedItems ? this.props.selectedItems : undefined,\n      onItemsDeleted: this.props.selectedItems ? this.props.onItemsRemoved : undefined\n    }, this.selectedItemsListProps));\n  };\n\n  BaseExtendedPicker.prototype._addProcessedItem = function (newItem) {\n    // If this is a controlled component, call the on item selected callback\n    // Otherwise add it to the selectedItemsList\n    if (this.props.onItemAdded) {\n      this.props.onItemAdded(newItem);\n    }\n\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.addItems([newItem]);\n    }\n\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n\n    if (this.floatingPicker.current) {\n      this.floatingPicker.current.hidePicker();\n    }\n\n    this.focus();\n  };\n\n  return BaseExtendedPicker;\n}(React.Component);\n\nexport { BaseExtendedPicker };","map":{"version":3,"mappings":"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","names":["React","KeyCodes","css","initializeComponentRef","Autofill","stylesImport","FocusZone","FocusZoneDirection","Selection","SelectionMode","SelectionZone","styles","__extends","basePickerProps","_super","_this","createRef","forceUpdate","value","composing","setState","queryString","floatingPicker","current","onQueryStringChanged","ev","selectedItemsList","unselectAll","props","inputProps","onFocus","inputElement","shoudUpdateValue","inputText","showPicker","which","backspace","items","length","input","isValueSelected","document","activeElement","cursorLocation","hidePicker","preventDefault","removeItemAt","_onSelectedItemsChanged","hasSelectedItems","removeSelectedItems","onCopy","onPaste","clipboardData","getData","item","currentRenderedQueryString","state","undefined","processedItem","onItemSelected","processedItemObject","processedItemPromiseLike","newItem_1","then","resolvedProcessedItem","_addProcessedItem","focus","selection","onSelectionChanged","onSelectionChange","suggestionItems","selectedItems","defaultSelectedItems","floatingPickerProps","selectedItemsListProps","Object","BaseExtendedPicker","_a","_b","_c","newProps","clear","highlightedItems","className","disabled","focusZoneProps","activeDescendant","currentSelectedSuggestionIndex","isExpanded","isSuggestionsShown","ref","root","onKeyDown","onBackspace","__assign","direction","bidirectional","selectionMode","multiple","pickerText","role","headerComponent","renderSelectedItemsList","canAddItems","pickerInput","onInputFocus","onClick","onInputClick","onInputValueChange","onInputChange","renderFloatingPicker","itemLimit","FloatingPicker","onRenderFloatingPicker","componentRef","onChange","_onSuggestionSelected","onSuggestionsHidden","_onSuggestionsShownOrHidden","onSuggestionsShown","SelectedItems","onRenderSelectedItems","onItemsDeleted","onItemsRemoved","newItem","onItemAdded","addItems","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\ExtendedPicker\\BaseExtendedPicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport { KeyCodes, css, initializeComponentRef } from '../../Utilities';\nimport { Autofill } from '../../Autofill';\nimport { IInputProps } from '../../Pickers';\nimport * as stylesImport from './BaseExtendedPicker.scss';\nimport { IBaseExtendedPickerProps, IBaseExtendedPicker } from './BaseExtendedPicker.types';\nimport { IBaseFloatingPickerProps, BaseFloatingPicker } from '../../FloatingPicker';\nimport { BaseSelectedItemsList, IBaseSelectedItemsListProps } from '../../SelectedItemsList';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\nconst styles: any = stylesImport;\n\nexport interface IBaseExtendedPickerState<T> {\n  queryString: string | null;\n  selectedItems: T[] | null;\n  suggestionItems: T[] | null;\n}\n\nexport class BaseExtendedPicker<T, P extends IBaseExtendedPickerProps<T>>\n  extends React.Component<P, IBaseExtendedPickerState<T>>\n  implements IBaseExtendedPicker<T> {\n  public floatingPicker = React.createRef<BaseFloatingPicker<T, IBaseFloatingPickerProps<T>>>();\n  public selectedItemsList = React.createRef<BaseSelectedItemsList<T, IBaseSelectedItemsListProps<T>>>();\n\n  protected root = React.createRef<HTMLDivElement>();\n  protected input = React.createRef<Autofill>();\n  protected selection: Selection;\n  protected floatingPickerProps: IBaseFloatingPickerProps<T>;\n  protected selectedItemsListProps: IBaseSelectedItemsListProps<T>;\n\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    initializeComponentRef(this);\n    this.selection = new Selection({ onSelectionChanged: () => this.onSelectionChange() });\n\n    this.state = {\n      queryString: '',\n      // TODO: determine whether this can be removed\n      // eslint-disable-next-line react/no-unused-state\n      suggestionItems: this.props.suggestionItems ? (this.props.suggestionItems as T[]) : null,\n      selectedItems: this.props.defaultSelectedItems\n        ? (this.props.defaultSelectedItems as T[])\n        : this.props.selectedItems\n        ? (this.props.selectedItems as T[])\n        : null,\n    };\n\n    this.floatingPickerProps = this.props.floatingPickerProps;\n    this.selectedItemsListProps = this.props.selectedItemsListProps;\n  }\n\n  public get items(): any {\n    return this.state.selectedItems ?? this.selectedItemsList.current?.items ?? null;\n  }\n\n  public componentDidMount(): void {\n    this.forceUpdate();\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: P): void {\n    if (newProps.floatingPickerProps) {\n      this.floatingPickerProps = newProps.floatingPickerProps;\n    }\n\n    if (newProps.selectedItemsListProps) {\n      this.selectedItemsListProps = newProps.selectedItemsListProps;\n    }\n\n    if (newProps.selectedItems) {\n      this.setState({ selectedItems: newProps.selectedItems });\n    }\n  }\n\n  public focus(): void {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  }\n\n  public clearInput(): void {\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n  }\n\n  public get inputElement(): HTMLInputElement | null {\n    return this.input.current && this.input.current.inputElement;\n  }\n\n  public get highlightedItems(): T[] {\n    return this.selectedItemsList.current ? this.selectedItemsList.current.highlightedItems() : [];\n  }\n\n  public render(): JSX.Element {\n    const { className, inputProps, disabled, focusZoneProps } = this.props;\n    const activeDescendant =\n      this.floatingPicker.current && this.floatingPicker.current.currentSelectedSuggestionIndex !== -1\n        ? 'sug-' + this.floatingPicker.current.currentSelectedSuggestionIndex\n        : undefined;\n    const isExpanded = this.floatingPicker.current ? this.floatingPicker.current.isSuggestionsShown : false;\n\n    return (\n      <div\n        ref={this.root}\n        className={css('ms-BasePicker ms-BaseExtendedPicker', className ? className : '')}\n        onKeyDown={this.onBackspace}\n        onCopy={this.onCopy}\n      >\n        <FocusZone direction={FocusZoneDirection.bidirectional} {...focusZoneProps}>\n          <SelectionZone selection={this.selection} selectionMode={SelectionMode.multiple}>\n            <div className={css('ms-BasePicker-text', styles.pickerText)} role={'list'}>\n              {this.props.headerComponent}\n              {this.renderSelectedItemsList()}\n              {this.canAddItems() && (\n                <Autofill\n                  {...(inputProps as IInputProps)}\n                  className={css('ms-BasePicker-input', styles.pickerInput)}\n                  ref={this.input}\n                  onFocus={this.onInputFocus}\n                  onClick={this.onInputClick}\n                  onInputValueChange={this.onInputChange}\n                  aria-activedescendant={activeDescendant}\n                  aria-owns={isExpanded ? 'suggestion-list' : undefined}\n                  aria-expanded={isExpanded}\n                  aria-haspopup=\"true\"\n                  role=\"combobox\"\n                  disabled={disabled}\n                  onPaste={this.onPaste}\n                />\n              )}\n            </div>\n          </SelectionZone>\n        </FocusZone>\n        {this.renderFloatingPicker()}\n      </div>\n    );\n  }\n\n  protected onSelectionChange = (): void => {\n    this.forceUpdate();\n  };\n\n  protected canAddItems(): boolean {\n    const { itemLimit } = this.props;\n    return itemLimit === undefined || this.items.length < itemLimit;\n  }\n\n  protected renderFloatingPicker(): JSX.Element {\n    const FloatingPicker: React.ComponentType<IBaseFloatingPickerProps<T>> = this.props.onRenderFloatingPicker;\n    return (\n      <FloatingPicker\n        componentRef={this.floatingPicker}\n        onChange={this._onSuggestionSelected}\n        onSuggestionsHidden={this._onSuggestionsShownOrHidden}\n        onSuggestionsShown={this._onSuggestionsShownOrHidden}\n        inputElement={this.input.current ? this.input.current.inputElement : undefined}\n        selectedItems={this.items}\n        suggestionItems={this.props.suggestionItems ? this.props.suggestionItems : undefined}\n        {...this.floatingPickerProps}\n      />\n    );\n  }\n\n  protected renderSelectedItemsList(): JSX.Element {\n    const SelectedItems: React.ComponentType<IBaseSelectedItemsListProps<T>> = this.props.onRenderSelectedItems;\n    return (\n      <SelectedItems\n        componentRef={this.selectedItemsList}\n        selection={this.selection}\n        selectedItems={this.props.selectedItems ? this.props.selectedItems : undefined}\n        onItemsDeleted={this.props.selectedItems ? this.props.onItemsRemoved : undefined}\n        {...this.selectedItemsListProps}\n      />\n    );\n  }\n\n  protected onInputChange = (value: string, composing?: boolean): void => {\n    // We don't want to update the picker's suggestions when the input is still being composed\n    if (!composing) {\n      this.setState({ queryString: value });\n      if (this.floatingPicker.current) {\n        this.floatingPicker.current.onQueryStringChanged(value);\n      }\n    }\n  };\n\n  protected onInputFocus = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.unselectAll();\n    }\n\n    if (this.props.inputProps && this.props.inputProps.onFocus) {\n      this.props.inputProps.onFocus(ev as React.FocusEvent<HTMLInputElement>);\n    }\n  };\n\n  protected onInputClick = (ev: React.MouseEvent<HTMLInputElement | Autofill>): void => {\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.unselectAll();\n    }\n\n    if (this.floatingPicker.current && this.inputElement) {\n      // Update the value if the input value is empty or is different than the current inputText from the floatingPicker\n      const shoudUpdateValue =\n        this.inputElement.value === '' || this.inputElement.value !== this.floatingPicker.current.inputText;\n      this.floatingPicker.current.showPicker(shoudUpdateValue);\n    }\n  };\n\n  // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n  // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n  protected onBackspace = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which !== KeyCodes.backspace) {\n      return;\n    }\n\n    if (this.selectedItemsList.current && this.items.length) {\n      if (\n        this.input.current &&\n        !this.input.current.isValueSelected &&\n        this.input.current.inputElement === document.activeElement &&\n        (this.input.current as Autofill).cursorLocation === 0\n      ) {\n        if (this.floatingPicker.current) {\n          this.floatingPicker.current.hidePicker();\n        }\n        ev.preventDefault();\n        this.selectedItemsList.current.removeItemAt(this.items.length - 1);\n        this._onSelectedItemsChanged();\n      } else if (this.selectedItemsList.current.hasSelectedItems()) {\n        if (this.floatingPicker.current) {\n          this.floatingPicker.current.hidePicker();\n        }\n        ev.preventDefault();\n        this.selectedItemsList.current.removeSelectedItems();\n        this._onSelectedItemsChanged();\n      }\n    }\n  };\n\n  protected onCopy = (ev: React.ClipboardEvent<HTMLElement>): void => {\n    if (this.selectedItemsList.current) {\n      // Pass it down into the selected items list\n      this.selectedItemsList.current.onCopy(ev);\n    }\n  };\n\n  protected onPaste = (ev: React.ClipboardEvent<Autofill | HTMLInputElement>): void => {\n    if (this.props.onPaste) {\n      const inputText = ev.clipboardData.getData('Text');\n      ev.preventDefault();\n      this.props.onPaste(inputText);\n    }\n  };\n\n  protected _onSuggestionSelected = (item: T): void => {\n    const currentRenderedQueryString = this.props.currentRenderedQueryString;\n    const queryString = this.state.queryString;\n    if (currentRenderedQueryString === undefined || currentRenderedQueryString === queryString) {\n      const processedItem: T | PromiseLike<T> | null = this.props.onItemSelected\n        ? (this.props.onItemSelected as any)(item)\n        : item;\n\n      if (processedItem === null) {\n        return;\n      }\n\n      const processedItemObject: T = processedItem as T;\n      const processedItemPromiseLike: PromiseLike<T> = processedItem as PromiseLike<T>;\n\n      let newItem: T;\n      if (processedItemPromiseLike && processedItemPromiseLike.then) {\n        processedItemPromiseLike.then((resolvedProcessedItem: T) => {\n          newItem = resolvedProcessedItem;\n          this._addProcessedItem(newItem);\n        });\n      } else {\n        newItem = processedItemObject;\n        this._addProcessedItem(newItem);\n      }\n    }\n  };\n\n  protected _onSelectedItemsChanged = (): void => {\n    this.focus();\n  };\n\n  /**\n   * The floating picker is the source of truth for if the menu has been opened or not.\n   *\n   * Because this isn't tracked inside the state of this component, we need to\n   * force an update here to keep the rendered output that depends on the picker being open\n   * in sync with the state\n   *\n   * Called when the suggestions is shown or closed\n   */\n  private _onSuggestionsShownOrHidden = () => {\n    this.forceUpdate();\n  };\n\n  private _addProcessedItem(newItem: T) {\n    // If this is a controlled component, call the on item selected callback\n    // Otherwise add it to the selectedItemsList\n    if (this.props.onItemAdded) {\n      this.props.onItemAdded(newItem);\n    }\n\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.addItems([newItem]);\n    }\n\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n\n    if (this.floatingPicker.current) {\n      this.floatingPicker.current.hidePicker();\n    }\n\n    this.focus();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}