{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { find, values } from '../../Utilities';\nimport { mergeOverflows, sequencesToID } from '../../utilities/keytips/KeytipUtils';\nimport { KTP_LAYER_ID } from '../../utilities/keytips/KeytipConstants';\n/**\n * This class is responsible for handling the parent/child relationships between keytips\n */\n\nvar KeytipTree =\n/** @class */\nfunction () {\n  /**\n   * KeytipTree constructor\n   */\n  function KeytipTree() {\n    this.nodeMap = {}; // Root has no keytipSequence\n\n    this.root = {\n      id: KTP_LAYER_ID,\n      children: [],\n      parent: '',\n      keySequences: []\n    };\n    this.nodeMap[this.root.id] = this.root;\n  }\n  /**\n   * Add a keytip node to this KeytipTree\n   *\n   * @param keytipProps - Keytip to add to the Tree\n   * @param uniqueID - Unique ID for this keytip\n   * @param persisted - T/F if this keytip should be marked as persisted\n   */\n\n\n  KeytipTree.prototype.addNode = function (keytipProps, uniqueID, persisted) {\n    var fullSequence = this._getFullSequence(keytipProps);\n\n    var nodeID = sequencesToID(fullSequence); // Take off the last item to calculate the parent sequence\n\n    fullSequence.pop(); // Parent ID is the root if there aren't any more sequences\n\n    var parentID = this._getParentID(fullSequence); // Create node and add to map\n\n\n    var node = this._createNode(nodeID, parentID, [], keytipProps, persisted);\n\n    this.nodeMap[uniqueID] = node; // Try to add self to parents children, if they exist\n\n    var parent = this.getNode(parentID);\n\n    if (parent) {\n      parent.children.push(nodeID);\n    }\n  };\n  /**\n   * Updates a node in the tree\n   *\n   * @param keytipProps - Keytip props to update\n   * @param uniqueID - Unique ID for this keytip\n   */\n\n\n  KeytipTree.prototype.updateNode = function (keytipProps, uniqueID) {\n    var fullSequence = this._getFullSequence(keytipProps);\n\n    var nodeID = sequencesToID(fullSequence); // Take off the last item to calculate the parent sequence\n\n    fullSequence.pop(); // Parent ID is the root if there aren't any more sequences\n\n    var parentID = this._getParentID(fullSequence);\n\n    var node = this.nodeMap[uniqueID];\n    var prevParent = node.parent;\n    var prevParentNode = this.getNode(prevParent);\n    var parent = this.getNode(parentID);\n\n    if (node) {\n      if (prevParentNode && prevParent !== parentID) {\n        // If parent has changed, remove child from old parent\n        var childIndex = prevParentNode.children.indexOf(node.id);\n\n        if (childIndex >= 0) {\n          prevParentNode.children.splice(childIndex, 1);\n        }\n      } // If the ID of the node has changed, update node's parent's array of children with new ID\n\n\n      if (parent && node.id !== nodeID) {\n        var index = parent.children.indexOf(node.id);\n\n        if (index >= 0) {\n          parent.children[index] = nodeID;\n        } else {\n          parent.children.push(nodeID);\n        }\n      } // Update values\n\n\n      node.id = nodeID;\n      node.keySequences = keytipProps.keySequences;\n      node.overflowSetSequence = keytipProps.overflowSetSequence;\n      node.onExecute = keytipProps.onExecute;\n      node.onReturn = keytipProps.onReturn;\n      node.hasDynamicChildren = keytipProps.hasDynamicChildren;\n      node.hasMenu = keytipProps.hasMenu;\n      node.parent = parentID;\n      node.disabled = keytipProps.disabled;\n    }\n  };\n  /**\n   * Removes a node from the KeytipTree\n   *\n   * @param sequence - full string of the node to remove\n   */\n\n\n  KeytipTree.prototype.removeNode = function (keytipProps, uniqueID) {\n    var fullSequence = this._getFullSequence(keytipProps);\n\n    var nodeID = sequencesToID(fullSequence); // Take off the last sequence to calculate the parent ID\n\n    fullSequence.pop(); // Parent ID is the root if there aren't any more sequences\n\n    var parentID = this._getParentID(fullSequence);\n\n    var parent = this.getNode(parentID);\n\n    if (parent) {\n      // Remove node from its parent's children\n      parent.children.splice(parent.children.indexOf(nodeID), 1);\n    }\n\n    if (this.nodeMap[uniqueID]) {\n      // Remove the node from the nodeMap\n      delete this.nodeMap[uniqueID];\n    }\n  };\n  /**\n   * Searches the currentKeytip's children to exactly match a sequence. Will not match disabled nodes but\n   * will match persisted nodes\n   *\n   * @param keySequence - string to match\n   * @param currentKeytip - The keytip whose children will try to match\n   * @returns The node that exactly matched the keySequence, or undefined if none matched\n   */\n\n\n  KeytipTree.prototype.getExactMatchedNode = function (keySequence, currentKeytip) {\n    var _this = this;\n\n    var possibleNodes = this.getNodes(currentKeytip.children);\n    return find(possibleNodes, function (node) {\n      return _this._getNodeSequence(node) === keySequence && !node.disabled;\n    });\n  };\n  /**\n   * Searches the currentKeytip's children to find nodes that start with the given sequence. Will not match\n   * disabled nodes but will match persisted nodes\n   *\n   * @param keySequence - string to partially match\n   * @param currentKeytip - The keytip whose children will try to partially match\n   * @returns List of tree nodes that partially match the given sequence\n   */\n\n\n  KeytipTree.prototype.getPartiallyMatchedNodes = function (keySequence, currentKeytip) {\n    var _this = this; // Get children that are persisted\n\n\n    var possibleNodes = this.getNodes(currentKeytip.children);\n    return possibleNodes.filter(function (node) {\n      return _this._getNodeSequence(node).indexOf(keySequence) === 0 && !node.disabled;\n    });\n  };\n  /**\n   * Get the non-persisted children of the give node\n   * If no node is given, will use the 'currentKeytip'\n   *\n   * @param node - Node to get the children for\n   * @returns List of node IDs that are the children of the node\n   */\n\n\n  KeytipTree.prototype.getChildren = function (node) {\n    var _this = this;\n\n    if (!node) {\n      node = this.currentKeytip;\n\n      if (!node) {\n        return [];\n      }\n    }\n\n    var children = node.children;\n    return Object.keys(this.nodeMap).reduce(function (nodes, key) {\n      if (children.indexOf(_this.nodeMap[key].id) >= 0 && !_this.nodeMap[key].persisted) {\n        nodes.push(_this.nodeMap[key].id);\n      }\n\n      return nodes;\n    }, []);\n  };\n  /**\n   * Gets all nodes from their IDs\n   *\n   * @param ids - List of keytip IDs\n   * @returns Array of nodes that match the given IDs, can be empty\n   */\n\n\n  KeytipTree.prototype.getNodes = function (ids) {\n    var _this = this;\n\n    return Object.keys(this.nodeMap).reduce(function (nodes, key) {\n      if (ids.indexOf(_this.nodeMap[key].id) >= 0) {\n        nodes.push(_this.nodeMap[key]);\n      }\n\n      return nodes;\n    }, []);\n  };\n  /**\n   * Gets a single node from its ID\n   *\n   * @param id - ID of the node to get\n   * @returns Node with the given ID, if found\n   */\n\n\n  KeytipTree.prototype.getNode = function (id) {\n    var nodeMapValues = values(this.nodeMap);\n    return find(nodeMapValues, function (node) {\n      return node.id === id;\n    });\n  };\n  /**\n   * Tests if the currentKeytip in this.keytipTree is the parent of 'keytipProps'\n   *\n   * @param keytipProps - Keytip to test the parent for\n   * @returns T/F if the currentKeytip is this keytipProps' parent\n   */\n\n\n  KeytipTree.prototype.isCurrentKeytipParent = function (keytipProps) {\n    if (this.currentKeytip) {\n      var fullSequence = __spreadArrays(keytipProps.keySequences);\n\n      if (keytipProps.overflowSetSequence) {\n        fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n      } // Take off the last sequence to calculate the parent ID\n\n\n      fullSequence.pop(); // Parent ID is the root if there aren't any more sequences\n\n      var parentID = fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n      var matchesCurrWithoutOverflow = false;\n\n      if (this.currentKeytip.overflowSetSequence) {\n        var currKeytipIdWithoutOverflow = sequencesToID(this.currentKeytip.keySequences);\n        matchesCurrWithoutOverflow = currKeytipIdWithoutOverflow === parentID;\n      }\n\n      return matchesCurrWithoutOverflow || this.currentKeytip.id === parentID;\n    }\n\n    return false;\n  };\n\n  KeytipTree.prototype._getParentID = function (fullSequence) {\n    return fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n  };\n\n  KeytipTree.prototype._getFullSequence = function (keytipProps) {\n    var fullSequence = __spreadArrays(keytipProps.keySequences);\n\n    if (keytipProps.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n    }\n\n    return fullSequence;\n  };\n\n  KeytipTree.prototype._getNodeSequence = function (node) {\n    var fullSequence = __spreadArrays(node.keySequences);\n\n    if (node.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, node.overflowSetSequence);\n    }\n\n    return fullSequence[fullSequence.length - 1];\n  };\n\n  KeytipTree.prototype._createNode = function (id, parentId, children, keytipProps, persisted) {\n    var _this = this;\n\n    var keySequences = keytipProps.keySequences,\n        hasDynamicChildren = keytipProps.hasDynamicChildren,\n        overflowSetSequence = keytipProps.overflowSetSequence,\n        hasMenu = keytipProps.hasMenu,\n        onExecute = keytipProps.onExecute,\n        onReturn = keytipProps.onReturn,\n        disabled = keytipProps.disabled;\n    var node = {\n      id: id,\n      keySequences: keySequences,\n      overflowSetSequence: overflowSetSequence,\n      parent: parentId,\n      children: children,\n      onExecute: onExecute,\n      onReturn: onReturn,\n      hasDynamicChildren: hasDynamicChildren,\n      hasMenu: hasMenu,\n      disabled: disabled,\n      persisted: persisted\n    };\n    node.children = Object.keys(this.nodeMap).reduce(function (array, nodeMapKey) {\n      if (_this.nodeMap[nodeMapKey].parent === id) {\n        array.push(_this.nodeMap[nodeMapKey].id);\n      }\n\n      return array;\n    }, []);\n    return node;\n  };\n\n  return KeytipTree;\n}();\n\nexport { KeytipTree };","map":{"version":3,"mappings":";AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,iBAA7B;AAGA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,qCAA9C;AACA,SAASC,YAAT,QAA6B,yCAA7B;AAEA;;;;AAGA;AAAA;AAAA;EAKE;;;EAGA;IALO,eAAiD,EAAjD,CAKP,CACE;;IACA,KAAKC,IAAL,GAAY;MACVC,EAAE,EAAEF,YADM;MAEVG,QAAQ,EAAE,EAFA;MAGVC,MAAM,EAAE,EAHE;MAIVC,YAAY,EAAE;IAJJ,CAAZ;IAMA,KAAKC,OAAL,CAAa,KAAKL,IAAL,CAAUC,EAAvB,IAA6B,KAAKD,IAAlC;EACD;EAED;;;;;;;;;EAOOM,+BAAP,UAAeC,WAAf,EAA0CC,QAA1C,EAA4DC,SAA5D,EAA+E;IAC7E,IAAMC,YAAY,GAAG,KAAKC,gBAAL,CAAsBJ,WAAtB,CAArB;;IACA,IAAMK,MAAM,GAAGd,aAAa,CAACY,YAAD,CAA5B,CAF6E,CAI7E;;IACAA,YAAY,CAACG,GAAb,GAL6E,CAM7E;;IACA,IAAMC,QAAQ,GAAG,KAAKC,YAAL,CAAkBL,YAAlB,CAAjB,CAP6E,CAS7E;;;IACA,IAAMM,IAAI,GAAG,KAAKC,WAAL,CAAiBL,MAAjB,EAAyBE,QAAzB,EAAmC,EAAnC,EAAuCP,WAAvC,EAAoDE,SAApD,CAAb;;IACA,KAAKJ,OAAL,CAAaG,QAAb,IAAyBQ,IAAzB,CAX6E,CAa7E;;IACA,IAAMb,MAAM,GAAG,KAAKe,OAAL,CAAaJ,QAAb,CAAf;;IACA,IAAIX,MAAJ,EAAY;MACVA,MAAM,CAACD,QAAP,CAAgBiB,IAAhB,CAAqBP,MAArB;IACD;EACF,CAlBM;EAoBP;;;;;;;;EAMON,kCAAP,UAAkBC,WAAlB,EAA6CC,QAA7C,EAA6D;IAC3D,IAAME,YAAY,GAAG,KAAKC,gBAAL,CAAsBJ,WAAtB,CAArB;;IACA,IAAMK,MAAM,GAAGd,aAAa,CAACY,YAAD,CAA5B,CAF2D,CAI3D;;IACAA,YAAY,CAACG,GAAb,GAL2D,CAM3D;;IACA,IAAMC,QAAQ,GAAG,KAAKC,YAAL,CAAkBL,YAAlB,CAAjB;;IACA,IAAMM,IAAI,GAAG,KAAKX,OAAL,CAAaG,QAAb,CAAb;IACA,IAAMY,UAAU,GAAGJ,IAAI,CAACb,MAAxB;IACA,IAAMkB,cAAc,GAAG,KAAKH,OAAL,CAAaE,UAAb,CAAvB;IACA,IAAMjB,MAAM,GAAG,KAAKe,OAAL,CAAaJ,QAAb,CAAf;;IACA,IAAIE,IAAJ,EAAU;MACR,IAAIK,cAAc,IAAID,UAAU,KAAKN,QAArC,EAA+C;QAC7C;QACA,IAAMQ,UAAU,GAAGD,cAAc,CAACnB,QAAf,CAAwBqB,OAAxB,CAAgCP,IAAI,CAACf,EAArC,CAAnB;;QACA,IAAIqB,UAAU,IAAI,CAAlB,EAAqB;UACnBD,cAAc,CAACnB,QAAf,CAAwBsB,MAAxB,CAA+BF,UAA/B,EAA2C,CAA3C;QACD;MACF,CAPO,CAQR;;;MACA,IAAInB,MAAM,IAAIa,IAAI,CAACf,EAAL,KAAYW,MAA1B,EAAkC;QAChC,IAAMa,KAAK,GAAGtB,MAAM,CAACD,QAAP,CAAgBqB,OAAhB,CAAwBP,IAAI,CAACf,EAA7B,CAAd;;QACA,IAAIwB,KAAK,IAAI,CAAb,EAAgB;UACdtB,MAAM,CAACD,QAAP,CAAgBuB,KAAhB,IAAyBb,MAAzB;QACD,CAFD,MAEO;UACLT,MAAM,CAACD,QAAP,CAAgBiB,IAAhB,CAAqBP,MAArB;QACD;MACF,CAhBO,CAiBR;;;MACAI,IAAI,CAACf,EAAL,GAAUW,MAAV;MACAI,IAAI,CAACZ,YAAL,GAAoBG,WAAW,CAACH,YAAhC;MACAY,IAAI,CAACU,mBAAL,GAA2BnB,WAAW,CAACmB,mBAAvC;MACAV,IAAI,CAACW,SAAL,GAAiBpB,WAAW,CAACoB,SAA7B;MACAX,IAAI,CAACY,QAAL,GAAgBrB,WAAW,CAACqB,QAA5B;MACAZ,IAAI,CAACa,kBAAL,GAA0BtB,WAAW,CAACsB,kBAAtC;MACAb,IAAI,CAACc,OAAL,GAAevB,WAAW,CAACuB,OAA3B;MACAd,IAAI,CAACb,MAAL,GAAcW,QAAd;MACAE,IAAI,CAACe,QAAL,GAAgBxB,WAAW,CAACwB,QAA5B;IACD;EACF,CAxCM;EA0CP;;;;;;;EAKOzB,kCAAP,UAAkBC,WAAlB,EAA6CC,QAA7C,EAA6D;IAC3D,IAAME,YAAY,GAAG,KAAKC,gBAAL,CAAsBJ,WAAtB,CAArB;;IACA,IAAMK,MAAM,GAAGd,aAAa,CAACY,YAAD,CAA5B,CAF2D,CAI3D;;IACAA,YAAY,CAACG,GAAb,GAL2D,CAO3D;;IACA,IAAMC,QAAQ,GAAG,KAAKC,YAAL,CAAkBL,YAAlB,CAAjB;;IACA,IAAMP,MAAM,GAAG,KAAKe,OAAL,CAAaJ,QAAb,CAAf;;IACA,IAAIX,MAAJ,EAAY;MACV;MACAA,MAAM,CAACD,QAAP,CAAgBsB,MAAhB,CAAuBrB,MAAM,CAACD,QAAP,CAAgBqB,OAAhB,CAAwBX,MAAxB,CAAvB,EAAwD,CAAxD;IACD;;IAED,IAAI,KAAKP,OAAL,CAAaG,QAAb,CAAJ,EAA4B;MAC1B;MACA,OAAO,KAAKH,OAAL,CAAaG,QAAb,CAAP;IACD;EACF,CAnBM;EAqBP;;;;;;;;;;EAQOF,2CAAP,UAA2B0B,WAA3B,EAAgDC,aAAhD,EAA8E;IAA9E;;IACE,IAAMC,aAAa,GAAG,KAAKC,QAAL,CAAcF,aAAa,CAAC/B,QAA5B,CAAtB;IACA,OAAOP,IAAI,CAACuC,aAAD,EAAgB,UAAClB,IAAD,EAAsB;MAC/C,OAAOoB,KAAI,CAACC,gBAAL,CAAsBrB,IAAtB,MAAgCgB,WAAhC,IAA+C,CAAChB,IAAI,CAACe,QAA5D;IACD,CAFU,CAAX;EAGD,CALM;EAOP;;;;;;;;;;EAQOzB,gDAAP,UAAgC0B,WAAhC,EAAqDC,aAArD,EAAmF;IAAnF,iBAAmF,CACjF;;;IACA,IAAMC,aAAa,GAAG,KAAKC,QAAL,CAAcF,aAAa,CAAC/B,QAA5B,CAAtB;IACA,OAAOgC,aAAa,CAACI,MAAd,CAAqB,UAACtB,IAAD,EAAsB;MAChD,OAAOoB,KAAI,CAACC,gBAAL,CAAsBrB,IAAtB,EAA4BO,OAA5B,CAAoCS,WAApC,MAAqD,CAArD,IAA0D,CAAChB,IAAI,CAACe,QAAvE;IACD,CAFM,CAAP;EAGD,CANM;EAQP;;;;;;;;;EAOOzB,mCAAP,UAAmBU,IAAnB,EAAyC;IAAzC;;IACE,IAAI,CAACA,IAAL,EAAW;MACTA,IAAI,GAAG,KAAKiB,aAAZ;;MACA,IAAI,CAACjB,IAAL,EAAW;QACT,OAAO,EAAP;MACD;IACF;;IACD,IAAMd,QAAQ,GAAGc,IAAI,CAACd,QAAtB;IACA,OAAOqC,MAAM,CAACC,IAAP,CAAY,KAAKnC,OAAjB,EAA0BoC,MAA1B,CAAiC,UAACC,KAAD,EAAkBC,GAAlB,EAA6B;MACnE,IAAIzC,QAAQ,CAACqB,OAAT,CAAiBa,KAAI,CAAC/B,OAAL,CAAasC,GAAb,EAAkB1C,EAAnC,KAA0C,CAA1C,IAA+C,CAACmC,KAAI,CAAC/B,OAAL,CAAasC,GAAb,EAAkBlC,SAAtE,EAAiF;QAC/EiC,KAAK,CAACvB,IAAN,CAAWiB,KAAI,CAAC/B,OAAL,CAAasC,GAAb,EAAkB1C,EAA7B;MACD;;MACD,OAAOyC,KAAP;IACD,CALM,EAKJ,EALI,CAAP;EAMD,CAdM;EAgBP;;;;;;;;EAMOpC,gCAAP,UAAgBsC,GAAhB,EAA6B;IAA7B;;IACE,OAAOL,MAAM,CAACC,IAAP,CAAY,KAAKnC,OAAjB,EAA0BoC,MAA1B,CAAiC,UAACC,KAAD,EAA2BC,GAA3B,EAAsC;MAC5E,IAAIC,GAAG,CAACrB,OAAJ,CAAYa,KAAI,CAAC/B,OAAL,CAAasC,GAAb,EAAkB1C,EAA9B,KAAqC,CAAzC,EAA4C;QAC1CyC,KAAK,CAACvB,IAAN,CAAWiB,KAAI,CAAC/B,OAAL,CAAasC,GAAb,CAAX;MACD;;MACD,OAAOD,KAAP;IACD,CALM,EAKJ,EALI,CAAP;EAMD,CAPM;EASP;;;;;;;;EAMOpC,+BAAP,UAAeL,EAAf,EAAyB;IACvB,IAAM4C,aAAa,GAAGjD,MAAM,CAAkB,KAAKS,OAAvB,CAA5B;IACA,OAAOV,IAAI,CAACkD,aAAD,EAAgB,UAAC7B,IAAD,EAAsB;MAC/C,OAAOA,IAAI,CAACf,EAAL,KAAYA,EAAnB;IACD,CAFU,CAAX;EAGD,CALM;EAOP;;;;;;;;EAMOK,6CAAP,UAA6BC,WAA7B,EAAsD;IACpD,IAAI,KAAK0B,aAAT,EAAwB;MACtB,IAAIvB,YAAY,kBAAOH,WAAW,CAACH,YAAnB,CAAhB;;MACA,IAAIG,WAAW,CAACmB,mBAAhB,EAAqC;QACnChB,YAAY,GAAGb,cAAc,CAACa,YAAD,EAAeH,WAAW,CAACmB,mBAA3B,CAA7B;MACD,CAJqB,CAKtB;;;MACAhB,YAAY,CAACG,GAAb,GANsB,CAOtB;;MACA,IAAMC,QAAQ,GAAGJ,YAAY,CAACoC,MAAb,KAAwB,CAAxB,GAA4B,KAAK9C,IAAL,CAAUC,EAAtC,GAA2CH,aAAa,CAACY,YAAD,CAAzE;MACA,IAAIqC,0BAA0B,GAAG,KAAjC;;MACA,IAAI,KAAKd,aAAL,CAAmBP,mBAAvB,EAA4C;QAC1C,IAAMsB,2BAA2B,GAAGlD,aAAa,CAAC,KAAKmC,aAAL,CAAmB7B,YAApB,CAAjD;QACA2C,0BAA0B,GAAGC,2BAA2B,KAAKlC,QAA7D;MACD;;MACD,OAAOiC,0BAA0B,IAAI,KAAKd,aAAL,CAAmBhC,EAAnB,KAA0Ba,QAA/D;IACD;;IACD,OAAO,KAAP;EACD,CAlBM;;EAoBCR,oCAAR,UAAqBI,YAArB,EAA2C;IACzC,OAAOA,YAAY,CAACoC,MAAb,KAAwB,CAAxB,GAA4B,KAAK9C,IAAL,CAAUC,EAAtC,GAA2CH,aAAa,CAACY,YAAD,CAA/D;EACD,CAFO;;EAIAJ,wCAAR,UAAyBC,WAAzB,EAAkD;IAChD,IAAIG,YAAY,kBAAOH,WAAW,CAACH,YAAnB,CAAhB;;IACA,IAAIG,WAAW,CAACmB,mBAAhB,EAAqC;MACnChB,YAAY,GAAGb,cAAc,CAACa,YAAD,EAAeH,WAAW,CAACmB,mBAA3B,CAA7B;IACD;;IACD,OAAOhB,YAAP;EACD,CANO;;EAQAJ,wCAAR,UAAyBU,IAAzB,EAA8C;IAC5C,IAAIN,YAAY,kBAAOM,IAAI,CAACZ,YAAZ,CAAhB;;IACA,IAAIY,IAAI,CAACU,mBAAT,EAA8B;MAC5BhB,YAAY,GAAGb,cAAc,CAACa,YAAD,EAAeM,IAAI,CAACU,mBAApB,CAA7B;IACD;;IACD,OAAOhB,YAAY,CAACA,YAAY,CAACoC,MAAb,GAAsB,CAAvB,CAAnB;EACD,CANO;;EAQAxC,mCAAR,UACEL,EADF,EAEEgD,QAFF,EAGE/C,QAHF,EAIEK,WAJF,EAKEE,SALF,EAKqB;IALrB;;IAQI;IAAA,IACAoB,mDADA;IAAA,IAEAH,qDAFA;IAAA,IAGAI,6BAHA;IAAA,IAIAH,iCAJA;IAAA,IAKAC,+BALA;IAAA,IAMAG,+BANA;IAQF,IAAMf,IAAI,GAAG;MACXf,EAAE,IADS;MAEXG,YAAY,cAFD;MAGXsB,mBAAmB,qBAHR;MAIXvB,MAAM,EAAE8C,QAJG;MAKX/C,QAAQ,UALG;MAMXyB,SAAS,WANE;MAOXC,QAAQ,UAPG;MAQXC,kBAAkB,oBARP;MASXC,OAAO,SATI;MAUXC,QAAQ,UAVG;MAWXtB,SAAS;IAXE,CAAb;IAaAO,IAAI,CAACd,QAAL,GAAgBqC,MAAM,CAACC,IAAP,CAAY,KAAKnC,OAAjB,EAA0BoC,MAA1B,CAAiC,UAACS,KAAD,EAAkBC,UAAlB,EAAoC;MACnF,IAAIf,KAAI,CAAC/B,OAAL,CAAa8C,UAAb,EAAyBhD,MAAzB,KAAoCF,EAAxC,EAA4C;QAC1CiD,KAAK,CAAC/B,IAAN,CAAWiB,KAAI,CAAC/B,OAAL,CAAa8C,UAAb,EAAyBlD,EAApC;MACD;;MACD,OAAOiD,KAAP;IACD,CALe,EAKb,EALa,CAAhB;IAMA,OAAOlC,IAAP;EACD,CApCO;;EAqCV;AAAC,CA7RD","names":["find","values","mergeOverflows","sequencesToID","KTP_LAYER_ID","root","id","children","parent","keySequences","nodeMap","KeytipTree","keytipProps","uniqueID","persisted","fullSequence","_getFullSequence","nodeID","pop","parentID","_getParentID","node","_createNode","getNode","push","prevParent","prevParentNode","childIndex","indexOf","splice","index","overflowSetSequence","onExecute","onReturn","hasDynamicChildren","hasMenu","disabled","keySequence","currentKeytip","possibleNodes","getNodes","_this","_getNodeSequence","filter","Object","keys","reduce","nodes","key","ids","nodeMapValues","length","matchesCurrWithoutOverflow","currKeytipIdWithoutOverflow","parentId","array","nodeMapKey"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\KeytipLayer\\KeytipTree.ts"],"sourcesContent":["import { find, values } from '../../Utilities';\nimport { IKeytipProps } from '../../Keytip';\nimport { IKeytipTreeNode } from './IKeytipTreeNode';\nimport { mergeOverflows, sequencesToID } from '../../utilities/keytips/KeytipUtils';\nimport { KTP_LAYER_ID } from '../../utilities/keytips/KeytipConstants';\n\n/**\n * This class is responsible for handling the parent/child relationships between keytips\n */\nexport class KeytipTree {\n  public currentKeytip?: IKeytipTreeNode;\n  public root: IKeytipTreeNode;\n  public nodeMap: { [nodeId: string]: IKeytipTreeNode } = {};\n\n  /**\n   * KeytipTree constructor\n   */\n  constructor() {\n    // Root has no keytipSequence\n    this.root = {\n      id: KTP_LAYER_ID,\n      children: [],\n      parent: '',\n      keySequences: [],\n    };\n    this.nodeMap[this.root.id] = this.root;\n  }\n\n  /**\n   * Add a keytip node to this KeytipTree\n   *\n   * @param keytipProps - Keytip to add to the Tree\n   * @param uniqueID - Unique ID for this keytip\n   * @param persisted - T/F if this keytip should be marked as persisted\n   */\n  public addNode(keytipProps: IKeytipProps, uniqueID: string, persisted?: boolean): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last item to calculate the parent sequence\n    fullSequence.pop();\n    // Parent ID is the root if there aren't any more sequences\n    const parentID = this._getParentID(fullSequence);\n\n    // Create node and add to map\n    const node = this._createNode(nodeID, parentID, [], keytipProps, persisted);\n    this.nodeMap[uniqueID] = node;\n\n    // Try to add self to parents children, if they exist\n    const parent = this.getNode(parentID);\n    if (parent) {\n      parent.children.push(nodeID);\n    }\n  }\n\n  /**\n   * Updates a node in the tree\n   *\n   * @param keytipProps - Keytip props to update\n   * @param uniqueID - Unique ID for this keytip\n   */\n  public updateNode(keytipProps: IKeytipProps, uniqueID: string): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last item to calculate the parent sequence\n    fullSequence.pop();\n    // Parent ID is the root if there aren't any more sequences\n    const parentID = this._getParentID(fullSequence);\n    const node = this.nodeMap[uniqueID];\n    const prevParent = node.parent;\n    const prevParentNode = this.getNode(prevParent);\n    const parent = this.getNode(parentID);\n    if (node) {\n      if (prevParentNode && prevParent !== parentID) {\n        // If parent has changed, remove child from old parent\n        const childIndex = prevParentNode.children.indexOf(node.id);\n        if (childIndex >= 0) {\n          prevParentNode.children.splice(childIndex, 1);\n        }\n      }\n      // If the ID of the node has changed, update node's parent's array of children with new ID\n      if (parent && node.id !== nodeID) {\n        const index = parent.children.indexOf(node.id);\n        if (index >= 0) {\n          parent.children[index] = nodeID;\n        } else {\n          parent.children.push(nodeID);\n        }\n      }\n      // Update values\n      node.id = nodeID;\n      node.keySequences = keytipProps.keySequences;\n      node.overflowSetSequence = keytipProps.overflowSetSequence;\n      node.onExecute = keytipProps.onExecute;\n      node.onReturn = keytipProps.onReturn;\n      node.hasDynamicChildren = keytipProps.hasDynamicChildren;\n      node.hasMenu = keytipProps.hasMenu;\n      node.parent = parentID;\n      node.disabled = keytipProps.disabled;\n    }\n  }\n\n  /**\n   * Removes a node from the KeytipTree\n   *\n   * @param sequence - full string of the node to remove\n   */\n  public removeNode(keytipProps: IKeytipProps, uniqueID: string): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last sequence to calculate the parent ID\n    fullSequence.pop();\n\n    // Parent ID is the root if there aren't any more sequences\n    const parentID = this._getParentID(fullSequence);\n    const parent = this.getNode(parentID);\n    if (parent) {\n      // Remove node from its parent's children\n      parent.children.splice(parent.children.indexOf(nodeID), 1);\n    }\n\n    if (this.nodeMap[uniqueID]) {\n      // Remove the node from the nodeMap\n      delete this.nodeMap[uniqueID];\n    }\n  }\n\n  /**\n   * Searches the currentKeytip's children to exactly match a sequence. Will not match disabled nodes but\n   * will match persisted nodes\n   *\n   * @param keySequence - string to match\n   * @param currentKeytip - The keytip whose children will try to match\n   * @returns The node that exactly matched the keySequence, or undefined if none matched\n   */\n  public getExactMatchedNode(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode | undefined {\n    const possibleNodes = this.getNodes(currentKeytip.children);\n    return find(possibleNodes, (node: IKeytipTreeNode) => {\n      return this._getNodeSequence(node) === keySequence && !node.disabled;\n    });\n  }\n\n  /**\n   * Searches the currentKeytip's children to find nodes that start with the given sequence. Will not match\n   * disabled nodes but will match persisted nodes\n   *\n   * @param keySequence - string to partially match\n   * @param currentKeytip - The keytip whose children will try to partially match\n   * @returns List of tree nodes that partially match the given sequence\n   */\n  public getPartiallyMatchedNodes(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode[] {\n    // Get children that are persisted\n    const possibleNodes = this.getNodes(currentKeytip.children);\n    return possibleNodes.filter((node: IKeytipTreeNode) => {\n      return this._getNodeSequence(node).indexOf(keySequence) === 0 && !node.disabled;\n    });\n  }\n\n  /**\n   * Get the non-persisted children of the give node\n   * If no node is given, will use the 'currentKeytip'\n   *\n   * @param node - Node to get the children for\n   * @returns List of node IDs that are the children of the node\n   */\n  public getChildren(node?: IKeytipTreeNode): string[] {\n    if (!node) {\n      node = this.currentKeytip;\n      if (!node) {\n        return [];\n      }\n    }\n    const children = node.children;\n    return Object.keys(this.nodeMap).reduce((nodes: string[], key: string): string[] => {\n      if (children.indexOf(this.nodeMap[key].id) >= 0 && !this.nodeMap[key].persisted) {\n        nodes.push(this.nodeMap[key].id);\n      }\n      return nodes;\n    }, []);\n  }\n\n  /**\n   * Gets all nodes from their IDs\n   *\n   * @param ids - List of keytip IDs\n   * @returns Array of nodes that match the given IDs, can be empty\n   */\n  public getNodes(ids: string[]): IKeytipTreeNode[] {\n    return Object.keys(this.nodeMap).reduce((nodes: IKeytipTreeNode[], key: string): IKeytipTreeNode[] => {\n      if (ids.indexOf(this.nodeMap[key].id) >= 0) {\n        nodes.push(this.nodeMap[key]);\n      }\n      return nodes;\n    }, []);\n  }\n\n  /**\n   * Gets a single node from its ID\n   *\n   * @param id - ID of the node to get\n   * @returns Node with the given ID, if found\n   */\n  public getNode(id: string): IKeytipTreeNode | undefined {\n    const nodeMapValues = values<IKeytipTreeNode>(this.nodeMap);\n    return find(nodeMapValues, (node: IKeytipTreeNode): boolean => {\n      return node.id === id;\n    });\n  }\n\n  /**\n   * Tests if the currentKeytip in this.keytipTree is the parent of 'keytipProps'\n   *\n   * @param keytipProps - Keytip to test the parent for\n   * @returns T/F if the currentKeytip is this keytipProps' parent\n   */\n  public isCurrentKeytipParent(keytipProps: IKeytipProps): boolean {\n    if (this.currentKeytip) {\n      let fullSequence = [...keytipProps.keySequences];\n      if (keytipProps.overflowSetSequence) {\n        fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n      }\n      // Take off the last sequence to calculate the parent ID\n      fullSequence.pop();\n      // Parent ID is the root if there aren't any more sequences\n      const parentID = fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n      let matchesCurrWithoutOverflow = false;\n      if (this.currentKeytip.overflowSetSequence) {\n        const currKeytipIdWithoutOverflow = sequencesToID(this.currentKeytip.keySequences);\n        matchesCurrWithoutOverflow = currKeytipIdWithoutOverflow === parentID;\n      }\n      return matchesCurrWithoutOverflow || this.currentKeytip.id === parentID;\n    }\n    return false;\n  }\n\n  private _getParentID(fullSequence: string[]): string {\n    return fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n  }\n\n  private _getFullSequence(keytipProps: IKeytipProps): string[] {\n    let fullSequence = [...keytipProps.keySequences];\n    if (keytipProps.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n    }\n    return fullSequence;\n  }\n\n  private _getNodeSequence(node: IKeytipTreeNode): string {\n    let fullSequence = [...node.keySequences];\n    if (node.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, node.overflowSetSequence);\n    }\n    return fullSequence[fullSequence.length - 1];\n  }\n\n  private _createNode(\n    id: string,\n    parentId: string,\n    children: string[],\n    keytipProps: IKeytipProps,\n    persisted?: boolean,\n  ): IKeytipTreeNode {\n    const {\n      keySequences,\n      hasDynamicChildren,\n      overflowSetSequence,\n      hasMenu,\n      onExecute,\n      onReturn,\n      disabled,\n    } = keytipProps;\n    const node = {\n      id,\n      keySequences,\n      overflowSetSequence,\n      parent: parentId,\n      children,\n      onExecute,\n      onReturn,\n      hasDynamicChildren,\n      hasMenu,\n      disabled,\n      persisted,\n    };\n    node.children = Object.keys(this.nodeMap).reduce((array: string[], nodeMapKey: string): string[] => {\n      if (this.nodeMap[nodeMapKey].parent === id) {\n        array.push(this.nodeMap[nodeMapKey].id);\n      }\n      return array;\n    }, []);\n    return node;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}