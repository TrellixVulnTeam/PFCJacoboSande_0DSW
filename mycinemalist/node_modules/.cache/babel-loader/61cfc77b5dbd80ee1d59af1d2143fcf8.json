{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Icon } from '../../Icon';\nimport { Image } from '../../Image';\nimport { Link } from '../../Link';\nimport { classNamesFunction, css, initializeComponentRef } from '../../Utilities';\nvar LIST_ITEM_COUNT = 3;\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory DocumentCard}\n */\n\nvar DocumentCardPreviewBase =\n/** @class */\nfunction (_super) {\n  __extends(DocumentCardPreviewBase, _super);\n\n  function DocumentCardPreviewBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._renderPreviewList = function (previewImages) {\n      var getOverflowDocumentCountText = _this.props.getOverflowDocumentCountText; // Determine how many documents we won't be showing\n\n      var overflowDocumentCount = previewImages.length - LIST_ITEM_COUNT; // Determine the overflow text that will be rendered after the preview list.\n\n      var overflowText = overflowDocumentCount ? getOverflowDocumentCountText ? getOverflowDocumentCountText(overflowDocumentCount) : '+' + overflowDocumentCount : null; // Create list items for the documents to be shown\n\n      var fileListItems = previewImages.slice(0, LIST_ITEM_COUNT).map(function (file, fileIndex) {\n        return React.createElement(\"li\", {\n          key: fileIndex\n        }, React.createElement(Image, {\n          className: _this._classNames.fileListIcon,\n          src: file.iconSrc,\n          role: \"presentation\",\n          alt: \"\",\n          width: \"16px\",\n          height: \"16px\"\n        }), React.createElement(Link, __assign({\n          className: _this._classNames.fileListLink\n        }, (file.linkProps, {\n          href: file.linkProps && file.linkProps.href || file.url\n        })), file.name));\n      });\n      return React.createElement(\"div\", null, React.createElement(\"ul\", {\n        className: _this._classNames.fileList\n      }, fileListItems), overflowText && React.createElement(\"span\", {\n        className: _this._classNames.fileListOverflowText\n      }, overflowText));\n    };\n\n    initializeComponentRef(_this);\n    return _this;\n  }\n\n  DocumentCardPreviewBase.prototype.render = function () {\n    var _a = this.props,\n        previewImages = _a.previewImages,\n        styles = _a.styles,\n        theme = _a.theme,\n        className = _a.className;\n    var style;\n    var preview;\n    var isFileList = previewImages.length > 1;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isFileList: isFileList\n    });\n\n    if (previewImages.length > 1) {\n      // Render a list of files\n      preview = this._renderPreviewList(previewImages);\n    } else if (previewImages.length === 1) {\n      // Render a single preview\n      preview = this._renderPreviewImage(previewImages[0]); // Override the border color if an accent color was provided\n\n      /* eslint-disable deprecation/deprecation */\n\n      if (previewImages[0].accentColor) {\n        style = {\n          borderBottomColor: previewImages[0].accentColor\n        };\n      }\n      /* eslint-enable deprecation/deprecation */\n\n    }\n\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      style: style\n    }, preview);\n  };\n\n  DocumentCardPreviewBase.prototype._renderPreviewImage = function (previewImage) {\n    var width = previewImage.width,\n        height = previewImage.height,\n        imageFit = previewImage.imageFit,\n        previewIconProps = previewImage.previewIconProps,\n        previewIconContainerClass = previewImage.previewIconContainerClass;\n\n    if (previewIconProps) {\n      return React.createElement(\"div\", {\n        className: css(this._classNames.previewIcon, previewIconContainerClass),\n        style: {\n          width: width,\n          height: height\n        }\n      }, React.createElement(Icon, __assign({}, previewIconProps)));\n    }\n\n    var image = React.createElement(Image, {\n      width: width,\n      height: height,\n      imageFit: imageFit,\n      src: previewImage.previewImageSrc,\n      role: \"presentation\",\n      alt: \"\"\n    });\n    var icon;\n\n    if (previewImage.iconSrc) {\n      icon = React.createElement(Image, {\n        className: this._classNames.icon,\n        src: previewImage.iconSrc,\n        role: \"presentation\",\n        alt: \"\"\n      });\n    }\n\n    return React.createElement(\"div\", null, image, icon);\n  };\n\n  return DocumentCardPreviewBase;\n}(React.Component);\n\nexport { DocumentCardPreviewBase };","map":{"version":3,"mappings":"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","names":["React","Icon","Image","Link","classNamesFunction","css","initializeComponentRef","LIST_ITEM_COUNT","getClassNames","__extends","props","_super","_this","previewImages","overflowDocumentCount","length","overflowText","getOverflowDocumentCountText","fileListItems","slice","map","file","fileIndex","key","className","_classNames","fileListIcon","src","iconSrc","role","alt","width","height","__assign","fileListLink","linkProps","href","url","name","fileList","fileListOverflowText","DocumentCardPreviewBase","styles","theme","style","preview","isFileList","_renderPreviewList","_renderPreviewImage","accentColor","borderBottomColor","root","previewImage","imageFit","previewIconProps","previewIconContainerClass","previewIcon","image","previewImageSrc","icon","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\DocumentCard\\DocumentCardPreview.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Icon } from '../../Icon';\nimport { Image } from '../../Image';\nimport { Link } from '../../Link';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { classNamesFunction, css, initializeComponentRef } from '../../Utilities';\nimport {\n  IDocumentCardPreviewImage,\n  IDocumentCardPreviewProps,\n  IDocumentCardPreviewStyleProps,\n  IDocumentCardPreviewStyles,\n} from './DocumentCardPreview.types';\n\nconst LIST_ITEM_COUNT = 3;\nconst getClassNames = classNamesFunction<IDocumentCardPreviewStyleProps, IDocumentCardPreviewStyles>();\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardPreviewBase extends React.Component<IDocumentCardPreviewProps, any> {\n  private _classNames: IProcessedStyleSet<IDocumentCardPreviewStyles>;\n\n  constructor(props: IDocumentCardPreviewProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const { previewImages, styles, theme, className } = this.props;\n    let style: React.CSSProperties | undefined;\n    let preview: React.ReactNode;\n    const isFileList = previewImages.length > 1;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isFileList,\n    });\n\n    if (previewImages.length > 1) {\n      // Render a list of files\n      preview = this._renderPreviewList(previewImages);\n    } else if (previewImages.length === 1) {\n      // Render a single preview\n      preview = this._renderPreviewImage(previewImages[0]);\n\n      // Override the border color if an accent color was provided\n      /* eslint-disable deprecation/deprecation */\n      if (previewImages[0].accentColor) {\n        style = {\n          borderBottomColor: previewImages[0].accentColor,\n        };\n      }\n      /* eslint-enable deprecation/deprecation */\n    }\n\n    return (\n      <div className={this._classNames.root} style={style}>\n        {preview}\n      </div>\n    );\n  }\n\n  private _renderPreviewImage(\n    previewImage: IDocumentCardPreviewImage,\n  ): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> {\n    const { width, height, imageFit, previewIconProps, previewIconContainerClass } = previewImage;\n\n    if (previewIconProps) {\n      return (\n        <div\n          className={css(this._classNames.previewIcon, previewIconContainerClass)}\n          style={{ width: width, height: height }}\n        >\n          <Icon {...previewIconProps} />\n        </div>\n      );\n    }\n\n    const image = (\n      <Image\n        width={width}\n        height={height}\n        imageFit={imageFit}\n        src={previewImage.previewImageSrc}\n        role=\"presentation\"\n        alt=\"\"\n      />\n    );\n\n    let icon;\n    if (previewImage.iconSrc) {\n      icon = <Image className={this._classNames.icon} src={previewImage.iconSrc} role=\"presentation\" alt=\"\" />;\n    }\n\n    return (\n      <div>\n        {image}\n        {icon}\n      </div>\n    );\n  }\n\n  private _renderPreviewList = (\n    previewImages: IDocumentCardPreviewImage[],\n  ): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> => {\n    const { getOverflowDocumentCountText } = this.props;\n\n    // Determine how many documents we won't be showing\n    const overflowDocumentCount = previewImages.length - LIST_ITEM_COUNT;\n\n    // Determine the overflow text that will be rendered after the preview list.\n    const overflowText = overflowDocumentCount\n      ? getOverflowDocumentCountText\n        ? getOverflowDocumentCountText(overflowDocumentCount)\n        : '+' + overflowDocumentCount\n      : null;\n\n    // Create list items for the documents to be shown\n    const fileListItems = previewImages.slice(0, LIST_ITEM_COUNT).map((file, fileIndex) => (\n      <li key={fileIndex}>\n        <Image\n          className={this._classNames.fileListIcon}\n          src={file.iconSrc}\n          role=\"presentation\"\n          alt=\"\"\n          width=\"16px\"\n          height=\"16px\"\n        />\n        <Link\n          className={this._classNames.fileListLink}\n          // eslint-disable-next-line deprecation/deprecation\n          {...(file.linkProps, { href: (file.linkProps && file.linkProps.href) || file.url })}\n        >\n          {file.name}\n        </Link>\n      </li>\n    ));\n\n    return (\n      <div>\n        <ul className={this._classNames.fileList}>{fileListItems}</ul>\n        {overflowText && <span className={this._classNames.fileListOverflowText}>{overflowText}</span>}\n      </div>\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}