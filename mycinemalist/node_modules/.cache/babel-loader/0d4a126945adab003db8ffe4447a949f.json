{"ast":null,"code":"import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, nullRender, getNativeProps, divProperties, composeComponentAs, initializeComponentRef } from '../../Utilities';\nimport { OverflowSet } from '../../OverflowSet';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { CommandBarButton } from '../../Button';\nimport { TooltipHost } from '../../Tooltip';\nimport { getCommandButtonStyles } from './CommandBar.styles';\nvar getClassNames = classNamesFunction();\n\nvar CommandBarBase =\n/** @class */\nfunction (_super) {\n  __extends(CommandBarBase, _super);\n\n  function CommandBarBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._overflowSet = React.createRef();\n    _this._resizeGroup = React.createRef();\n\n    _this._onRenderData = function (data) {\n      return React.createElement(FocusZone, {\n        className: css(_this._classNames.root),\n        direction: FocusZoneDirection.horizontal,\n        role: 'menubar',\n        \"aria-label\": _this.props.ariaLabel\n      }, React.createElement(OverflowSet, {\n        role: \"none\",\n        componentRef: _this._overflowSet,\n        className: css(_this._classNames.primarySet),\n        doNotContainWithinFocusZone: true,\n        items: data.primaryItems,\n        overflowItems: data.overflowItems.length ? data.overflowItems : undefined,\n        onRenderItem: _this._onRenderItem,\n        onRenderOverflowButton: _this._onRenderOverflowButton\n      }), data.farItems && data.farItems.length > 0 && React.createElement(OverflowSet, {\n        role: \"none\",\n        className: css(_this._classNames.secondarySet),\n        doNotContainWithinFocusZone: true,\n        items: data.farItems,\n        onRenderItem: _this._onRenderItem,\n        onRenderOverflowButton: nullRender\n      }));\n    };\n\n    _this._onRenderItem = function (item) {\n      if (item.onRender) {\n        // These are the top level items, there is no relevant menu dismissing function to\n        // provide for the IContextualMenuItem onRender function. Pass in a no op function instead.\n        return item.onRender(item, function () {\n          return undefined;\n        });\n      } // eslint-disable-next-line deprecation/deprecation\n\n\n      var itemText = item.text || item.name;\n\n      var commandButtonProps = __assign(__assign({\n        allowDisabledFocus: true,\n        role: 'menuitem'\n      }, item), {\n        styles: getCommandButtonStyles(item.buttonStyles),\n        className: css('ms-CommandBarItem-link', item.className),\n        text: !item.iconOnly ? itemText : undefined,\n        menuProps: item.subMenuProps,\n        onClick: _this._onButtonClick(item)\n      });\n\n      if (item.iconOnly && (itemText !== undefined || item.tooltipHostProps)) {\n        return React.createElement(TooltipHost, __assign({\n          content: itemText\n        }, item.tooltipHostProps), _this._commandButton(item, commandButtonProps));\n      }\n\n      return _this._commandButton(item, commandButtonProps);\n    };\n\n    _this._commandButton = function (item, props) {\n      var ButtonAs = _this.props.buttonAs;\n      var CommandBarButtonAs = item.commandBarButtonAs;\n      var DefaultButtonAs = CommandBarButton; // The prop types between these three possible implementations overlap enough that a force-cast is safe.\n\n      var Type = DefaultButtonAs;\n\n      if (CommandBarButtonAs) {\n        Type = composeComponentAs(CommandBarButtonAs, Type);\n      }\n\n      if (ButtonAs) {\n        Type = composeComponentAs(ButtonAs, Type);\n      } // Always pass the default implementation to the override so it may be composed.\n\n\n      return React.createElement(Type, __assign({}, props));\n    };\n\n    _this._onRenderOverflowButton = function (overflowItems) {\n      var _a = _this.props.overflowButtonProps,\n          overflowButtonProps = _a === void 0 ? {} : _a;\n\n      var combinedOverflowItems = __spreadArrays(overflowButtonProps.menuProps ? overflowButtonProps.menuProps.items : [], overflowItems);\n\n      var overflowProps = __assign(__assign({\n        role: 'menuitem'\n      }, overflowButtonProps), {\n        styles: __assign({\n          menuIcon: {\n            fontSize: '17px'\n          }\n        }, overflowButtonProps.styles),\n        className: css('ms-CommandBar-overflowButton', overflowButtonProps.className),\n        menuProps: __assign(__assign({}, overflowButtonProps.menuProps), {\n          items: combinedOverflowItems\n        }),\n        menuIconProps: __assign({\n          iconName: 'More'\n        }, overflowButtonProps.menuIconProps)\n      });\n\n      var OverflowButtonType = _this.props.overflowButtonAs ? composeComponentAs(_this.props.overflowButtonAs, CommandBarButton) : CommandBarButton;\n      return React.createElement(OverflowButtonType, __assign({}, overflowProps));\n    };\n\n    _this._onReduceData = function (data) {\n      var _a = _this.props,\n          shiftOnReduce = _a.shiftOnReduce,\n          onDataReduced = _a.onDataReduced;\n      var primaryItems = data.primaryItems,\n          overflowItems = data.overflowItems,\n          cacheKey = data.cacheKey; // Use first item if shiftOnReduce, otherwise use last item\n\n      var movedItem = primaryItems[shiftOnReduce ? 0 : primaryItems.length - 1];\n\n      if (movedItem !== undefined) {\n        movedItem.renderedInOverflow = true;\n        overflowItems = __spreadArrays([movedItem], overflowItems);\n        primaryItems = shiftOnReduce ? primaryItems.slice(1) : primaryItems.slice(0, -1);\n\n        var newData = __assign(__assign({}, data), {\n          primaryItems: primaryItems,\n          overflowItems: overflowItems\n        });\n\n        cacheKey = _this._computeCacheKey({\n          primaryItems: primaryItems,\n          overflow: overflowItems.length > 0\n        });\n\n        if (onDataReduced) {\n          onDataReduced(movedItem);\n        }\n\n        newData.cacheKey = cacheKey;\n        return newData;\n      }\n\n      return undefined;\n    };\n\n    _this._onGrowData = function (data) {\n      var _a = _this.props,\n          shiftOnReduce = _a.shiftOnReduce,\n          onDataGrown = _a.onDataGrown;\n      var minimumOverflowItems = data.minimumOverflowItems;\n      var primaryItems = data.primaryItems,\n          overflowItems = data.overflowItems,\n          cacheKey = data.cacheKey;\n      var movedItem = overflowItems[0]; // Make sure that moved item exists and is not one of the original overflow items\n\n      if (movedItem !== undefined && overflowItems.length > minimumOverflowItems) {\n        movedItem.renderedInOverflow = false;\n        overflowItems = overflowItems.slice(1); // if shiftOnReduce, movedItem goes first, otherwise, last.\n\n        primaryItems = shiftOnReduce ? __spreadArrays([movedItem], primaryItems) : __spreadArrays(primaryItems, [movedItem]);\n\n        var newData = __assign(__assign({}, data), {\n          primaryItems: primaryItems,\n          overflowItems: overflowItems\n        });\n\n        cacheKey = _this._computeCacheKey({\n          primaryItems: primaryItems,\n          overflow: overflowItems.length > 0\n        });\n\n        if (onDataGrown) {\n          onDataGrown(movedItem);\n        }\n\n        newData.cacheKey = cacheKey;\n        return newData;\n      }\n\n      return undefined;\n    };\n\n    initializeComponentRef(_this);\n    return _this;\n  }\n\n  CommandBarBase.prototype.render = function () {\n    var _a = this.props,\n        items = _a.items,\n        overflowItems = _a.overflowItems,\n        farItems = _a.farItems,\n        styles = _a.styles,\n        theme = _a.theme,\n        dataDidRender = _a.dataDidRender,\n        _b = _a.onReduceData,\n        onReduceData = _b === void 0 ? this._onReduceData : _b,\n        _c = _a.onGrowData,\n        onGrowData = _c === void 0 ? this._onGrowData : _c;\n    var commandBarData = {\n      primaryItems: __spreadArrays(items),\n      overflowItems: __spreadArrays(overflowItems),\n      minimumOverflowItems: __spreadArrays(overflowItems).length,\n      farItems: farItems,\n      cacheKey: this._computeCacheKey({\n        primaryItems: __spreadArrays(items),\n        overflow: overflowItems && overflowItems.length > 0\n      })\n    };\n    this._classNames = getClassNames(styles, {\n      theme: theme\n    }); // ResizeGroup will render these attributes to the root <div>.\n    // TODO We may need to elevate classNames from <FocusZone> into <ResizeGroup> ?\n\n    var nativeProps = getNativeProps(this.props, divProperties);\n    return React.createElement(ResizeGroup, __assign({}, nativeProps, {\n      componentRef: this._resizeGroup,\n      data: commandBarData,\n      onReduceData: onReduceData,\n      onGrowData: onGrowData,\n      onRenderData: this._onRenderData,\n      dataDidRender: dataDidRender\n    }));\n  };\n\n  CommandBarBase.prototype.focus = function () {\n    var overflowSet = this._overflowSet.current;\n    overflowSet && overflowSet.focus();\n  };\n\n  CommandBarBase.prototype.remeasure = function () {\n    this._resizeGroup.current && this._resizeGroup.current.remeasure();\n  };\n\n  CommandBarBase.prototype._onButtonClick = function (item) {\n    return function (ev) {\n      // inactive is deprecated. remove check in 7.0\n      // eslint-disable-next-line deprecation/deprecation\n      if (item.inactive) {\n        return;\n      }\n\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n  };\n\n  CommandBarBase.prototype._computeCacheKey = function (data) {\n    var primaryItems = data.primaryItems,\n        overflow = data.overflow;\n\n    var returnKey = function returnKey(acc, current) {\n      var _a = current.cacheKey,\n          cacheKey = _a === void 0 ? current.key : _a;\n      return acc + cacheKey;\n    };\n\n    var primaryKey = primaryItems && primaryItems.reduce(returnKey, '');\n    var overflowKey = overflow ? 'overflow' : '';\n    return [primaryKey, overflowKey].join('');\n  };\n\n  CommandBarBase.defaultProps = {\n    items: [],\n    overflowItems: []\n  };\n  return CommandBarBase;\n}(React.Component);\n\nexport { CommandBarBase };","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","css","nullRender","getNativeProps","divProperties","composeComponentAs","initializeComponentRef","OverflowSet","ResizeGroup","FocusZone","FocusZoneDirection","CommandBarButton","TooltipHost","getCommandButtonStyles","getClassNames","__extends","props","_super","_this","createRef","data","className","_classNames","root","direction","horizontal","role","ariaLabel","componentRef","_overflowSet","primarySet","doNotContainWithinFocusZone","items","primaryItems","overflowItems","length","undefined","onRenderItem","_onRenderItem","onRenderOverflowButton","_onRenderOverflowButton","farItems","secondarySet","item","onRender","itemText","text","name","commandButtonProps","allowDisabledFocus","styles","buttonStyles","iconOnly","menuProps","subMenuProps","onClick","_onButtonClick","tooltipHostProps","__assign","content","_commandButton","ButtonAs","buttonAs","CommandBarButtonAs","commandBarButtonAs","DefaultButtonAs","Type","combinedOverflowItems","overflowButtonProps","overflowProps","menuIcon","fontSize","menuIconProps","iconName","OverflowButtonType","overflowButtonAs","shiftOnReduce","onDataReduced","cacheKey","movedItem","renderedInOverflow","slice","newData","_computeCacheKey","overflow","onDataGrown","minimumOverflowItems","__spreadArrays","CommandBarBase","theme","dataDidRender","_b","onReduceData","_c","onGrowData","commandBarData","nativeProps","_resizeGroup","onRenderData","_onRenderData","overflowSet","focus","current","remeasure","inactive","ev","returnKey","acc","primaryKey","reduce","overflowKey","join","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\CommandBar\\CommandBar.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  classNamesFunction,\n  css,\n  nullRender,\n  IComponentAs,\n  getNativeProps,\n  divProperties,\n  composeComponentAs,\n  initializeComponentRef,\n} from '../../Utilities';\nimport {\n  ICommandBar,\n  ICommandBarItemProps,\n  ICommandBarProps,\n  ICommandBarStyleProps,\n  ICommandBarStyles,\n} from './CommandBar.types';\nimport { IOverflowSet, OverflowSet } from '../../OverflowSet';\nimport { IResizeGroup, ResizeGroup } from '../../ResizeGroup';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { CommandBarButton, IButtonProps } from '../../Button';\nimport { TooltipHost } from '../../Tooltip';\nimport { getCommandButtonStyles } from './CommandBar.styles';\n\nconst getClassNames = classNamesFunction<ICommandBarStyleProps, ICommandBarStyles>();\n\nexport interface ICommandBarData {\n  /**\n   * Items being rendered in the primary region\n   */\n  primaryItems: ICommandBarItemProps[];\n  /**\n   * Items being rendered in the overflow\n   */\n  overflowItems: ICommandBarItemProps[];\n  /**\n   * Items being rendered on the far side\n   */\n  farItems: ICommandBarItemProps[] | undefined;\n  /**\n   * Length of original overflowItems to ensure that they are not moved into primary region on resize\n   */\n  minimumOverflowItems: number;\n  /**\n   * Unique string used to cache the width of the command bar\n   */\n  cacheKey: string;\n}\n\nexport class CommandBarBase extends React.Component<ICommandBarProps, {}> implements ICommandBar {\n  public static defaultProps: ICommandBarProps = {\n    items: [],\n    overflowItems: [],\n  };\n\n  private _overflowSet = React.createRef<IOverflowSet>();\n  private _resizeGroup = React.createRef<IResizeGroup>();\n  private _classNames: { [key in keyof ICommandBarStyles]: string };\n\n  constructor(props: ICommandBarProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      items,\n      overflowItems,\n      farItems,\n      styles,\n      theme,\n      dataDidRender,\n      onReduceData = this._onReduceData,\n      onGrowData = this._onGrowData,\n    } = this.props;\n\n    const commandBarData: ICommandBarData = {\n      primaryItems: [...items],\n      overflowItems: [...overflowItems!],\n      minimumOverflowItems: [...overflowItems!].length, // for tracking\n      farItems,\n      cacheKey: this._computeCacheKey({\n        primaryItems: [...items],\n        overflow: overflowItems && overflowItems.length > 0,\n      }),\n    };\n\n    this._classNames = getClassNames(styles!, { theme: theme! });\n\n    // ResizeGroup will render these attributes to the root <div>.\n    // TODO We may need to elevate classNames from <FocusZone> into <ResizeGroup> ?\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    return (\n      <ResizeGroup\n        {...nativeProps}\n        componentRef={this._resizeGroup}\n        data={commandBarData}\n        onReduceData={onReduceData}\n        onGrowData={onGrowData}\n        onRenderData={this._onRenderData}\n        dataDidRender={dataDidRender}\n      />\n    );\n  }\n\n  public focus(): void {\n    const { current: overflowSet } = this._overflowSet;\n\n    overflowSet && overflowSet.focus();\n  }\n\n  public remeasure(): void {\n    this._resizeGroup.current && this._resizeGroup.current.remeasure();\n  }\n\n  private _onRenderData = (data: ICommandBarData): JSX.Element => {\n    return (\n      <FocusZone\n        className={css(this._classNames.root)}\n        direction={FocusZoneDirection.horizontal}\n        role={'menubar'}\n        aria-label={this.props.ariaLabel}\n      >\n        {/*Primary Items*/}\n        <OverflowSet\n          role=\"none\"\n          componentRef={this._overflowSet}\n          className={css(this._classNames.primarySet)}\n          doNotContainWithinFocusZone={true}\n          items={data.primaryItems}\n          overflowItems={data.overflowItems.length ? data.overflowItems : undefined}\n          onRenderItem={this._onRenderItem}\n          onRenderOverflowButton={this._onRenderOverflowButton}\n        />\n\n        {/*Secondary Items*/}\n        {data.farItems && data.farItems.length > 0 && (\n          <OverflowSet\n            role=\"none\"\n            className={css(this._classNames.secondarySet)}\n            doNotContainWithinFocusZone={true}\n            items={data.farItems}\n            onRenderItem={this._onRenderItem}\n            onRenderOverflowButton={nullRender}\n          />\n        )}\n      </FocusZone>\n    );\n  };\n\n  private _onRenderItem = (item: ICommandBarItemProps): JSX.Element | React.ReactNode => {\n    if (item.onRender) {\n      // These are the top level items, there is no relevant menu dismissing function to\n      // provide for the IContextualMenuItem onRender function. Pass in a no op function instead.\n      return item.onRender(item, () => undefined);\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const itemText = item.text || item.name;\n    const commandButtonProps: ICommandBarItemProps = {\n      allowDisabledFocus: true,\n      role: 'menuitem',\n      ...item,\n      styles: getCommandButtonStyles(item.buttonStyles),\n      className: css('ms-CommandBarItem-link', item.className),\n      text: !item.iconOnly ? itemText : undefined,\n      menuProps: item.subMenuProps,\n      onClick: this._onButtonClick(item),\n    };\n\n    if (item.iconOnly && (itemText !== undefined || item.tooltipHostProps)) {\n      return (\n        <TooltipHost content={itemText} {...item.tooltipHostProps}>\n          {this._commandButton(item, commandButtonProps)}\n        </TooltipHost>\n      );\n    }\n\n    return this._commandButton(item, commandButtonProps);\n  };\n\n  private _commandButton = (item: ICommandBarItemProps, props: ICommandBarItemProps): JSX.Element => {\n    const ButtonAs = this.props.buttonAs as IComponentAs<ICommandBarItemProps> | undefined;\n    const CommandBarButtonAs = item.commandBarButtonAs as IComponentAs<ICommandBarItemProps> | undefined;\n    const DefaultButtonAs = (CommandBarButton as {}) as IComponentAs<ICommandBarItemProps>;\n\n    // The prop types between these three possible implementations overlap enough that a force-cast is safe.\n    let Type = DefaultButtonAs;\n\n    if (CommandBarButtonAs) {\n      Type = composeComponentAs(CommandBarButtonAs, Type);\n    }\n\n    if (ButtonAs) {\n      Type = composeComponentAs(ButtonAs, Type);\n    }\n\n    // Always pass the default implementation to the override so it may be composed.\n    return <Type {...(props as ICommandBarItemProps)} />;\n  };\n\n  private _onButtonClick(item: ICommandBarItemProps): (ev: React.MouseEvent<HTMLButtonElement>) => void {\n    return ev => {\n      // inactive is deprecated. remove check in 7.0\n      // eslint-disable-next-line deprecation/deprecation\n      if (item.inactive) {\n        return;\n      }\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n  }\n\n  private _onRenderOverflowButton = (overflowItems: ICommandBarItemProps[]): JSX.Element => {\n    const {\n      overflowButtonProps = {}, // assure that props is not empty\n    } = this.props;\n\n    const combinedOverflowItems: ICommandBarItemProps[] = [\n      ...(overflowButtonProps.menuProps ? overflowButtonProps.menuProps.items : []),\n      ...overflowItems,\n    ];\n\n    const overflowProps: IButtonProps = {\n      role: 'menuitem',\n      ...overflowButtonProps,\n      styles: { menuIcon: { fontSize: '17px' }, ...overflowButtonProps.styles },\n      className: css('ms-CommandBar-overflowButton', overflowButtonProps.className),\n      menuProps: { ...overflowButtonProps.menuProps, items: combinedOverflowItems },\n      menuIconProps: { iconName: 'More', ...overflowButtonProps.menuIconProps },\n    };\n\n    const OverflowButtonType = this.props.overflowButtonAs\n      ? composeComponentAs(this.props.overflowButtonAs, CommandBarButton)\n      : CommandBarButton;\n\n    return <OverflowButtonType {...(overflowProps as IButtonProps)} />;\n  };\n\n  private _computeCacheKey(data: { primaryItems?: ICommandBarItemProps[]; overflow?: boolean }): string {\n    const { primaryItems, overflow } = data;\n    const returnKey = (acc: string, current: ICommandBarItemProps): string => {\n      const { cacheKey = current.key } = current;\n      return acc + cacheKey;\n    };\n\n    const primaryKey = primaryItems && primaryItems.reduce(returnKey, '');\n    const overflowKey = overflow ? 'overflow' : '';\n\n    return [primaryKey, overflowKey].join('');\n  }\n\n  private _onReduceData = (data: ICommandBarData): ICommandBarData | undefined => {\n    const { shiftOnReduce, onDataReduced } = this.props;\n    let { primaryItems, overflowItems, cacheKey } = data;\n\n    // Use first item if shiftOnReduce, otherwise use last item\n    const movedItem = primaryItems[shiftOnReduce ? 0 : primaryItems.length - 1];\n\n    if (movedItem !== undefined) {\n      movedItem.renderedInOverflow = true;\n\n      overflowItems = [movedItem, ...overflowItems];\n      primaryItems = shiftOnReduce ? primaryItems.slice(1) : primaryItems.slice(0, -1);\n\n      const newData = { ...data, primaryItems, overflowItems };\n      cacheKey = this._computeCacheKey({ primaryItems, overflow: overflowItems.length > 0 });\n\n      if (onDataReduced) {\n        onDataReduced(movedItem);\n      }\n\n      newData.cacheKey = cacheKey;\n      return newData;\n    }\n\n    return undefined;\n  };\n\n  private _onGrowData = (data: ICommandBarData): ICommandBarData | undefined => {\n    const { shiftOnReduce, onDataGrown } = this.props;\n    const { minimumOverflowItems } = data;\n    let { primaryItems, overflowItems, cacheKey } = data;\n    const movedItem = overflowItems[0];\n\n    // Make sure that moved item exists and is not one of the original overflow items\n    if (movedItem !== undefined && overflowItems.length > minimumOverflowItems) {\n      movedItem.renderedInOverflow = false;\n\n      overflowItems = overflowItems.slice(1);\n      // if shiftOnReduce, movedItem goes first, otherwise, last.\n      primaryItems = shiftOnReduce ? [movedItem, ...primaryItems] : [...primaryItems, movedItem];\n\n      const newData = { ...data, primaryItems, overflowItems };\n      cacheKey = this._computeCacheKey({ primaryItems, overflow: overflowItems.length > 0 });\n\n      if (onDataGrown) {\n        onDataGrown(movedItem);\n      }\n\n      newData.cacheKey = cacheKey;\n      return newData;\n    }\n\n    return undefined;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}