{"ast":null,"code":"import { __assign, __decorate, __extends, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { Autofill } from '../Autofill/index';\nimport { initializeComponentRef, css, customizable, divProperties, findElementRecursive, findIndex, focusAsync, getId, getNativeProps, isIOS, isMac, KeyCodes, shallowCompare, mergeAriaAttributeValues, warnMutuallyExclusive, Async, EventGroup } from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { Checkbox } from '../../Checkbox';\nimport { CommandButton, IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { getCaretDownButtonStyles, getOptionStyles, getStyles } from './ComboBox.styles';\nimport { getClassNames, getComboBoxOptionClassNames } from './ComboBox.classNames';\nimport { KeytipData } from '../../KeytipData';\nimport { Label } from '../../Label';\nimport { SelectableOptionMenuItemType, getAllSelectedOptions } from '../../utilities/selectableOption/index';\nvar SearchDirection;\n\n(function (SearchDirection) {\n  SearchDirection[SearchDirection[\"backward\"] = -1] = \"backward\";\n  SearchDirection[SearchDirection[\"none\"] = 0] = \"none\";\n  SearchDirection[SearchDirection[\"forward\"] = 1] = \"forward\";\n})(SearchDirection || (SearchDirection = {}));\n\nvar HoverStatus;\n\n(function (HoverStatus) {\n  /** Used when the user was hovering and has since moused out of the menu items */\n  HoverStatus[HoverStatus[\"clearAll\"] = -2] = \"clearAll\";\n  /** Default \"normal\" state, when no hover has happened or a hover is in progress */\n\n  HoverStatus[HoverStatus[\"default\"] = -1] = \"default\";\n})(HoverStatus || (HoverStatus = {}));\n\nvar ScrollIdleDelay = 250;\n/* ms */\n\nvar TouchIdleDelay = 500;\n/* ms */\n\n/**\n * This is used to clear any pending autocomplete text (used when autocomplete is true and\n * allowFreeform is false)\n */\n\nvar ReadOnlyPendingAutoCompleteTimeout = 1000;\n/* ms */\n\n/**\n * Internal class that is used to wrap all ComboBox options.\n * This is used to customize when we want to rerender components,\n * so we don't rerender every option every time render is executed.\n */\n\nvar ComboBoxOptionWrapper =\n/** @class */\nfunction (_super) {\n  __extends(ComboBoxOptionWrapper, _super);\n\n  function ComboBoxOptionWrapper() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ComboBoxOptionWrapper.prototype.render = function () {\n    return this.props.render();\n  };\n\n  ComboBoxOptionWrapper.prototype.shouldComponentUpdate = function (newProps) {\n    // The render function will always be different, so we ignore that prop\n    return !shallowCompare(__assign(__assign({}, this.props), {\n      render: undefined\n    }), __assign(__assign({}, newProps), {\n      render: undefined\n    }));\n  };\n\n  return ComboBoxOptionWrapper;\n}(React.Component);\n\nvar COMPONENT_NAME = 'ComboBox';\n\nvar ComboBox =\n/** @class */\nfunction (_super) {\n  __extends(ComboBox, _super);\n\n  function ComboBox(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    /** The input aspect of the comboBox */\n\n    _this._autofill = React.createRef();\n    /** The wrapping div of the input and button */\n\n    _this._comboBoxWrapper = React.createRef();\n    /** The callout element */\n\n    _this._comboBoxMenu = React.createRef();\n    /** The menu item element that is currently selected */\n\n    _this._selectedElement = React.createRef();\n    /**\n     * {@inheritdoc}\n     */\n\n    _this.focus = function (shouldOpenOnFocus, useFocusAsync) {\n      if (_this._autofill.current) {\n        if (useFocusAsync) {\n          focusAsync(_this._autofill.current);\n        } else {\n          _this._autofill.current.focus();\n        }\n\n        if (shouldOpenOnFocus) {\n          _this.setState({\n            isOpen: true\n          });\n        }\n      } // Programatically setting focus means that there is nothing else that needs to be done\n      // Focus is now contained\n\n\n      if (!_this._hasFocus()) {\n        _this.setState({\n          focusState: 'focused'\n        });\n      }\n    };\n    /**\n     * Close menu callout if it is open\n     */\n\n\n    _this.dismissMenu = function () {\n      var isOpen = _this.state.isOpen;\n      isOpen && _this.setState({\n        isOpen: false\n      });\n    };\n    /**\n     * componentWillReceiveProps handler for the auto fill component\n     * Checks/updates the iput value to set, if needed\n     * @param defaultVisibleValue - the defaultVisibleValue that got passed\n     *  in to the auto fill's componentWillReceiveProps\n     * @returns - the updated value to set, if needed\n     */\n\n\n    _this._onUpdateValueInAutofillWillReceiveProps = function () {\n      var comboBox = _this._autofill.current;\n\n      if (!comboBox) {\n        return null;\n      }\n\n      if (comboBox.value === null || comboBox.value === undefined) {\n        return null;\n      }\n\n      var visibleValue = _this._normalizeToString(_this._currentVisibleValue);\n\n      if (comboBox.value !== visibleValue) {\n        // If visibleValue is empty, ensure that the empty string is used\n        return visibleValue || '';\n      }\n\n      return comboBox.value;\n    };\n\n    _this._renderComboBoxWrapper = function (multiselectAccessibleText, errorMessageId, keytipAttributes) {\n      if (keytipAttributes === void 0) {\n        keytipAttributes = {};\n      }\n\n      var _a = _this.props,\n          label = _a.label,\n          disabled = _a.disabled,\n          ariaLabel = _a.ariaLabel,\n          ariaDescribedBy = _a.ariaDescribedBy,\n          required = _a.required,\n          errorMessage = _a.errorMessage,\n          buttonIconProps = _a.buttonIconProps,\n          _b = _a.isButtonAriaHidden,\n          isButtonAriaHidden = _b === void 0 ? true : _b,\n          title = _a.title,\n          placeholderProp = _a.placeholder,\n          tabIndex = _a.tabIndex,\n          autofill = _a.autofill,\n          iconButtonProps = _a.iconButtonProps;\n      var _c = _this.state,\n          isOpen = _c.isOpen,\n          suggestedDisplayValue = _c.suggestedDisplayValue; // If the combobox has focus, is multiselect, and has a display string, then use that placeholder\n      // so that the selected items don't appear to vanish. This is not ideal but it's the only reasonable way\n      // to correct the behavior where the input is cleared so the user can type. If a full refactor is done, then this\n      // should be removed and the multiselect combobox should behave like a picker.\n\n      var placeholder = _this._hasFocus() && _this.props.multiSelect && multiselectAccessibleText ? multiselectAccessibleText : placeholderProp;\n      return React.createElement(\"div\", {\n        \"data-ktp-target\": keytipAttributes['data-ktp-target'],\n        ref: _this._comboBoxWrapper,\n        id: _this._id + 'wrapper',\n        className: _this._classNames.root\n      }, React.createElement(Autofill, __assign({\n        \"data-ktp-execute-target\": keytipAttributes['data-ktp-execute-target'],\n        \"data-is-interactable\": !disabled,\n        componentRef: _this._autofill,\n        id: _this._id + '-input',\n        className: _this._classNames.input,\n        type: \"text\",\n        onFocus: _this._onFocus,\n        onBlur: _this._onBlur,\n        onKeyDown: _this._onInputKeyDown,\n        onKeyUp: _this._onInputKeyUp,\n        onClick: _this._onAutofillClick,\n        onTouchStart: _this._onTouchStart,\n        onInputValueChange: _this._onInputChange,\n        \"aria-expanded\": isOpen,\n        \"aria-autocomplete\": _this._getAriaAutoCompleteValue(),\n        role: \"combobox\",\n        readOnly: disabled,\n        \"aria-labelledby\": label && _this._id + '-label',\n        \"aria-label\": ariaLabel && !label ? ariaLabel : undefined,\n        \"aria-describedby\": errorMessage !== undefined ? mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'], errorMessageId) : mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby']),\n        \"aria-activedescendant\": _this._getAriaActiveDescendantValue(),\n        \"aria-required\": required,\n        \"aria-disabled\": disabled,\n        \"aria-owns\": isOpen ? _this._id + '-list' : undefined,\n        spellCheck: false,\n        defaultVisibleValue: _this._currentVisibleValue,\n        suggestedDisplayValue: suggestedDisplayValue,\n        updateValueInWillReceiveProps: _this._onUpdateValueInAutofillWillReceiveProps,\n        shouldSelectFullInputValueInComponentDidUpdate: _this._onShouldSelectFullInputValueInAutofillComponentDidUpdate,\n        title: title,\n        preventValueSelection: !_this._hasFocus(),\n        placeholder: placeholder,\n        tabIndex: tabIndex\n      }, autofill)), React.createElement(IconButton, __assign({\n        className: 'ms-ComboBox-CaretDown-button',\n        styles: _this._getCaretButtonStyles(),\n        role: \"presentation\",\n        \"aria-hidden\": isButtonAriaHidden,\n        \"data-is-focusable\": false,\n        tabIndex: -1,\n        onClick: _this._onComboBoxClick,\n        onBlur: _this._onBlur,\n        iconProps: buttonIconProps,\n        disabled: disabled,\n        checked: isOpen\n      }, iconButtonProps)));\n    };\n    /**\n     * componentDidUpdate handler for the auto fill component\n     *\n     * @param defaultVisibleValue - the current defaultVisibleValue in the auto fill's componentDidUpdate\n     * @param suggestedDisplayValue - the current suggestedDisplayValue in the auto fill's componentDidUpdate\n     * @returns - should the full value of the input be selected?\n     * True if the defaultVisibleValue equals the suggestedDisplayValue, false otherwise\n     */\n\n\n    _this._onShouldSelectFullInputValueInAutofillComponentDidUpdate = function () {\n      return _this._currentVisibleValue === _this.state.suggestedDisplayValue;\n    };\n    /**\n     * Get the correct value to pass to the input\n     * to show to the user based off of the current props and state\n     * @returns the value to pass to the input\n     */\n\n\n    _this._getVisibleValue = function () {\n      var _a = _this.props,\n          text = _a.text,\n          allowFreeform = _a.allowFreeform,\n          autoComplete = _a.autoComplete;\n      var _b = _this.state,\n          selectedIndices = _b.selectedIndices,\n          currentPendingValueValidIndex = _b.currentPendingValueValidIndex,\n          currentOptions = _b.currentOptions,\n          currentPendingValue = _b.currentPendingValue,\n          suggestedDisplayValue = _b.suggestedDisplayValue,\n          isOpen = _b.isOpen;\n\n      var currentPendingIndexValid = _this._indexWithinBounds(currentOptions, currentPendingValueValidIndex); // If the user passed is a value prop, use that\n      // unless we are open and have a valid current pending index\n\n\n      if (!(isOpen && currentPendingIndexValid) && text && (currentPendingValue === null || currentPendingValue === undefined)) {\n        return text;\n      }\n\n      if (_this.props.multiSelect) {\n        // Multi-select\n        if (_this._hasFocus()) {\n          var index = -1;\n\n          if (autoComplete === 'on' && currentPendingIndexValid) {\n            index = currentPendingValueValidIndex;\n          }\n\n          return _this._getPendingString(currentPendingValue, currentOptions, index);\n        } else {\n          return _this._getMultiselectDisplayString(selectedIndices, currentOptions, suggestedDisplayValue);\n        }\n      } else {\n        // Single-select\n        var index = _this._getFirstSelectedIndex();\n\n        if (allowFreeform) {\n          // If we are allowing freeform and autocomplete is also true\n          // and we've got a pending value that matches an option, remember\n          // the matched option's index\n          if (autoComplete === 'on' && currentPendingIndexValid) {\n            index = currentPendingValueValidIndex;\n          } // Since we are allowing freeform, if there is currently a pending value, use that\n          // otherwise use the index determined above (falling back to '' if we did not get a valid index)\n\n\n          return _this._getPendingString(currentPendingValue, currentOptions, index);\n        } else {\n          // If we are not allowing freeform and have a\n          // valid index that matches the pending value,\n          // we know we will need some version of the pending value\n          if (currentPendingIndexValid && autoComplete === 'on') {\n            // If autoComplete is on, return the\n            // raw pending value, otherwise remember\n            // the matched option's index\n            index = currentPendingValueValidIndex;\n            return _this._normalizeToString(currentPendingValue);\n          } else if (!_this.state.isOpen && currentPendingValue) {\n            return _this._indexWithinBounds(currentOptions, index) ? currentPendingValue : _this._normalizeToString(suggestedDisplayValue);\n          } else {\n            return _this._indexWithinBounds(currentOptions, index) ? currentOptions[index].text : _this._normalizeToString(suggestedDisplayValue);\n          }\n        }\n      }\n    };\n    /**\n     * Handler for typing changes on the input\n     * @param updatedValue - the newly changed value\n     */\n\n\n    _this._onInputChange = function (updatedValue) {\n      if (_this.props.disabled) {\n        _this._handleInputWhenDisabled(null\n        /* event */\n        );\n\n        return;\n      }\n\n      _this.props.allowFreeform ? _this._processInputChangeWithFreeform(updatedValue) : _this._processInputChangeWithoutFreeform(updatedValue);\n    };\n    /**\n     * Focus (and select) the content of the input\n     * and set the focused state\n     */\n\n\n    _this._onFocus = function () {\n      if (_this._autofill.current && _this._autofill.current.inputElement) {\n        _this._autofill.current.inputElement.select();\n      }\n\n      if (!_this._hasFocus()) {\n        _this.setState({\n          focusState: 'focusing'\n        });\n      }\n    };\n    /**\n     * Callback issued when the options should be resolved, if they have been updated or\n     * if they need to be passed in the first time. This only does work if an onResolveOptions\n     * callback was passed in\n     */\n\n\n    _this._onResolveOptions = function () {\n      if (_this.props.onResolveOptions) {\n        // get the options\n        var newOptions = _this.props.onResolveOptions(__spreadArrays(_this.state.currentOptions)); // Check to see if the returned value is an array, if it is update the state\n        // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n        // If it is then resolve it asynchronously.\n\n\n        if (Array.isArray(newOptions)) {\n          _this.setState({\n            currentOptions: newOptions\n          });\n        } else if (newOptions && newOptions.then) {\n          // Ensure that the promise will only use the callback if it was the most recent one\n          // and update the state when the promise returns\n          var promise_1 = _this._currentPromise = newOptions;\n          promise_1.then(function (newOptionsFromPromise) {\n            if (promise_1 === _this._currentPromise) {\n              _this.setState({\n                currentOptions: newOptionsFromPromise\n              });\n            }\n          });\n        }\n      }\n    };\n    /**\n     * OnBlur handler. Set the focused state to false\n     * and submit any pending value\n     */\n    // eslint-disable-next-line deprecation/deprecation\n\n\n    _this._onBlur = function (event) {\n      // Do nothing if the blur is coming from something\n      // inside the comboBox root or the comboBox menu since\n      // it we are not really bluring from the whole comboBox\n      var relatedTarget = event.relatedTarget;\n\n      if (event.relatedTarget === null) {\n        // In IE11, due to lack of support, event.relatedTarget is always\n        // null making every onBlur call to be \"outside\" of the ComboBox\n        // even when it's not. Using document.activeElement is another way\n        // for us to be able to get what the relatedTarget without relying\n        // on the event\n        relatedTarget = document.activeElement;\n      }\n\n      if (relatedTarget && ( // when event coming from withing the comboBox title\n      _this._root.current && _this._root.current.contains(relatedTarget) || // when event coming from within the comboBox list menu\n      _this._comboBoxMenu.current && (_this._comboBoxMenu.current.contains(relatedTarget) || // when event coming from the callout containing the comboBox list menu (ex: when scrollBar of the\n      // Callout is clicked) checks if the relatedTarget is a parent of _comboBoxMenu\n      findElementRecursive(_this._comboBoxMenu.current, function (element) {\n        return element === relatedTarget;\n      })))) {\n        event.preventDefault();\n        event.stopPropagation();\n        return;\n      }\n\n      if (_this._hasFocus()) {\n        _this.setState({\n          focusState: 'none'\n        });\n\n        if (!_this.props.multiSelect || _this.props.allowFreeform) {\n          _this._submitPendingValue(event);\n        }\n      }\n    }; // Render Callout container and pass in list\n\n\n    _this._onRenderContainer = function (props) {\n      var onRenderList = props.onRenderList,\n          calloutProps = props.calloutProps,\n          dropdownWidth = props.dropdownWidth,\n          dropdownMaxWidth = props.dropdownMaxWidth,\n          _a = props.onRenderUpperContent,\n          onRenderUpperContent = _a === void 0 ? _this._onRenderUpperContent : _a,\n          _b = props.onRenderLowerContent,\n          onRenderLowerContent = _b === void 0 ? _this._onRenderLowerContent : _b,\n          useComboBoxAsMenuWidth = props.useComboBoxAsMenuWidth,\n          persistMenu = props.persistMenu,\n          _c = props.shouldRestoreFocus,\n          shouldRestoreFocus = _c === void 0 ? true : _c;\n      var isOpen = _this.state.isOpen;\n      var comboBoxMenuWidth = useComboBoxAsMenuWidth && _this._comboBoxWrapper.current ? _this._comboBoxWrapper.current.clientWidth + 2 : undefined;\n      return React.createElement(Callout, __assign({\n        isBeakVisible: false,\n        gapSpace: 0,\n        doNotLayer: false,\n        directionalHint: DirectionalHint.bottomLeftEdge,\n        directionalHintFixed: false\n      }, calloutProps, {\n        onLayerMounted: _this._onLayerMounted,\n        className: css(_this._classNames.callout, calloutProps ? calloutProps.className : undefined),\n        target: _this._comboBoxWrapper.current,\n        onDismiss: _this._onDismiss,\n        onMouseDown: _this._onCalloutMouseDown,\n        onScroll: _this._onScroll,\n        setInitialFocus: false,\n        calloutWidth: useComboBoxAsMenuWidth && _this._comboBoxWrapper.current ? comboBoxMenuWidth && comboBoxMenuWidth : dropdownWidth,\n        calloutMaxWidth: dropdownMaxWidth ? dropdownMaxWidth : comboBoxMenuWidth,\n        hidden: persistMenu ? !isOpen : undefined,\n        shouldRestoreFocus: shouldRestoreFocus\n      }), onRenderUpperContent(_this.props, _this._onRenderUpperContent), React.createElement(\"div\", {\n        className: _this._classNames.optionsContainerWrapper,\n        ref: _this._comboBoxMenu\n      }, onRenderList(__assign({}, props), _this._onRenderList)), onRenderLowerContent(_this.props, _this._onRenderLowerContent));\n    };\n\n    _this._onLayerMounted = function () {\n      _this._onCalloutLayerMounted();\n\n      if (_this.props.calloutProps && _this.props.calloutProps.onLayerMounted) {\n        _this.props.calloutProps.onLayerMounted();\n      }\n    };\n\n    _this._onRenderLabel = function (onRenderLabelProps) {\n      var _a = onRenderLabelProps.props,\n          label = _a.label,\n          disabled = _a.disabled,\n          required = _a.required;\n\n      if (label) {\n        return React.createElement(Label, {\n          id: _this._id + '-label',\n          disabled: disabled,\n          required: required,\n          className: _this._classNames.label\n        }, label, onRenderLabelProps.multiselectAccessibleText && React.createElement(\"span\", {\n          className: _this._classNames.screenReaderText\n        }, onRenderLabelProps.multiselectAccessibleText));\n      }\n\n      return null;\n    }; // Render List of items\n\n\n    _this._onRenderList = function (props) {\n      var onRenderItem = props.onRenderItem,\n          options = props.options;\n      var id = _this._id;\n      return React.createElement(\"div\", {\n        id: id + '-list',\n        className: _this._classNames.optionsContainer,\n        \"aria-labelledby\": id + '-label',\n        role: \"listbox\"\n      }, options.map(function (item) {\n        return onRenderItem(item, _this._onRenderItem);\n      }));\n    }; // Render items\n\n\n    _this._onRenderItem = function (item) {\n      switch (item.itemType) {\n        case SelectableOptionMenuItemType.Divider:\n          return _this._renderSeparator(item);\n\n        case SelectableOptionMenuItemType.Header:\n          return _this._renderHeader(item);\n\n        default:\n          return _this._renderOption(item);\n      }\n    }; // Default _onRenderLowerContent function returns nothing\n\n\n    _this._onRenderLowerContent = function () {\n      return null;\n    }; // Default _onRenderUpperContent function returns nothing\n\n\n    _this._onRenderUpperContent = function () {\n      return null;\n    };\n\n    _this._renderOption = function (item) {\n      var _a = _this.props.onRenderOption,\n          onRenderOption = _a === void 0 ? _this._onRenderOptionContent : _a;\n      var id = _this._id;\n\n      var isSelected = _this._isOptionSelected(item.index);\n\n      var isChecked = _this._isOptionChecked(item.index);\n\n      var optionStyles = _this._getCurrentOptionStyles(item);\n\n      var optionClassNames = getComboBoxOptionClassNames(_this._getCurrentOptionStyles(item));\n\n      var title = _this._getPreviewText(item);\n\n      var onRenderCheckboxLabel = function () {\n        return onRenderOption(item, _this._onRenderOptionContent);\n      };\n\n      var getOptionComponent = function () {\n        return !_this.props.multiSelect ? React.createElement(CommandButton, {\n          id: id + '-list' + item.index,\n          key: item.key,\n          \"data-index\": item.index,\n          styles: optionStyles,\n          checked: isSelected,\n          className: 'ms-ComboBox-option',\n          onClick: _this._onItemClick(item),\n          // eslint-disable-next-line react/jsx-no-bind\n          onMouseEnter: _this._onOptionMouseEnter.bind(_this, item.index),\n          // eslint-disable-next-line react/jsx-no-bind\n          onMouseMove: _this._onOptionMouseMove.bind(_this, item.index),\n          onMouseLeave: _this._onOptionMouseLeave,\n          role: \"option\",\n          \"aria-selected\": isSelected ? 'true' : 'false',\n          ariaLabel: _this._getPreviewText(item),\n          disabled: item.disabled,\n          title: title\n        }, React.createElement(\"span\", {\n          className: optionClassNames.optionTextWrapper,\n          ref: isSelected ? _this._selectedElement : undefined\n        }, onRenderOption(item, _this._onRenderOptionContent))) : React.createElement(Checkbox, {\n          id: id + '-list' + item.index,\n          ariaLabel: _this._getPreviewText(item),\n          key: item.key,\n          \"data-index\": item.index,\n          styles: optionStyles,\n          className: 'ms-ComboBox-option',\n          \"data-is-focusable\": true,\n          onChange: _this._onItemClick(item),\n          label: item.text,\n          role: \"option\",\n          checked: isChecked,\n          title: title,\n          disabled: item.disabled,\n          // eslint-disable-next-line react/jsx-no-bind\n          onRenderLabel: onRenderCheckboxLabel,\n          inputProps: {\n            'aria-selected': isSelected ? 'true' : 'false'\n          }\n        });\n      };\n\n      return React.createElement(ComboBoxOptionWrapper, {\n        key: item.key,\n        index: item.index,\n        disabled: item.disabled,\n        isSelected: isSelected,\n        isChecked: isChecked,\n        text: item.text,\n        // eslint-disable-next-line react/jsx-no-bind\n        render: getOptionComponent,\n        data: item.data\n      });\n    };\n    /**\n     * Mouse clicks to headers, dividers and scrollbar should not make input lose focus\n     */\n\n\n    _this._onCalloutMouseDown = function (ev) {\n      ev.preventDefault();\n    };\n    /**\n     * Scroll handler for the callout to make sure the mouse events\n     * for updating focus are not interacting during scroll\n     */\n\n\n    _this._onScroll = function () {\n      if (!_this._isScrollIdle && _this._scrollIdleTimeoutId !== undefined) {\n        _this._async.clearTimeout(_this._scrollIdleTimeoutId);\n\n        _this._scrollIdleTimeoutId = undefined;\n      } else {\n        _this._isScrollIdle = false;\n      }\n\n      _this._scrollIdleTimeoutId = _this._async.setTimeout(function () {\n        _this._isScrollIdle = true;\n      }, ScrollIdleDelay);\n    };\n\n    _this._onRenderOptionContent = function (item) {\n      var optionClassNames = getComboBoxOptionClassNames(_this._getCurrentOptionStyles(item));\n      return React.createElement(\"span\", {\n        className: optionClassNames.optionText\n      }, item.text);\n    };\n    /**\n     * Handles dismissing (cancelling) the menu\n     */\n\n\n    _this._onDismiss = function () {\n      var onMenuDismiss = _this.props.onMenuDismiss;\n\n      if (onMenuDismiss) {\n        onMenuDismiss();\n      } // In persistMode we need to simulate callout layer mount\n      // since that only happens once. We do it on dismiss since\n      // it works either way.\n\n\n      if (_this.props.persistMenu) {\n        _this._onCalloutLayerMounted();\n      } // close the menu\n\n\n      _this._setOpenStateAndFocusOnClose(false\n      /* isOpen */\n      , false\n      /* focusInputAfterClose */\n      ); // reset the selected index\n      // to the last value state\n\n\n      _this._resetSelectedIndex();\n    };\n\n    _this._onAfterClearPendingInfo = function () {\n      _this._processingClearPendingInfo = false;\n    };\n    /**\n     * Handle keydown on the input\n     * @param ev - The keyboard event that was fired\n     */\n\n\n    _this._onInputKeyDown = function (ev) {\n      var _a = _this.props,\n          disabled = _a.disabled,\n          allowFreeform = _a.allowFreeform,\n          autoComplete = _a.autoComplete;\n      var _b = _this.state,\n          isOpen = _b.isOpen,\n          currentOptions = _b.currentOptions,\n          currentPendingValueValidIndexOnHover = _b.currentPendingValueValidIndexOnHover; // Take note if we are processing an alt (option) or meta (command) keydown.\n      // See comment in _onInputKeyUp for reasoning.\n\n      _this._lastKeyDownWasAltOrMeta = _this._isAltOrMeta(ev);\n\n      if (disabled) {\n        _this._handleInputWhenDisabled(ev);\n\n        return;\n      }\n\n      var index = _this._getPendingSelectedIndex(false\n      /* includeCurrentPendingValue */\n      );\n\n      switch (ev.which) {\n        case KeyCodes.enter:\n          if (_this._autofill.current && _this._autofill.current.inputElement) {\n            _this._autofill.current.inputElement.select();\n          }\n\n          _this._submitPendingValue(ev);\n\n          if (_this.props.multiSelect && isOpen) {\n            _this.setState({\n              currentPendingValueValidIndex: index\n            });\n          } else {\n            // On enter submit the pending value\n            if (isOpen || (!allowFreeform || _this.state.currentPendingValue === undefined || _this.state.currentPendingValue === null || _this.state.currentPendingValue.length <= 0) && _this.state.currentPendingValueValidIndex < 0) {\n              // if we are open or\n              // if we are not allowing freeform or\n              // our we have no pending value\n              // and no valid pending index\n              // flip the open state\n              _this.setState({\n                isOpen: !isOpen\n              });\n            }\n          }\n\n          break;\n\n        case KeyCodes.tab:\n          // On enter submit the pending value\n          if (!_this.props.multiSelect) {\n            _this._submitPendingValue(ev);\n          } // If we are not allowing freeform\n          // or the comboBox is open, flip the open state\n\n\n          if (isOpen) {\n            _this._setOpenStateAndFocusOnClose(!isOpen, false\n            /* focusInputAfterClose */\n            );\n          } // Allow TAB to propigate\n\n\n          return;\n\n        case KeyCodes.escape:\n          // reset the selected index\n          _this._resetSelectedIndex(); // Close the menu if opened\n\n\n          if (isOpen) {\n            _this.setState({\n              isOpen: false\n            });\n          } else {\n            return;\n          }\n\n          break;\n\n        case KeyCodes.up:\n          // if we are in clearAll state (e.g. the user as hovering\n          // and has since mousedOut of the menu items),\n          // go to the last index\n          if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n            index = _this.state.currentOptions.length;\n          }\n\n          if (ev.altKey || ev.metaKey) {\n            // Close the menu if it is open and break so\n            // that the event get stopPropagation and prevent default.\n            // Otherwise, we need to let the event continue to propagate\n            if (isOpen) {\n              _this._setOpenStateAndFocusOnClose(!isOpen, true\n              /* focusInputAfterClose */\n              );\n\n              break;\n            }\n\n            return;\n          } // Go to the previous option\n\n\n          _this._setPendingInfoFromIndexAndDirection(index, SearchDirection.backward);\n\n          break;\n\n        case KeyCodes.down:\n          // Expand the comboBox on ALT + DownArrow\n          if (ev.altKey || ev.metaKey) {\n            _this._setOpenStateAndFocusOnClose(true\n            /* isOpen */\n            , true\n            /* focusInputAfterClose */\n            );\n          } else {\n            // if we are in clearAll state (e.g. the user as hovering\n            // and has since mousedOut of the menu items),\n            // go to the first index\n            if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n              index = -1;\n            } // Got to the next option\n\n\n            _this._setPendingInfoFromIndexAndDirection(index, SearchDirection.forward);\n          }\n\n          break;\n\n        case KeyCodes.home:\n        case KeyCodes.end:\n          if (allowFreeform) {\n            return;\n          } // Set the initial values to respond to HOME\n          // which goes to the first selectable option\n\n\n          index = -1;\n          var directionToSearch = SearchDirection.forward; // If end, update the values to respond to END\n          // which goes to the last selectable option\n\n          if (ev.which === KeyCodes.end) {\n            index = currentOptions.length;\n            directionToSearch = SearchDirection.backward;\n          }\n\n          _this._setPendingInfoFromIndexAndDirection(index, directionToSearch);\n\n          break;\n\n        /* eslint-disable no-fallthrough */\n\n        case KeyCodes.space:\n          // event handled in _onComboBoxKeyUp\n          if (!allowFreeform && autoComplete === 'off') {\n            break;\n          }\n\n        default:\n          /* eslint-enable no-fallthrough */\n          // are we processing a function key? if so bail out\n          if (ev.which >= 112\n          /* F1 */\n          && ev.which <= 123\n          /* F12 */\n          ) {\n            return;\n          } // If we get here and we got either and ALT key\n          // or meta key, let the event propagate\n\n\n          if (ev.keyCode === KeyCodes.alt || ev.key === 'Meta'\n          /* && isOpen */\n          ) {\n            return;\n          } // If we are not allowing freeform and\n          // allowing autoComplete, handle the input here\n          // since we have marked the input as readonly\n\n\n          if (!allowFreeform && autoComplete === 'on') {\n            _this._onInputChange(ev.key);\n\n            break;\n          } // allow the key to propagate by default\n\n\n          return;\n      }\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n    /**\n     * Handle keyup on the input\n     * @param ev - the keyboard event that was fired\n     */\n\n\n    _this._onInputKeyUp = function (ev) {\n      var _a = _this.props,\n          disabled = _a.disabled,\n          allowFreeform = _a.allowFreeform,\n          autoComplete = _a.autoComplete;\n      var isOpen = _this.state.isOpen; // We close the menu on key up only if ALL of the following are true:\n      // - Most recent key down was alt or meta (command)\n      // - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n      //   expand/collapse the menu)\n      // - We're not on a Mac (or iOS)\n      // This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n      // closing any open context menus. There is not a similar behavior on Macs.\n\n      var keyPressIsAltOrMetaAlone = _this._lastKeyDownWasAltOrMeta && _this._isAltOrMeta(ev);\n\n      _this._lastKeyDownWasAltOrMeta = false;\n      var shouldHandleKey = keyPressIsAltOrMetaAlone && !(isMac() || isIOS());\n\n      if (disabled) {\n        _this._handleInputWhenDisabled(ev);\n\n        return;\n      }\n\n      switch (ev.which) {\n        case KeyCodes.space:\n          // If we are not allowing freeform and are not autoComplete\n          // make space expand/collapse the comboBox\n          // and allow the event to propagate\n          if (!allowFreeform && autoComplete === 'off') {\n            _this._setOpenStateAndFocusOnClose(!isOpen, !!isOpen);\n          }\n\n          return;\n\n        default:\n          if (shouldHandleKey && isOpen) {\n            _this._setOpenStateAndFocusOnClose(!isOpen, true\n            /* focusInputAfterClose */\n            );\n          } else {\n            if (_this.state.focusState === 'focusing' && _this.props.openOnKeyboardFocus) {\n              _this.setState({\n                isOpen: true\n              });\n            }\n\n            if (_this.state.focusState !== 'focused') {\n              _this.setState({\n                focusState: 'focused'\n              });\n            }\n          }\n\n          return;\n      }\n    };\n\n    _this._onOptionMouseLeave = function () {\n      if (_this._shouldIgnoreMouseEvent()) {\n        return;\n      } // Ignore the event in persistMenu mode if the callout has\n      // closed. This is to avoid clearing the visuals on item click.\n\n\n      if (_this.props.persistMenu && !_this.state.isOpen) {\n        return;\n      }\n\n      _this.setState({\n        currentPendingValueValidIndexOnHover: HoverStatus.clearAll\n      });\n    };\n    /**\n     * Click handler for the button of the comboBox\n     * and the input when not allowing freeform. This\n     * toggles the expand/collapse state of the comboBox (if enbled)\n     */\n\n\n    _this._onComboBoxClick = function () {\n      var disabled = _this.props.disabled;\n      var isOpen = _this.state.isOpen;\n\n      if (!disabled) {\n        _this._setOpenStateAndFocusOnClose(!isOpen, false\n        /* focusInputAfterClose */\n        );\n\n        _this.setState({\n          focusState: 'focused'\n        });\n      }\n    };\n    /**\n     * Click handler for the autofill.\n     */\n\n\n    _this._onAutofillClick = function () {\n      var _a = _this.props,\n          disabled = _a.disabled,\n          allowFreeform = _a.allowFreeform;\n\n      if (allowFreeform && !disabled) {\n        _this.focus(_this.state.isOpen || _this._processingTouch);\n      } else {\n        _this._onComboBoxClick();\n      }\n    };\n\n    _this._onTouchStart = function () {\n      if (_this._comboBoxWrapper.current && !('onpointerdown' in _this._comboBoxWrapper)) {\n        _this._handleTouchAndPointerEvent();\n      }\n    };\n\n    _this._onPointerDown = function (ev) {\n      if (ev.pointerType === 'touch') {\n        _this._handleTouchAndPointerEvent();\n\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      defaultSelectedKey: 'selectedKey',\n      text: 'defaultSelectedKey',\n      selectedKey: 'value',\n      dropdownWidth: 'useComboBoxAsMenuWidth'\n    });\n    _this._id = props.id || getId('ComboBox');\n\n    var selectedKeys = _this._buildDefaultSelectedKeys(props.defaultSelectedKey, props.selectedKey);\n\n    _this._isScrollIdle = true;\n    _this._processingTouch = false;\n    _this._gotMouseMove = false;\n    _this._processingClearPendingInfo = false;\n\n    var initialSelectedIndices = _this._getSelectedIndices(props.options, selectedKeys);\n\n    _this.state = {\n      isOpen: false,\n      selectedIndices: initialSelectedIndices,\n      focusState: 'none',\n      suggestedDisplayValue: undefined,\n      currentOptions: _this.props.options,\n      currentPendingValueValidIndex: -1,\n      currentPendingValue: undefined,\n      currentPendingValueValidIndexOnHover: HoverStatus.default\n    };\n    return _this;\n  }\n\n  Object.defineProperty(ComboBox.prototype, \"selectedOptions\", {\n    /**\n     * All selected options\n     */\n    get: function () {\n      var _a = this.state,\n          currentOptions = _a.currentOptions,\n          selectedIndices = _a.selectedIndices;\n      return getAllSelectedOptions(currentOptions, selectedIndices);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ComboBox.prototype.componentDidMount = function () {\n    if (this._comboBoxWrapper.current && !this.props.disabled) {\n      // hook up resolving the options if needed on focus\n      this._events.on(this._comboBoxWrapper.current, 'focus', this._onResolveOptions, true);\n\n      if ('onpointerdown' in this._comboBoxWrapper.current) {\n        // For ComboBoxes, touching anywhere in the combo box should drop the dropdown, including the input element.\n        // This gives more hit target space for touch environments. We're setting the onpointerdown here, because React\n        // does not support Pointer events yet.\n        this._events.on(this._comboBoxWrapper.current, 'pointerdown', this._onPointerDown, true);\n      }\n    }\n  };\n\n  ComboBox.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    // Update the selectedIndex and currentOptions state if\n    // the selectedKey, value, or options have changed\n    if (newProps.selectedKey !== this.props.selectedKey || newProps.text !== this.props.text || newProps.options !== this.props.options) {\n      var selectedKeys = this._buildSelectedKeys(newProps.selectedKey);\n\n      var indices = this._getSelectedIndices(newProps.options, selectedKeys);\n\n      this.setState({\n        selectedIndices: indices,\n        currentOptions: newProps.options\n      });\n\n      if (newProps.selectedKey === null) {\n        this.setState({\n          suggestedDisplayValue: undefined\n        });\n      }\n    }\n  };\n\n  ComboBox.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _this = this;\n\n    var _a = this.props,\n        allowFreeform = _a.allowFreeform,\n        text = _a.text,\n        onMenuOpen = _a.onMenuOpen,\n        onMenuDismissed = _a.onMenuDismissed;\n    var _b = this.state,\n        isOpen = _b.isOpen,\n        selectedIndices = _b.selectedIndices,\n        currentPendingValueValidIndex = _b.currentPendingValueValidIndex; // If we are newly open or are open and the pending valid index changed,\n    // make sure the currently selected/pending option is scrolled into view\n\n    if (isOpen && (!prevState.isOpen || prevState.currentPendingValueValidIndex !== currentPendingValueValidIndex)) {\n      // Need this timeout so that the selectedElement ref is correctly updated\n      this._async.setTimeout(function () {\n        return _this._scrollIntoView();\n      }, 0);\n    } // if an action is taken that put focus in the ComboBox\n    // and If we are open or we are just closed, shouldFocusAfterClose is set,\n    // but we are not the activeElement set focus on the input\n\n\n    if (this._hasFocus() && (isOpen || prevState.isOpen && !isOpen && this._focusInputAfterClose && this._autofill.current && document.activeElement !== this._autofill.current.inputElement)) {\n      this.focus(undefined\n      /*shouldOpenOnFocus*/\n      , true\n      /*useFocusAsync*/\n      );\n    } // If we should focusAfterClose AND\n    //   just opened/closed the menu OR\n    //   are focused AND\n    //     updated the selectedIndex with the menu closed OR\n    //     are not allowing freeform OR\n    //     the value changed\n    // we need to set selection\n\n\n    if (this._focusInputAfterClose && (prevState.isOpen && !isOpen || this._hasFocus() && (!isOpen && !this.props.multiSelect && prevState.selectedIndices && selectedIndices && prevState.selectedIndices[0] !== selectedIndices[0] || !allowFreeform || text !== prevProps.text))) {\n      this._onFocus();\n    }\n\n    this._notifyPendingValueChanged(prevState);\n\n    if (isOpen && !prevState.isOpen && onMenuOpen) {\n      onMenuOpen();\n    }\n\n    if (!isOpen && prevState.isOpen && onMenuDismissed) {\n      onMenuDismissed();\n    }\n  };\n\n  ComboBox.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._events.dispose();\n  }; // Primary Render\n\n\n  ComboBox.prototype.render = function () {\n    var _this = this;\n\n    var id = this._id;\n    var errorMessageId = id + '-error';\n    var _a = this.props,\n        className = _a.className,\n        disabled = _a.disabled,\n        required = _a.required,\n        errorMessage = _a.errorMessage,\n        _b = _a.onRenderContainer,\n        onRenderContainer = _b === void 0 ? this._onRenderContainer : _b,\n        _c = _a.onRenderLabel,\n        onRenderLabel = _c === void 0 ? this._onRenderLabel : _c,\n        _d = _a.onRenderList,\n        onRenderList = _d === void 0 ? this._onRenderList : _d,\n        _e = _a.onRenderItem,\n        onRenderItem = _e === void 0 ? this._onRenderItem : _e,\n        _f = _a.onRenderOption,\n        onRenderOption = _f === void 0 ? this._onRenderOptionContent : _f,\n        allowFreeform = _a.allowFreeform,\n        customStyles = _a.styles,\n        theme = _a.theme,\n        keytipProps = _a.keytipProps,\n        persistMenu = _a.persistMenu,\n        multiSelect = _a.multiSelect;\n    var _g = this.state,\n        isOpen = _g.isOpen,\n        suggestedDisplayValue = _g.suggestedDisplayValue;\n    this._currentVisibleValue = this._getVisibleValue(); // Single select is already accessible since the whole text is selected\n    // when focus enters the input. Since multiselect appears to clear the input\n    // it needs special accessible text\n\n    var multiselectAccessibleText = multiSelect ? this._getMultiselectDisplayString(this.state.selectedIndices, this.state.currentOptions, suggestedDisplayValue) : undefined;\n    var divProps = getNativeProps(this.props, divProperties, ['onChange', 'value']);\n    var hasErrorMessage = errorMessage && errorMessage.length > 0 ? true : false;\n    this._classNames = this.props.getClassNames ? this.props.getClassNames(theme, !!isOpen, !!disabled, !!required, !!this._hasFocus(), !!allowFreeform, !!hasErrorMessage, className) : getClassNames(getStyles(theme, customStyles), className, !!isOpen, !!disabled, !!required, !!this._hasFocus(), !!allowFreeform, !!hasErrorMessage);\n    var comboBoxWrapper = keytipProps ? React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return _this._renderComboBoxWrapper(multiselectAccessibleText, errorMessageId, keytipAttributes);\n    }) : this._renderComboBoxWrapper(multiselectAccessibleText, errorMessageId);\n    return React.createElement(\"div\", __assign({}, divProps, {\n      ref: this._root,\n      className: this._classNames.container\n    }), onRenderLabel({\n      props: this.props,\n      multiselectAccessibleText: multiselectAccessibleText\n    }, this._onRenderLabel), comboBoxWrapper, (persistMenu || isOpen) && onRenderContainer(__assign(__assign({}, this.props), {\n      onRenderList: onRenderList,\n      onRenderItem: onRenderItem,\n      onRenderOption: onRenderOption,\n      options: this.state.currentOptions.map(function (item, index) {\n        return __assign(__assign({}, item), {\n          index: index\n        });\n      }),\n      onDismiss: this._onDismiss\n    }), this._onRenderContainer), React.createElement(\"div\", {\n      role: \"region\",\n      \"aria-live\": \"polite\",\n      \"aria-atomic\": \"true\",\n      id: errorMessageId,\n      className: hasErrorMessage ? this._classNames.errorMessage : ''\n    }, errorMessage !== undefined ? errorMessage : ''));\n  };\n\n  ComboBox.prototype._getPendingString = function (currentPendingValue, currentOptions, index) {\n    return currentPendingValue !== null && currentPendingValue !== undefined ? currentPendingValue : this._indexWithinBounds(currentOptions, index) ? currentOptions[index].text : '';\n  };\n  /**\n   * Returns a string that concatenates all of the selected values\n   * for multiselect combobox.\n   */\n\n\n  ComboBox.prototype._getMultiselectDisplayString = function (selectedIndices, currentOptions, suggestedDisplayValue) {\n    var displayValues = [];\n\n    for (var idx = 0; selectedIndices && idx < selectedIndices.length; idx++) {\n      var index = selectedIndices[idx];\n      displayValues.push(this._indexWithinBounds(currentOptions, index) ? currentOptions[index].text : this._normalizeToString(suggestedDisplayValue));\n    }\n\n    var _a = this.props.multiSelectDelimiter,\n        multiSelectDelimiter = _a === void 0 ? ', ' : _a;\n    return displayValues.join(multiSelectDelimiter);\n  };\n  /**\n   * Is the index within the bounds of the array?\n   * @param options - options to check if the index is valid for\n   * @param index - the index to check\n   * @returns - true if the index is valid for the given options, false otherwise\n   */\n\n\n  ComboBox.prototype._indexWithinBounds = function (options, index) {\n    if (!options) {\n      return false;\n    }\n\n    return index >= 0 && index < options.length;\n  };\n  /**\n   * Process the new input's new value when the comboBox\n   * allows freeform entry\n   * @param updatedValue - the input's newly changed value\n   */\n\n\n  ComboBox.prototype._processInputChangeWithFreeform = function (updatedValue) {\n    var _this = this;\n\n    var currentOptions = this.state.currentOptions;\n    var newCurrentPendingValueValidIndex = -1; // if the new value is empty, see if we have an exact match\n    // and then set the pending info\n\n    if (updatedValue === '') {\n      var items = currentOptions.map(function (item, index) {\n        return __assign(__assign({}, item), {\n          index: index\n        });\n      }).filter(function (option) {\n        return option.itemType !== SelectableOptionMenuItemType.Header && option.itemType !== SelectableOptionMenuItemType.Divider;\n      }).filter(function (option) {\n        return _this._getPreviewText(option) === updatedValue;\n      }); // if we found a match remember the index\n\n      if (items.length === 1) {\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n\n      this._setPendingInfo(updatedValue, newCurrentPendingValueValidIndex, updatedValue);\n\n      return;\n    } // Remember the original value and then,\n    // make the value lowercase for comparison\n\n\n    var originalUpdatedValue = updatedValue;\n    updatedValue = updatedValue.toLocaleLowerCase();\n    var newSuggestedDisplayValue = ''; // If autoComplete is on, attempt to find a match from the available options\n\n    if (this.props.autoComplete === 'on') {\n      // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value\n      var items = currentOptions.map(function (item, index) {\n        return __assign(__assign({}, item), {\n          index: index\n        });\n      }).filter(function (option) {\n        return option.itemType !== SelectableOptionMenuItemType.Header && option.itemType !== SelectableOptionMenuItemType.Divider;\n      }).filter(function (option) {\n        return _this._getPreviewText(option).toLocaleLowerCase().indexOf(updatedValue) === 0;\n      });\n\n      if (items.length > 0) {\n        // use ariaLabel as the value when the option is set\n        var text = this._getPreviewText(items[0]); // If the user typed out the complete option text, we don't need any suggested display text anymore\n\n\n        newSuggestedDisplayValue = text.toLocaleLowerCase() !== updatedValue ? text : ''; // remember the index of the match we found\n\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n    } else {\n      // If autoComplete is off, attempt to find a match only when the value is exactly equal to the text of an option\n      var items = currentOptions.map(function (item, index) {\n        return __assign(__assign({}, item), {\n          index: index\n        });\n      }).filter(function (option) {\n        return option.itemType !== SelectableOptionMenuItemType.Header && option.itemType !== SelectableOptionMenuItemType.Divider;\n      }).filter(function (option) {\n        return _this._getPreviewText(option).toLocaleLowerCase() === updatedValue;\n      }); // if we found a match remember the index\n\n      if (items.length === 1) {\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n    } // Set the updated state\n\n\n    this._setPendingInfo(originalUpdatedValue, newCurrentPendingValueValidIndex, newSuggestedDisplayValue);\n  };\n  /**\n   * Process the new input's new value when the comboBox\n   * does not allow freeform entry\n   * @param updatedValue - the input's newly changed value\n   */\n\n\n  ComboBox.prototype._processInputChangeWithoutFreeform = function (updatedValue) {\n    var _this = this;\n\n    var _a = this.state,\n        currentPendingValue = _a.currentPendingValue,\n        currentPendingValueValidIndex = _a.currentPendingValueValidIndex,\n        currentOptions = _a.currentOptions;\n\n    if (this.props.autoComplete === 'on') {\n      // If autoComplete is on while allow freeform is off,\n      // we will remember the keypresses and build up a string to attempt to match\n      // as long as characters are typed within a the timeout span of each other,\n      // otherwise we will clear the string and start building a new one on the next keypress.\n      // Also, only do this processing if we have a non-empty value\n      if (updatedValue !== '') {\n        // If we have a pending autocomplete clearing task,\n        // we know that the user is typing with keypresses happening\n        // within the timeout of each other so remove the clearing task\n        // and continue building the pending value with the udpated value\n        if (this._lastReadOnlyAutoCompleteChangeTimeoutId !== undefined) {\n          this._async.clearTimeout(this._lastReadOnlyAutoCompleteChangeTimeoutId);\n\n          this._lastReadOnlyAutoCompleteChangeTimeoutId = undefined;\n          updatedValue = this._normalizeToString(currentPendingValue) + updatedValue;\n        }\n\n        var originalUpdatedValue = updatedValue;\n        updatedValue = updatedValue.toLocaleLowerCase(); // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value\n\n        var items = currentOptions.map(function (item, i) {\n          return __assign(__assign({}, item), {\n            index: i\n          });\n        }).filter(function (option) {\n          return option.itemType !== SelectableOptionMenuItemType.Header && option.itemType !== SelectableOptionMenuItemType.Divider;\n        }).filter(function (option) {\n          return option.text.toLocaleLowerCase().indexOf(updatedValue) === 0;\n        }); // If we found a match, udpdate the state\n\n        if (items.length > 0) {\n          this._setPendingInfo(originalUpdatedValue, items[0].index, this._getPreviewText(items[0]));\n        } // Schedule a timeout to clear the pending value after the timeout span\n\n\n        this._lastReadOnlyAutoCompleteChangeTimeoutId = this._async.setTimeout(function () {\n          _this._lastReadOnlyAutoCompleteChangeTimeoutId = undefined;\n        }, ReadOnlyPendingAutoCompleteTimeout);\n        return;\n      }\n    } // If we get here, either autoComplete is on or we did not find a match with autoComplete on.\n    // Remember we are not allowing freeform, so at this point, if we have a pending valid value index\n    // use that; otherwise use the selectedIndex\n\n\n    var index = currentPendingValueValidIndex >= 0 ? currentPendingValueValidIndex : this._getFirstSelectedIndex(); // Since we are not allowing freeform, we need to\n    // set both the pending and suggested values/index\n    // to allow us to select all content in the input to\n    // give the illusion that we are readonly (e.g. freeform off)\n\n    this._setPendingInfoFromIndex(index);\n  };\n\n  ComboBox.prototype._getFirstSelectedIndex = function () {\n    return this.state.selectedIndices && this.state.selectedIndices.length > 0 ? this.state.selectedIndices[0] : -1;\n  };\n  /**\n   * Walk along the options starting at the index, stepping by the delta (positive or negative)\n   * looking for the next valid selectable index (e.g. skipping headings and dividers)\n   * @param index - the index to get the next selectable index from\n   * @param delta - optional delta to step by when finding the next index, defaults to 0\n   * @returns - the next valid selectable index. If the new index is outside of the bounds,\n   * it will snap to the edge of the options array. If delta == 0 and the given index is not selectable\n   */\n\n\n  ComboBox.prototype._getNextSelectableIndex = function (index, searchDirection) {\n    var currentOptions = this.state.currentOptions;\n    var newIndex = index + searchDirection;\n    newIndex = Math.max(0, Math.min(currentOptions.length - 1, newIndex));\n\n    if (!this._indexWithinBounds(currentOptions, newIndex)) {\n      return -1;\n    }\n\n    var option = currentOptions[newIndex];\n\n    if (option.itemType === SelectableOptionMenuItemType.Header || option.itemType === SelectableOptionMenuItemType.Divider || option.hidden === true) {\n      // Should we continue looking for an index to select?\n      if (searchDirection !== SearchDirection.none && (newIndex > 0 && searchDirection < SearchDirection.none || newIndex >= 0 && newIndex < currentOptions.length && searchDirection > SearchDirection.none)) {\n        newIndex = this._getNextSelectableIndex(newIndex, searchDirection);\n      } else {\n        // If we cannot perform a useful search just return the index we were given\n        return index;\n      }\n    } // We have the next valid selectable index, return it\n\n\n    return newIndex;\n  };\n  /**\n   * Set the selected index. Note, this is\n   * the \"real\" selected index, not the pending selected index\n   * @param index - the index to set (or the index to set from if a search direction is provided)\n   * @param searchDirection - the direction to search along the options from the given index\n   */\n\n\n  ComboBox.prototype._setSelectedIndex = function (index, submitPendingValueEvent, searchDirection) {\n    var _this = this;\n\n    if (searchDirection === void 0) {\n      searchDirection = SearchDirection.none;\n    }\n\n    var _a = this.props,\n        onChange = _a.onChange,\n        onPendingValueChanged = _a.onPendingValueChanged;\n    var currentOptions = this.state.currentOptions;\n    var initialIndices = this.state.selectedIndices; // Clone selectedIndices so we don't mutate state\n\n    var selectedIndices = initialIndices ? initialIndices.slice() : []; // Find the next selectable index, if searchDirection is none\n    // we will get our starting index back\n\n    index = this._getNextSelectableIndex(index, searchDirection);\n\n    if (!this._indexWithinBounds(currentOptions, index)) {\n      return;\n    } // Are we at a new index? If so, update the state, otherwise\n    // there is nothing to do\n\n\n    if (this.props.multiSelect || selectedIndices.length < 1 || selectedIndices.length === 1 && selectedIndices[0] !== index) {\n      var option_1 = __assign({}, currentOptions[index]); // if option doesn't existing, or option is disabled, we noop\n\n\n      if (!option_1 || option_1.disabled) {\n        return;\n      }\n\n      if (this.props.multiSelect) {\n        // Setting the initial state of option.selected in Multi-select combobox by checking the\n        // selectedIndices array and overriding the undefined issue\n        option_1.selected = option_1.selected !== undefined ? !option_1.selected : selectedIndices.indexOf(index) < 0;\n\n        if (option_1.selected && selectedIndices.indexOf(index) < 0) {\n          selectedIndices.push(index);\n        } else if (!option_1.selected && selectedIndices.indexOf(index) >= 0) {\n          selectedIndices = selectedIndices.filter(function (value) {\n            return value !== index;\n          });\n        }\n      } else {\n        selectedIndices[0] = index;\n      }\n\n      submitPendingValueEvent.persist(); // Only setstate if combobox is uncontrolled.\n\n      if (this.props.selectedKey || this.props.selectedKey === null) {\n        // If ComboBox value is changed, revert preview first\n        if (this._hasPendingValue && onPendingValueChanged) {\n          onPendingValueChanged();\n          this._hasPendingValue = false;\n        }\n\n        if (onChange) {\n          onChange(submitPendingValueEvent, option_1, index, undefined);\n        }\n      } else {\n        // Update current options\n        var changedOptions = currentOptions.slice();\n        changedOptions[index] = option_1; // Call onChange after state is updated\n\n        this.setState({\n          selectedIndices: selectedIndices,\n          currentOptions: changedOptions\n        }, function () {\n          // If ComboBox value is changed, revert preview first\n          if (_this._hasPendingValue && onPendingValueChanged) {\n            onPendingValueChanged();\n            _this._hasPendingValue = false;\n          }\n\n          if (onChange) {\n            onChange(submitPendingValueEvent, option_1, index, undefined);\n          }\n        });\n      }\n    }\n\n    if (this.props.multiSelect && this.state.isOpen) {\n      return;\n    } // clear all of the pending info\n\n\n    this._clearPendingInfo();\n  };\n  /**\n   * Submit a pending value if there is one\n   */\n\n\n  ComboBox.prototype._submitPendingValue = function (submitPendingValueEvent) {\n    var _a = this.props,\n        onChange = _a.onChange,\n        allowFreeform = _a.allowFreeform,\n        autoComplete = _a.autoComplete;\n    var _b = this.state,\n        currentPendingValue = _b.currentPendingValue,\n        currentPendingValueValidIndex = _b.currentPendingValueValidIndex,\n        currentOptions = _b.currentOptions,\n        currentPendingValueValidIndexOnHover = _b.currentPendingValueValidIndexOnHover;\n    var selectedIndices = this.state.selectedIndices; // Do not submit any pending value if we\n    // have already initiated clearing the pending info\n\n    if (this._processingClearPendingInfo) {\n      return;\n    } // If we allow freeform we need to handle that\n\n\n    if (allowFreeform) {\n      // if currentPendingValue is null or undefined the user did not submit anything\n      // (not even empty because we would have stored that as the pending value)\n      if (currentPendingValue === null || currentPendingValue === undefined) {\n        // if a user did not type anything they may just hovered over an item\n        if (currentPendingValueValidIndexOnHover >= 0) {\n          this._setSelectedIndex(currentPendingValueValidIndexOnHover, submitPendingValueEvent);\n\n          this._clearPendingInfo();\n        }\n\n        return;\n      } // Check to see if the user typed an exact match\n\n\n      if (this._indexWithinBounds(currentOptions, currentPendingValueValidIndex)) {\n        var pendingOptionText = this._getPreviewText(currentOptions[currentPendingValueValidIndex]).toLocaleLowerCase(); // By exact match, that means: our pending value is the same as the pending option text OR\n        // the pending option starts with the pending value and we have an \"autoComplete\" selection\n        // where the total length is equal to pending option length OR\n        // the live value in the underlying input matches the pending option; update the state\n\n\n        if (currentPendingValue.toLocaleLowerCase() === pendingOptionText || autoComplete && pendingOptionText.indexOf(currentPendingValue.toLocaleLowerCase()) === 0 && this._autofill.current && this._autofill.current.isValueSelected && currentPendingValue.length + (this._autofill.current.selectionEnd - this._autofill.current.selectionStart) === pendingOptionText.length || this._autofill.current && this._autofill.current.inputElement && this._autofill.current.inputElement.value.toLocaleLowerCase() === pendingOptionText) {\n          this._setSelectedIndex(currentPendingValueValidIndex, submitPendingValueEvent);\n\n          if (this.props.multiSelect && this.state.isOpen) {\n            return;\n          }\n\n          this._clearPendingInfo();\n\n          return;\n        }\n      }\n\n      if (onChange) {\n        if (onChange) {\n          // trigger onChange to clear value\n          onChange(submitPendingValueEvent, undefined, undefined, currentPendingValue);\n        }\n      } else {\n        // If we are not controlled, create a new selected option\n        var newOption = {\n          key: currentPendingValue || getId(),\n          text: this._normalizeToString(currentPendingValue)\n        }; // If it's multiselect, set selected state to true\n\n        if (this.props.multiSelect) {\n          newOption.selected = true;\n        }\n\n        var newOptions = currentOptions.concat([newOption]);\n\n        if (selectedIndices) {\n          if (!this.props.multiSelect) {\n            selectedIndices = [];\n          }\n\n          selectedIndices.push(newOptions.length - 1);\n        }\n\n        this.setState({\n          currentOptions: newOptions,\n          selectedIndices: selectedIndices\n        });\n      }\n    } else if (currentPendingValueValidIndex >= 0) {\n      // Since we are not allowing freeform, we must have a matching\n      // to be able to update state\n      this._setSelectedIndex(currentPendingValueValidIndex, submitPendingValueEvent);\n    } else if (currentPendingValueValidIndexOnHover >= 0) {\n      // If all else failed and we were hovering over an item, select it\n      this._setSelectedIndex(currentPendingValueValidIndexOnHover, submitPendingValueEvent);\n    } // Finally, clear the pending info\n\n\n    this._clearPendingInfo();\n  };\n\n  ComboBox.prototype._onCalloutLayerMounted = function () {\n    // In persistMenu mode _onLayerMounted is only called once for the lifetime\n    // of the component. Any functionality required for callout \"on mount\" can\n    // go here so that we can also call it again during callout dismissal to reset\n    // object state.\n    this._gotMouseMove = false;\n  }; // Render separator\n\n\n  ComboBox.prototype._renderSeparator = function (item) {\n    var index = item.index,\n        key = item.key;\n\n    if (index && index > 0) {\n      return React.createElement(\"div\", {\n        role: \"separator\",\n        key: key,\n        className: this._classNames.divider\n      });\n    }\n\n    return null;\n  };\n\n  ComboBox.prototype._renderHeader = function (item) {\n    var _a = this.props.onRenderOption,\n        onRenderOption = _a === void 0 ? this._onRenderOptionContent : _a;\n    return React.createElement(\"div\", {\n      key: item.key,\n      className: this._classNames.header\n    }, onRenderOption(item, this._onRenderOptionContent));\n  };\n  /**\n   * If we are coming from a mouseOut:\n   * there is no visible selected option.\n   *\n   * Else if We are hovering over an item:\n   * that gets the selected look.\n   *\n   * Else:\n   * Use the current valid pending index if it exists OR\n   * we do not have a valid index and we currently have a pending input value,\n   * otherwise use the selected index\n   * */\n\n\n  ComboBox.prototype._isOptionSelected = function (index) {\n    var currentPendingValueValidIndexOnHover = this.state.currentPendingValueValidIndexOnHover; // If the hover state is set to clearAll, don't show a selected index.\n    // Note, this happens when the user moused out of the menu items\n\n    if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n      return false;\n    }\n\n    return this._getPendingSelectedIndex(true\n    /* includePendingValue */\n    ) === index ? true : false;\n  };\n\n  ComboBox.prototype._isOptionChecked = function (index) {\n    if (this.props.multiSelect && index !== undefined && this.state.selectedIndices) {\n      var idxOfSelectedIndex = -1;\n      idxOfSelectedIndex = this.state.selectedIndices.indexOf(index);\n      return idxOfSelectedIndex >= 0;\n    }\n\n    return false;\n  };\n  /**\n   * Gets the pending selected index taking into account hover, valueValidIndex, and selectedIndex\n   * @param includeCurrentPendingValue - Should we include the currentPendingValue when\n   * finding the index\n   */\n\n\n  ComboBox.prototype._getPendingSelectedIndex = function (includeCurrentPendingValue) {\n    var _a = this.state,\n        currentPendingValueValidIndexOnHover = _a.currentPendingValueValidIndexOnHover,\n        currentPendingValueValidIndex = _a.currentPendingValueValidIndex,\n        currentPendingValue = _a.currentPendingValue;\n    return currentPendingValueValidIndexOnHover >= 0 ? currentPendingValueValidIndexOnHover : currentPendingValueValidIndex >= 0 || includeCurrentPendingValue && currentPendingValue !== null && currentPendingValue !== undefined ? currentPendingValueValidIndex : this.props.multiSelect ? 0 : this._getFirstSelectedIndex();\n  };\n  /**\n   * Scroll the selected element into view\n   */\n\n\n  ComboBox.prototype._scrollIntoView = function () {\n    var _a = this.props,\n        onScrollToItem = _a.onScrollToItem,\n        scrollSelectedToTop = _a.scrollSelectedToTop;\n    var _b = this.state,\n        currentPendingValueValidIndex = _b.currentPendingValueValidIndex,\n        currentPendingValue = _b.currentPendingValue;\n\n    if (onScrollToItem) {\n      // Use the custom scroll handler\n      onScrollToItem(currentPendingValueValidIndex >= 0 || currentPendingValue !== '' ? currentPendingValueValidIndex : this._getFirstSelectedIndex());\n    } else if (this._selectedElement.current && this._selectedElement.current.offsetParent) {\n      // We are using refs, scroll the ref into view\n      if (scrollSelectedToTop) {\n        this._selectedElement.current.offsetParent.scrollIntoView(true);\n      } else {\n        var alignToTop = true;\n\n        if (this._comboBoxMenu.current && this._comboBoxMenu.current.offsetParent) {\n          var scrollableParentRect = this._comboBoxMenu.current.offsetParent.getBoundingClientRect();\n\n          var selectedElementRect = this._selectedElement.current.offsetParent.getBoundingClientRect(); // If we are completely in view then we do not need to scroll\n\n\n          if (scrollableParentRect.top <= selectedElementRect.top && scrollableParentRect.top + scrollableParentRect.height >= selectedElementRect.top + selectedElementRect.height) {\n            return;\n          } // If we are lower than the scrollable parent viewport then we should align to the bottom\n\n\n          if (scrollableParentRect.top + scrollableParentRect.height <= selectedElementRect.top + selectedElementRect.height) {\n            alignToTop = false;\n          }\n        }\n\n        this._selectedElement.current.offsetParent.scrollIntoView(alignToTop);\n      }\n    }\n  };\n  /**\n   * Click handler for the menu items\n   * to select the item and also close the menu\n   * @param index - the index of the item that was clicked\n   */\n\n\n  ComboBox.prototype._onItemClick = function (item) {\n    var _this = this;\n\n    var onItemClick = this.props.onItemClick;\n    var index = item.index;\n    return function (ev) {\n      // only close the callout when it's in single-select mode\n      if (!_this.props.multiSelect) {\n        // ensure that focus returns to the input, not the button\n        _this._autofill.current && _this._autofill.current.focus();\n\n        _this.setState({\n          isOpen: false\n        });\n      } // Continue processing the click only after\n      // performing menu close / control focus(inner working)\n\n\n      onItemClick && onItemClick(ev, item, index);\n\n      _this._setSelectedIndex(index, ev);\n    };\n  };\n  /**\n   * Get the indices of the options that are marked as selected\n   * @param options - the comboBox options\n   * @param selectedKeys - the known selected keys to find\n   * @returns - an array of the indices of the selected options, empty array if nothing is selected\n   */\n\n\n  ComboBox.prototype._getSelectedIndices = function (options, selectedKeys) {\n    if (!options || !selectedKeys) {\n      return [];\n    }\n\n    var selectedIndices = {};\n    options.forEach(function (option, index) {\n      if (option.selected) {\n        selectedIndices[index] = true;\n      }\n    });\n\n    var _loop_1 = function (selectedKey) {\n      var index = findIndex(options, function (option) {\n        return option.key === selectedKey;\n      });\n\n      if (index > -1) {\n        selectedIndices[index] = true;\n      }\n    };\n\n    for (var _i = 0, selectedKeys_1 = selectedKeys; _i < selectedKeys_1.length; _i++) {\n      var selectedKey = selectedKeys_1[_i];\n\n      _loop_1(selectedKey);\n    }\n\n    return Object.keys(selectedIndices).map(Number).sort();\n  };\n  /**\n   * Reset the selected index by clearing the\n   * input (of any pending text), clearing the pending state,\n   * and setting the suggested display value to the last\n   * selected state text\n   */\n\n\n  ComboBox.prototype._resetSelectedIndex = function () {\n    var currentOptions = this.state.currentOptions;\n\n    this._clearPendingInfo();\n\n    var selectedIndex = this._getFirstSelectedIndex();\n\n    if (selectedIndex > 0 && selectedIndex < currentOptions.length) {\n      this.setState({\n        suggestedDisplayValue: currentOptions[selectedIndex].text\n      });\n    } else if (this.props.text) {\n      // If we had a value initially, restore it\n      this.setState({\n        suggestedDisplayValue: this.props.text\n      });\n    }\n  };\n  /**\n   * Clears the pending info state\n   */\n\n\n  ComboBox.prototype._clearPendingInfo = function () {\n    this._processingClearPendingInfo = true;\n    this.setState({\n      currentPendingValue: undefined,\n      currentPendingValueValidIndex: -1,\n      suggestedDisplayValue: undefined,\n      currentPendingValueValidIndexOnHover: HoverStatus.default\n    }, this._onAfterClearPendingInfo);\n  };\n  /**\n   * Set the pending info\n   * @param currentPendingValue - new pending value to set\n   * @param currentPendingValueValidIndex - new pending value index to set\n   * @param suggestedDisplayValue - new suggest display value to set\n   */\n\n\n  ComboBox.prototype._setPendingInfo = function (currentPendingValue, currentPendingValueValidIndex, suggestedDisplayValue) {\n    if (currentPendingValueValidIndex === void 0) {\n      currentPendingValueValidIndex = -1;\n    }\n\n    if (this._processingClearPendingInfo) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValue: this._normalizeToString(currentPendingValue),\n      currentPendingValueValidIndex: currentPendingValueValidIndex,\n      suggestedDisplayValue: suggestedDisplayValue,\n      currentPendingValueValidIndexOnHover: HoverStatus.default\n    });\n  };\n  /**\n   * Set the pending info from the given index\n   * @param index - the index to set the pending info from\n   */\n\n\n  ComboBox.prototype._setPendingInfoFromIndex = function (index) {\n    var currentOptions = this.state.currentOptions;\n\n    if (index >= 0 && index < currentOptions.length) {\n      var option = currentOptions[index];\n\n      this._setPendingInfo(this._getPreviewText(option), index, this._getPreviewText(option));\n    } else {\n      this._clearPendingInfo();\n    }\n  };\n  /**\n   * Sets the pending info for the comboBox\n   * @param index - the index to search from\n   * @param searchDirection - the direction to search\n   */\n\n\n  ComboBox.prototype._setPendingInfoFromIndexAndDirection = function (index, searchDirection) {\n    var currentOptions = this.state.currentOptions; // update index to allow content to wrap\n\n    if (searchDirection === SearchDirection.forward && index >= currentOptions.length - 1) {\n      index = -1;\n    } else if (searchDirection === SearchDirection.backward && index <= 0) {\n      index = currentOptions.length;\n    } // get the next \"valid\" index\n\n\n    var indexUpdate = this._getNextSelectableIndex(index, searchDirection); // if the two indicies are equal we didn't move and\n    // we should attempt to get  get the first/last \"valid\" index to use\n    // (Note, this takes care of the potential cases where the first/last\n    // item is not focusable), otherwise use the updated index\n\n\n    if (index === indexUpdate) {\n      if (searchDirection === SearchDirection.forward) {\n        index = this._getNextSelectableIndex(-1, searchDirection);\n      } else if (searchDirection === SearchDirection.backward) {\n        index = this._getNextSelectableIndex(currentOptions.length, searchDirection);\n      }\n    } else {\n      index = indexUpdate;\n    }\n\n    if (this._indexWithinBounds(currentOptions, index)) {\n      this._setPendingInfoFromIndex(index);\n    }\n  };\n\n  ComboBox.prototype._notifyPendingValueChanged = function (prevState) {\n    var onPendingValueChanged = this.props.onPendingValueChanged;\n\n    if (!onPendingValueChanged) {\n      return;\n    }\n\n    var _a = this.state,\n        currentPendingValue = _a.currentPendingValue,\n        currentOptions = _a.currentOptions,\n        currentPendingValueValidIndex = _a.currentPendingValueValidIndex,\n        currentPendingValueValidIndexOnHover = _a.currentPendingValueValidIndexOnHover;\n    var newPendingIndex = undefined;\n    var newPendingValue = undefined;\n\n    if (currentPendingValueValidIndexOnHover !== prevState.currentPendingValueValidIndexOnHover && this._indexWithinBounds(currentOptions, currentPendingValueValidIndexOnHover)) {\n      // Set new pending index if hover index was changed\n      newPendingIndex = currentPendingValueValidIndexOnHover;\n    } else if (currentPendingValueValidIndex !== prevState.currentPendingValueValidIndex && this._indexWithinBounds(currentOptions, currentPendingValueValidIndex)) {\n      // Set new pending index if currentPendingValueValidIndex was changed\n      newPendingIndex = currentPendingValueValidIndex;\n    } else if (currentPendingValue !== prevState.currentPendingValue) {\n      // Set pendingValue in the case it was changed and no index was changed\n      newPendingValue = currentPendingValue;\n    } // Notify when there is a new pending index/value. Also, if there is a pending value, it needs to send undefined.\n\n\n    if (newPendingIndex !== undefined || newPendingValue !== undefined || this._hasPendingValue) {\n      onPendingValueChanged(newPendingIndex !== undefined ? currentOptions[newPendingIndex] : undefined, newPendingIndex, newPendingValue);\n      this._hasPendingValue = newPendingIndex !== undefined || newPendingValue !== undefined;\n    }\n  };\n  /**\n   * Sets the isOpen state and updates focusInputAfterClose\n   */\n\n\n  ComboBox.prototype._setOpenStateAndFocusOnClose = function (isOpen, focusInputAfterClose) {\n    this._focusInputAfterClose = focusInputAfterClose;\n    this.setState({\n      isOpen: isOpen\n    });\n  };\n  /**\n   * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n   */\n\n\n  ComboBox.prototype._isAltOrMeta = function (ev) {\n    return ev.which === KeyCodes.alt || ev.key === 'Meta';\n  };\n\n  ComboBox.prototype._onOptionMouseEnter = function (index) {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValueValidIndexOnHover: index\n    });\n  };\n\n  ComboBox.prototype._onOptionMouseMove = function (index) {\n    this._gotMouseMove = true;\n\n    if (!this._isScrollIdle || this.state.currentPendingValueValidIndexOnHover === index) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValueValidIndexOnHover: index\n    });\n  };\n\n  ComboBox.prototype._shouldIgnoreMouseEvent = function () {\n    return !this._isScrollIdle || !this._gotMouseMove;\n  };\n  /**\n   * Handle dismissing the menu and\n   * eating the required key event when disabled\n   * @param ev - the keyboard event that was fired\n   */\n\n\n  ComboBox.prototype._handleInputWhenDisabled = function (ev) {\n    // If we are disabled, close the menu (if needed)\n    // and eat all keystokes other than TAB or ESC\n    if (this.props.disabled) {\n      if (this.state.isOpen) {\n        this.setState({\n          isOpen: false\n        });\n      } // When disabled stop propagation and prevent default\n      // of the event unless we have a tab, escape, or function key\n\n\n      if (ev !== null && ev.which !== KeyCodes.tab && ev.which !== KeyCodes.escape && (ev.which < 112\n      /* F1 */\n      || ev.which > 123)\n      /* F12 */\n      ) {\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  ComboBox.prototype._handleTouchAndPointerEvent = function () {\n    var _this = this; // If we already have an existing timeeout from a previous touch and pointer event\n    // cancel that timeout so we can set a nwe one.\n\n\n    if (this._lastTouchTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n\n      this._lastTouchTimeoutId = undefined;\n    }\n\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(function () {\n      _this._processingTouch = false;\n      _this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  };\n  /**\n   * Get the styles for the current option.\n   * @param item - Item props for the current option\n   */\n\n\n  ComboBox.prototype._getCaretButtonStyles = function () {\n    var customCaretDownButtonStyles = this.props.caretDownButtonStyles;\n    return getCaretDownButtonStyles(this.props.theme, customCaretDownButtonStyles);\n  };\n  /**\n   * Get the styles for the current option.\n   * @param item - Item props for the current option\n   */\n\n\n  ComboBox.prototype._getCurrentOptionStyles = function (item) {\n    var customStylesForAllOptions = this.props.comboBoxOptionStyles;\n    var customStylesForCurrentOption = item.styles;\n    return getOptionStyles(this.props.theme, customStylesForAllOptions, customStylesForCurrentOption, this._isPendingOption(item), item.hidden);\n  };\n  /**\n   * Get the aria-activedescendant value for the comboxbox.\n   * @returns the id of the current focused combo item, otherwise the id of the currently selected element,\n   * null otherwise\n   */\n\n\n  ComboBox.prototype._getAriaActiveDescendantValue = function () {\n    var descendantText = this.state.isOpen && this.state.selectedIndices && this.state.selectedIndices.length > 0 ? this._id + '-list' + this.state.selectedIndices[0] : undefined;\n\n    if (this.state.isOpen && this._hasFocus() && this.state.currentPendingValueValidIndex !== -1) {\n      descendantText = this._id + '-list' + this.state.currentPendingValueValidIndex;\n    }\n\n    return descendantText;\n  };\n  /**\n   * Get the aria autocomplete value for the Combobox\n   * @returns 'inline' if auto-complete automatically dynamic, 'both' if we have a list of possible values to pick from\n   * and can dynamically populate input, and 'none' if auto-complete is not enabled as we can't give user inputs.\n   */\n\n\n  ComboBox.prototype._getAriaAutoCompleteValue = function () {\n    var autoComplete = !this.props.disabled && this.props.autoComplete === 'on';\n    return autoComplete ? this.props.allowFreeform ? 'inline' : 'both' : 'none';\n  };\n\n  ComboBox.prototype._isPendingOption = function (item) {\n    return item && item.index === this.state.currentPendingValueValidIndex;\n  };\n  /**\n   * Given default selected key(s) and selected key(s), return the selected keys(s).\n   * When default selected key(s) are available, they take precedence and return them instead of selected key(s).\n   *\n   * @returns No matter what specific types the input parameters are, always return an array of\n   *  either strings or numbers instead of premitive type.  This normlization makes caller's logic easier.\n   */\n\n\n  ComboBox.prototype._buildDefaultSelectedKeys = function (defaultSelectedKey, selectedKey) {\n    var selectedKeys = this._buildSelectedKeys(defaultSelectedKey);\n\n    if (selectedKeys.length) {\n      return selectedKeys;\n    }\n\n    return this._buildSelectedKeys(selectedKey);\n  };\n\n  ComboBox.prototype._buildSelectedKeys = function (selectedKey) {\n    if (selectedKey === undefined) {\n      return [];\n    } // need to cast here so typescript does not complain\n\n\n    return selectedKey instanceof Array ? selectedKey : [selectedKey];\n  }; // For scenarios where the option's text prop contains embedded styles, we use the option's\n  // ariaLabel value as the text in the input and for autocomplete matching. We know to use this\n  // when the useAriaLabelAsText prop is set to true\n\n\n  ComboBox.prototype._getPreviewText = function (item) {\n    return item.useAriaLabelAsText && item.ariaLabel ? item.ariaLabel : item.text;\n  };\n\n  ComboBox.prototype._normalizeToString = function (value) {\n    return value || '';\n  };\n  /**\n   * Returns true if the component has some kind of focus. If it's either focusing or if it's focused\n   */\n\n\n  ComboBox.prototype._hasFocus = function () {\n    return this.state.focusState !== 'none';\n  };\n\n  ComboBox.defaultProps = {\n    options: [],\n    allowFreeform: false,\n    autoComplete: 'on',\n    buttonIconProps: {\n      iconName: 'ChevronDown'\n    }\n  };\n  ComboBox = __decorate([customizable('ComboBox', ['theme', 'styles'], true)], ComboBox);\n  return ComboBox;\n}(React.Component);\n\nexport { ComboBox };","map":{"version":3,"mappings":"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","names":["React","Autofill","initializeComponentRef","css","customizable","divProperties","findElementRecursive","findIndex","focusAsync","getId","getNativeProps","isIOS","isMac","KeyCodes","shallowCompare","mergeAriaAttributeValues","warnMutuallyExclusive","Async","EventGroup","Callout","Checkbox","CommandButton","IconButton","DirectionalHint","getCaretDownButtonStyles","getOptionStyles","getStyles","getClassNames","getComboBoxOptionClassNames","KeytipData","Label","SelectableOptionMenuItemType","getAllSelectedOptions","SearchDirection","HoverStatus","ScrollIdleDelay","TouchIdleDelay","ReadOnlyPendingAutoCompleteTimeout","__extends","ComboBoxOptionWrapper","props","render","newProps","undefined","__assign","Component","COMPONENT_NAME","_super","_this","createRef","shouldOpenOnFocus","useFocusAsync","_autofill","current","focus","setState","isOpen","_hasFocus","focusState","comboBox","value","visibleValue","_normalizeToString","_currentVisibleValue","multiselectAccessibleText","errorMessageId","keytipAttributes","label","disabled","ariaLabel","ariaDescribedBy","required","errorMessage","buttonIconProps","_b","isButtonAriaHidden","title","placeholderProp","tabIndex","autofill","iconButtonProps","suggestedDisplayValue","placeholder","multiSelect","ref","_comboBoxWrapper","id","_id","className","_classNames","root","componentRef","input","type","onFocus","_onFocus","onBlur","_onBlur","onKeyDown","_onInputKeyDown","onKeyUp","_onInputKeyUp","onClick","_onAutofillClick","onTouchStart","_onTouchStart","onInputValueChange","_onInputChange","_getAriaAutoCompleteValue","role","readOnly","_getAriaActiveDescendantValue","spellCheck","defaultVisibleValue","updateValueInWillReceiveProps","_onUpdateValueInAutofillWillReceiveProps","shouldSelectFullInputValueInComponentDidUpdate","_onShouldSelectFullInputValueInAutofillComponentDidUpdate","preventValueSelection","styles","_getCaretButtonStyles","_onComboBoxClick","iconProps","checked","state","text","allowFreeform","autoComplete","selectedIndices","currentPendingValueValidIndex","currentOptions","currentPendingValue","currentPendingIndexValid","_indexWithinBounds","index","_getPendingString","_getMultiselectDisplayString","_getFirstSelectedIndex","updatedValue","_handleInputWhenDisabled","_processInputChangeWithFreeform","_processInputChangeWithoutFreeform","inputElement","select","onResolveOptions","newOptions","__spreadArrays","Array","isArray","then","promise_1","_currentPromise","newOptionsFromPromise","event","relatedTarget","document","activeElement","_root","contains","_comboBoxMenu","preventDefault","stopPropagation","_submitPendingValue","calloutProps","dropdownWidth","dropdownMaxWidth","_a","onRenderUpperContent","onRenderLowerContent","useComboBoxAsMenuWidth","persistMenu","_c","shouldRestoreFocus","comboBoxMenuWidth","clientWidth","isBeakVisible","gapSpace","doNotLayer","directionalHint","bottomLeftEdge","directionalHintFixed","onLayerMounted","_onLayerMounted","callout","target","onDismiss","_onDismiss","onMouseDown","_onCalloutMouseDown","onScroll","_onScroll","setInitialFocus","calloutWidth","calloutMaxWidth","hidden","_onRenderUpperContent","optionsContainerWrapper","onRenderList","_onRenderList","_onRenderLowerContent","_onCalloutLayerMounted","onRenderLabelProps","screenReaderText","options","optionsContainer","map","onRenderItem","item","_onRenderItem","itemType","Divider","_renderSeparator","Header","_renderHeader","_renderOption","isSelected","_isOptionSelected","isChecked","_isOptionChecked","optionStyles","_getCurrentOptionStyles","optionClassNames","_getPreviewText","onRenderCheckboxLabel","_onRenderOptionContent","getOptionComponent","key","_onItemClick","onMouseEnter","_onOptionMouseEnter","bind","onMouseMove","_onOptionMouseMove","onMouseLeave","_onOptionMouseLeave","optionTextWrapper","_selectedElement","onRenderOption","onChange","onRenderLabel","inputProps","data","ev","_isScrollIdle","_scrollIdleTimeoutId","_async","clearTimeout","setTimeout","optionText","onMenuDismiss","_setOpenStateAndFocusOnClose","_resetSelectedIndex","_processingClearPendingInfo","currentPendingValueValidIndexOnHover","_lastKeyDownWasAltOrMeta","_isAltOrMeta","_getPendingSelectedIndex","which","enter","length","tab","escape","up","clearAll","altKey","metaKey","_setPendingInfoFromIndexAndDirection","backward","down","forward","home","end","directionToSearch","space","keyCode","alt","keyPressIsAltOrMetaAlone","shouldHandleKey","openOnKeyboardFocus","_shouldIgnoreMouseEvent","_processingTouch","_handleTouchAndPointerEvent","pointerType","stopImmediatePropagation","_events","defaultSelectedKey","selectedKey","selectedKeys","_buildDefaultSelectedKeys","_gotMouseMove","initialSelectedIndices","_getSelectedIndices","default","Object","ComboBox","on","_onResolveOptions","_onPointerDown","_buildSelectedKeys","indices","prevProps","prevState","onMenuOpen","onMenuDismissed","_scrollIntoView","_focusInputAfterClose","_notifyPendingValueChanged","dispose","onRenderContainer","_d","_e","_f","customStyles","theme","keytipProps","_getVisibleValue","divProps","hasErrorMessage","comboBoxWrapper","_renderComboBoxWrapper","container","_onRenderLabel","_onRenderContainer","displayValues","idx","push","join","multiSelectDelimiter","newCurrentPendingValueValidIndex","items","filter","option","_setPendingInfo","originalUpdatedValue","toLocaleLowerCase","newSuggestedDisplayValue","indexOf","_lastReadOnlyAutoCompleteChangeTimeoutId","i","_setPendingInfoFromIndex","searchDirection","newIndex","Math","max","min","none","_getNextSelectableIndex","submitPendingValueEvent","onPendingValueChanged","initialIndices","slice","option_1","selected","persist","_hasPendingValue","changedOptions","_clearPendingInfo","_setSelectedIndex","pendingOptionText","isValueSelected","selectionEnd","selectionStart","newOption","concat","divider","header","idxOfSelectedIndex","includeCurrentPendingValue","onScrollToItem","scrollSelectedToTop","offsetParent","scrollIntoView","alignToTop","scrollableParentRect","getBoundingClientRect","selectedElementRect","top","height","onItemClick","forEach","_i","keys","Number","sort","selectedIndex","_onAfterClearPendingInfo","indexUpdate","newPendingIndex","newPendingValue","focusInputAfterClose","_lastTouchTimeoutId","customCaretDownButtonStyles","customStylesForAllOptions","customStylesForCurrentOption","_isPendingOption","descendantText","useAriaLabelAsText","iconName"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\ComboBox\\ComboBox.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Autofill, IAutofill } from '../Autofill/index';\nimport {\n  initializeComponentRef,\n  css,\n  customizable,\n  divProperties,\n  findElementRecursive,\n  findIndex,\n  focusAsync,\n  getId,\n  getNativeProps,\n  isIOS,\n  isMac,\n  KeyCodes,\n  shallowCompare,\n  mergeAriaAttributeValues,\n  warnMutuallyExclusive,\n  Async,\n  EventGroup,\n} from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { Checkbox } from '../../Checkbox';\nimport { CommandButton, IButtonStyles, IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { getCaretDownButtonStyles, getOptionStyles, getStyles } from './ComboBox.styles';\nimport { getClassNames, getComboBoxOptionClassNames } from './ComboBox.classNames';\nimport {\n  IComboBoxOption,\n  IComboBoxOptionStyles,\n  IComboBoxProps,\n  IOnRenderComboBoxLabelProps,\n  IComboBoxClassNames,\n} from './ComboBox.types';\nimport { KeytipData } from '../../KeytipData';\nimport { Label } from '../../Label';\nimport { SelectableOptionMenuItemType, getAllSelectedOptions } from '../../utilities/selectableOption/index';\nimport { BaseButton, Button } from '../Button/index';\nimport { ICalloutProps } from '../../Callout';\n\nexport interface IComboBoxState {\n  /** The open state */\n  isOpen?: boolean;\n\n  /** The currently selected indices */\n  selectedIndices?: number[];\n\n  /** The focused state of the comboBox */\n  focusState?: 'none' | 'focused' | 'focusing';\n\n  /** This value is used for the autocomplete hint value */\n  suggestedDisplayValue?: string;\n\n  /** The options currently available for the callout */\n  currentOptions: IComboBoxOption[];\n\n  /**\n   * When taking input, this will store the index that the options input matches\n   * (-1 if no input or match)\n   */\n  currentPendingValueValidIndex: number;\n\n  /**\n   * Stores the hovered over value in the dropdown\n   * (used for styling the options without updating the input)\n   */\n  currentPendingValueValidIndexOnHover: number;\n\n  /** When taking input, this will store the actual text that is being entered */\n  currentPendingValue?: string;\n}\n\nenum SearchDirection {\n  backward = -1,\n  none = 0,\n  forward = 1,\n}\n\nenum HoverStatus {\n  /** Used when the user was hovering and has since moused out of the menu items */\n  clearAll = -2,\n  /** Default \"normal\" state, when no hover has happened or a hover is in progress */\n  default = -1,\n}\n\nconst ScrollIdleDelay = 250; /* ms */\nconst TouchIdleDelay = 500; /* ms */\n\n/**\n * This is used to clear any pending autocomplete text (used when autocomplete is true and\n * allowFreeform is false)\n */\nconst ReadOnlyPendingAutoCompleteTimeout = 1000; /* ms */\n\ninterface IComboBoxOptionWrapperProps extends IComboBoxOption {\n  /** True if the option is currently selected */\n  isSelected: boolean;\n\n  /** True if the option is currently checked (multi-select) */\n  isChecked: boolean;\n\n  /**\n   * A function that returns the children of the OptionWrapper. We pass this in as a function to ensure that\n   * children methods don't get called unnecessarily if the component doesn't need to be updated. This leads\n   * to a significant performance increase in ComboBoxes with many options and/or complex onRenderOption functions\n   */\n  render: () => JSX.Element;\n}\n\n/**\n * Internal class that is used to wrap all ComboBox options.\n * This is used to customize when we want to rerender components,\n * so we don't rerender every option every time render is executed.\n */\nclass ComboBoxOptionWrapper extends React.Component<IComboBoxOptionWrapperProps, {}> {\n  public render(): React.ReactNode {\n    return this.props.render();\n  }\n\n  public shouldComponentUpdate(newProps: IComboBoxOptionWrapperProps): boolean {\n    // The render function will always be different, so we ignore that prop\n    return !shallowCompare({ ...this.props, render: undefined }, { ...newProps, render: undefined });\n  }\n}\n\nconst COMPONENT_NAME = 'ComboBox';\n\n@customizable('ComboBox', ['theme', 'styles'], true)\nexport class ComboBox extends React.Component<IComboBoxProps, IComboBoxState> {\n  public static defaultProps: IComboBoxProps = {\n    options: [],\n    allowFreeform: false,\n    autoComplete: 'on',\n    buttonIconProps: { iconName: 'ChevronDown' },\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n\n  /** The input aspect of the comboBox */\n  private _autofill = React.createRef<IAutofill>();\n\n  /** The wrapping div of the input and button */\n  private _comboBoxWrapper = React.createRef<HTMLDivElement>();\n\n  /** The callout element */\n  private _comboBoxMenu = React.createRef<HTMLDivElement>();\n\n  /** The menu item element that is currently selected */\n  private _selectedElement = React.createRef<HTMLSpanElement>();\n\n  /** The base id for the ComboBox */\n  private _id: string;\n\n  /**\n   * After a character is inserted when autocomplete is true and allowFreeform is false,\n   * remember the task that will clear the pending string of characters.\n   */\n  private _lastReadOnlyAutoCompleteChangeTimeoutId: number | undefined;\n\n  /** Promise used when resolving the comboBox options */\n  private _currentPromise: PromiseLike<IComboBoxOption[]>;\n\n  /** The current visible value sent to the auto fill on render */\n  private _currentVisibleValue: string | undefined;\n  private _classNames: IComboBoxClassNames;\n  private _isScrollIdle: boolean;\n  private _hasPendingValue: boolean;\n  private _scrollIdleTimeoutId: number | undefined;\n  private _processingTouch: boolean;\n  private _lastTouchTimeoutId: number | undefined;\n  /** True if the most recent keydown event was for alt (option) or meta (command). */\n  private _lastKeyDownWasAltOrMeta: boolean | undefined;\n\n  /**\n   * Determines if we should be setting focus back to the input when the menu closes.\n   * The general rule of thumb is if the menu was launched via the keyboard focus should go back\n   * to the input, if it was dropped via the mouse focus should not be forced back to the input.\n   */\n  private _focusInputAfterClose: boolean;\n\n  /** Flag for when we get the first mouseMove */\n  private _gotMouseMove: boolean;\n\n  private _processingClearPendingInfo: boolean;\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  constructor(props: IComboBoxProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      defaultSelectedKey: 'selectedKey',\n      text: 'defaultSelectedKey',\n      selectedKey: 'value',\n      dropdownWidth: 'useComboBoxAsMenuWidth',\n    });\n\n    this._id = props.id || getId('ComboBox');\n    const selectedKeys: string[] | number[] = this._buildDefaultSelectedKeys(\n      props.defaultSelectedKey,\n      props.selectedKey,\n    );\n\n    this._isScrollIdle = true;\n    this._processingTouch = false;\n    this._gotMouseMove = false;\n    this._processingClearPendingInfo = false;\n\n    const initialSelectedIndices: number[] = this._getSelectedIndices(props.options, selectedKeys);\n\n    this.state = {\n      isOpen: false,\n      selectedIndices: initialSelectedIndices,\n      focusState: 'none',\n      suggestedDisplayValue: undefined,\n      currentOptions: this.props.options,\n      currentPendingValueValidIndex: -1,\n      currentPendingValue: undefined,\n      currentPendingValueValidIndexOnHover: HoverStatus.default,\n    };\n  }\n\n  /**\n   * All selected options\n   */\n  public get selectedOptions(): IComboBoxOption[] {\n    const { currentOptions, selectedIndices } = this.state;\n\n    return getAllSelectedOptions(currentOptions, selectedIndices!);\n  }\n\n  public componentDidMount(): void {\n    if (this._comboBoxWrapper.current && !this.props.disabled) {\n      // hook up resolving the options if needed on focus\n      this._events.on(this._comboBoxWrapper.current, 'focus', this._onResolveOptions, true);\n      if ('onpointerdown' in this._comboBoxWrapper.current) {\n        // For ComboBoxes, touching anywhere in the combo box should drop the dropdown, including the input element.\n        // This gives more hit target space for touch environments. We're setting the onpointerdown here, because React\n        // does not support Pointer events yet.\n        this._events.on(this._comboBoxWrapper.current, 'pointerdown', this._onPointerDown, true);\n      }\n    }\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: IComboBoxProps): void {\n    // Update the selectedIndex and currentOptions state if\n    // the selectedKey, value, or options have changed\n    if (\n      newProps.selectedKey !== this.props.selectedKey ||\n      newProps.text !== this.props.text ||\n      newProps.options !== this.props.options\n    ) {\n      const selectedKeys: string[] | number[] = this._buildSelectedKeys(newProps.selectedKey);\n      const indices: number[] = this._getSelectedIndices(newProps.options, selectedKeys);\n\n      this.setState({\n        selectedIndices: indices,\n        currentOptions: newProps.options,\n      });\n      if (newProps.selectedKey === null) {\n        this.setState({\n          suggestedDisplayValue: undefined,\n        });\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IComboBoxProps, prevState: IComboBoxState) {\n    const { allowFreeform, text, onMenuOpen, onMenuDismissed } = this.props;\n    const { isOpen, selectedIndices, currentPendingValueValidIndex } = this.state;\n\n    // If we are newly open or are open and the pending valid index changed,\n    // make sure the currently selected/pending option is scrolled into view\n    if (isOpen && (!prevState.isOpen || prevState.currentPendingValueValidIndex !== currentPendingValueValidIndex)) {\n      // Need this timeout so that the selectedElement ref is correctly updated\n      this._async.setTimeout(() => this._scrollIntoView(), 0);\n    }\n\n    // if an action is taken that put focus in the ComboBox\n    // and If we are open or we are just closed, shouldFocusAfterClose is set,\n    // but we are not the activeElement set focus on the input\n    if (\n      this._hasFocus() &&\n      (isOpen ||\n        (prevState.isOpen &&\n          !isOpen &&\n          this._focusInputAfterClose &&\n          this._autofill.current &&\n          document.activeElement !== this._autofill.current.inputElement))\n    ) {\n      this.focus(undefined /*shouldOpenOnFocus*/, true /*useFocusAsync*/);\n    }\n\n    // If we should focusAfterClose AND\n    //   just opened/closed the menu OR\n    //   are focused AND\n    //     updated the selectedIndex with the menu closed OR\n    //     are not allowing freeform OR\n    //     the value changed\n    // we need to set selection\n    if (\n      this._focusInputAfterClose &&\n      ((prevState.isOpen && !isOpen) ||\n        (this._hasFocus() &&\n          ((!isOpen &&\n            !this.props.multiSelect &&\n            prevState.selectedIndices &&\n            selectedIndices &&\n            prevState.selectedIndices[0] !== selectedIndices[0]) ||\n            !allowFreeform ||\n            text !== prevProps.text)))\n    ) {\n      this._onFocus();\n    }\n\n    this._notifyPendingValueChanged(prevState);\n\n    if (isOpen && !prevState.isOpen && onMenuOpen) {\n      onMenuOpen();\n    }\n\n    if (!isOpen && prevState.isOpen && onMenuDismissed) {\n      onMenuDismissed();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  // Primary Render\n  public render(): JSX.Element {\n    const id = this._id;\n    const errorMessageId = id + '-error';\n    const {\n      className,\n      disabled,\n      required,\n      errorMessage,\n      onRenderContainer = this._onRenderContainer,\n      onRenderLabel = this._onRenderLabel,\n      onRenderList = this._onRenderList,\n      onRenderItem = this._onRenderItem,\n      onRenderOption = this._onRenderOptionContent,\n      allowFreeform,\n      styles: customStyles,\n      theme,\n      keytipProps,\n      persistMenu,\n      multiSelect,\n    } = this.props;\n    const { isOpen, suggestedDisplayValue } = this.state;\n    this._currentVisibleValue = this._getVisibleValue();\n\n    // Single select is already accessible since the whole text is selected\n    // when focus enters the input. Since multiselect appears to clear the input\n    // it needs special accessible text\n    const multiselectAccessibleText = multiSelect\n      ? this._getMultiselectDisplayString(this.state.selectedIndices, this.state.currentOptions, suggestedDisplayValue)\n      : undefined;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, [\n      'onChange',\n      'value',\n    ]);\n\n    const hasErrorMessage = errorMessage && errorMessage.length > 0 ? true : false;\n\n    this._classNames = this.props.getClassNames\n      ? this.props.getClassNames(\n          theme!,\n          !!isOpen,\n          !!disabled,\n          !!required,\n          !!this._hasFocus(),\n          !!allowFreeform,\n          !!hasErrorMessage,\n          className,\n        )\n      : getClassNames(\n          getStyles(theme!, customStyles),\n          className!,\n          !!isOpen,\n          !!disabled,\n          !!required,\n          !!this._hasFocus(),\n          !!allowFreeform,\n          !!hasErrorMessage,\n        );\n\n    const comboBoxWrapper = keytipProps ? (\n      <KeytipData keytipProps={keytipProps} disabled={disabled}>\n        {(keytipAttributes: any): JSX.Element =>\n          this._renderComboBoxWrapper(multiselectAccessibleText, errorMessageId, keytipAttributes)\n        }\n      </KeytipData>\n    ) : (\n      this._renderComboBoxWrapper(multiselectAccessibleText, errorMessageId)\n    );\n\n    return (\n      <div {...divProps} ref={this._root} className={this._classNames.container}>\n        {onRenderLabel({ props: this.props, multiselectAccessibleText }, this._onRenderLabel)}\n        {comboBoxWrapper}\n        {(persistMenu || isOpen) &&\n          onRenderContainer(\n            {\n              ...this.props,\n              onRenderList,\n              onRenderItem,\n              onRenderOption,\n              options: this.state.currentOptions.map((item, index) => ({ ...item, index: index })),\n              onDismiss: this._onDismiss,\n            },\n            this._onRenderContainer,\n          )}\n        <div\n          role=\"region\"\n          aria-live=\"polite\"\n          aria-atomic=\"true\"\n          id={errorMessageId}\n          className={hasErrorMessage ? this._classNames.errorMessage : ''}\n        >\n          {errorMessage !== undefined ? errorMessage : ''}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public focus = (shouldOpenOnFocus?: boolean, useFocusAsync?: boolean): void => {\n    if (this._autofill.current) {\n      if (useFocusAsync) {\n        focusAsync(this._autofill.current);\n      } else {\n        this._autofill.current.focus();\n      }\n\n      if (shouldOpenOnFocus) {\n        this.setState({\n          isOpen: true,\n        });\n      }\n    }\n\n    // Programatically setting focus means that there is nothing else that needs to be done\n    // Focus is now contained\n    if (!this._hasFocus()) {\n      this.setState({ focusState: 'focused' });\n    }\n  };\n\n  /**\n   * Close menu callout if it is open\n   */\n  public dismissMenu = (): void => {\n    const { isOpen } = this.state;\n    isOpen && this.setState({ isOpen: false });\n  };\n\n  /**\n   * componentWillReceiveProps handler for the auto fill component\n   * Checks/updates the iput value to set, if needed\n   * @param defaultVisibleValue - the defaultVisibleValue that got passed\n   *  in to the auto fill's componentWillReceiveProps\n   * @returns - the updated value to set, if needed\n   */\n  private _onUpdateValueInAutofillWillReceiveProps = (): string | null => {\n    const comboBox = this._autofill.current;\n\n    if (!comboBox) {\n      return null;\n    }\n\n    if (comboBox.value === null || comboBox.value === undefined) {\n      return null;\n    }\n\n    const visibleValue = this._normalizeToString(this._currentVisibleValue);\n    if (comboBox.value !== visibleValue) {\n      // If visibleValue is empty, ensure that the empty string is used\n      return visibleValue || '';\n    }\n\n    return comboBox.value;\n  };\n\n  private _renderComboBoxWrapper = (\n    multiselectAccessibleText: string | undefined,\n    errorMessageId: string,\n    keytipAttributes: any = {},\n  ): JSX.Element => {\n    const {\n      label,\n      disabled,\n      ariaLabel,\n      ariaDescribedBy,\n      required,\n      errorMessage,\n      buttonIconProps,\n      isButtonAriaHidden = true,\n      title,\n      placeholder: placeholderProp,\n      tabIndex,\n      autofill,\n      iconButtonProps,\n    } = this.props;\n\n    const { isOpen, suggestedDisplayValue } = this.state;\n\n    // If the combobox has focus, is multiselect, and has a display string, then use that placeholder\n    // so that the selected items don't appear to vanish. This is not ideal but it's the only reasonable way\n    // to correct the behavior where the input is cleared so the user can type. If a full refactor is done, then this\n    // should be removed and the multiselect combobox should behave like a picker.\n    const placeholder =\n      this._hasFocus() && this.props.multiSelect && multiselectAccessibleText\n        ? multiselectAccessibleText\n        : placeholderProp;\n\n    return (\n      <div\n        data-ktp-target={keytipAttributes['data-ktp-target']}\n        ref={this._comboBoxWrapper}\n        id={this._id + 'wrapper'}\n        className={this._classNames.root}\n      >\n        <Autofill\n          data-ktp-execute-target={keytipAttributes['data-ktp-execute-target']}\n          data-is-interactable={!disabled}\n          componentRef={this._autofill}\n          id={this._id + '-input'}\n          className={this._classNames.input}\n          type=\"text\"\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onKeyDown={this._onInputKeyDown}\n          onKeyUp={this._onInputKeyUp}\n          onClick={this._onAutofillClick}\n          onTouchStart={this._onTouchStart}\n          onInputValueChange={this._onInputChange}\n          aria-expanded={isOpen}\n          aria-autocomplete={this._getAriaAutoCompleteValue()}\n          role=\"combobox\"\n          readOnly={disabled}\n          aria-labelledby={label && this._id + '-label'}\n          aria-label={ariaLabel && !label ? ariaLabel : undefined}\n          aria-describedby={\n            errorMessage !== undefined\n              ? mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'], errorMessageId)\n              : mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'])\n          }\n          aria-activedescendant={this._getAriaActiveDescendantValue()}\n          aria-required={required}\n          aria-disabled={disabled}\n          aria-owns={isOpen ? this._id + '-list' : undefined}\n          spellCheck={false}\n          defaultVisibleValue={this._currentVisibleValue}\n          suggestedDisplayValue={suggestedDisplayValue}\n          updateValueInWillReceiveProps={this._onUpdateValueInAutofillWillReceiveProps}\n          shouldSelectFullInputValueInComponentDidUpdate={\n            this._onShouldSelectFullInputValueInAutofillComponentDidUpdate\n          }\n          title={title}\n          preventValueSelection={!this._hasFocus()}\n          placeholder={placeholder}\n          tabIndex={tabIndex}\n          {...autofill}\n        />\n        <IconButton\n          className={'ms-ComboBox-CaretDown-button'}\n          styles={this._getCaretButtonStyles()}\n          role=\"presentation\"\n          aria-hidden={isButtonAriaHidden}\n          data-is-focusable={false}\n          tabIndex={-1}\n          onClick={this._onComboBoxClick}\n          onBlur={this._onBlur}\n          iconProps={buttonIconProps}\n          disabled={disabled}\n          checked={isOpen}\n          {...iconButtonProps}\n        />\n      </div>\n    );\n  };\n\n  /**\n   * componentDidUpdate handler for the auto fill component\n   *\n   * @param defaultVisibleValue - the current defaultVisibleValue in the auto fill's componentDidUpdate\n   * @param suggestedDisplayValue - the current suggestedDisplayValue in the auto fill's componentDidUpdate\n   * @returns - should the full value of the input be selected?\n   * True if the defaultVisibleValue equals the suggestedDisplayValue, false otherwise\n   */\n  private _onShouldSelectFullInputValueInAutofillComponentDidUpdate = (): boolean => {\n    return this._currentVisibleValue === this.state.suggestedDisplayValue;\n  };\n\n  /**\n   * Get the correct value to pass to the input\n   * to show to the user based off of the current props and state\n   * @returns the value to pass to the input\n   */\n  private _getVisibleValue = (): string | undefined => {\n    const { text, allowFreeform, autoComplete } = this.props;\n    const {\n      selectedIndices,\n      currentPendingValueValidIndex,\n      currentOptions,\n      currentPendingValue,\n      suggestedDisplayValue,\n      isOpen,\n    } = this.state;\n\n    const currentPendingIndexValid = this._indexWithinBounds(currentOptions, currentPendingValueValidIndex);\n\n    // If the user passed is a value prop, use that\n    // unless we are open and have a valid current pending index\n    if (\n      !(isOpen && currentPendingIndexValid) &&\n      text &&\n      (currentPendingValue === null || currentPendingValue === undefined)\n    ) {\n      return text;\n    }\n\n    if (this.props.multiSelect) {\n      // Multi-select\n      if (this._hasFocus()) {\n        let index = -1;\n        if (autoComplete === 'on' && currentPendingIndexValid) {\n          index = currentPendingValueValidIndex;\n        }\n        return this._getPendingString(currentPendingValue, currentOptions, index);\n      } else {\n        return this._getMultiselectDisplayString(selectedIndices, currentOptions, suggestedDisplayValue);\n      }\n    } else {\n      // Single-select\n      let index: number = this._getFirstSelectedIndex();\n      if (allowFreeform) {\n        // If we are allowing freeform and autocomplete is also true\n        // and we've got a pending value that matches an option, remember\n        // the matched option's index\n        if (autoComplete === 'on' && currentPendingIndexValid) {\n          index = currentPendingValueValidIndex;\n        }\n\n        // Since we are allowing freeform, if there is currently a pending value, use that\n        // otherwise use the index determined above (falling back to '' if we did not get a valid index)\n        return this._getPendingString(currentPendingValue, currentOptions, index);\n      } else {\n        // If we are not allowing freeform and have a\n        // valid index that matches the pending value,\n        // we know we will need some version of the pending value\n        if (currentPendingIndexValid && autoComplete === 'on') {\n          // If autoComplete is on, return the\n          // raw pending value, otherwise remember\n          // the matched option's index\n          index = currentPendingValueValidIndex;\n          return this._normalizeToString(currentPendingValue);\n        } else if (!this.state.isOpen && currentPendingValue) {\n          return this._indexWithinBounds(currentOptions, index)\n            ? currentPendingValue\n            : this._normalizeToString(suggestedDisplayValue);\n        } else {\n          return this._indexWithinBounds(currentOptions, index)\n            ? currentOptions[index].text\n            : this._normalizeToString(suggestedDisplayValue);\n        }\n      }\n    }\n  };\n\n  private _getPendingString(\n    currentPendingValue: string | null | undefined,\n    currentOptions: IComboBoxOption[],\n    index: number,\n  ) {\n    return currentPendingValue !== null && currentPendingValue !== undefined\n      ? currentPendingValue\n      : this._indexWithinBounds(currentOptions, index)\n      ? currentOptions[index].text\n      : '';\n  }\n\n  /**\n   * Returns a string that concatenates all of the selected values\n   * for multiselect combobox.\n   */\n  private _getMultiselectDisplayString(\n    selectedIndices: number[] | undefined,\n    currentOptions: IComboBoxOption[],\n    suggestedDisplayValue: string | undefined,\n  ) {\n    const displayValues = [];\n    for (let idx = 0; selectedIndices && idx < selectedIndices.length; idx++) {\n      const index: number = selectedIndices[idx];\n      displayValues.push(\n        this._indexWithinBounds(currentOptions, index)\n          ? currentOptions[index].text\n          : this._normalizeToString(suggestedDisplayValue),\n      );\n    }\n    const { multiSelectDelimiter = ', ' } = this.props;\n    return displayValues.join(multiSelectDelimiter);\n  }\n\n  /**\n   * Is the index within the bounds of the array?\n   * @param options - options to check if the index is valid for\n   * @param index - the index to check\n   * @returns - true if the index is valid for the given options, false otherwise\n   */\n  private _indexWithinBounds(options: IComboBoxOption[] | undefined, index: number): boolean {\n    if (!options) {\n      return false;\n    }\n    return index >= 0 && index < options.length;\n  }\n\n  /**\n   * Handler for typing changes on the input\n   * @param updatedValue - the newly changed value\n   */\n  private _onInputChange = (updatedValue: string): void => {\n    if (this.props.disabled) {\n      this._handleInputWhenDisabled(null /* event */);\n      return;\n    }\n\n    this.props.allowFreeform\n      ? this._processInputChangeWithFreeform(updatedValue)\n      : this._processInputChangeWithoutFreeform(updatedValue);\n  };\n\n  /**\n   * Process the new input's new value when the comboBox\n   * allows freeform entry\n   * @param updatedValue - the input's newly changed value\n   */\n  private _processInputChangeWithFreeform(updatedValue: string): void {\n    const { currentOptions } = this.state;\n    let newCurrentPendingValueValidIndex = -1;\n\n    // if the new value is empty, see if we have an exact match\n    // and then set the pending info\n    if (updatedValue === '') {\n      const items = currentOptions\n        .map((item, index) => {\n          return { ...item, index };\n        })\n        .filter(\n          option =>\n            option.itemType !== SelectableOptionMenuItemType.Header &&\n            option.itemType !== SelectableOptionMenuItemType.Divider,\n        )\n        .filter(option => this._getPreviewText(option) === updatedValue);\n\n      // if we found a match remember the index\n      if (items.length === 1) {\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n\n      this._setPendingInfo(updatedValue, newCurrentPendingValueValidIndex, updatedValue);\n      return;\n    }\n\n    // Remember the original value and then,\n    // make the value lowercase for comparison\n    const originalUpdatedValue: string = updatedValue;\n    updatedValue = updatedValue.toLocaleLowerCase();\n\n    let newSuggestedDisplayValue = '';\n\n    // If autoComplete is on, attempt to find a match from the available options\n    if (this.props.autoComplete === 'on') {\n      // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value\n      const items = currentOptions\n        .map((item, index) => {\n          return { ...item, index };\n        })\n        .filter(\n          option =>\n            option.itemType !== SelectableOptionMenuItemType.Header &&\n            option.itemType !== SelectableOptionMenuItemType.Divider,\n        )\n        .filter(\n          option =>\n            this._getPreviewText(option)\n              .toLocaleLowerCase()\n              .indexOf(updatedValue) === 0,\n        );\n      if (items.length > 0) {\n        // use ariaLabel as the value when the option is set\n        const text: string = this._getPreviewText(items[0]);\n\n        // If the user typed out the complete option text, we don't need any suggested display text anymore\n        newSuggestedDisplayValue = text.toLocaleLowerCase() !== updatedValue ? text : '';\n\n        // remember the index of the match we found\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n    } else {\n      // If autoComplete is off, attempt to find a match only when the value is exactly equal to the text of an option\n      const items = currentOptions\n        .map((item, index) => {\n          return { ...item, index };\n        })\n        .filter(\n          option =>\n            option.itemType !== SelectableOptionMenuItemType.Header &&\n            option.itemType !== SelectableOptionMenuItemType.Divider,\n        )\n        .filter(option => this._getPreviewText(option).toLocaleLowerCase() === updatedValue);\n\n      // if we found a match remember the index\n      if (items.length === 1) {\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n    }\n\n    // Set the updated state\n    this._setPendingInfo(originalUpdatedValue, newCurrentPendingValueValidIndex, newSuggestedDisplayValue);\n  }\n\n  /**\n   * Process the new input's new value when the comboBox\n   * does not allow freeform entry\n   * @param updatedValue - the input's newly changed value\n   */\n  private _processInputChangeWithoutFreeform(updatedValue: string): void {\n    const { currentPendingValue, currentPendingValueValidIndex, currentOptions } = this.state;\n\n    if (this.props.autoComplete === 'on') {\n      // If autoComplete is on while allow freeform is off,\n      // we will remember the keypresses and build up a string to attempt to match\n      // as long as characters are typed within a the timeout span of each other,\n      // otherwise we will clear the string and start building a new one on the next keypress.\n      // Also, only do this processing if we have a non-empty value\n      if (updatedValue !== '') {\n        // If we have a pending autocomplete clearing task,\n        // we know that the user is typing with keypresses happening\n        // within the timeout of each other so remove the clearing task\n        // and continue building the pending value with the udpated value\n        if (this._lastReadOnlyAutoCompleteChangeTimeoutId !== undefined) {\n          this._async.clearTimeout(this._lastReadOnlyAutoCompleteChangeTimeoutId);\n          this._lastReadOnlyAutoCompleteChangeTimeoutId = undefined;\n          updatedValue = this._normalizeToString(currentPendingValue) + updatedValue;\n        }\n\n        const originalUpdatedValue: string = updatedValue;\n        updatedValue = updatedValue.toLocaleLowerCase();\n\n        // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value\n        const items = currentOptions\n          .map((item, i) => {\n            return { ...item, index: i };\n          })\n          .filter(\n            option =>\n              option.itemType !== SelectableOptionMenuItemType.Header &&\n              option.itemType !== SelectableOptionMenuItemType.Divider,\n          )\n          .filter(option => option.text.toLocaleLowerCase().indexOf(updatedValue) === 0);\n\n        // If we found a match, udpdate the state\n        if (items.length > 0) {\n          this._setPendingInfo(originalUpdatedValue, items[0].index, this._getPreviewText(items[0]));\n        }\n\n        // Schedule a timeout to clear the pending value after the timeout span\n        this._lastReadOnlyAutoCompleteChangeTimeoutId = this._async.setTimeout(() => {\n          this._lastReadOnlyAutoCompleteChangeTimeoutId = undefined;\n        }, ReadOnlyPendingAutoCompleteTimeout);\n        return;\n      }\n    }\n\n    // If we get here, either autoComplete is on or we did not find a match with autoComplete on.\n    // Remember we are not allowing freeform, so at this point, if we have a pending valid value index\n    // use that; otherwise use the selectedIndex\n    const index = currentPendingValueValidIndex >= 0 ? currentPendingValueValidIndex : this._getFirstSelectedIndex();\n\n    // Since we are not allowing freeform, we need to\n    // set both the pending and suggested values/index\n    // to allow us to select all content in the input to\n    // give the illusion that we are readonly (e.g. freeform off)\n    this._setPendingInfoFromIndex(index);\n  }\n\n  private _getFirstSelectedIndex(): number {\n    return this.state.selectedIndices && this.state.selectedIndices.length > 0 ? this.state.selectedIndices[0] : -1;\n  }\n\n  /**\n   * Walk along the options starting at the index, stepping by the delta (positive or negative)\n   * looking for the next valid selectable index (e.g. skipping headings and dividers)\n   * @param index - the index to get the next selectable index from\n   * @param delta - optional delta to step by when finding the next index, defaults to 0\n   * @returns - the next valid selectable index. If the new index is outside of the bounds,\n   * it will snap to the edge of the options array. If delta == 0 and the given index is not selectable\n   */\n  private _getNextSelectableIndex(index: number, searchDirection: SearchDirection): number {\n    const { currentOptions } = this.state;\n\n    let newIndex = index + searchDirection;\n\n    newIndex = Math.max(0, Math.min(currentOptions.length - 1, newIndex));\n\n    if (!this._indexWithinBounds(currentOptions, newIndex)) {\n      return -1;\n    }\n\n    const option: IComboBoxOption = currentOptions[newIndex];\n\n    if (\n      option.itemType === SelectableOptionMenuItemType.Header ||\n      option.itemType === SelectableOptionMenuItemType.Divider ||\n      option.hidden === true\n    ) {\n      // Should we continue looking for an index to select?\n      if (\n        searchDirection !== SearchDirection.none &&\n        ((newIndex > 0 && searchDirection < SearchDirection.none) ||\n          (newIndex >= 0 && newIndex < currentOptions.length && searchDirection > SearchDirection.none))\n      ) {\n        newIndex = this._getNextSelectableIndex(newIndex, searchDirection);\n      } else {\n        // If we cannot perform a useful search just return the index we were given\n        return index;\n      }\n    }\n\n    // We have the next valid selectable index, return it\n    return newIndex;\n  }\n\n  /**\n   * Set the selected index. Note, this is\n   * the \"real\" selected index, not the pending selected index\n   * @param index - the index to set (or the index to set from if a search direction is provided)\n   * @param searchDirection - the direction to search along the options from the given index\n   */\n  private _setSelectedIndex(\n    index: number,\n    submitPendingValueEvent: React.SyntheticEvent<any>,\n    searchDirection: SearchDirection = SearchDirection.none,\n  ): void {\n    const { onChange, onPendingValueChanged } = this.props;\n    const { currentOptions } = this.state;\n    const { selectedIndices: initialIndices } = this.state;\n\n    // Clone selectedIndices so we don't mutate state\n    let selectedIndices = initialIndices ? initialIndices.slice() : [];\n\n    // Find the next selectable index, if searchDirection is none\n    // we will get our starting index back\n    index = this._getNextSelectableIndex(index, searchDirection);\n\n    if (!this._indexWithinBounds(currentOptions, index)) {\n      return;\n    }\n\n    // Are we at a new index? If so, update the state, otherwise\n    // there is nothing to do\n    if (\n      this.props.multiSelect ||\n      selectedIndices.length < 1 ||\n      (selectedIndices.length === 1 && selectedIndices[0] !== index)\n    ) {\n      const option: IComboBoxOption = { ...currentOptions[index] };\n      // if option doesn't existing, or option is disabled, we noop\n      if (!option || option.disabled) {\n        return;\n      }\n      if (this.props.multiSelect) {\n        // Setting the initial state of option.selected in Multi-select combobox by checking the\n        // selectedIndices array and overriding the undefined issue\n        option.selected = option.selected !== undefined ? !option.selected : selectedIndices.indexOf(index) < 0;\n        if (option.selected && selectedIndices.indexOf(index) < 0) {\n          selectedIndices.push(index);\n        } else if (!option.selected && selectedIndices.indexOf(index) >= 0) {\n          selectedIndices = selectedIndices.filter((value: number) => value !== index);\n        }\n      } else {\n        selectedIndices[0] = index;\n      }\n\n      submitPendingValueEvent.persist();\n\n      // Only setstate if combobox is uncontrolled.\n      if (this.props.selectedKey || this.props.selectedKey === null) {\n        // If ComboBox value is changed, revert preview first\n        if (this._hasPendingValue && onPendingValueChanged) {\n          onPendingValueChanged();\n          this._hasPendingValue = false;\n        }\n        if (onChange) {\n          onChange(submitPendingValueEvent, option, index, undefined);\n        }\n      } else {\n        // Update current options\n        const changedOptions = currentOptions.slice();\n        changedOptions[index] = option;\n\n        // Call onChange after state is updated\n        this.setState(\n          {\n            selectedIndices: selectedIndices,\n            currentOptions: changedOptions,\n          },\n          () => {\n            // If ComboBox value is changed, revert preview first\n            if (this._hasPendingValue && onPendingValueChanged) {\n              onPendingValueChanged();\n              this._hasPendingValue = false;\n            }\n\n            if (onChange) {\n              onChange(submitPendingValueEvent, option, index, undefined);\n            }\n          },\n        );\n      }\n    }\n    if (this.props.multiSelect && this.state.isOpen) {\n      return;\n    }\n    // clear all of the pending info\n    this._clearPendingInfo();\n  }\n\n  /**\n   * Focus (and select) the content of the input\n   * and set the focused state\n   */\n  private _onFocus = (): void => {\n    if (this._autofill.current && this._autofill.current.inputElement) {\n      this._autofill.current.inputElement.select();\n    }\n\n    if (!this._hasFocus()) {\n      this.setState({ focusState: 'focusing' });\n    }\n  };\n\n  /**\n   * Callback issued when the options should be resolved, if they have been updated or\n   * if they need to be passed in the first time. This only does work if an onResolveOptions\n   * callback was passed in\n   */\n  private _onResolveOptions = (): void => {\n    if (this.props.onResolveOptions) {\n      // get the options\n      const newOptions = this.props.onResolveOptions([...this.state.currentOptions]);\n\n      // Check to see if the returned value is an array, if it is update the state\n      // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n      // If it is then resolve it asynchronously.\n      if (Array.isArray(newOptions)) {\n        this.setState({\n          currentOptions: newOptions,\n        });\n      } else if (newOptions && newOptions.then) {\n        // Ensure that the promise will only use the callback if it was the most recent one\n        // and update the state when the promise returns\n        const promise: PromiseLike<IComboBoxOption[]> = (this._currentPromise = newOptions);\n        promise.then((newOptionsFromPromise: IComboBoxOption[]) => {\n          if (promise === this._currentPromise) {\n            this.setState({\n              currentOptions: newOptionsFromPromise,\n            });\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * OnBlur handler. Set the focused state to false\n   * and submit any pending value\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  private _onBlur = (event: React.FocusEvent<HTMLElement | Autofill | BaseButton | Button>): void => {\n    // Do nothing if the blur is coming from something\n    // inside the comboBox root or the comboBox menu since\n    // it we are not really bluring from the whole comboBox\n    let relatedTarget = event.relatedTarget;\n    if (event.relatedTarget === null) {\n      // In IE11, due to lack of support, event.relatedTarget is always\n      // null making every onBlur call to be \"outside\" of the ComboBox\n      // even when it's not. Using document.activeElement is another way\n      // for us to be able to get what the relatedTarget without relying\n      // on the event\n      relatedTarget = document.activeElement as Element;\n    }\n    if (\n      relatedTarget &&\n      // when event coming from withing the comboBox title\n      ((this._root.current && this._root.current.contains(relatedTarget as HTMLElement)) ||\n        // when event coming from within the comboBox list menu\n        (this._comboBoxMenu.current &&\n          (this._comboBoxMenu.current.contains(relatedTarget as HTMLElement) ||\n            // when event coming from the callout containing the comboBox list menu (ex: when scrollBar of the\n            // Callout is clicked) checks if the relatedTarget is a parent of _comboBoxMenu\n            findElementRecursive(this._comboBoxMenu.current, element => element === relatedTarget))))\n    ) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (this._hasFocus()) {\n      this.setState({ focusState: 'none' });\n      if (!this.props.multiSelect || this.props.allowFreeform) {\n        this._submitPendingValue(event);\n      }\n    }\n  };\n\n  /**\n   * Submit a pending value if there is one\n   */\n  private _submitPendingValue(submitPendingValueEvent: any): void {\n    const { onChange, allowFreeform, autoComplete } = this.props;\n    const {\n      currentPendingValue,\n      currentPendingValueValidIndex,\n      currentOptions,\n      currentPendingValueValidIndexOnHover,\n    } = this.state;\n    let { selectedIndices } = this.state;\n\n    // Do not submit any pending value if we\n    // have already initiated clearing the pending info\n    if (this._processingClearPendingInfo) {\n      return;\n    }\n\n    // If we allow freeform we need to handle that\n    if (allowFreeform) {\n      // if currentPendingValue is null or undefined the user did not submit anything\n      // (not even empty because we would have stored that as the pending value)\n      if (currentPendingValue === null || currentPendingValue === undefined) {\n        // if a user did not type anything they may just hovered over an item\n        if (currentPendingValueValidIndexOnHover >= 0) {\n          this._setSelectedIndex(currentPendingValueValidIndexOnHover, submitPendingValueEvent);\n          this._clearPendingInfo();\n        }\n\n        return;\n      }\n\n      // Check to see if the user typed an exact match\n      if (this._indexWithinBounds(currentOptions, currentPendingValueValidIndex)) {\n        const pendingOptionText: string = this._getPreviewText(\n          currentOptions[currentPendingValueValidIndex],\n        ).toLocaleLowerCase();\n\n        // By exact match, that means: our pending value is the same as the pending option text OR\n        // the pending option starts with the pending value and we have an \"autoComplete\" selection\n        // where the total length is equal to pending option length OR\n        // the live value in the underlying input matches the pending option; update the state\n        if (\n          currentPendingValue.toLocaleLowerCase() === pendingOptionText ||\n          (autoComplete &&\n            pendingOptionText.indexOf(currentPendingValue.toLocaleLowerCase()) === 0 &&\n            this._autofill.current &&\n            this._autofill.current.isValueSelected &&\n            currentPendingValue.length +\n              (this._autofill.current.selectionEnd! - this._autofill.current.selectionStart!) ===\n              pendingOptionText.length) ||\n          (this._autofill.current &&\n            this._autofill.current.inputElement &&\n            this._autofill.current.inputElement.value.toLocaleLowerCase() === pendingOptionText)\n        ) {\n          this._setSelectedIndex(currentPendingValueValidIndex, submitPendingValueEvent);\n          if (this.props.multiSelect && this.state.isOpen) {\n            return;\n          }\n          this._clearPendingInfo();\n          return;\n        }\n      }\n\n      if (onChange) {\n        if (onChange) {\n          // trigger onChange to clear value\n          onChange(submitPendingValueEvent, undefined, undefined, currentPendingValue);\n        }\n      } else {\n        // If we are not controlled, create a new selected option\n        const newOption: IComboBoxOption = {\n          key: currentPendingValue || getId(),\n          text: this._normalizeToString(currentPendingValue),\n        };\n        // If it's multiselect, set selected state to true\n        if (this.props.multiSelect) {\n          newOption.selected = true;\n        }\n        const newOptions: IComboBoxOption[] = currentOptions.concat([newOption]);\n        if (selectedIndices) {\n          if (!this.props.multiSelect) {\n            selectedIndices = [];\n          }\n          selectedIndices.push(newOptions.length - 1);\n        }\n        this.setState({\n          currentOptions: newOptions,\n          selectedIndices: selectedIndices,\n        });\n      }\n    } else if (currentPendingValueValidIndex >= 0) {\n      // Since we are not allowing freeform, we must have a matching\n      // to be able to update state\n      this._setSelectedIndex(currentPendingValueValidIndex, submitPendingValueEvent);\n    } else if (currentPendingValueValidIndexOnHover >= 0) {\n      // If all else failed and we were hovering over an item, select it\n      this._setSelectedIndex(currentPendingValueValidIndexOnHover, submitPendingValueEvent);\n    }\n\n    // Finally, clear the pending info\n    this._clearPendingInfo();\n  }\n\n  // Render Callout container and pass in list\n  private _onRenderContainer = (props: IComboBoxProps): JSX.Element => {\n    const {\n      onRenderList,\n      calloutProps,\n      dropdownWidth,\n      dropdownMaxWidth,\n      onRenderUpperContent = this._onRenderUpperContent,\n      onRenderLowerContent = this._onRenderLowerContent,\n      useComboBoxAsMenuWidth,\n      persistMenu,\n      shouldRestoreFocus = true,\n    } = props;\n\n    const { isOpen } = this.state;\n\n    const comboBoxMenuWidth =\n      useComboBoxAsMenuWidth && this._comboBoxWrapper.current\n        ? this._comboBoxWrapper.current.clientWidth + 2\n        : undefined;\n\n    return (\n      <Callout\n        isBeakVisible={false}\n        gapSpace={0}\n        doNotLayer={false}\n        directionalHint={DirectionalHint.bottomLeftEdge}\n        directionalHintFixed={false}\n        {...calloutProps}\n        onLayerMounted={this._onLayerMounted}\n        className={css(this._classNames.callout, calloutProps ? calloutProps.className : undefined)}\n        target={this._comboBoxWrapper.current}\n        onDismiss={this._onDismiss}\n        onMouseDown={this._onCalloutMouseDown}\n        onScroll={this._onScroll}\n        setInitialFocus={false}\n        calloutWidth={\n          useComboBoxAsMenuWidth && this._comboBoxWrapper.current\n            ? comboBoxMenuWidth && comboBoxMenuWidth\n            : dropdownWidth\n        }\n        calloutMaxWidth={dropdownMaxWidth ? dropdownMaxWidth : comboBoxMenuWidth}\n        hidden={persistMenu ? !isOpen : undefined}\n        shouldRestoreFocus={shouldRestoreFocus}\n      >\n        {onRenderUpperContent(this.props, this._onRenderUpperContent)}\n        <div className={this._classNames.optionsContainerWrapper} ref={this._comboBoxMenu}>\n          {(onRenderList as any)({ ...props }, this._onRenderList)}\n        </div>\n        {onRenderLowerContent(this.props, this._onRenderLowerContent)}\n      </Callout>\n    );\n  };\n\n  private _onCalloutLayerMounted() {\n    // In persistMenu mode _onLayerMounted is only called once for the lifetime\n    // of the component. Any functionality required for callout \"on mount\" can\n    // go here so that we can also call it again during callout dismissal to reset\n    // object state.\n    this._gotMouseMove = false;\n  }\n\n  private _onLayerMounted = () => {\n    this._onCalloutLayerMounted();\n\n    if (this.props.calloutProps && this.props.calloutProps.onLayerMounted) {\n      this.props.calloutProps.onLayerMounted();\n    }\n  };\n\n  private _onRenderLabel = (onRenderLabelProps: IOnRenderComboBoxLabelProps): JSX.Element | null => {\n    const { label, disabled, required } = onRenderLabelProps.props;\n\n    if (label) {\n      return (\n        <Label id={this._id + '-label'} disabled={disabled} required={required} className={this._classNames.label}>\n          {label}\n          {onRenderLabelProps.multiselectAccessibleText && (\n            <span className={this._classNames.screenReaderText}>{onRenderLabelProps.multiselectAccessibleText}</span>\n          )}\n        </Label>\n      );\n    }\n\n    return null;\n  };\n\n  // Render List of items\n  private _onRenderList = (props: IComboBoxProps): JSX.Element => {\n    const { onRenderItem, options } = props;\n\n    const id = this._id;\n    return (\n      <div\n        id={id + '-list'}\n        className={this._classNames.optionsContainer}\n        aria-labelledby={id + '-label'}\n        role=\"listbox\"\n      >\n        {options.map(item => (onRenderItem as any)(item, this._onRenderItem))}\n      </div>\n    );\n  };\n\n  // Render items\n  private _onRenderItem = (item: IComboBoxOption): JSX.Element | null => {\n    switch (item.itemType) {\n      case SelectableOptionMenuItemType.Divider:\n        return this._renderSeparator(item);\n      case SelectableOptionMenuItemType.Header:\n        return this._renderHeader(item);\n      default:\n        return this._renderOption(item);\n    }\n  };\n\n  // Default _onRenderLowerContent function returns nothing\n  private _onRenderLowerContent = (): null => {\n    return null;\n  };\n\n  // Default _onRenderUpperContent function returns nothing\n  private _onRenderUpperContent = (): null => {\n    return null;\n  };\n\n  // Render separator\n  private _renderSeparator(item: IComboBoxOption): JSX.Element | null {\n    const { index, key } = item;\n\n    if (index && index > 0) {\n      return <div role=\"separator\" key={key} className={this._classNames.divider} />;\n    }\n    return null;\n  }\n\n  private _renderHeader(item: IComboBoxOption): JSX.Element {\n    const { onRenderOption = this._onRenderOptionContent } = this.props;\n\n    return (\n      <div key={item.key} className={this._classNames.header}>\n        {onRenderOption(item, this._onRenderOptionContent)}\n      </div>\n    );\n  }\n\n  private _renderOption = (item: IComboBoxOption): JSX.Element => {\n    const { onRenderOption = this._onRenderOptionContent } = this.props;\n    const id = this._id;\n    const isSelected: boolean = this._isOptionSelected(item.index);\n    const isChecked: boolean = this._isOptionChecked(item.index);\n    const optionStyles = this._getCurrentOptionStyles(item);\n    const optionClassNames = getComboBoxOptionClassNames(this._getCurrentOptionStyles(item));\n    const title = this._getPreviewText(item);\n\n    const onRenderCheckboxLabel = () => onRenderOption(item, this._onRenderOptionContent);\n\n    const getOptionComponent = () => {\n      return !this.props.multiSelect ? (\n        <CommandButton\n          id={id + '-list' + item.index}\n          key={item.key}\n          data-index={item.index}\n          styles={optionStyles}\n          checked={isSelected}\n          className={'ms-ComboBox-option'}\n          onClick={this._onItemClick(item)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onMouseEnter={this._onOptionMouseEnter.bind(this, item.index)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onMouseMove={this._onOptionMouseMove.bind(this, item.index)}\n          onMouseLeave={this._onOptionMouseLeave}\n          role=\"option\"\n          aria-selected={isSelected ? 'true' : 'false'}\n          ariaLabel={this._getPreviewText(item)}\n          disabled={item.disabled}\n          title={title}\n        >\n          {\n            <span className={optionClassNames.optionTextWrapper} ref={isSelected ? this._selectedElement : undefined}>\n              {onRenderOption(item, this._onRenderOptionContent)}\n            </span>\n          }\n        </CommandButton>\n      ) : (\n        <Checkbox\n          id={id + '-list' + item.index}\n          ariaLabel={this._getPreviewText(item)}\n          key={item.key}\n          data-index={item.index}\n          styles={optionStyles}\n          className={'ms-ComboBox-option'}\n          data-is-focusable={true}\n          onChange={this._onItemClick(item)}\n          label={item.text}\n          role=\"option\"\n          checked={isChecked}\n          title={title}\n          disabled={item.disabled}\n          // eslint-disable-next-line react/jsx-no-bind\n          onRenderLabel={onRenderCheckboxLabel}\n          inputProps={{\n            'aria-selected': isSelected ? 'true' : 'false',\n          }}\n        />\n      );\n    };\n\n    return (\n      <ComboBoxOptionWrapper\n        key={item.key}\n        index={item.index}\n        disabled={item.disabled}\n        isSelected={isSelected}\n        isChecked={isChecked}\n        text={item.text}\n        // eslint-disable-next-line react/jsx-no-bind\n        render={getOptionComponent}\n        data={item.data}\n      />\n    );\n  };\n\n  /**\n   * If we are coming from a mouseOut:\n   * there is no visible selected option.\n   *\n   * Else if We are hovering over an item:\n   * that gets the selected look.\n   *\n   * Else:\n   * Use the current valid pending index if it exists OR\n   * we do not have a valid index and we currently have a pending input value,\n   * otherwise use the selected index\n   * */\n  private _isOptionSelected(index: number | undefined): boolean {\n    const { currentPendingValueValidIndexOnHover } = this.state;\n\n    // If the hover state is set to clearAll, don't show a selected index.\n    // Note, this happens when the user moused out of the menu items\n    if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n      return false;\n    }\n\n    return this._getPendingSelectedIndex(true /* includePendingValue */) === index ? true : false;\n  }\n\n  private _isOptionChecked(index: number | undefined): boolean {\n    if (this.props.multiSelect && index !== undefined && this.state.selectedIndices) {\n      let idxOfSelectedIndex = -1;\n\n      idxOfSelectedIndex = this.state.selectedIndices.indexOf(index);\n      return idxOfSelectedIndex >= 0;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the pending selected index taking into account hover, valueValidIndex, and selectedIndex\n   * @param includeCurrentPendingValue - Should we include the currentPendingValue when\n   * finding the index\n   */\n  private _getPendingSelectedIndex(includeCurrentPendingValue: boolean): number {\n    const { currentPendingValueValidIndexOnHover, currentPendingValueValidIndex, currentPendingValue } = this.state;\n\n    return currentPendingValueValidIndexOnHover >= 0\n      ? currentPendingValueValidIndexOnHover\n      : currentPendingValueValidIndex >= 0 ||\n        (includeCurrentPendingValue && currentPendingValue !== null && currentPendingValue !== undefined)\n      ? currentPendingValueValidIndex\n      : this.props.multiSelect\n      ? 0\n      : this._getFirstSelectedIndex();\n  }\n\n  /**\n   * Mouse clicks to headers, dividers and scrollbar should not make input lose focus\n   */\n  private _onCalloutMouseDown: ICalloutProps['onMouseDown'] = ev => {\n    ev.preventDefault();\n  };\n\n  /**\n   * Scroll handler for the callout to make sure the mouse events\n   * for updating focus are not interacting during scroll\n   */\n  private _onScroll = () => {\n    if (!this._isScrollIdle && this._scrollIdleTimeoutId !== undefined) {\n      this._async.clearTimeout(this._scrollIdleTimeoutId);\n      this._scrollIdleTimeoutId = undefined;\n    } else {\n      this._isScrollIdle = false;\n    }\n\n    this._scrollIdleTimeoutId = this._async.setTimeout(() => {\n      this._isScrollIdle = true;\n    }, ScrollIdleDelay);\n  };\n\n  /**\n   * Scroll the selected element into view\n   */\n  private _scrollIntoView(): void {\n    const { onScrollToItem, scrollSelectedToTop } = this.props;\n\n    const { currentPendingValueValidIndex, currentPendingValue } = this.state;\n\n    if (onScrollToItem) {\n      // Use the custom scroll handler\n      onScrollToItem(\n        currentPendingValueValidIndex >= 0 || currentPendingValue !== ''\n          ? currentPendingValueValidIndex\n          : this._getFirstSelectedIndex(),\n      );\n    } else if (this._selectedElement.current && this._selectedElement.current.offsetParent) {\n      // We are using refs, scroll the ref into view\n      if (scrollSelectedToTop) {\n        this._selectedElement.current.offsetParent.scrollIntoView(true);\n      } else {\n        let alignToTop = true;\n\n        if (this._comboBoxMenu.current && this._comboBoxMenu.current.offsetParent) {\n          const scrollableParentRect = this._comboBoxMenu.current.offsetParent.getBoundingClientRect();\n          const selectedElementRect = this._selectedElement.current.offsetParent.getBoundingClientRect();\n\n          // If we are completely in view then we do not need to scroll\n          if (\n            scrollableParentRect.top <= selectedElementRect.top &&\n            scrollableParentRect.top + scrollableParentRect.height >=\n              selectedElementRect.top + selectedElementRect.height\n          ) {\n            return;\n          }\n\n          // If we are lower than the scrollable parent viewport then we should align to the bottom\n          if (\n            scrollableParentRect.top + scrollableParentRect.height <=\n            selectedElementRect.top + selectedElementRect.height\n          ) {\n            alignToTop = false;\n          }\n        }\n\n        this._selectedElement.current.offsetParent.scrollIntoView(alignToTop);\n      }\n    }\n  }\n\n  private _onRenderOptionContent = (item: IComboBoxOption): JSX.Element => {\n    const optionClassNames = getComboBoxOptionClassNames(this._getCurrentOptionStyles(item));\n    return <span className={optionClassNames.optionText}>{item.text}</span>;\n  };\n\n  /**\n   * Click handler for the menu items\n   * to select the item and also close the menu\n   * @param index - the index of the item that was clicked\n   */\n  private _onItemClick(item: IComboBoxOption): (ev: any) => void {\n    const { onItemClick } = this.props;\n    const { index } = item;\n\n    return (ev: any): void => {\n      // only close the callout when it's in single-select mode\n      if (!this.props.multiSelect) {\n        // ensure that focus returns to the input, not the button\n        this._autofill.current && this._autofill.current.focus();\n        this.setState({\n          isOpen: false,\n        });\n      }\n\n      // Continue processing the click only after\n      // performing menu close / control focus(inner working)\n      onItemClick && onItemClick(ev, item, index);\n      this._setSelectedIndex(index as number, ev);\n    };\n  }\n\n  /**\n   * Handles dismissing (cancelling) the menu\n   */\n  private _onDismiss = (): void => {\n    const { onMenuDismiss } = this.props;\n    if (onMenuDismiss) {\n      onMenuDismiss();\n    }\n\n    // In persistMode we need to simulate callout layer mount\n    // since that only happens once. We do it on dismiss since\n    // it works either way.\n    if (this.props.persistMenu) {\n      this._onCalloutLayerMounted();\n    }\n\n    // close the menu\n    this._setOpenStateAndFocusOnClose(false /* isOpen */, false /* focusInputAfterClose */);\n\n    // reset the selected index\n    // to the last value state\n    this._resetSelectedIndex();\n  };\n\n  /**\n   * Get the indices of the options that are marked as selected\n   * @param options - the comboBox options\n   * @param selectedKeys - the known selected keys to find\n   * @returns - an array of the indices of the selected options, empty array if nothing is selected\n   */\n  private _getSelectedIndices(\n    options: IComboBoxOption[] | undefined,\n    selectedKeys: (string | number | undefined)[],\n  ): number[] {\n    if (!options || !selectedKeys) {\n      return [];\n    }\n\n    const selectedIndices: { [key: number]: boolean } = {};\n    options.forEach((option: IComboBoxOption, index: number) => {\n      if (option.selected) {\n        selectedIndices[index] = true;\n      }\n    });\n\n    for (const selectedKey of selectedKeys) {\n      const index = findIndex(options, option => option.key === selectedKey);\n      if (index > -1) {\n        selectedIndices[index] = true;\n      }\n    }\n\n    return Object.keys(selectedIndices)\n      .map(Number)\n      .sort();\n  }\n\n  /**\n   * Reset the selected index by clearing the\n   * input (of any pending text), clearing the pending state,\n   * and setting the suggested display value to the last\n   * selected state text\n   */\n  private _resetSelectedIndex(): void {\n    const { currentOptions } = this.state;\n    this._clearPendingInfo();\n\n    const selectedIndex: number = this._getFirstSelectedIndex();\n    if (selectedIndex > 0 && selectedIndex < currentOptions.length) {\n      this.setState({\n        suggestedDisplayValue: currentOptions[selectedIndex].text,\n      });\n    } else if (this.props.text) {\n      // If we had a value initially, restore it\n      this.setState({\n        suggestedDisplayValue: this.props.text,\n      });\n    }\n  }\n\n  /**\n   * Clears the pending info state\n   */\n  private _clearPendingInfo(): void {\n    this._processingClearPendingInfo = true;\n\n    this.setState(\n      {\n        currentPendingValue: undefined,\n        currentPendingValueValidIndex: -1,\n        suggestedDisplayValue: undefined,\n        currentPendingValueValidIndexOnHover: HoverStatus.default,\n      },\n      this._onAfterClearPendingInfo,\n    );\n  }\n\n  private _onAfterClearPendingInfo = () => {\n    this._processingClearPendingInfo = false;\n  };\n\n  /**\n   * Set the pending info\n   * @param currentPendingValue - new pending value to set\n   * @param currentPendingValueValidIndex - new pending value index to set\n   * @param suggestedDisplayValue - new suggest display value to set\n   */\n  private _setPendingInfo(\n    currentPendingValue?: string,\n    currentPendingValueValidIndex: number = -1,\n    suggestedDisplayValue?: string,\n  ): void {\n    if (this._processingClearPendingInfo) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValue: this._normalizeToString(currentPendingValue),\n      currentPendingValueValidIndex: currentPendingValueValidIndex,\n      suggestedDisplayValue: suggestedDisplayValue,\n      currentPendingValueValidIndexOnHover: HoverStatus.default,\n    });\n  }\n\n  /**\n   * Set the pending info from the given index\n   * @param index - the index to set the pending info from\n   */\n  private _setPendingInfoFromIndex(index: number): void {\n    const { currentOptions } = this.state;\n\n    if (index >= 0 && index < currentOptions.length) {\n      const option = currentOptions[index];\n      this._setPendingInfo(this._getPreviewText(option), index, this._getPreviewText(option));\n    } else {\n      this._clearPendingInfo();\n    }\n  }\n\n  /**\n   * Sets the pending info for the comboBox\n   * @param index - the index to search from\n   * @param searchDirection - the direction to search\n   */\n  private _setPendingInfoFromIndexAndDirection(index: number, searchDirection: SearchDirection): void {\n    const { currentOptions } = this.state;\n\n    // update index to allow content to wrap\n    if (searchDirection === SearchDirection.forward && index >= currentOptions.length - 1) {\n      index = -1;\n    } else if (searchDirection === SearchDirection.backward && index <= 0) {\n      index = currentOptions.length;\n    }\n\n    // get the next \"valid\" index\n    const indexUpdate = this._getNextSelectableIndex(index, searchDirection);\n\n    // if the two indicies are equal we didn't move and\n    // we should attempt to get  get the first/last \"valid\" index to use\n    // (Note, this takes care of the potential cases where the first/last\n    // item is not focusable), otherwise use the updated index\n    if (index === indexUpdate) {\n      if (searchDirection === SearchDirection.forward) {\n        index = this._getNextSelectableIndex(-1, searchDirection);\n      } else if (searchDirection === SearchDirection.backward) {\n        index = this._getNextSelectableIndex(currentOptions.length, searchDirection);\n      }\n    } else {\n      index = indexUpdate;\n    }\n\n    if (this._indexWithinBounds(currentOptions, index)) {\n      this._setPendingInfoFromIndex(index);\n    }\n  }\n\n  private _notifyPendingValueChanged(prevState: IComboBoxState): void {\n    const { onPendingValueChanged } = this.props;\n\n    if (!onPendingValueChanged) {\n      return;\n    }\n\n    const {\n      currentPendingValue,\n      currentOptions,\n      currentPendingValueValidIndex,\n      currentPendingValueValidIndexOnHover,\n    } = this.state;\n\n    let newPendingIndex: number | undefined = undefined;\n    let newPendingValue: string | undefined = undefined;\n\n    if (\n      currentPendingValueValidIndexOnHover !== prevState.currentPendingValueValidIndexOnHover &&\n      this._indexWithinBounds(currentOptions, currentPendingValueValidIndexOnHover)\n    ) {\n      // Set new pending index if hover index was changed\n      newPendingIndex = currentPendingValueValidIndexOnHover;\n    } else if (\n      currentPendingValueValidIndex !== prevState.currentPendingValueValidIndex &&\n      this._indexWithinBounds(currentOptions, currentPendingValueValidIndex)\n    ) {\n      // Set new pending index if currentPendingValueValidIndex was changed\n      newPendingIndex = currentPendingValueValidIndex;\n    } else if (currentPendingValue !== prevState.currentPendingValue) {\n      // Set pendingValue in the case it was changed and no index was changed\n      newPendingValue = currentPendingValue;\n    }\n\n    // Notify when there is a new pending index/value. Also, if there is a pending value, it needs to send undefined.\n    if (newPendingIndex !== undefined || newPendingValue !== undefined || this._hasPendingValue) {\n      onPendingValueChanged(\n        newPendingIndex !== undefined ? currentOptions[newPendingIndex] : undefined,\n        newPendingIndex,\n        newPendingValue,\n      );\n      this._hasPendingValue = newPendingIndex !== undefined || newPendingValue !== undefined;\n    }\n  }\n\n  /**\n   * Sets the isOpen state and updates focusInputAfterClose\n   */\n  private _setOpenStateAndFocusOnClose(isOpen: boolean, focusInputAfterClose: boolean): void {\n    this._focusInputAfterClose = focusInputAfterClose;\n    this.setState({\n      isOpen: isOpen,\n    });\n  }\n\n  /**\n   * Handle keydown on the input\n   * @param ev - The keyboard event that was fired\n   */\n  private _onInputKeyDown = (ev: React.KeyboardEvent<HTMLElement | Autofill>): void => {\n    const { disabled, allowFreeform, autoComplete } = this.props;\n    const { isOpen, currentOptions, currentPendingValueValidIndexOnHover } = this.state;\n\n    // Take note if we are processing an alt (option) or meta (command) keydown.\n    // See comment in _onInputKeyUp for reasoning.\n    this._lastKeyDownWasAltOrMeta = this._isAltOrMeta(ev);\n\n    if (disabled) {\n      this._handleInputWhenDisabled(ev);\n      return;\n    }\n\n    let index = this._getPendingSelectedIndex(false /* includeCurrentPendingValue */);\n\n    switch (ev.which) {\n      case KeyCodes.enter:\n        if (this._autofill.current && this._autofill.current.inputElement) {\n          this._autofill.current.inputElement.select();\n        }\n\n        this._submitPendingValue(ev);\n        if (this.props.multiSelect && isOpen) {\n          this.setState({\n            currentPendingValueValidIndex: index,\n          });\n        } else {\n          // On enter submit the pending value\n          if (\n            isOpen ||\n            ((!allowFreeform ||\n              this.state.currentPendingValue === undefined ||\n              this.state.currentPendingValue === null ||\n              this.state.currentPendingValue.length <= 0) &&\n              this.state.currentPendingValueValidIndex < 0)\n          ) {\n            // if we are open or\n            // if we are not allowing freeform or\n            // our we have no pending value\n            // and no valid pending index\n            // flip the open state\n            this.setState({\n              isOpen: !isOpen,\n            });\n          }\n        }\n        break;\n\n      case KeyCodes.tab:\n        // On enter submit the pending value\n        if (!this.props.multiSelect) {\n          this._submitPendingValue(ev);\n        }\n\n        // If we are not allowing freeform\n        // or the comboBox is open, flip the open state\n        if (isOpen) {\n          this._setOpenStateAndFocusOnClose(!isOpen, false /* focusInputAfterClose */);\n        }\n\n        // Allow TAB to propigate\n        return;\n\n      case KeyCodes.escape:\n        // reset the selected index\n        this._resetSelectedIndex();\n\n        // Close the menu if opened\n        if (isOpen) {\n          this.setState({\n            isOpen: false,\n          });\n        } else {\n          return;\n        }\n        break;\n\n      case KeyCodes.up:\n        // if we are in clearAll state (e.g. the user as hovering\n        // and has since mousedOut of the menu items),\n        // go to the last index\n        if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n          index = this.state.currentOptions.length;\n        }\n\n        if (ev.altKey || ev.metaKey) {\n          // Close the menu if it is open and break so\n          // that the event get stopPropagation and prevent default.\n          // Otherwise, we need to let the event continue to propagate\n          if (isOpen) {\n            this._setOpenStateAndFocusOnClose(!isOpen, true /* focusInputAfterClose */);\n            break;\n          }\n\n          return;\n        }\n\n        // Go to the previous option\n        this._setPendingInfoFromIndexAndDirection(index, SearchDirection.backward);\n        break;\n\n      case KeyCodes.down:\n        // Expand the comboBox on ALT + DownArrow\n        if (ev.altKey || ev.metaKey) {\n          this._setOpenStateAndFocusOnClose(true /* isOpen */, true /* focusInputAfterClose */);\n        } else {\n          // if we are in clearAll state (e.g. the user as hovering\n          // and has since mousedOut of the menu items),\n          // go to the first index\n          if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n            index = -1;\n          }\n\n          // Got to the next option\n          this._setPendingInfoFromIndexAndDirection(index, SearchDirection.forward);\n        }\n        break;\n\n      case KeyCodes.home:\n      case KeyCodes.end:\n        if (allowFreeform) {\n          return;\n        }\n\n        // Set the initial values to respond to HOME\n        // which goes to the first selectable option\n        index = -1;\n        let directionToSearch = SearchDirection.forward;\n\n        // If end, update the values to respond to END\n        // which goes to the last selectable option\n        if (ev.which === KeyCodes.end) {\n          index = currentOptions.length;\n          directionToSearch = SearchDirection.backward;\n        }\n\n        this._setPendingInfoFromIndexAndDirection(index, directionToSearch);\n        break;\n\n      /* eslint-disable no-fallthrough */\n      case KeyCodes.space:\n        // event handled in _onComboBoxKeyUp\n        if (!allowFreeform && autoComplete === 'off') {\n          break;\n        }\n\n      default:\n        /* eslint-enable no-fallthrough */\n        // are we processing a function key? if so bail out\n        if (ev.which >= 112 /* F1 */ && ev.which <= 123 /* F12 */) {\n          return;\n        }\n\n        // If we get here and we got either and ALT key\n        // or meta key, let the event propagate\n        if (ev.keyCode === KeyCodes.alt || ev.key === 'Meta' /* && isOpen */) {\n          return;\n        }\n\n        // If we are not allowing freeform and\n        // allowing autoComplete, handle the input here\n        // since we have marked the input as readonly\n        if (!allowFreeform && autoComplete === 'on') {\n          this._onInputChange(ev.key);\n          break;\n        }\n\n        // allow the key to propagate by default\n        return;\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  /**\n   * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n   */\n  private _isAltOrMeta(ev: React.KeyboardEvent<HTMLElement | Autofill>): boolean {\n    return ev.which === KeyCodes.alt || ev.key === 'Meta';\n  }\n\n  /**\n   * Handle keyup on the input\n   * @param ev - the keyboard event that was fired\n   */\n  private _onInputKeyUp = (ev: React.KeyboardEvent<HTMLElement | Autofill>): void => {\n    const { disabled, allowFreeform, autoComplete } = this.props;\n    const isOpen = this.state.isOpen;\n\n    // We close the menu on key up only if ALL of the following are true:\n    // - Most recent key down was alt or meta (command)\n    // - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n    //   expand/collapse the menu)\n    // - We're not on a Mac (or iOS)\n    // This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n    // closing any open context menus. There is not a similar behavior on Macs.\n    const keyPressIsAltOrMetaAlone = this._lastKeyDownWasAltOrMeta && this._isAltOrMeta(ev);\n    this._lastKeyDownWasAltOrMeta = false;\n    const shouldHandleKey = keyPressIsAltOrMetaAlone && !(isMac() || isIOS());\n\n    if (disabled) {\n      this._handleInputWhenDisabled(ev);\n      return;\n    }\n\n    switch (ev.which) {\n      case KeyCodes.space:\n        // If we are not allowing freeform and are not autoComplete\n        // make space expand/collapse the comboBox\n        // and allow the event to propagate\n        if (!allowFreeform && autoComplete === 'off') {\n          this._setOpenStateAndFocusOnClose(!isOpen, !!isOpen);\n        }\n        return;\n      default:\n        if (shouldHandleKey && isOpen) {\n          this._setOpenStateAndFocusOnClose(!isOpen, true /* focusInputAfterClose */);\n        } else {\n          if (this.state.focusState === 'focusing' && this.props.openOnKeyboardFocus) {\n            this.setState({ isOpen: true });\n          }\n          if (this.state.focusState !== 'focused') {\n            this.setState({ focusState: 'focused' });\n          }\n        }\n        return;\n    }\n  };\n\n  private _onOptionMouseEnter(index: number): void {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValueValidIndexOnHover: index,\n    });\n  }\n\n  private _onOptionMouseMove(index: number): void {\n    this._gotMouseMove = true;\n\n    if (!this._isScrollIdle || this.state.currentPendingValueValidIndexOnHover === index) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValueValidIndexOnHover: index,\n    });\n  }\n\n  private _onOptionMouseLeave = () => {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    // Ignore the event in persistMenu mode if the callout has\n    // closed. This is to avoid clearing the visuals on item click.\n    if (this.props.persistMenu && !this.state.isOpen) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValueValidIndexOnHover: HoverStatus.clearAll,\n    });\n  };\n\n  private _shouldIgnoreMouseEvent(): boolean {\n    return !this._isScrollIdle || !this._gotMouseMove;\n  }\n\n  /**\n   * Handle dismissing the menu and\n   * eating the required key event when disabled\n   * @param ev - the keyboard event that was fired\n   */\n  private _handleInputWhenDisabled(ev: React.KeyboardEvent<HTMLElement | Autofill> | null): void {\n    // If we are disabled, close the menu (if needed)\n    // and eat all keystokes other than TAB or ESC\n    if (this.props.disabled) {\n      if (this.state.isOpen) {\n        this.setState({ isOpen: false });\n      }\n\n      // When disabled stop propagation and prevent default\n      // of the event unless we have a tab, escape, or function key\n      if (\n        ev !== null &&\n        ev.which !== KeyCodes.tab &&\n        ev.which !== KeyCodes.escape &&\n        (ev.which < 112 /* F1 */ || ev.which > 123) /* F12 */\n      ) {\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * Click handler for the button of the comboBox\n   * and the input when not allowing freeform. This\n   * toggles the expand/collapse state of the comboBox (if enbled)\n   */\n  private _onComboBoxClick = (): void => {\n    const { disabled } = this.props;\n    const { isOpen } = this.state;\n\n    if (!disabled) {\n      this._setOpenStateAndFocusOnClose(!isOpen, false /* focusInputAfterClose */);\n      this.setState({ focusState: 'focused' });\n    }\n  };\n\n  /**\n   * Click handler for the autofill.\n   */\n  private _onAutofillClick = (): void => {\n    const { disabled, allowFreeform } = this.props;\n\n    if (allowFreeform && !disabled) {\n      this.focus(this.state.isOpen || this._processingTouch);\n    } else {\n      this._onComboBoxClick();\n    }\n  };\n\n  private _onTouchStart: () => void = () => {\n    if (this._comboBoxWrapper.current && !('onpointerdown' in this._comboBoxWrapper)) {\n      this._handleTouchAndPointerEvent();\n    }\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent();\n\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  };\n\n  private _handleTouchAndPointerEvent() {\n    // If we already have an existing timeeout from a previous touch and pointer event\n    // cancel that timeout so we can set a nwe one.\n    if (this._lastTouchTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n\n    this._lastTouchTimeoutId = this._async.setTimeout(() => {\n      this._processingTouch = false;\n      this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  }\n\n  /**\n   * Get the styles for the current option.\n   * @param item - Item props for the current option\n   */\n  private _getCaretButtonStyles(): IButtonStyles {\n    const { caretDownButtonStyles: customCaretDownButtonStyles } = this.props;\n    return getCaretDownButtonStyles(this.props.theme!, customCaretDownButtonStyles);\n  }\n\n  /**\n   * Get the styles for the current option.\n   * @param item - Item props for the current option\n   */\n  private _getCurrentOptionStyles(item: IComboBoxOption): Partial<IComboBoxOptionStyles> {\n    const { comboBoxOptionStyles: customStylesForAllOptions } = this.props;\n    const { styles: customStylesForCurrentOption } = item;\n\n    return getOptionStyles(\n      this.props.theme!,\n      customStylesForAllOptions,\n      customStylesForCurrentOption,\n      this._isPendingOption(item),\n      item.hidden,\n    );\n  }\n\n  /**\n   * Get the aria-activedescendant value for the comboxbox.\n   * @returns the id of the current focused combo item, otherwise the id of the currently selected element,\n   * null otherwise\n   */\n  private _getAriaActiveDescendantValue(): string | undefined {\n    let descendantText =\n      this.state.isOpen && this.state.selectedIndices && this.state.selectedIndices.length > 0\n        ? this._id + '-list' + this.state.selectedIndices[0]\n        : undefined;\n    if (this.state.isOpen && this._hasFocus() && this.state.currentPendingValueValidIndex !== -1) {\n      descendantText = this._id + '-list' + this.state.currentPendingValueValidIndex;\n    }\n    return descendantText;\n  }\n\n  /**\n   * Get the aria autocomplete value for the Combobox\n   * @returns 'inline' if auto-complete automatically dynamic, 'both' if we have a list of possible values to pick from\n   * and can dynamically populate input, and 'none' if auto-complete is not enabled as we can't give user inputs.\n   */\n  private _getAriaAutoCompleteValue(): 'none' | 'inline' | 'list' | 'both' | undefined {\n    const autoComplete = !this.props.disabled && this.props.autoComplete === 'on';\n    return autoComplete ? (this.props.allowFreeform ? 'inline' : 'both') : 'none';\n  }\n\n  private _isPendingOption(item: IComboBoxOption): boolean {\n    return item && item.index === this.state.currentPendingValueValidIndex;\n  }\n\n  /**\n   * Given default selected key(s) and selected key(s), return the selected keys(s).\n   * When default selected key(s) are available, they take precedence and return them instead of selected key(s).\n   *\n   * @returns No matter what specific types the input parameters are, always return an array of\n   *  either strings or numbers instead of premitive type.  This normlization makes caller's logic easier.\n   */\n  private _buildDefaultSelectedKeys(\n    defaultSelectedKey: string | number | string[] | number[] | null | undefined,\n    selectedKey: string | number | string[] | number[] | null | undefined,\n  ): string[] | number[] {\n    const selectedKeys: string[] | number[] = this._buildSelectedKeys(defaultSelectedKey);\n    if (selectedKeys.length) {\n      return selectedKeys;\n    }\n    return this._buildSelectedKeys(selectedKey);\n  }\n\n  private _buildSelectedKeys(\n    selectedKey: string | number | string[] | number[] | null | undefined,\n  ): string[] | number[] {\n    if (selectedKey === undefined) {\n      return [];\n    }\n\n    // need to cast here so typescript does not complain\n    return (selectedKey instanceof Array ? selectedKey : [selectedKey]) as string[] | number[];\n  }\n\n  // For scenarios where the option's text prop contains embedded styles, we use the option's\n  // ariaLabel value as the text in the input and for autocomplete matching. We know to use this\n  // when the useAriaLabelAsText prop is set to true\n  private _getPreviewText(item: IComboBoxOption): string {\n    return item.useAriaLabelAsText && item.ariaLabel ? item.ariaLabel : item.text;\n  }\n\n  private _normalizeToString(value?: string): string {\n    return value || '';\n  }\n\n  /**\n   * Returns true if the component has some kind of focus. If it's either focusing or if it's focused\n   */\n  private _hasFocus() {\n    return this.state.focusState !== 'none';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}