{"ast":null,"code":"import { Stylesheet } from '@uifabric/merge-styles';\nvar _initializedStylesheetResets = false;\nvar _resetCounter = 0;\nvar _emptyObject = {\n  empty: true\n};\nvar _dictionary = {};\n\nvar _weakMap = typeof WeakMap === 'undefined' ? null : WeakMap;\n/**\n *  Test utility for providing a custom weakmap.\n *\n * @internal\n * */\n\n\nexport function setMemoizeWeakMap(weakMap) {\n  _weakMap = weakMap;\n}\n/**\n * Reset memoizations.\n */\n\nexport function resetMemoizations() {\n  _resetCounter++;\n}\n/**\n * Memoize decorator to be used on class methods. WARNING: the `this` reference\n * will be inaccessible within a memoized method, given that a cached method's `this`\n * would not be instance-specific.\n *\n * @public\n */\n\nexport function memoize(target, key, descriptor) {\n  // We bind to \"null\" to prevent people from inadvertently pulling values from \"this\",\n  // rather than passing them in as input values which can be memoized.\n  var fn = memoizeFunction(descriptor.value && descriptor.value.bind(null));\n  return {\n    configurable: true,\n    get: function () {\n      return fn;\n    }\n  };\n}\n/**\n * Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result.\n * Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise\n * it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in\n * undefined for a value and relying on a default function will execute it the first time, but will not\n * re-evaluate subsequent times which may have been unexpected.\n *\n * By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is\n * unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard\n * by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter.\n *\n * @public\n * @param cb - The function to memoize.\n * @param maxCacheSize - Max results to cache. If the cache exceeds this value, it will reset on the next call.\n * @param ignoreNullOrUndefinedResult - Flag to decide whether to cache callback result if it is undefined/null.\n * If the flag is set to true, the callback result is recomputed every time till the callback result is\n * not undefined/null for the first time, and then the non-undefined/null version gets cached.\n * @returns A memoized version of the function.\n */\n\nexport function memoizeFunction(cb, maxCacheSize, ignoreNullOrUndefinedResult) {\n  if (maxCacheSize === void 0) {\n    maxCacheSize = 100;\n  }\n\n  if (ignoreNullOrUndefinedResult === void 0) {\n    ignoreNullOrUndefinedResult = false;\n  } // Avoid breaking scenarios which don't have weak map.\n\n\n  if (!_weakMap) {\n    return cb;\n  }\n\n  if (!_initializedStylesheetResets) {\n    var stylesheet = Stylesheet.getInstance();\n\n    if (stylesheet && stylesheet.onReset) {\n      Stylesheet.getInstance().onReset(resetMemoizations);\n    }\n\n    _initializedStylesheetResets = true;\n  }\n\n  var rootNode;\n  var cacheSize = 0;\n  var localResetCounter = _resetCounter;\n  return function memoizedFunction() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var currentNode = rootNode;\n\n    if (rootNode === undefined || localResetCounter !== _resetCounter || maxCacheSize > 0 && cacheSize > maxCacheSize) {\n      rootNode = _createNode();\n      cacheSize = 0;\n      localResetCounter = _resetCounter;\n    }\n\n    currentNode = rootNode; // Traverse the tree until we find the match.\n\n    for (var i = 0; i < args.length; i++) {\n      var arg = _normalizeArg(args[i]);\n\n      if (!currentNode.map.has(arg)) {\n        currentNode.map.set(arg, _createNode());\n      }\n\n      currentNode = currentNode.map.get(arg);\n    }\n\n    if (!currentNode.hasOwnProperty('value')) {\n      currentNode.value = cb.apply(void 0, args);\n      cacheSize++;\n    }\n\n    if (ignoreNullOrUndefinedResult && (currentNode.value === null || currentNode.value === undefined)) {\n      currentNode.value = cb.apply(void 0, args);\n    }\n\n    return currentNode.value;\n  };\n}\n/**\n * Creates a memoizer for a single-value function, backed by a WeakMap.\n * With a WeakMap, the memoized values are only kept as long as the source objects,\n * ensuring that there is no memory leak.\n *\n * This function assumes that the input values passed to the wrapped function will be\n * `function` or `object` types. To memoize functions which accept other inputs, use\n * `memoizeFunction`, which memoizes against arbitrary inputs using a lookup cache.\n *\n * @public\n */\n\nexport function createMemoizer(getValue) {\n  if (!_weakMap) {\n    // Without a `WeakMap` implementation, memoization is not possible.\n    return getValue;\n  }\n\n  var cache = new _weakMap();\n\n  function memoizedGetValue(input) {\n    if (!input || typeof input !== 'function' && typeof input !== 'object') {\n      // A WeakMap can only be used to test against reference values, i.e. 'function' and 'object'.\n      // All other inputs cannot be memoized against in this manner.\n      return getValue(input);\n    }\n\n    if (cache.has(input)) {\n      return cache.get(input);\n    }\n\n    var value = getValue(input);\n    cache.set(input, value);\n    return value;\n  }\n\n  return memoizedGetValue;\n}\n\nfunction _normalizeArg(val) {\n  if (!val) {\n    return _emptyObject;\n  } else if (typeof val === 'object' || typeof val === 'function') {\n    return val;\n  } else if (!_dictionary[val]) {\n    _dictionary[val] = {\n      val: val\n    };\n  }\n\n  return _dictionary[val];\n}\n\nfunction _createNode() {\n  return {\n    map: _weakMap ? new _weakMap() : null\n  };\n}","map":{"version":3,"mappings":"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","names":["Stylesheet","_initializedStylesheetResets","_resetCounter","_emptyObject","empty","_dictionary","_weakMap","WeakMap","setMemoizeWeakMap","weakMap","resetMemoizations","memoize","target","key","descriptor","fn","memoizeFunction","value","bind","configurable","get","cb","maxCacheSize","ignoreNullOrUndefinedResult","stylesheet","getInstance","onReset","rootNode","cacheSize","localResetCounter","memoizedFunction","args","currentNode","undefined","_createNode","i","length","arg","_normalizeArg","map","has","set","hasOwnProperty","createMemoizer","getValue","cache","memoizedGetValue","input","val"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\src\\memoize.ts"],"sourcesContent":["import { Stylesheet } from '@uifabric/merge-styles';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\ndeclare class WeakMap {\n  public get(key: any): any;\n  public set(key: any, value: any): void;\n  public has(key: any): boolean;\n}\n\nlet _initializedStylesheetResets = false;\nlet _resetCounter = 0;\nconst _emptyObject = { empty: true };\nconst _dictionary: any = {};\nlet _weakMap = typeof WeakMap === 'undefined' ? null : WeakMap;\n\ninterface IMemoizeNode {\n  map: WeakMap | null;\n  value?: any;\n}\n\n/**\n *  Test utility for providing a custom weakmap.\n *\n * @internal\n * */\nexport function setMemoizeWeakMap(weakMap: any): void {\n  _weakMap = weakMap;\n}\n\n/**\n * Reset memoizations.\n */\nexport function resetMemoizations(): void {\n  _resetCounter++;\n}\n\n/**\n * Memoize decorator to be used on class methods. WARNING: the `this` reference\n * will be inaccessible within a memoized method, given that a cached method's `this`\n * would not be instance-specific.\n *\n * @public\n */\nexport function memoize<T extends Function>(\n  target: any,\n  key: string,\n  descriptor: TypedPropertyDescriptor<T>,\n): {\n  configurable: boolean;\n  get(): T;\n} {\n  // We bind to \"null\" to prevent people from inadvertently pulling values from \"this\",\n  // rather than passing them in as input values which can be memoized.\n  let fn = memoizeFunction(descriptor.value && descriptor.value.bind(null));\n\n  return {\n    configurable: true,\n    get(): T {\n      return fn;\n    },\n  };\n}\n\n/**\n * Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result.\n * Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise\n * it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in\n * undefined for a value and relying on a default function will execute it the first time, but will not\n * re-evaluate subsequent times which may have been unexpected.\n *\n * By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is\n * unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard\n * by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter.\n *\n * @public\n * @param cb - The function to memoize.\n * @param maxCacheSize - Max results to cache. If the cache exceeds this value, it will reset on the next call.\n * @param ignoreNullOrUndefinedResult - Flag to decide whether to cache callback result if it is undefined/null.\n * If the flag is set to true, the callback result is recomputed every time till the callback result is\n * not undefined/null for the first time, and then the non-undefined/null version gets cached.\n * @returns A memoized version of the function.\n */\nexport function memoizeFunction<T extends (...args: any[]) => RetType, RetType>(\n  cb: T,\n  maxCacheSize: number = 100,\n  ignoreNullOrUndefinedResult: boolean = false,\n): T {\n  // Avoid breaking scenarios which don't have weak map.\n  if (!_weakMap) {\n    return cb;\n  }\n\n  if (!_initializedStylesheetResets) {\n    const stylesheet = Stylesheet.getInstance();\n\n    if (stylesheet && stylesheet.onReset) {\n      Stylesheet.getInstance().onReset(resetMemoizations);\n    }\n    _initializedStylesheetResets = true;\n  }\n\n  let rootNode: any;\n  let cacheSize = 0;\n  let localResetCounter = _resetCounter;\n\n  return function memoizedFunction(...args: any[]): RetType {\n    let currentNode: any = rootNode;\n\n    if (\n      rootNode === undefined ||\n      localResetCounter !== _resetCounter ||\n      (maxCacheSize > 0 && cacheSize > maxCacheSize)\n    ) {\n      rootNode = _createNode();\n      cacheSize = 0;\n      localResetCounter = _resetCounter;\n    }\n\n    currentNode = rootNode;\n\n    // Traverse the tree until we find the match.\n    for (let i = 0; i < args.length; i++) {\n      let arg = _normalizeArg(args[i]);\n\n      if (!currentNode.map.has(arg)) {\n        currentNode.map.set(arg, _createNode());\n      }\n\n      currentNode = currentNode.map.get(arg);\n    }\n\n    if (!currentNode.hasOwnProperty('value')) {\n      currentNode.value = cb(...args);\n      cacheSize++;\n    }\n\n    if (ignoreNullOrUndefinedResult && (currentNode.value === null || currentNode.value === undefined)) {\n      currentNode.value = cb(...args);\n    }\n\n    return currentNode.value;\n  } as any;\n}\n\n/**\n * Creates a memoizer for a single-value function, backed by a WeakMap.\n * With a WeakMap, the memoized values are only kept as long as the source objects,\n * ensuring that there is no memory leak.\n *\n * This function assumes that the input values passed to the wrapped function will be\n * `function` or `object` types. To memoize functions which accept other inputs, use\n * `memoizeFunction`, which memoizes against arbitrary inputs using a lookup cache.\n *\n * @public\n */\nexport function createMemoizer<F extends (input: any) => any>(getValue: F): F {\n  if (!_weakMap) {\n    // Without a `WeakMap` implementation, memoization is not possible.\n    return getValue;\n  }\n\n  const cache = new _weakMap();\n\n  function memoizedGetValue(input: any): any {\n    if (!input || (typeof input !== 'function' && typeof input !== 'object')) {\n      // A WeakMap can only be used to test against reference values, i.e. 'function' and 'object'.\n      // All other inputs cannot be memoized against in this manner.\n      return getValue(input);\n    }\n\n    if (cache.has(input)) {\n      return cache.get(input)!;\n    }\n\n    const value = getValue(input);\n\n    cache.set(input, value);\n\n    return value;\n  }\n\n  return memoizedGetValue as F;\n}\n\nfunction _normalizeArg(val: null | undefined): { empty: boolean } | any;\nfunction _normalizeArg(val: object): any;\nfunction _normalizeArg(val: any): any {\n  if (!val) {\n    return _emptyObject;\n  } else if (typeof val === 'object' || typeof val === 'function') {\n    return val;\n  } else if (!_dictionary[val]) {\n    _dictionary[val] = { val };\n  }\n\n  return _dictionary[val];\n}\n\nfunction _createNode(): IMemoizeNode {\n  return {\n    map: _weakMap ? new _weakMap() : null,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}