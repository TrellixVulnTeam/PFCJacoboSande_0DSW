{"ast":null,"code":"// A packages cache that makes sure that we don't inject the same packageName twice in the same bundle -\n// this cache is local to the module closure inside this bundle\nvar packagesCache = {}; // Cache access to window to avoid IE11 memory leak.\n\nvar _win = undefined;\n\ntry {\n  _win = window;\n} catch (e) {\n  /* no-op */\n}\n\nexport function setVersion(packageName, packageVersion) {\n  if (typeof _win !== 'undefined') {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var packages = _win.__packages__ = _win.__packages__ || {}; // We allow either the global packages or local packages caches to invalidate so testing can\n    // just clear the global to set this state\n\n    if (!packages[packageName] || !packagesCache[packageName]) {\n      packagesCache[packageName] = packageVersion;\n      var versions = packages[packageName] = packages[packageName] || [];\n      versions.push(packageVersion);\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,IAAMA,aAAa,GAA+B,EAAlD,C,CAEA;;AACA,IAAIC,IAAI,GAAuBC,SAA/B;;AAEA,IAAI;AACFD,MAAI,GAAGE,MAAP;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU;AACV;AACD;;AAED,OAAM,SAAUC,UAAV,CAAqBC,WAArB,EAA0CC,cAA1C,EAAgE;AACpE,MAAI,OAAON,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACA,QAAMO,QAAQ,GAAKP,IAAY,CAACQ,YAAb,GAA6BR,IAAY,CAACQ,YAAb,IAA6B,EAA7E,CAF+B,CAI/B;AACA;;AACA,QAAI,CAACD,QAAQ,CAACF,WAAD,CAAT,IAA0B,CAACN,aAAa,CAACM,WAAD,CAA5C,EAA2D;AACzDN,mBAAa,CAACM,WAAD,CAAb,GAA6BC,cAA7B;AACA,UAAMG,QAAQ,GAAIF,QAAQ,CAACF,WAAD,CAAR,GAAwBE,QAAQ,CAACF,WAAD,CAAR,IAAyB,EAAnE;AACAI,cAAQ,CAACC,IAAT,CAAcJ,cAAd;AACD;AACF;AACF","names":["packagesCache","_win","undefined","window","e","setVersion","packageName","packageVersion","packages","__packages__","versions","push"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\set-version\\src\\setVersion.ts"],"sourcesContent":["// A packages cache that makes sure that we don't inject the same packageName twice in the same bundle -\n// this cache is local to the module closure inside this bundle\nconst packagesCache: { [name: string]: string } = {};\n\n// Cache access to window to avoid IE11 memory leak.\nlet _win: Window | undefined = undefined;\n\ntry {\n  _win = window;\n} catch (e) {\n  /* no-op */\n}\n\nexport function setVersion(packageName: string, packageVersion: string): void {\n  if (typeof _win !== 'undefined') {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const packages = ((_win as any).__packages__ = (_win as any).__packages__ || {});\n\n    // We allow either the global packages or local packages caches to invalidate so testing can\n    // just clear the global to set this state\n    if (!packages[packageName] || !packagesCache[packageName]) {\n      packagesCache[packageName] = packageVersion;\n      const versions = (packages[packageName] = packages[packageName] || []);\n      versions.push(packageVersion);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}