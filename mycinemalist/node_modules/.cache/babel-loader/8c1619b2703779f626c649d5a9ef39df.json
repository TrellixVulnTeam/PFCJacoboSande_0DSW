{"ast":null,"code":"export var DEFAULT_MASK_FORMAT_CHARS = {\n  '9': /[0-9]/,\n  a: /[a-zA-Z]/,\n  '*': /[a-zA-Z0-9]/\n};\n/**\n * Takes in the mask string and the formatCharacters and returns an array of MaskValues\n * Example:\n * mask = 'Phone Number: (999) - 9999'\n * return = [\n *    { value: undefined, displayIndex: 16, format: /[0-9]/ },\n *    { value: undefined, displayIndex: 17, format: /[0-9]/ },\n *    { value: undefined, displayIndex: 18, format: /[0-9]/ },\n *    { value: undefined, displayIndex: 22, format: /[0-9]/ },\n * ]\n *\n * @param mask The string use to define the format of the displayed maskedValue.\n * @param formatChars An object defining how certain characters in the mask should accept input.\n */\n\nexport function parseMask(mask, formatChars) {\n  if (formatChars === void 0) {\n    formatChars = DEFAULT_MASK_FORMAT_CHARS;\n  }\n\n  if (!mask) {\n    return [];\n  }\n\n  var maskCharData = []; // Count the escape characters in the mask string.\n\n  var escapedChars = 0;\n\n  for (var i = 0; i + escapedChars < mask.length; i++) {\n    var maskChar = mask.charAt(i + escapedChars);\n\n    if (maskChar === '\\\\') {\n      escapedChars++;\n    } else {\n      // Check if the maskChar is a format character.\n      var maskFormat = formatChars[maskChar];\n\n      if (maskFormat) {\n        maskCharData.push({\n          /**\n           * Do not add escapedChars to the displayIndex.\n           * The index refers to a position in the mask's displayValue.\n           * Since the backslashes don't appear in the displayValue,\n           * we do not add them to the charData displayIndex.\n           */\n          displayIndex: i,\n          format: maskFormat\n        });\n      }\n    }\n  }\n\n  return maskCharData;\n}\n/**\n * Takes in the mask string, an array of MaskValues, and the maskCharacter\n * returns the mask string formatted with the input values and maskCharacter.\n * If the maskChar is undefined, the maskDisplay is truncated to the last filled format character.\n * Example:\n * mask = 'Phone Number: (999) 999 - 9999'\n * maskCharData = '12345'\n * maskChar = '_'\n * return = 'Phone Number: (123) 45_ - ___'\n *\n * Example:\n * mask = 'Phone Number: (999) 999 - 9999'\n * value = '12345'\n * maskChar = undefined\n * return = 'Phone Number: (123) 45'\n *\n * @param mask The string use to define the format of the displayed maskedValue.\n * @param maskCharData The input values to insert into the mask string for displaying.\n * @param maskChar? A character to display in place of unfilled mask format characters.\n */\n\nexport function getMaskDisplay(mask, maskCharData, maskChar) {\n  var maskDisplay = mask;\n\n  if (!maskDisplay) {\n    return '';\n  } // Remove all backslashes\n\n\n  maskDisplay = maskDisplay.replace(/\\\\/g, ''); // lastDisplayIndex is is used to truncate the string if necessary.\n\n  var lastDisplayIndex = 0;\n\n  if (maskCharData.length > 0) {\n    lastDisplayIndex = maskCharData[0].displayIndex - 1;\n  }\n  /**\n   * For each input value, replace the character in the maskDisplay with the value.\n   * If there is no value set for the format character, use the maskChar.\n   */\n\n\n  for (var _i = 0, maskCharData_1 = maskCharData; _i < maskCharData_1.length; _i++) {\n    var charData = maskCharData_1[_i];\n    var nextChar = ' ';\n\n    if (charData.value) {\n      nextChar = charData.value;\n\n      if (charData.displayIndex > lastDisplayIndex) {\n        lastDisplayIndex = charData.displayIndex;\n      }\n    } else {\n      if (maskChar) {\n        nextChar = maskChar;\n      }\n    } // Insert the character into the maskdisplay at its corresponding index\n\n\n    maskDisplay = maskDisplay.slice(0, charData.displayIndex) + nextChar + maskDisplay.slice(charData.displayIndex + 1);\n  } // Cut off all mask characters after the last filled format value\n\n\n  if (!maskChar) {\n    maskDisplay = maskDisplay.slice(0, lastDisplayIndex + 1);\n  }\n\n  return maskDisplay;\n}\n/**\n * Get the next format index right of or at a specified index.\n * If no index exists, returns the rightmost index.\n * @param maskCharData\n * @param index\n */\n\nexport function getRightFormatIndex(maskCharData, index) {\n  for (var i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= index) {\n      return maskCharData[i].displayIndex;\n    }\n  }\n\n  return maskCharData[maskCharData.length - 1].displayIndex;\n}\n/**\n * Get the next format index left of a specified index.\n * If no index exists, returns the leftmost index.\n * @param maskCharData\n * @param index\n */\n\nexport function getLeftFormatIndex(maskCharData, index) {\n  for (var i = maskCharData.length - 1; i >= 0; i--) {\n    if (maskCharData[i].displayIndex < index) {\n      return maskCharData[i].displayIndex;\n    }\n  }\n\n  return maskCharData[0].displayIndex;\n}\n/**\n * Deletes all values in maskCharData with a displayIndex that falls inside the specified range.\n * maskCharData is modified inline and also returned.\n * @param maskCharData\n * @param selectionStart\n * @param selectionCount\n */\n\nexport function clearRange(maskCharData, selectionStart, selectionCount) {\n  for (var i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      if (maskCharData[i].displayIndex >= selectionStart + selectionCount) {\n        break;\n      }\n\n      maskCharData[i].value = undefined;\n    }\n  }\n\n  return maskCharData;\n}\n/**\n * Deletes the input character at or after a specified index and returns the new array of charData\n * maskCharData is modified inline and also returned.\n * @param maskCharData\n * @param selectionStart\n */\n\nexport function clearNext(maskCharData, selectionStart) {\n  for (var i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      maskCharData[i].value = undefined;\n      break;\n    }\n  }\n\n  return maskCharData;\n}\n/**\n * Deletes the input character before a specified index and returns the new array of charData\n * maskCharData is modified inline and also returned.\n * @param maskCharData\n * @param selectionStart\n */\n\nexport function clearPrev(maskCharData, selectionStart) {\n  for (var i = maskCharData.length - 1; i >= 0; i--) {\n    if (maskCharData[i].displayIndex < selectionStart) {\n      maskCharData[i].value = undefined;\n      break;\n    }\n  }\n\n  return maskCharData;\n}\n/**\n * Deletes all values in maskCharData with a displayIndex that falls inside the specified range.\n * Modifies the maskCharData inplace with the passed string and returns the display index of the\n * next format character after the inserted string.\n * @param maskCharData\n * @param selectionStart\n * @param selectionCount\n * @return The displayIndex of the next format character\n */\n\nexport function insertString(maskCharData, selectionStart, newString) {\n  var stringIndex = 0;\n  var nextIndex = 0;\n  var isStringInserted = false; // Iterate through _maskCharData finding values with a displayIndex after the specified range start\n\n  for (var i = 0; i < maskCharData.length && stringIndex < newString.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      isStringInserted = true;\n      nextIndex = maskCharData[i].displayIndex; // Find the next character in the newString that matches the format\n\n      while (stringIndex < newString.length) {\n        // If the character matches the format regexp, set the maskCharData to the new character\n        if (maskCharData[i].format.test(newString.charAt(stringIndex))) {\n          maskCharData[i].value = newString.charAt(stringIndex++); // Set the nextIndex to the display index of the next mask format character.\n\n          if (i + 1 < maskCharData.length) {\n            nextIndex = maskCharData[i + 1].displayIndex;\n          } else {\n            nextIndex++;\n          }\n\n          break;\n        }\n\n        stringIndex++;\n      }\n    }\n  }\n\n  return isStringInserted ? nextIndex : selectionStart;\n}","map":{"version":3,"mappings":"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","names":["DEFAULT_MASK_FORMAT_CHARS","a","parseMask","mask","formatChars","maskCharData","escapedChars","i","length","maskChar","charAt","maskFormat","push","displayIndex","format","getMaskDisplay","maskDisplay","replace","lastDisplayIndex","_i","charData","nextChar","value","slice","getRightFormatIndex","index","getLeftFormatIndex","clearRange","selectionStart","selectionCount","undefined","clearNext","clearPrev","insertString","newString","stringIndex","nextIndex","isStringInserted","test"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\TextField\\src\\components\\TextField\\MaskedTextField\\inputMask.ts"],"sourcesContent":["export interface IMaskValue {\n  value?: string;\n  /**\n   * This index refers to the index in the displayMask rather than the inputMask.\n   * This means that any escaped characters do not count toward this index.\n   */\n  displayIndex: number;\n  format: RegExp;\n}\n\nexport const DEFAULT_MASK_FORMAT_CHARS: { [key: string]: RegExp } = {\n  '9': /[0-9]/,\n  a: /[a-zA-Z]/,\n  '*': /[a-zA-Z0-9]/,\n};\n\n/**\n * Takes in the mask string and the formatCharacters and returns an array of MaskValues\n * Example:\n * mask = 'Phone Number: (999) - 9999'\n * return = [\n *    { value: undefined, displayIndex: 16, format: /[0-9]/ },\n *    { value: undefined, displayIndex: 17, format: /[0-9]/ },\n *    { value: undefined, displayIndex: 18, format: /[0-9]/ },\n *    { value: undefined, displayIndex: 22, format: /[0-9]/ },\n * ]\n *\n * @param mask The string use to define the format of the displayed maskedValue.\n * @param formatChars An object defining how certain characters in the mask should accept input.\n */\nexport function parseMask(\n  mask: string | undefined,\n  formatChars: { [key: string]: RegExp } = DEFAULT_MASK_FORMAT_CHARS,\n): IMaskValue[] {\n  if (!mask) {\n    return [];\n  }\n\n  const maskCharData: IMaskValue[] = [];\n  // Count the escape characters in the mask string.\n  let escapedChars = 0;\n  for (let i = 0; i + escapedChars < mask.length; i++) {\n    const maskChar = mask.charAt(i + escapedChars);\n    if (maskChar === '\\\\') {\n      escapedChars++;\n    } else {\n      // Check if the maskChar is a format character.\n      const maskFormat = formatChars[maskChar];\n      if (maskFormat) {\n        maskCharData.push({\n          /**\n           * Do not add escapedChars to the displayIndex.\n           * The index refers to a position in the mask's displayValue.\n           * Since the backslashes don't appear in the displayValue,\n           * we do not add them to the charData displayIndex.\n           */\n          displayIndex: i,\n          format: maskFormat,\n        });\n      }\n    }\n  }\n\n  return maskCharData;\n}\n\n/**\n * Takes in the mask string, an array of MaskValues, and the maskCharacter\n * returns the mask string formatted with the input values and maskCharacter.\n * If the maskChar is undefined, the maskDisplay is truncated to the last filled format character.\n * Example:\n * mask = 'Phone Number: (999) 999 - 9999'\n * maskCharData = '12345'\n * maskChar = '_'\n * return = 'Phone Number: (123) 45_ - ___'\n *\n * Example:\n * mask = 'Phone Number: (999) 999 - 9999'\n * value = '12345'\n * maskChar = undefined\n * return = 'Phone Number: (123) 45'\n *\n * @param mask The string use to define the format of the displayed maskedValue.\n * @param maskCharData The input values to insert into the mask string for displaying.\n * @param maskChar? A character to display in place of unfilled mask format characters.\n */\nexport function getMaskDisplay(mask: string | undefined, maskCharData: IMaskValue[], maskChar?: string): string {\n  let maskDisplay = mask;\n\n  if (!maskDisplay) {\n    return '';\n  }\n\n  // Remove all backslashes\n  maskDisplay = maskDisplay.replace(/\\\\/g, '');\n\n  // lastDisplayIndex is is used to truncate the string if necessary.\n  let lastDisplayIndex = 0;\n  if (maskCharData.length > 0) {\n    lastDisplayIndex = maskCharData[0].displayIndex - 1;\n  }\n\n  /**\n   * For each input value, replace the character in the maskDisplay with the value.\n   * If there is no value set for the format character, use the maskChar.\n   */\n  for (const charData of maskCharData) {\n    let nextChar = ' ';\n    if (charData.value) {\n      nextChar = charData.value;\n      if (charData.displayIndex > lastDisplayIndex) {\n        lastDisplayIndex = charData.displayIndex;\n      }\n    } else {\n      if (maskChar) {\n        nextChar = maskChar;\n      }\n    }\n\n    // Insert the character into the maskdisplay at its corresponding index\n    maskDisplay = maskDisplay.slice(0, charData.displayIndex) + nextChar + maskDisplay.slice(charData.displayIndex + 1);\n  }\n\n  // Cut off all mask characters after the last filled format value\n  if (!maskChar) {\n    maskDisplay = maskDisplay.slice(0, lastDisplayIndex + 1);\n  }\n\n  return maskDisplay;\n}\n\n/**\n * Get the next format index right of or at a specified index.\n * If no index exists, returns the rightmost index.\n * @param maskCharData\n * @param index\n */\nexport function getRightFormatIndex(maskCharData: IMaskValue[], index: number): number {\n  for (let i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= index) {\n      return maskCharData[i].displayIndex;\n    }\n  }\n  return maskCharData[maskCharData.length - 1].displayIndex;\n}\n\n/**\n * Get the next format index left of a specified index.\n * If no index exists, returns the leftmost index.\n * @param maskCharData\n * @param index\n */\nexport function getLeftFormatIndex(maskCharData: IMaskValue[], index: number): number {\n  for (let i = maskCharData.length - 1; i >= 0; i--) {\n    if (maskCharData[i].displayIndex < index) {\n      return maskCharData[i].displayIndex;\n    }\n  }\n  return maskCharData[0].displayIndex;\n}\n\n/**\n * Deletes all values in maskCharData with a displayIndex that falls inside the specified range.\n * maskCharData is modified inline and also returned.\n * @param maskCharData\n * @param selectionStart\n * @param selectionCount\n */\nexport function clearRange(maskCharData: IMaskValue[], selectionStart: number, selectionCount: number): IMaskValue[] {\n  for (let i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      if (maskCharData[i].displayIndex >= selectionStart + selectionCount) {\n        break;\n      }\n      maskCharData[i].value = undefined;\n    }\n  }\n  return maskCharData;\n}\n\n/**\n * Deletes the input character at or after a specified index and returns the new array of charData\n * maskCharData is modified inline and also returned.\n * @param maskCharData\n * @param selectionStart\n */\nexport function clearNext(maskCharData: IMaskValue[], selectionStart: number): IMaskValue[] {\n  for (let i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      maskCharData[i].value = undefined;\n      break;\n    }\n  }\n  return maskCharData;\n}\n\n/**\n * Deletes the input character before a specified index and returns the new array of charData\n * maskCharData is modified inline and also returned.\n * @param maskCharData\n * @param selectionStart\n */\nexport function clearPrev(maskCharData: IMaskValue[], selectionStart: number): IMaskValue[] {\n  for (let i = maskCharData.length - 1; i >= 0; i--) {\n    if (maskCharData[i].displayIndex < selectionStart) {\n      maskCharData[i].value = undefined;\n      break;\n    }\n  }\n  return maskCharData;\n}\n\n/**\n * Deletes all values in maskCharData with a displayIndex that falls inside the specified range.\n * Modifies the maskCharData inplace with the passed string and returns the display index of the\n * next format character after the inserted string.\n * @param maskCharData\n * @param selectionStart\n * @param selectionCount\n * @return The displayIndex of the next format character\n */\nexport function insertString(maskCharData: IMaskValue[], selectionStart: number, newString: string): number {\n  let stringIndex = 0;\n  let nextIndex = 0;\n  let isStringInserted = false;\n\n  // Iterate through _maskCharData finding values with a displayIndex after the specified range start\n  for (let i = 0; i < maskCharData.length && stringIndex < newString.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      isStringInserted = true;\n      nextIndex = maskCharData[i].displayIndex;\n      // Find the next character in the newString that matches the format\n      while (stringIndex < newString.length) {\n        // If the character matches the format regexp, set the maskCharData to the new character\n        if (maskCharData[i].format.test(newString.charAt(stringIndex))) {\n          maskCharData[i].value = newString.charAt(stringIndex++);\n          // Set the nextIndex to the display index of the next mask format character.\n          if (i + 1 < maskCharData.length) {\n            nextIndex = maskCharData[i + 1].displayIndex;\n          } else {\n            nextIndex++;\n          }\n          break;\n        }\n        stringIndex++;\n      }\n    }\n  }\n\n  return isStringInserted ? nextIndex : selectionStart;\n}\n"]},"metadata":{},"sourceType":"module"}