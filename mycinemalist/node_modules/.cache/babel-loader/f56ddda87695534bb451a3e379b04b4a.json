{"ast":null,"code":"import { extendComponent } from './extendComponent';\n/**\n * Generates a function to be attached to a React component, which can be called\n * as a replacement to setTimeout. In-flight async calls will be auto canceled if the component\n * is unmounting before the async code is executed, preventing bugs where code\n * accesses things within the component after being unmounted.\n */\n\nexport var safeSetTimeout = function safeSetTimeout(component) {\n  var activeTimeouts;\n  return function (cb, duration) {\n    if (!activeTimeouts) {\n      activeTimeouts = new Set();\n      extendComponent(component, {\n        componentWillUnmount: function componentWillUnmount() {\n          activeTimeouts.forEach(function (id) {\n            return clearTimeout(id);\n          });\n        }\n      });\n    }\n\n    var timeoutId = setTimeout(function () {\n      activeTimeouts.delete(timeoutId);\n      cb();\n    }, duration);\n    activeTimeouts.add(timeoutId);\n  };\n};","map":{"version":3,"mappings":"AACA,SAASA,eAAT,QAAgC,mBAAhC;AAEA;;;;;;;AAMA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAA2B;AACvD,MAAIC,cAAJ;AAEA,SAAO,UAACC,EAAD,EAAeC,QAAf,EAA+B;AACpC,QAAI,CAACF,cAAL,EAAqB;AACnBA,oBAAc,GAAG,IAAIG,GAAJ,EAAjB;AAEAN,qBAAe,CAACE,SAAD,EAAY;AACzBK,4BAAoB,EAAE;AACpBJ,wBAAc,CAACK,OAAf,CAAuB,UAACC,EAAD,EAAiB;AAAK,+BAAY,CAACA,EAAD,CAAZ;AAAgB,WAA7D;AACD;AAHwB,OAAZ,CAAf;AAKD;;AAED,QAAMC,SAAS,GAAGC,UAAU,CAAC;AAC3BR,oBAAc,CAACS,MAAf,CAAsBF,SAAtB;AACAN,QAAE;AACH,KAH2B,EAGzBC,QAHyB,CAA5B;AAIAF,kBAAc,CAACU,GAAf,CAAmBH,SAAnB;AACD,GAhBD;AAiBD,CApBM","names":["extendComponent","safeSetTimeout","component","activeTimeouts","cb","duration","Set","componentWillUnmount","forEach","id","timeoutId","setTimeout","delete","add"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\src\\safeSetTimeout.ts"],"sourcesContent":["import * as React from 'react';\r\nimport { extendComponent } from './extendComponent';\r\n\r\n/**\r\n * Generates a function to be attached to a React component, which can be called\r\n * as a replacement to setTimeout. In-flight async calls will be auto canceled if the component\r\n * is unmounting before the async code is executed, preventing bugs where code\r\n * accesses things within the component after being unmounted.\r\n */\r\nexport const safeSetTimeout = (component: React.Component) => {\r\n  let activeTimeouts: Set<NodeJS.Timer>;\r\n\r\n  return (cb: Function, duration: number) => {\r\n    if (!activeTimeouts) {\r\n      activeTimeouts = new Set<NodeJS.Timer>();\r\n\r\n      extendComponent(component, {\r\n        componentWillUnmount: () => {\r\n          activeTimeouts.forEach((id: NodeJS.Timer) => clearTimeout(id));\r\n        },\r\n      });\r\n    }\r\n\r\n    const timeoutId = setTimeout(() => {\r\n      activeTimeouts.delete(timeoutId);\r\n      cb();\r\n    }, duration);\r\n    activeTimeouts.add(timeoutId);\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}