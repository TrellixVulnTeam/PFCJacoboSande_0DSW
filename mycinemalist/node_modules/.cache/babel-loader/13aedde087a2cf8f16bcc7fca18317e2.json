{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async } from './Async';\nimport { EventGroup } from './EventGroup';\nimport { warnConditionallyRequiredProps } from './warn/warnConditionallyRequiredProps';\nimport { warnMutuallyExclusive } from './warn/warnMutuallyExclusive';\nimport { warnDeprecations } from './warn/warnDeprecations';\n/**\n * BaseComponent class, which provides basic helpers for all components.\n *\n * @public\n * {@docCategory BaseComponent}\n *\n * @deprecated Do not use. We are moving away from class component.\n */\n\nvar BaseComponent =\n/** @class */\nfunction (_super) {\n  __extends(BaseComponent, _super);\n  /**\n   * BaseComponent constructor\n   * @param props - The props for the component.\n   * @param context - The context for the component.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  function BaseComponent(props, context) {\n    var _this = _super.call(this, props, context) || this; // eslint-disable-next-line deprecation/deprecation\n\n\n    _makeAllSafe(_this, BaseComponent.prototype, ['componentDidMount', 'shouldComponentUpdate', 'getSnapshotBeforeUpdate', 'render', 'componentDidUpdate', 'componentWillUnmount']);\n\n    return _this;\n  }\n  /**\n   * When the component receives props, make sure the componentRef is updated.\n   */\n\n\n  BaseComponent.prototype.componentDidUpdate = function (prevProps, prevState) {\n    this._updateComponentRef(prevProps, this.props);\n  };\n  /**\n   * When the component has mounted, update the componentRef.\n   */\n\n\n  BaseComponent.prototype.componentDidMount = function () {\n    this._setComponentRef(this.props.componentRef, this);\n  };\n  /**\n   * If we have disposables, dispose them automatically on unmount.\n   */\n\n\n  BaseComponent.prototype.componentWillUnmount = function () {\n    this._setComponentRef(this.props.componentRef, null);\n\n    if (this.__disposables) {\n      for (var i = 0, len = this._disposables.length; i < len; i++) {\n        var disposable = this.__disposables[i];\n\n        if (disposable.dispose) {\n          disposable.dispose();\n        }\n      }\n\n      this.__disposables = null;\n    }\n  };\n\n  Object.defineProperty(BaseComponent.prototype, \"className\", {\n    /**\n     * Gets the object's class name.\n     */\n    get: function () {\n      if (!this.__className) {\n        var funcNameRegex = /function (.{1,})\\(/;\n        var results = funcNameRegex.exec(this.constructor.toString());\n        this.__className = results && results.length > 1 ? results[1] : '';\n      }\n\n      return this.__className;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseComponent.prototype, \"_disposables\", {\n    /**\n     * Allows subclasses to push things to this._disposables to be auto disposed.\n     */\n    get: function () {\n      if (!this.__disposables) {\n        this.__disposables = [];\n      }\n\n      return this.__disposables;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseComponent.prototype, \"_async\", {\n    /**\n     * Gets the async instance associated with the component, created on demand. The async instance gives\n     * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks\n     * will be cleared/ignored automatically after unmounting. The helpers within the async object also\n     * preserve the this pointer so that you don't need to \"bind\" the callbacks.\n     */\n    get: function () {\n      if (!this.__async) {\n        this.__async = new Async(this);\n\n        this._disposables.push(this.__async);\n      }\n\n      return this.__async;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseComponent.prototype, \"_events\", {\n    /**\n     * Gets the event group instance assocaited with the component, created on demand. The event instance\n     * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks\n     * will be automatically disconnected after unmounting. The helpers within the events object also\n     * preserve the this reference so that you don't need to \"bind\" the callbacks.\n     */\n    get: function () {\n      if (!this.__events) {\n        this.__events = new EventGroup(this);\n\n        this._disposables.push(this.__events);\n      }\n\n      return this.__events;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Helper to return a memoized ref resolver function.\n   * @param refName - Name of the member to assign the ref to.\n   * @returns A function instance keyed from the given refname.\n   * @deprecated Use `createRef` from React.createRef.\n   */\n\n  BaseComponent.prototype._resolveRef = function (refName) {\n    var _this = this;\n\n    if (!this.__resolves) {\n      this.__resolves = {};\n    }\n\n    if (!this.__resolves[refName]) {\n      this.__resolves[refName] = function (ref) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return _this[refName] = ref;\n      };\n    }\n\n    return this.__resolves[refName];\n  };\n  /**\n   * Updates the componentRef (by calling it with \"this\" when necessary.)\n   */\n\n\n  BaseComponent.prototype._updateComponentRef = function (currentProps, newProps) {\n    if (newProps === void 0) {\n      newProps = {};\n    } // currentProps *should* always be defined, but verify that just in case a subclass is manually\n    // calling a lifecycle method with no parameters (which has happened) or other odd usage.\n\n\n    if (currentProps && newProps && currentProps.componentRef !== newProps.componentRef) {\n      this._setComponentRef(currentProps.componentRef, null);\n\n      this._setComponentRef(newProps.componentRef, this);\n    }\n  };\n  /**\n   * Warns when a deprecated props are being used.\n   *\n   * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n   * either null or a replacement prop name.\n   */\n\n\n  BaseComponent.prototype._warnDeprecations = function (deprecationMap) {\n    warnDeprecations(this.className, this.props, deprecationMap);\n  };\n  /**\n   * Warns when props which are mutually exclusive with each other are both used.\n   *\n   * @param mutuallyExclusiveMap - The map of mutually exclusive props.\n   */\n\n\n  BaseComponent.prototype._warnMutuallyExclusive = function (mutuallyExclusiveMap) {\n    warnMutuallyExclusive(this.className, this.props, mutuallyExclusiveMap);\n  };\n  /**\n   * Warns when props are required if a condition is met.\n   *\n   * @param requiredProps - The name of the props that are required when the condition is met.\n   * @param conditionalPropName - The name of the prop that the condition is based on.\n   * @param condition - Whether the condition is met.\n   */\n\n\n  BaseComponent.prototype._warnConditionallyRequiredProps = function (requiredProps, conditionalPropName, condition) {\n    warnConditionallyRequiredProps(this.className, this.props, requiredProps, conditionalPropName, condition);\n  };\n\n  BaseComponent.prototype._setComponentRef = function (ref, value) {\n    if (!this._skipComponentRefResolution && ref) {\n      if (typeof ref === 'function') {\n        ref(value);\n      }\n\n      if (typeof ref === 'object') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ref.current = value;\n      }\n    }\n  };\n\n  return BaseComponent;\n}(React.Component);\n\nexport { BaseComponent };\n/**\n * Helper to override a given method with a wrapper method that can try/catch the original, but also\n * ensures that the BaseComponent's methods are called before the subclass's. This ensures that\n * componentWillUnmount in the base is called and that things in the _disposables array are disposed.\n */\n// eslint-disable-next-line deprecation/deprecation\n\nfunction _makeAllSafe(obj, prototype, methodNames) {\n  for (var i = 0, len = methodNames.length; i < len; i++) {\n    _makeSafe(obj, prototype, methodNames[i]);\n  }\n} // eslint-disable-next-line deprecation/deprecation\n\n\nfunction _makeSafe(obj, prototype, methodName) {\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  var classMethod = obj[methodName];\n  var prototypeMethod = prototype[methodName];\n\n  if (classMethod || prototypeMethod) {\n    obj[methodName] = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      /* eslint-enable @typescript-eslint/no-explicit-any */\n\n\n      var retVal;\n\n      if (prototypeMethod) {\n        retVal = prototypeMethod.apply(this, args);\n      }\n\n      if (classMethod !== prototypeMethod) {\n        retVal = classMethod.apply(this, args);\n      }\n\n      return retVal;\n    };\n  }\n}\n/**\n * Simple constant function for returning null, used to render empty templates in JSX.\n *\n * @public\n */\n\n\nexport function nullRender() {\n  return null;\n}","map":{"version":3,"mappings":"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","names":["React","Async","EventGroup","warnConditionallyRequiredProps","warnMutuallyExclusive","warnDeprecations","__extends","props","context","_super","_makeAllSafe","_this","BaseComponent","prototype","prevProps","prevState","_updateComponentRef","_setComponentRef","componentRef","__disposables","i","len","_disposables","length","disposable","dispose","Object","__className","funcNameRegex","results","exec","constructor","toString","__async","push","__events","refName","__resolves","ref","currentProps","newProps","deprecationMap","className","mutuallyExclusiveMap","requiredProps","conditionalPropName","condition","value","_skipComponentRefResolution","current","Component","obj","methodNames","_makeSafe","methodName","classMethod","prototypeMethod","args","retVal","apply","nullRender"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\utilities\\src\\BaseComponent.ts"],"sourcesContent":["import * as React from 'react';\nimport { Async } from './Async';\nimport { EventGroup } from './EventGroup';\nimport { IDisposable } from './IDisposable';\nimport { ISettingsMap } from './warn/warn';\nimport { warnConditionallyRequiredProps } from './warn/warnConditionallyRequiredProps';\nimport { warnMutuallyExclusive } from './warn/warnMutuallyExclusive';\nimport { warnDeprecations } from './warn/warnDeprecations';\nimport { IRefObject } from './createRef';\nimport { IBaseProps } from './BaseComponent.types';\n\n/**\n * BaseComponent class, which provides basic helpers for all components.\n *\n * @public\n * {@docCategory BaseComponent}\n *\n * @deprecated Do not use. We are moving away from class component.\n */\nexport class BaseComponent<TProps extends IBaseProps = {}, TState = {}> extends React.Component<TProps, TState> {\n  /**\n   * @deprecated Use React's error boundaries instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public static onError: (errorMessage?: string, ex?: any) => void;\n\n  /**\n   * Controls whether the componentRef prop will be resolved by this component instance. If you are\n   * implementing a passthrough (higher-order component), you would set this to false and pass through\n   * the props to the inner component, allowing it to resolve the componentRef.\n   */\n  protected _skipComponentRefResolution: boolean;\n\n  private __async: Async;\n  private __events: EventGroup;\n  private __disposables: IDisposable[] | null;\n  private __resolves: { [name: string]: (ref: React.ReactNode) => React.ReactNode };\n  private __className: string;\n\n  /**\n   * BaseComponent constructor\n   * @param props - The props for the component.\n   * @param context - The context for the component.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(props: TProps, context?: any) {\n    super(props, context);\n\n    // eslint-disable-next-line deprecation/deprecation\n    _makeAllSafe(this, BaseComponent.prototype, [\n      'componentDidMount',\n      'shouldComponentUpdate',\n      'getSnapshotBeforeUpdate',\n      'render',\n      'componentDidUpdate',\n      'componentWillUnmount',\n    ]);\n  }\n\n  /**\n   * When the component receives props, make sure the componentRef is updated.\n   */\n  public componentDidUpdate(prevProps: TProps, prevState: TState): void {\n    this._updateComponentRef(prevProps, this.props);\n  }\n\n  /**\n   * When the component has mounted, update the componentRef.\n   */\n  public componentDidMount(): void {\n    this._setComponentRef(this.props.componentRef, this);\n  }\n\n  /**\n   * If we have disposables, dispose them automatically on unmount.\n   */\n  public componentWillUnmount(): void {\n    this._setComponentRef(this.props.componentRef, null);\n\n    if (this.__disposables) {\n      for (let i = 0, len = this._disposables.length; i < len; i++) {\n        let disposable = this.__disposables[i];\n\n        if (disposable.dispose) {\n          disposable.dispose();\n        }\n      }\n      this.__disposables = null;\n    }\n  }\n\n  /**\n   * Gets the object's class name.\n   */\n  public get className(): string {\n    if (!this.__className) {\n      let funcNameRegex = /function (.{1,})\\(/;\n      let results = funcNameRegex.exec(this.constructor.toString());\n\n      this.__className = results && results.length > 1 ? results[1] : '';\n    }\n\n    return this.__className;\n  }\n\n  /**\n   * Allows subclasses to push things to this._disposables to be auto disposed.\n   */\n  protected get _disposables(): IDisposable[] {\n    if (!this.__disposables) {\n      this.__disposables = [];\n    }\n    return this.__disposables;\n  }\n\n  /**\n   * Gets the async instance associated with the component, created on demand. The async instance gives\n   * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks\n   * will be cleared/ignored automatically after unmounting. The helpers within the async object also\n   * preserve the this pointer so that you don't need to \"bind\" the callbacks.\n   */\n  protected get _async(): Async {\n    if (!this.__async) {\n      this.__async = new Async(this);\n      this._disposables.push(this.__async);\n    }\n\n    return this.__async;\n  }\n\n  /**\n   * Gets the event group instance assocaited with the component, created on demand. The event instance\n   * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks\n   * will be automatically disconnected after unmounting. The helpers within the events object also\n   * preserve the this reference so that you don't need to \"bind\" the callbacks.\n   */\n  protected get _events(): EventGroup {\n    if (!this.__events) {\n      this.__events = new EventGroup(this);\n      this._disposables.push(this.__events);\n    }\n\n    return this.__events;\n  }\n\n  /**\n   * Helper to return a memoized ref resolver function.\n   * @param refName - Name of the member to assign the ref to.\n   * @returns A function instance keyed from the given refname.\n   * @deprecated Use `createRef` from React.createRef.\n   */\n  protected _resolveRef(refName: string): (ref: React.ReactNode) => React.ReactNode {\n    if (!this.__resolves) {\n      this.__resolves = {};\n    }\n\n    if (!this.__resolves[refName]) {\n      this.__resolves[refName] = (ref: React.ReactNode) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return ((this as any)[refName] = ref);\n      };\n    }\n\n    return this.__resolves[refName];\n  }\n\n  /**\n   * Updates the componentRef (by calling it with \"this\" when necessary.)\n   */\n  protected _updateComponentRef(currentProps: IBaseProps, newProps: IBaseProps = {}): void {\n    // currentProps *should* always be defined, but verify that just in case a subclass is manually\n    // calling a lifecycle method with no parameters (which has happened) or other odd usage.\n    if (currentProps && newProps && currentProps.componentRef !== newProps.componentRef) {\n      this._setComponentRef(currentProps.componentRef, null);\n      this._setComponentRef(newProps.componentRef, this);\n    }\n  }\n\n  /**\n   * Warns when a deprecated props are being used.\n   *\n   * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n   * either null or a replacement prop name.\n   */\n  protected _warnDeprecations(deprecationMap: ISettingsMap<TProps>): void {\n    warnDeprecations(this.className, this.props, deprecationMap);\n  }\n\n  /**\n   * Warns when props which are mutually exclusive with each other are both used.\n   *\n   * @param mutuallyExclusiveMap - The map of mutually exclusive props.\n   */\n  protected _warnMutuallyExclusive(mutuallyExclusiveMap: ISettingsMap<TProps>): void {\n    warnMutuallyExclusive(this.className, this.props, mutuallyExclusiveMap);\n  }\n\n  /**\n   * Warns when props are required if a condition is met.\n   *\n   * @param requiredProps - The name of the props that are required when the condition is met.\n   * @param conditionalPropName - The name of the prop that the condition is based on.\n   * @param condition - Whether the condition is met.\n   */\n  protected _warnConditionallyRequiredProps(\n    requiredProps: string[],\n    conditionalPropName: string,\n    condition: boolean,\n  ): void {\n    warnConditionallyRequiredProps(this.className, this.props, requiredProps, conditionalPropName, condition);\n  }\n\n  private _setComponentRef<TRefInterface>(\n    ref: IRefObject<TRefInterface> | undefined,\n    value: TRefInterface | null,\n  ): void {\n    if (!this._skipComponentRefResolution && ref) {\n      if (typeof ref === 'function') {\n        ref(value);\n      }\n\n      if (typeof ref === 'object') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (ref as any).current = value;\n      }\n    }\n  }\n}\n\n/**\n * Helper to override a given method with a wrapper method that can try/catch the original, but also\n * ensures that the BaseComponent's methods are called before the subclass's. This ensures that\n * componentWillUnmount in the base is called and that things in the _disposables array are disposed.\n */\n// eslint-disable-next-line deprecation/deprecation\nfunction _makeAllSafe(obj: BaseComponent<{}, {}>, prototype: Object, methodNames: string[]): void {\n  for (let i = 0, len = methodNames.length; i < len; i++) {\n    _makeSafe(obj, prototype, methodNames[i]);\n  }\n}\n\n// eslint-disable-next-line deprecation/deprecation\nfunction _makeSafe(obj: BaseComponent<{}, {}>, prototype: Object, methodName: string): void {\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  let classMethod = (obj as any)[methodName];\n  let prototypeMethod = (prototype as any)[methodName];\n\n  if (classMethod || prototypeMethod) {\n    (obj as any)[methodName] = function(...args: any[]): any {\n      /* eslint-enable @typescript-eslint/no-explicit-any */\n      let retVal;\n\n      if (prototypeMethod) {\n        retVal = prototypeMethod.apply(this, args);\n      }\n      if (classMethod !== prototypeMethod) {\n        retVal = classMethod.apply(this, args);\n      }\n\n      return retVal;\n    };\n  }\n}\n\n/**\n * Simple constant function for returning null, used to render empty templates in JSX.\n *\n * @public\n */\nexport function nullRender(): JSX.Element | null {\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}