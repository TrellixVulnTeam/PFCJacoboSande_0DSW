{"ast":null,"code":"import { getDocument } from './dom/getDocument';\nimport * as localStorage from './localStorage';\nimport * as sessionStorage from './sessionStorage'; // Default to undefined so that we initialize on first read.\n\nvar _language;\n\nvar STORAGE_KEY = 'language';\n/**\n * Gets the language set for the page.\n * @param persistenceType - Where to persist the value. Default is `localStorage` if available.\n * (In version 8, the default will be `sessionStorage`.)\n */\n\nexport function getLanguage(persistenceType) {\n  if (persistenceType === void 0) {\n    persistenceType = 'localStorage';\n  }\n\n  if (_language === undefined) {\n    var doc = getDocument();\n    var savedLanguage = persistenceType === 'localStorage' ? localStorage.getItem(STORAGE_KEY) : persistenceType === 'sessionStorage' ? sessionStorage.getItem(STORAGE_KEY) : undefined;\n\n    if (savedLanguage) {\n      _language = savedLanguage;\n    }\n\n    if (_language === undefined && doc) {\n      _language = doc.documentElement.getAttribute('lang');\n    }\n\n    if (_language === undefined) {\n      _language = 'en';\n    }\n  }\n\n  return _language;\n}\nexport function setLanguage(language, persistenceParam) {\n  var doc = getDocument();\n\n  if (doc) {\n    doc.documentElement.setAttribute('lang', language);\n  }\n\n  var persistenceType = persistenceParam === true ? 'none' : !persistenceParam ? 'localStorage' : persistenceParam;\n\n  if (persistenceType === 'localStorage') {\n    localStorage.setItem(STORAGE_KEY, language);\n  } else if (persistenceType === 'sessionStorage') {\n    sessionStorage.setItem(STORAGE_KEY, language);\n  }\n\n  _language = language;\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4B,mBAA5B;AACA,OAAO,KAAKC,YAAZ,MAA8B,gBAA9B;AACA,OAAO,KAAKC,cAAZ,MAAgC,kBAAhC,C,CAEA;;AACA,IAAIC,SAAJ;;AAEA,IAAMC,WAAW,GAAG,UAApB;AAEA;;;;;;AAKA,OAAM,SAAUC,WAAV,CACJC,eADI,EACwE;EAA5E;IAAAA;EAA4E;;EAE5E,IAAIH,SAAS,KAAKI,SAAlB,EAA6B;IAC3B,IAAIC,GAAG,GAAGR,WAAW,EAArB;IACA,IAAMS,aAAa,GACjBH,eAAe,KAAK,cAApB,GACIL,YAAY,CAACS,OAAb,CAAqBN,WAArB,CADJ,GAEIE,eAAe,KAAK,gBAApB,GACAJ,cAAc,CAACQ,OAAf,CAAuBN,WAAvB,CADA,GAEAG,SALN;;IAOA,IAAIE,aAAJ,EAAmB;MACjBN,SAAS,GAAGM,aAAZ;IACD;;IAED,IAAIN,SAAS,KAAKI,SAAd,IAA2BC,GAA/B,EAAoC;MAClCL,SAAS,GAAGK,GAAG,CAACG,eAAJ,CAAoBC,YAApB,CAAiC,MAAjC,CAAZ;IACD;;IAED,IAAIT,SAAS,KAAKI,SAAlB,EAA6B;MAC3BJ,SAAS,GAAG,IAAZ;IACD;EACF;;EAED,OAAOA,SAAP;AACD;AAgBD,OAAM,SAAUU,WAAV,CACJC,QADI,EAEJC,gBAFI,EAEmE;EAEvE,IAAIP,GAAG,GAAGR,WAAW,EAArB;;EAEA,IAAIQ,GAAJ,EAAS;IACPA,GAAG,CAACG,eAAJ,CAAoBK,YAApB,CAAiC,MAAjC,EAAyCF,QAAzC;EACD;;EAED,IAAMR,eAAe,GAAGS,gBAAgB,KAAK,IAArB,GAA4B,MAA5B,GAAqC,CAACA,gBAAD,GAAoB,cAApB,GAAqCA,gBAAlG;;EACA,IAAIT,eAAe,KAAK,cAAxB,EAAwC;IACtCL,YAAY,CAACgB,OAAb,CAAqBb,WAArB,EAAkCU,QAAlC;EACD,CAFD,MAEO,IAAIR,eAAe,KAAK,gBAAxB,EAA0C;IAC/CJ,cAAc,CAACe,OAAf,CAAuBb,WAAvB,EAAoCU,QAApC;EACD;;EAEDX,SAAS,GAAGW,QAAZ;AACD","names":["getDocument","localStorage","sessionStorage","_language","STORAGE_KEY","getLanguage","persistenceType","undefined","doc","savedLanguage","getItem","documentElement","getAttribute","setLanguage","language","persistenceParam","setAttribute","setItem"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\utilities\\src\\language.ts"],"sourcesContent":["import { getDocument } from './dom/getDocument';\nimport * as localStorage from './localStorage';\nimport * as sessionStorage from './sessionStorage';\n\n// Default to undefined so that we initialize on first read.\nlet _language: string | null;\n\nconst STORAGE_KEY = 'language';\n\n/**\n * Gets the language set for the page.\n * @param persistenceType - Where to persist the value. Default is `localStorage` if available.\n * (In version 8, the default will be `sessionStorage`.)\n */\nexport function getLanguage(\n  persistenceType: 'localStorage' | 'sessionStorage' | 'none' = 'localStorage',\n): string | null {\n  if (_language === undefined) {\n    let doc = getDocument();\n    const savedLanguage =\n      persistenceType === 'localStorage'\n        ? localStorage.getItem(STORAGE_KEY)\n        : persistenceType === 'sessionStorage'\n        ? sessionStorage.getItem(STORAGE_KEY)\n        : undefined;\n\n    if (savedLanguage) {\n      _language = savedLanguage;\n    }\n\n    if (_language === undefined && doc) {\n      _language = doc.documentElement.getAttribute('lang');\n    }\n\n    if (_language === undefined) {\n      _language = 'en';\n    }\n  }\n\n  return _language;\n}\n\n/**\n * Sets the language for the page (by adjusting the lang attribute of the html element).\n * @param language - Language to set.\n * @param persistenceType - Where to persist the value. Default is `localStorage` if available.\n * (In version 8, the default will be `sessionStorage`.)\n */\nexport function setLanguage(language: string, persistenceType?: 'localStorage' | 'sessionStorage' | 'none'): void;\n/**\n * Sets the language for the page (by adjusting the lang attribute of the html element).\n * @deprecated Use string parameter version.\n * @param language - Language to set.\n * @param avoidPersisting - If true, don't store the value.\n */\nexport function setLanguage(language: string, avoidPersisting?: boolean): void;\nexport function setLanguage(\n  language: string,\n  persistenceParam?: 'localStorage' | 'sessionStorage' | 'none' | boolean,\n): void {\n  let doc = getDocument();\n\n  if (doc) {\n    doc.documentElement.setAttribute('lang', language);\n  }\n\n  const persistenceType = persistenceParam === true ? 'none' : !persistenceParam ? 'localStorage' : persistenceParam;\n  if (persistenceType === 'localStorage') {\n    localStorage.setItem(STORAGE_KEY, language);\n  } else if (persistenceType === 'sessionStorage') {\n    sessionStorage.setItem(STORAGE_KEY, language);\n  }\n\n  _language = language;\n}\n"]},"metadata":{},"sourceType":"module"}