{"ast":null,"code":"/**\n * Sets the virtual parent of an element.\n * Pass `undefined` as the `parent` to clear the virtual parent.\n *\n * @public\n */\nexport function setVirtualParent(child, parent) {\n  var virtualChild = child;\n  var virtualParent = parent;\n\n  if (!virtualChild._virtual) {\n    virtualChild._virtual = {\n      children: []\n    };\n  }\n\n  var oldParent = virtualChild._virtual.parent;\n\n  if (oldParent && oldParent !== parent) {\n    // Remove the child from its old parent.\n    var index = oldParent._virtual.children.indexOf(virtualChild);\n\n    if (index > -1) {\n      oldParent._virtual.children.splice(index, 1);\n    }\n  }\n\n  virtualChild._virtual.parent = virtualParent || undefined;\n\n  if (virtualParent) {\n    if (!virtualParent._virtual) {\n      virtualParent._virtual = {\n        children: []\n      };\n    }\n\n    virtualParent._virtual.children.push(virtualChild);\n  }\n}","map":{"version":3,"mappings":"AACA;;;;;;AAMA,OAAM,SAAUA,gBAAV,CAA2BC,KAA3B,EAA+CC,MAA/C,EAAyE;AAC7E,MAAMC,YAAY,GAAoBF,KAAtC;AACA,MAAMG,aAAa,GAA2BF,MAA9C;;AAEA,MAAI,CAACC,YAAY,CAACE,QAAlB,EAA4B;AAC1BF,gBAAY,CAACE,QAAb,GAAwB;AACtBC,cAAQ,EAAE;AADY,KAAxB;AAGD;;AAED,MAAMC,SAAS,GAAGJ,YAAY,CAACE,QAAb,CAAsBH,MAAxC;;AAEA,MAAIK,SAAS,IAAIA,SAAS,KAAKL,MAA/B,EAAuC;AACrC;AACA,QAAMM,KAAK,GAAGD,SAAS,CAACF,QAAV,CAAmBC,QAAnB,CAA4BG,OAA5B,CAAoCN,YAApC,CAAd;;AAEA,QAAIK,KAAK,GAAG,CAAC,CAAb,EAAgB;AACdD,eAAS,CAACF,QAAV,CAAmBC,QAAnB,CAA4BI,MAA5B,CAAmCF,KAAnC,EAA0C,CAA1C;AACD;AACF;;AAEDL,cAAY,CAACE,QAAb,CAAsBH,MAAtB,GAA+BE,aAAa,IAAIO,SAAhD;;AAEA,MAAIP,aAAJ,EAAmB;AACjB,QAAI,CAACA,aAAa,CAACC,QAAnB,EAA6B;AAC3BD,mBAAa,CAACC,QAAd,GAAyB;AACvBC,gBAAQ,EAAE;AADa,OAAzB;AAGD;;AAEDF,iBAAa,CAACC,QAAd,CAAuBC,QAAvB,CAAgCM,IAAhC,CAAqCT,YAArC;AACD;AACF","names":["setVirtualParent","child","parent","virtualChild","virtualParent","_virtual","children","oldParent","index","indexOf","splice","undefined","push"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@fluentui\\dom-utilities\\src\\setVirtualParent.ts"],"sourcesContent":["import { IVirtualElement } from './IVirtualElement';\n/**\n * Sets the virtual parent of an element.\n * Pass `undefined` as the `parent` to clear the virtual parent.\n *\n * @public\n */\nexport function setVirtualParent(child: HTMLElement, parent: HTMLElement | null): void {\n  const virtualChild = <IVirtualElement>child;\n  const virtualParent = <IVirtualElement | null>parent;\n\n  if (!virtualChild._virtual) {\n    virtualChild._virtual = {\n      children: [],\n    };\n  }\n\n  const oldParent = virtualChild._virtual.parent;\n\n  if (oldParent && oldParent !== parent) {\n    // Remove the child from its old parent.\n    const index = oldParent._virtual.children.indexOf(virtualChild);\n\n    if (index > -1) {\n      oldParent._virtual.children.splice(index, 1);\n    }\n  }\n\n  virtualChild._virtual.parent = virtualParent || undefined;\n\n  if (virtualParent) {\n    if (!virtualParent._virtual) {\n      virtualParent._virtual = {\n        children: [],\n      };\n    }\n\n    virtualParent._virtual.children.push(virtualChild);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}