{"ast":null,"code":"import { concatStyleSets, HighContrastSelector, IconFontSizes, getInputFocusStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nvar ARROW_BUTTON_WIDTH = 23;\nvar ARROW_BUTTON_ICON_SIZE = 8;\nvar DEFAULT_HEIGHT = 32;\nvar DEFAULT_MIN_WIDTH = 86;\nvar LABEL_MARGIN = 10;\n\nvar _getDisabledStyles = memoizeFunction(function (theme) {\n  var _a;\n\n  var semanticColors = theme.semanticColors;\n  var SpinButtonTextColorDisabled = semanticColors.disabledText;\n  var SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\n  return {\n    backgroundColor: SpinButtonBackgroundColorDisabled,\n    pointerEvents: 'none',\n    cursor: 'default',\n    color: SpinButtonTextColorDisabled,\n    selectors: (_a = {\n      ':after': {\n        borderColor: SpinButtonBackgroundColorDisabled\n      }\n    }, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  };\n});\n\nexport var getArrowButtonStyles = memoizeFunction(function (theme, isUpArrow, customSpecificArrowStyles) {\n  var _a, _b, _c;\n\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects; // TODO: after updating the semanticColor slots all this need to be reevaluated.\n\n  var ArrowButtonTextColor = palette.neutralSecondary;\n  var ArrowButtonTextColorHovered = semanticColors.buttonText;\n  var ArrowButtonTextColorPressed = semanticColors.buttonText;\n  var ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\n  var ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\n  var defaultArrowButtonStyles = {\n    root: {\n      outline: 'none',\n      display: 'block',\n      height: '50%',\n      width: ARROW_BUTTON_WIDTH,\n      padding: 0,\n      backgroundColor: 'transparent',\n      textAlign: 'center',\n      cursor: 'default',\n      color: ArrowButtonTextColor,\n      selectors: {\n        '&.ms-DownButton': {\n          borderRadius: \"0 0 \" + effects.roundedCorner2 + \" 0\"\n        },\n        '&.ms-UpButton': {\n          borderRadius: \"0 \" + effects.roundedCorner2 + \" 0 0\"\n        }\n      }\n    },\n    rootHovered: {\n      backgroundColor: ArrowButtonBackgroundHovered,\n      color: ArrowButtonTextColorHovered\n    },\n    rootChecked: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _a)\n    },\n    rootPressed: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _b)\n    },\n    rootDisabled: {\n      opacity: 0.5,\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        color: 'GrayText',\n        opacity: 1\n      }, _c)\n    },\n    icon: {\n      fontSize: ARROW_BUTTON_ICON_SIZE,\n      marginTop: 0,\n      marginRight: 0,\n      marginBottom: 0,\n      marginLeft: 0\n    }\n  }; // No specific styles needed as of now.\n\n  var defaultUpArrowButtonStyles = {};\n  var defaultDownArrowButtonStyles = {};\n  return concatStyleSets(defaultArrowButtonStyles, isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles, customSpecificArrowStyles);\n});\nexport var getStyles = memoizeFunction(function (theme, customStyles) {\n  var _a, _b;\n\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      fonts = theme.fonts;\n  var SpinButtonRootBorderColor = semanticColors.inputBorder;\n  var SpinButtonRootBackgroundColor = semanticColors.inputBackground;\n  var SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\n  var SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\n  var SpinButtonInputTextColor = semanticColors.inputText;\n  var SpinButtonInputTextColorSelected = palette.white;\n  var SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\n  var SpinButtonIconDisabledColor = semanticColors.disabledText;\n  var defaultStyles = {\n    root: [fonts.medium, {\n      outline: 'none',\n      width: '100%',\n      minWidth: DEFAULT_MIN_WIDTH\n    }],\n    labelWrapper: {\n      display: 'inline-flex',\n      alignItems: 'center'\n    },\n    labelWrapperStart: {\n      height: DEFAULT_HEIGHT,\n      float: 'left',\n      marginRight: LABEL_MARGIN\n    },\n    labelWrapperEnd: {\n      height: DEFAULT_HEIGHT,\n      float: 'right',\n      marginLeft: LABEL_MARGIN\n    },\n    labelWrapperTop: {\n      // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\n      // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\n      // the SpinButton is displayed with the label on top next to other form fields.\n      // Decrease the wrapper's effective height slightly to compensate.\n      marginBottom: -1\n    },\n    labelWrapperBottom: {},\n    icon: {\n      padding: '0 5px',\n      fontSize: IconFontSizes.large\n    },\n    iconDisabled: {\n      color: SpinButtonIconDisabledColor\n    },\n    label: {\n      pointerEvents: 'none',\n      // centering the label with the icon by forcing the exact same height as the icon.\n      lineHeight: IconFontSizes.large\n    },\n    labelDisabled: {},\n    spinButtonWrapper: {\n      display: 'flex',\n      position: 'relative',\n      boxSizing: 'border-box',\n      height: DEFAULT_HEIGHT,\n      minWidth: DEFAULT_MIN_WIDTH,\n      selectors: {\n        // setting border using pseudo-element here in order to prevent:\n        // input and chevron buttons to overlap border under certain resolutions\n        ':after': {\n          pointerEvents: 'none',\n          content: \"''\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: SpinButtonRootBorderColor,\n          borderRadius: effects.roundedCorner2\n        }\n      }\n    },\n    spinButtonWrapperTopBottom: {\n      width: '100%'\n    },\n    spinButtonWrapperHovered: {\n      selectors: (_a = {\n        ':after': {\n          borderColor: SpinButtonRootBorderColorHovered\n        }\n      }, _a[HighContrastSelector] = {\n        selectors: {\n          ':after': {\n            borderColor: 'Highlight'\n          }\n        }\n      }, _a)\n    },\n    spinButtonWrapperFocused: getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\n    spinButtonWrapperDisabled: _getDisabledStyles(theme),\n    input: {\n      boxSizing: 'border-box',\n      boxShadow: 'none',\n      borderStyle: 'none',\n      flex: 1,\n      margin: 0,\n      fontSize: fonts.medium.fontSize,\n      fontFamily: 'inherit',\n      color: SpinButtonInputTextColor,\n      backgroundColor: SpinButtonRootBackgroundColor,\n      height: '100%',\n      padding: '0 8px 0 9px',\n      outline: 0,\n      display: 'block',\n      minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      cursor: 'text',\n      userSelect: 'text',\n      borderRadius: effects.roundedCorner2 + \" 0 0 \" + effects.roundedCorner2\n    },\n    inputTextSelected: {\n      backgroundColor: SpinButtonInputBackgroundColorSelected,\n      color: SpinButtonInputTextColorSelected,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        borderColor: 'Highlight',\n        color: 'HighlightText'\n      }, _b)\n    },\n    inputDisabled: _getDisabledStyles(theme),\n    arrowButtonsContainer: {\n      display: 'block',\n      height: '100%',\n      cursor: 'default'\n    },\n    arrowButtonsContainerDisabled: _getDisabledStyles(theme)\n  };\n  return concatStyleSets(defaultStyles, customStyles);\n});","map":{"version":3,"mappings":"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","names":["concatStyleSets","HighContrastSelector","IconFontSizes","getInputFocusStyle","memoizeFunction","ARROW_BUTTON_WIDTH","ARROW_BUTTON_ICON_SIZE","DEFAULT_HEIGHT","DEFAULT_MIN_WIDTH","LABEL_MARGIN","_getDisabledStyles","theme","SpinButtonTextColorDisabled","semanticColors","disabledText","SpinButtonBackgroundColorDisabled","disabledBackground","backgroundColor","pointerEvents","cursor","color","selectors","borderColor","_a","getArrowButtonStyles","isUpArrow","customSpecificArrowStyles","effects","ArrowButtonTextColor","palette","neutralSecondary","ArrowButtonTextColorHovered","buttonText","ArrowButtonTextColorPressed","ArrowButtonBackgroundHovered","buttonBackgroundHovered","ArrowButtonBackgroundPressed","buttonBackgroundPressed","defaultArrowButtonStyles","root","outline","display","height","width","padding","textAlign","borderRadius","roundedCorner2","rootHovered","rootChecked","rootPressed","_b","rootDisabled","opacity","_c","icon","fontSize","marginTop","marginRight","marginBottom","marginLeft","defaultUpArrowButtonStyles","defaultDownArrowButtonStyles","getStyles","customStyles","fonts","SpinButtonRootBorderColor","inputBorder","SpinButtonRootBackgroundColor","inputBackground","SpinButtonRootBorderColorHovered","inputBorderHovered","SpinButtonRootBorderColorFocused","inputFocusBorderAlt","SpinButtonInputTextColor","inputText","SpinButtonInputTextColorSelected","white","SpinButtonInputBackgroundColorSelected","inputBackgroundChecked","SpinButtonIconDisabledColor","defaultStyles","medium","minWidth","labelWrapper","alignItems","labelWrapperStart","float","labelWrapperEnd","labelWrapperTop","labelWrapperBottom","large","iconDisabled","label","lineHeight","labelDisabled","spinButtonWrapper","position","boxSizing","content","left","top","bottom","right","borderWidth","borderStyle","spinButtonWrapperTopBottom","spinButtonWrapperHovered","spinButtonWrapperFocused","spinButtonWrapperDisabled","input","boxShadow","flex","margin","fontFamily","whiteSpace","textOverflow","overflow","userSelect","inputTextSelected","inputDisabled","arrowButtonsContainer","arrowButtonsContainerDisabled"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\SpinButton\\SpinButton.styles.ts"],"sourcesContent":["import {\r\n  IRawStyle,\r\n  ITheme,\r\n  concatStyleSets,\r\n  HighContrastSelector,\r\n  IconFontSizes,\r\n  getInputFocusStyle,\r\n} from '../../Styling';\r\nimport { IButtonStyles } from '../../Button';\r\nimport { ISpinButtonStyles } from './SpinButton.types';\r\nimport { memoizeFunction } from '../../Utilities';\r\n\r\nconst ARROW_BUTTON_WIDTH = 23;\r\nconst ARROW_BUTTON_ICON_SIZE = 8;\r\nconst DEFAULT_HEIGHT = 32;\r\nconst DEFAULT_MIN_WIDTH = 86;\r\nconst LABEL_MARGIN = 10;\r\n\r\nconst _getDisabledStyles = memoizeFunction(\r\n  (theme: ITheme): IRawStyle => {\r\n    const { semanticColors } = theme;\r\n\r\n    const SpinButtonTextColorDisabled = semanticColors.disabledText;\r\n    const SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\r\n\r\n    return {\r\n      backgroundColor: SpinButtonBackgroundColorDisabled,\r\n      pointerEvents: 'none',\r\n      cursor: 'default',\r\n      color: SpinButtonTextColorDisabled,\r\n      selectors: {\r\n        ':after': {\r\n          borderColor: SpinButtonBackgroundColorDisabled,\r\n        },\r\n        [HighContrastSelector]: {\r\n          color: 'GrayText',\r\n        },\r\n      },\r\n    };\r\n  },\r\n);\r\n\r\nexport const getArrowButtonStyles = memoizeFunction(\r\n  (theme: ITheme, isUpArrow: boolean, customSpecificArrowStyles?: Partial<IButtonStyles>): IButtonStyles => {\r\n    const { palette, semanticColors, effects } = theme;\r\n\r\n    // TODO: after updating the semanticColor slots all this need to be reevaluated.\r\n    const ArrowButtonTextColor = palette.neutralSecondary;\r\n    const ArrowButtonTextColorHovered = semanticColors.buttonText;\r\n    const ArrowButtonTextColorPressed = semanticColors.buttonText;\r\n\r\n    const ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\r\n    const ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\r\n\r\n    const defaultArrowButtonStyles: IButtonStyles = {\r\n      root: {\r\n        outline: 'none',\r\n        display: 'block',\r\n        height: '50%',\r\n        width: ARROW_BUTTON_WIDTH,\r\n        padding: 0,\r\n        backgroundColor: 'transparent',\r\n        textAlign: 'center',\r\n        cursor: 'default',\r\n        color: ArrowButtonTextColor,\r\n        selectors: {\r\n          '&.ms-DownButton': {\r\n            borderRadius: `0 0 ${effects.roundedCorner2} 0`,\r\n          },\r\n          '&.ms-UpButton': {\r\n            borderRadius: `0 ${effects.roundedCorner2} 0 0`,\r\n          },\r\n        },\r\n      },\r\n      rootHovered: {\r\n        backgroundColor: ArrowButtonBackgroundHovered,\r\n        color: ArrowButtonTextColorHovered,\r\n      },\r\n      rootChecked: {\r\n        backgroundColor: ArrowButtonBackgroundPressed,\r\n        color: ArrowButtonTextColorPressed,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      rootPressed: {\r\n        backgroundColor: ArrowButtonBackgroundPressed,\r\n        color: ArrowButtonTextColorPressed,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      rootDisabled: {\r\n        opacity: 0.5,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            color: 'GrayText',\r\n            opacity: 1,\r\n          },\r\n        },\r\n      },\r\n      icon: {\r\n        fontSize: ARROW_BUTTON_ICON_SIZE,\r\n        marginTop: 0,\r\n        marginRight: 0,\r\n        marginBottom: 0,\r\n        marginLeft: 0,\r\n      },\r\n    };\r\n\r\n    // No specific styles needed as of now.\r\n    const defaultUpArrowButtonStyles: Partial<IButtonStyles> = {};\r\n\r\n    const defaultDownArrowButtonStyles: Partial<IButtonStyles> = {};\r\n\r\n    return concatStyleSets(\r\n      defaultArrowButtonStyles,\r\n      isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles,\r\n      customSpecificArrowStyles,\r\n    ) as IButtonStyles;\r\n  },\r\n);\r\n\r\nexport const getStyles = memoizeFunction(\r\n  (theme: ITheme, customStyles?: Partial<ISpinButtonStyles>): ISpinButtonStyles => {\r\n    const { palette, semanticColors, effects, fonts } = theme;\r\n\r\n    const SpinButtonRootBorderColor = semanticColors.inputBorder;\r\n    const SpinButtonRootBackgroundColor = semanticColors.inputBackground;\r\n    const SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\r\n    const SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\r\n\r\n    const SpinButtonInputTextColor = semanticColors.inputText;\r\n    const SpinButtonInputTextColorSelected = palette.white;\r\n    const SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\r\n\r\n    const SpinButtonIconDisabledColor = semanticColors.disabledText;\r\n\r\n    const defaultStyles: ISpinButtonStyles = {\r\n      root: [\r\n        fonts.medium,\r\n        {\r\n          outline: 'none',\r\n          width: '100%',\r\n          minWidth: DEFAULT_MIN_WIDTH,\r\n        },\r\n      ],\r\n      labelWrapper: {\r\n        display: 'inline-flex',\r\n        alignItems: 'center',\r\n      },\r\n      labelWrapperStart: {\r\n        height: DEFAULT_HEIGHT,\r\n        float: 'left',\r\n        marginRight: LABEL_MARGIN,\r\n      },\r\n      labelWrapperEnd: {\r\n        height: DEFAULT_HEIGHT,\r\n        float: 'right',\r\n        marginLeft: LABEL_MARGIN,\r\n      },\r\n      labelWrapperTop: {\r\n        // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\r\n        // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\r\n        // the SpinButton is displayed with the label on top next to other form fields.\r\n        // Decrease the wrapper's effective height slightly to compensate.\r\n        marginBottom: -1,\r\n      },\r\n      labelWrapperBottom: {},\r\n      icon: {\r\n        padding: '0 5px',\r\n        fontSize: IconFontSizes.large,\r\n      },\r\n      iconDisabled: {\r\n        color: SpinButtonIconDisabledColor,\r\n      },\r\n      label: {\r\n        pointerEvents: 'none',\r\n        // centering the label with the icon by forcing the exact same height as the icon.\r\n        lineHeight: IconFontSizes.large,\r\n      },\r\n      labelDisabled: {},\r\n      spinButtonWrapper: {\r\n        display: 'flex',\r\n        position: 'relative',\r\n        boxSizing: 'border-box',\r\n        height: DEFAULT_HEIGHT,\r\n        minWidth: DEFAULT_MIN_WIDTH,\r\n        selectors: {\r\n          // setting border using pseudo-element here in order to prevent:\r\n          // input and chevron buttons to overlap border under certain resolutions\r\n          ':after': {\r\n            pointerEvents: 'none',\r\n            content: \"''\",\r\n            position: 'absolute',\r\n            left: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n            right: 0,\r\n            borderWidth: '1px',\r\n            borderStyle: 'solid',\r\n            borderColor: SpinButtonRootBorderColor,\r\n            borderRadius: effects.roundedCorner2,\r\n          },\r\n        },\r\n      },\r\n      spinButtonWrapperTopBottom: {\r\n        width: '100%',\r\n      },\r\n      spinButtonWrapperHovered: {\r\n        selectors: {\r\n          ':after': {\r\n            borderColor: SpinButtonRootBorderColorHovered,\r\n          },\r\n          [HighContrastSelector]: {\r\n            selectors: {\r\n              ':after': {\r\n                borderColor: 'Highlight',\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      spinButtonWrapperFocused: getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\r\n      spinButtonWrapperDisabled: _getDisabledStyles(theme),\r\n      input: {\r\n        boxSizing: 'border-box',\r\n        boxShadow: 'none',\r\n        borderStyle: 'none',\r\n        flex: 1,\r\n        margin: 0,\r\n        fontSize: fonts.medium.fontSize,\r\n        fontFamily: 'inherit',\r\n        color: SpinButtonInputTextColor,\r\n        backgroundColor: SpinButtonRootBackgroundColor,\r\n        height: '100%',\r\n        padding: '0 8px 0 9px',\r\n        outline: 0,\r\n        display: 'block',\r\n        minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\r\n        whiteSpace: 'nowrap',\r\n        textOverflow: 'ellipsis',\r\n        overflow: 'hidden',\r\n        cursor: 'text',\r\n        userSelect: 'text',\r\n        borderRadius: `${effects.roundedCorner2} 0 0 ${effects.roundedCorner2}`,\r\n      },\r\n      inputTextSelected: {\r\n        backgroundColor: SpinButtonInputBackgroundColorSelected,\r\n        color: SpinButtonInputTextColorSelected,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            borderColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      inputDisabled: _getDisabledStyles(theme),\r\n      arrowButtonsContainer: {\r\n        display: 'block',\r\n        height: '100%',\r\n        cursor: 'default',\r\n      },\r\n      arrowButtonsContainerDisabled: _getDisabledStyles(theme),\r\n    };\r\n    return concatStyleSets(defaultStyles, customStyles) as ISpinButtonStyles;\r\n  },\r\n);\r\n"]},"metadata":{},"sourceType":"module"}