{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { mergeStyleSets } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { ButtonGridCell } from '../../utilities/ButtonGrid/ButtonGridCell';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nvar getColorPickerGridCellButtonClassNames = memoizeFunction(function (theme, className, variantClassName, iconClassName, menuIconClassName, disabled, checked, expanded, isSplit) {\n  var styles = getActionButtonStyles(theme);\n  return mergeStyleSets({\n    root: ['ms-Button', styles.root, variantClassName, className, checked && ['is-checked', styles.rootChecked], disabled && ['is-disabled', styles.rootDisabled], !disabled && !checked && {\n      selectors: {\n        ':hover': styles.rootHovered,\n        ':focus': styles.rootFocused,\n        ':active': styles.rootPressed\n      }\n    }, disabled && checked && [styles.rootCheckedDisabled], !disabled && checked && {\n      selectors: {\n        ':hover': styles.rootCheckedHovered,\n        ':active': styles.rootCheckedPressed\n      }\n    }],\n    flexContainer: ['ms-Button-flexContainer', styles.flexContainer]\n  });\n});\nvar getClassNames = classNamesFunction();\n\nvar ColorCell =\n/** @class */\nfunction (_super) {\n  __extends(ColorCell, _super);\n\n  function ColorCell() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return ColorCell;\n}(ButtonGridCell);\n\nvar ColorPickerGridCellBase =\n/** @class */\nfunction (_super) {\n  __extends(ColorPickerGridCellBase, _super);\n\n  function ColorPickerGridCellBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Render the core of a color cell\n     * @returns - Element representing the core of the item\n     */\n\n\n    _this._onRenderColorOption = function (colorOption) {\n      // Build an SVG for the cell with the given shape and color properties\n      return React.createElement(\"svg\", {\n        className: _this._classNames.svg,\n        viewBox: \"0 0 20 20\",\n        fill: getColorFromString(colorOption.color).str\n      }, _this.props.circle ? React.createElement(\"circle\", {\n        cx: \"50%\",\n        cy: \"50%\",\n        r: \"50%\"\n      }) : React.createElement(\"rect\", {\n        width: \"100%\",\n        height: \"100%\"\n      }));\n    };\n\n    return _this;\n  }\n\n  ColorPickerGridCellBase.prototype.render = function () {\n    var _a = this.props,\n        item = _a.item,\n        // eslint-disable-next-line deprecation/deprecation\n    _b = _a.idPrefix,\n        // eslint-disable-next-line deprecation/deprecation\n    idPrefix = _b === void 0 ? this.props.id : _b,\n        selected = _a.selected,\n        disabled = _a.disabled,\n        styles = _a.styles,\n        theme = _a.theme,\n        circle = _a.circle,\n        color = _a.color,\n        onClick = _a.onClick,\n        onHover = _a.onHover,\n        onFocus = _a.onFocus,\n        onMouseEnter = _a.onMouseEnter,\n        onMouseMove = _a.onMouseMove,\n        onMouseLeave = _a.onMouseLeave,\n        onWheel = _a.onWheel,\n        onKeyDown = _a.onKeyDown,\n        height = _a.height,\n        width = _a.width,\n        borderWidth = _a.borderWidth;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      disabled: disabled,\n      selected: selected,\n      circle: circle,\n      isWhite: this._isWhiteCell(color),\n      height: height,\n      width: width,\n      borderWidth: borderWidth\n    });\n    return React.createElement(ColorCell, {\n      item: item,\n      id: idPrefix + \"-\" + item.id + \"-\" + item.index,\n      key: item.id,\n      disabled: disabled,\n      role: 'gridcell',\n      onRenderItem: this._onRenderColorOption,\n      selected: selected,\n      onClick: onClick,\n      onHover: onHover,\n      onFocus: onFocus,\n      label: item.label,\n      className: this._classNames.colorCell,\n      getClassNames: getColorPickerGridCellButtonClassNames,\n      index: item.index,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onWheel: onWheel,\n      onKeyDown: onKeyDown\n    });\n  };\n  /**\n   * Validate if the cell's color is white or not to apply whiteCell style\n   * @param inputColor - The color of the current cell\n   * @returns - Whether the cell's color is white or not.\n   */\n\n\n  ColorPickerGridCellBase.prototype._isWhiteCell = function (inputColor) {\n    var color = getColorFromString(inputColor);\n    return color.hex === 'ffffff';\n  };\n\n  ColorPickerGridCellBase.defaultProps = {\n    circle: true,\n    disabled: false,\n    selected: false\n  };\n  return ColorPickerGridCellBase;\n}(React.PureComponent);\n\nexport { ColorPickerGridCellBase };","map":{"version":3,"mappings":"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","names":["React","mergeStyleSets","classNamesFunction","memoizeFunction","getColorFromString","ButtonGridCell","getStyles","getActionButtonStyles","getColorPickerGridCellButtonClassNames","theme","className","variantClassName","iconClassName","menuIconClassName","disabled","checked","expanded","isSplit","styles","root","rootChecked","rootDisabled","selectors","rootHovered","rootFocused","rootPressed","rootCheckedDisabled","rootCheckedHovered","rootCheckedPressed","flexContainer","getClassNames","__extends","_this","colorOption","_classNames","svg","viewBox","fill","color","str","props","circle","cx","cy","r","width","height","ColorPickerGridCellBase","item","_b","idPrefix","selected","onClick","onHover","onFocus","onMouseEnter","onMouseMove","onMouseLeave","onWheel","onKeyDown","borderWidth","isWhite","_isWhiteCell","ColorCell","id","index","key","role","onRenderItem","_onRenderColorOption","label","colorCell","inputColor","hex","PureComponent"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\SwatchColorPicker\\ColorPickerGridCell.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ITheme, mergeStyleSets } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { ButtonGridCell } from '../../utilities/ButtonGrid/ButtonGridCell';\nimport { IButtonGridCellProps } from '../../utilities/ButtonGrid/ButtonGridCell.types';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nimport { IButtonClassNames } from '../Button/BaseButton.classNames';\nimport {\n  IColorCellProps,\n  IColorPickerGridCellProps,\n  IColorPickerGridCellStyleProps,\n  IColorPickerGridCellStyles,\n} from './ColorPickerGridCell.types';\n\nconst getColorPickerGridCellButtonClassNames = memoizeFunction(\n  (\n    theme: ITheme,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    checked: boolean,\n    expanded: boolean,\n    isSplit: boolean | undefined,\n  ): IButtonClassNames => {\n    const styles = getActionButtonStyles(theme);\n    return mergeStyleSets({\n      root: [\n        'ms-Button',\n        styles.root,\n        variantClassName,\n        className,\n        checked && ['is-checked', styles.rootChecked],\n        disabled && ['is-disabled', styles.rootDisabled],\n        !disabled &&\n          !checked && {\n            selectors: {\n              ':hover': styles.rootHovered,\n              ':focus': styles.rootFocused,\n              ':active': styles.rootPressed,\n            },\n          },\n        disabled && checked && [styles.rootCheckedDisabled],\n        !disabled &&\n          checked && {\n            selectors: {\n              ':hover': styles.rootCheckedHovered,\n              ':active': styles.rootCheckedPressed,\n            },\n          },\n      ],\n      flexContainer: ['ms-Button-flexContainer', styles.flexContainer],\n    });\n  },\n);\n\nconst getClassNames = classNamesFunction<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>();\n\nclass ColorCell extends ButtonGridCell<IColorCellProps, IButtonGridCellProps<IColorCellProps>> {}\n\nexport class ColorPickerGridCellBase extends React.PureComponent<IColorPickerGridCellProps, {}> {\n  public static defaultProps: Partial<IColorPickerGridCellProps> = {\n    circle: true,\n    disabled: false,\n    selected: false,\n  };\n\n  private _classNames: { [key in keyof IColorPickerGridCellStyles]: string };\n\n  public render(): JSX.Element {\n    const {\n      item,\n      // eslint-disable-next-line deprecation/deprecation\n      idPrefix = this.props.id,\n      selected,\n      disabled,\n      styles,\n      theme,\n      circle,\n      color,\n      onClick,\n      onHover,\n      onFocus,\n      onMouseEnter,\n      onMouseMove,\n      onMouseLeave,\n      onWheel,\n      onKeyDown,\n      height,\n      width,\n      borderWidth,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      disabled,\n      selected,\n      circle,\n      isWhite: this._isWhiteCell(color),\n      height,\n      width,\n      borderWidth,\n    });\n\n    return (\n      <ColorCell\n        item={item}\n        id={`${idPrefix}-${item.id}-${item.index}`}\n        key={item.id}\n        disabled={disabled}\n        role={'gridcell'}\n        onRenderItem={this._onRenderColorOption}\n        selected={selected}\n        onClick={onClick}\n        onHover={onHover}\n        onFocus={onFocus}\n        label={item.label}\n        className={this._classNames.colorCell}\n        getClassNames={getColorPickerGridCellButtonClassNames}\n        index={item.index}\n        onMouseEnter={onMouseEnter}\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n        onWheel={onWheel}\n        onKeyDown={onKeyDown}\n      />\n    );\n  }\n\n  /**\n   * Render the core of a color cell\n   * @returns - Element representing the core of the item\n   */\n  private _onRenderColorOption = (colorOption: IColorCellProps): JSX.Element => {\n    // Build an SVG for the cell with the given shape and color properties\n    return (\n      <svg\n        className={this._classNames.svg}\n        viewBox=\"0 0 20 20\"\n        fill={getColorFromString(colorOption.color as string)!.str}\n      >\n        {this.props.circle ? <circle cx=\"50%\" cy=\"50%\" r=\"50%\" /> : <rect width=\"100%\" height=\"100%\" />}\n      </svg>\n    );\n  };\n\n  /**\n   * Validate if the cell's color is white or not to apply whiteCell style\n   * @param inputColor - The color of the current cell\n   * @returns - Whether the cell's color is white or not.\n   */\n  private _isWhiteCell(inputColor: string | undefined): boolean {\n    const color = getColorFromString(inputColor!);\n    return color!.hex === 'ffffff';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}