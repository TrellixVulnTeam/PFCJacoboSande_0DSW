{"ast":null,"code":"import { __assign } from \"tslib\";\nexport var InjectionMode = {\n  /**\n   * Avoids style injection, use getRules() to read the styles.\n   */\n  none: 0,\n\n  /**\n   * Inserts rules using the insertRule api.\n   */\n  insertNode: 1,\n\n  /**\n   * Appends rules using appendChild.\n   */\n  appendChild: 2\n};\nvar STYLESHEET_SETTING = '__stylesheet__';\n/**\n * MSIE 11 doesn't cascade styles based on DOM ordering, but rather on the order that each style node\n * is created. As such, to maintain consistent priority, IE11 should reuse a single style node.\n */\n\nvar REUSE_STYLE_NODE = typeof navigator !== 'undefined' && /rv:11.0/.test(navigator.userAgent);\nvar _global = {}; // Grab window.\n\ntry {\n  _global = window;\n} catch (_a) {\n  /* leave as blank object */\n}\n\nvar _stylesheet;\n/**\n * Represents the state of styles registered in the page. Abstracts\n * the surface for adding styles to the stylesheet, exposes helpers\n * for reading the styles registered in server rendered scenarios.\n *\n * @public\n */\n\n\nvar Stylesheet =\n/** @class */\nfunction () {\n  function Stylesheet(config) {\n    this._rules = [];\n    this._preservedRules = [];\n    this._rulesToInsert = [];\n    this._counter = 0;\n    this._keyToClassName = {};\n    this._onResetCallbacks = [];\n    this._classNameToArgs = {};\n    this._config = __assign({\n      injectionMode: InjectionMode.insertNode,\n      defaultPrefix: 'css',\n      namespace: undefined,\n      cspSettings: undefined\n    }, config);\n    this._keyToClassName = this._config.classNameCache || {};\n  }\n  /**\n   * Gets the singleton instance.\n   */\n\n\n  Stylesheet.getInstance = function () {\n    var _a;\n\n    _stylesheet = _global[STYLESHEET_SETTING];\n\n    if (!_stylesheet || _stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document) {\n      var fabricConfig = ((_a = _global) === null || _a === void 0 ? void 0 : _a.FabricConfig) || {};\n      _stylesheet = _global[STYLESHEET_SETTING] = new Stylesheet(fabricConfig.mergeStyles);\n    }\n\n    return _stylesheet;\n  };\n  /**\n   * Configures the stylesheet.\n   */\n\n\n  Stylesheet.prototype.setConfig = function (config) {\n    this._config = __assign(__assign({}, this._config), config);\n  };\n  /**\n   * Configures a reset callback.\n   *\n   * @param callback - A callback which will be called when the Stylesheet is reset.\n   */\n\n\n  Stylesheet.prototype.onReset = function (callback) {\n    this._onResetCallbacks.push(callback);\n  };\n  /**\n   * Generates a unique classname.\n   *\n   * @param displayName - Optional value to use as a prefix.\n   */\n\n\n  Stylesheet.prototype.getClassName = function (displayName) {\n    var namespace = this._config.namespace;\n    var prefix = displayName || this._config.defaultPrefix;\n    return \"\" + (namespace ? namespace + '-' : '') + prefix + \"-\" + this._counter++;\n  };\n  /**\n   * Used internally to cache information about a class which was\n   * registered with the stylesheet.\n   */\n\n\n  Stylesheet.prototype.cacheClassName = function (className, key, args, rules) {\n    this._keyToClassName[key] = className;\n    this._classNameToArgs[className] = {\n      args: args,\n      rules: rules\n    };\n  };\n  /**\n   * Gets the appropriate classname given a key which was previously\n   * registered using cacheClassName.\n   */\n\n\n  Stylesheet.prototype.classNameFromKey = function (key) {\n    return this._keyToClassName[key];\n  };\n  /**\n   * Gets all classnames cache with the stylesheet.\n   */\n\n\n  Stylesheet.prototype.getClassNameCache = function () {\n    return this._keyToClassName;\n  };\n  /**\n   * Gets the arguments associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n\n\n  Stylesheet.prototype.argsFromClassName = function (className) {\n    var entry = this._classNameToArgs[className];\n    return entry && entry.args;\n  };\n  /**\n   * Gets the arguments associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n\n\n  Stylesheet.prototype.insertedRulesFromClassName = function (className) {\n    var entry = this._classNameToArgs[className];\n    return entry && entry.rules;\n  };\n  /**\n   * Inserts a css rule into the stylesheet.\n   * @param preserve - Preserves the rule beyond a reset boundary.\n   */\n\n\n  Stylesheet.prototype.insertRule = function (rule, preserve) {\n    var injectionMode = this._config.injectionMode;\n    var element = injectionMode !== InjectionMode.none ? this._getStyleElement() : undefined;\n\n    if (preserve) {\n      this._preservedRules.push(rule);\n    }\n\n    if (element) {\n      switch (this._config.injectionMode) {\n        case InjectionMode.insertNode:\n          var sheet = element.sheet;\n\n          try {\n            sheet.insertRule(rule, sheet.cssRules.length);\n          } catch (e) {// The browser will throw exceptions on unsupported rules (such as a moz prefix in webkit.)\n            // We need to swallow the exceptions for this scenario, otherwise we'd need to filter\n            // which could be slower and bulkier.\n          }\n\n          break;\n\n        case InjectionMode.appendChild:\n          element.appendChild(document.createTextNode(rule));\n          break;\n      }\n    } else {\n      this._rules.push(rule);\n    }\n\n    if (this._config.onInsertRule) {\n      this._config.onInsertRule(rule);\n    }\n  };\n  /**\n   * Gets all rules registered with the stylesheet; only valid when\n   * using InsertionMode.none.\n   */\n\n\n  Stylesheet.prototype.getRules = function (includePreservedRules) {\n    return (includePreservedRules ? this._preservedRules.join('') : '') + this._rules.join('') + this._rulesToInsert.join('');\n  };\n  /**\n   * Resets the internal state of the stylesheet. Only used in server\n   * rendered scenarios where we're using InsertionMode.none.\n   */\n\n\n  Stylesheet.prototype.reset = function () {\n    this._rules = [];\n    this._rulesToInsert = [];\n    this._counter = 0;\n    this._classNameToArgs = {};\n    this._keyToClassName = {};\n\n    this._onResetCallbacks.forEach(function (callback) {\n      return callback();\n    });\n  }; // Forces the regeneration of incoming styles without totally resetting the stylesheet.\n\n\n  Stylesheet.prototype.resetKeys = function () {\n    this._keyToClassName = {};\n  };\n\n  Stylesheet.prototype._getStyleElement = function () {\n    var _this = this;\n\n    if (!this._styleElement && typeof document !== 'undefined') {\n      this._styleElement = this._createStyleElement();\n\n      if (!REUSE_STYLE_NODE) {\n        // Reset the style element on the next frame.\n        window.requestAnimationFrame(function () {\n          _this._styleElement = undefined;\n        });\n      }\n    }\n\n    return this._styleElement;\n  };\n\n  Stylesheet.prototype._createStyleElement = function () {\n    var head = document.head;\n    var styleElement = document.createElement('style');\n    styleElement.setAttribute('data-merge-styles', 'true');\n    var cspSettings = this._config.cspSettings;\n\n    if (cspSettings) {\n      if (cspSettings.nonce) {\n        styleElement.setAttribute('nonce', cspSettings.nonce);\n      }\n    }\n\n    if (this._lastStyleElement) {\n      // If the `nextElementSibling` is null, then the insertBefore will act as a regular append.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore#Syntax\n      head.insertBefore(styleElement, this._lastStyleElement.nextElementSibling);\n    } else {\n      var placeholderStyleTag = this._findPlaceholderStyleTag();\n\n      if (placeholderStyleTag) {\n        head.insertBefore(styleElement, placeholderStyleTag.nextElementSibling);\n      } else {\n        head.insertBefore(styleElement, head.childNodes[0]);\n      }\n    }\n\n    this._lastStyleElement = styleElement;\n    return styleElement;\n  };\n\n  Stylesheet.prototype._findPlaceholderStyleTag = function () {\n    var head = document.head;\n\n    if (head) {\n      return head.querySelector('style[data-merge-styles]');\n    }\n\n    return null;\n  };\n\n  return Stylesheet;\n}();\n\nexport { Stylesheet };","map":{"version":3,"mappings":"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","names":["InjectionMode","none","insertNode","appendChild","STYLESHEET_SETTING","REUSE_STYLE_NODE","navigator","test","userAgent","_global","window","_stylesheet","config","_config","__assign","injectionMode","defaultPrefix","namespace","undefined","cspSettings","_keyToClassName","classNameCache","Stylesheet","_lastStyleElement","ownerDocument","document","fabricConfig","_a","FabricConfig","mergeStyles","callback","_onResetCallbacks","push","displayName","prefix","_counter","className","key","args","rules","_classNameToArgs","entry","rule","preserve","element","_getStyleElement","_preservedRules","sheet","insertRule","cssRules","length","e","createTextNode","_rules","onInsertRule","includePreservedRules","join","_rulesToInsert","forEach","_styleElement","_createStyleElement","requestAnimationFrame","_this","head","styleElement","createElement","setAttribute","nonce","insertBefore","nextElementSibling","placeholderStyleTag","_findPlaceholderStyleTag","childNodes","querySelector"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\merge-styles\\src\\Stylesheet.ts"],"sourcesContent":["import { IStyle } from './IStyle';\n\nexport const InjectionMode = {\n  /**\n   * Avoids style injection, use getRules() to read the styles.\n   */\n  none: 0 as 0,\n\n  /**\n   * Inserts rules using the insertRule api.\n   */\n  insertNode: 1 as 1,\n\n  /**\n   * Appends rules using appendChild.\n   */\n  appendChild: 2 as 2,\n};\n\nexport type InjectionMode = typeof InjectionMode[keyof typeof InjectionMode];\n\n/**\n * CSP settings for the stylesheet\n */\nexport interface ICSPSettings {\n  /**\n   * Nonce to inject into script tag\n   */\n  nonce?: string;\n}\n\n/**\n * Stylesheet config.\n *\n * @public\n */\nexport interface IStyleSheetConfig {\n  /**\n   * Injection mode for how rules are inserted.\n   */\n  injectionMode?: InjectionMode;\n\n  /**\n   * Default 'displayName' to use for a className.\n   * @defaultvalue 'css'\n   */\n  defaultPrefix?: string;\n\n  /**\n   * Defines the default direction of rules for auto-rtlifying things.\n   * While typically this is represented as a DIR attribute in the markup,\n   * the DIR is not enough to control whether padding goes on the left or\n   * right. Use this to set the default direction when rules are registered.\n   */\n  rtl?: boolean;\n\n  /**\n   * Default 'namespace' to attach before the className.\n   */\n  namespace?: string;\n\n  /**\n   * CSP settings\n   */\n  cspSettings?: ICSPSettings;\n\n  /**\n   * Callback executed when a rule is inserted.\n   */\n  onInsertRule?: (rule: string) => void;\n\n  /**\n   * Initial value for classnames cache. Key is serialized css rules associated with a classname.\n   */\n  classNameCache?: { [key: string]: string };\n}\n\nconst STYLESHEET_SETTING = '__stylesheet__';\n/**\n * MSIE 11 doesn't cascade styles based on DOM ordering, but rather on the order that each style node\n * is created. As such, to maintain consistent priority, IE11 should reuse a single style node.\n */\nconst REUSE_STYLE_NODE = typeof navigator !== 'undefined' && /rv:11.0/.test(navigator.userAgent);\n\nlet _global: { [key: string]: any } = {};\n\n// Grab window.\ntry {\n  _global = window;\n} catch {\n  /* leave as blank object */\n}\n\nlet _stylesheet: Stylesheet;\n\n/**\n * Represents the state of styles registered in the page. Abstracts\n * the surface for adding styles to the stylesheet, exposes helpers\n * for reading the styles registered in server rendered scenarios.\n *\n * @public\n */\nexport class Stylesheet {\n  private _lastStyleElement?: HTMLStyleElement;\n  private _styleElement?: HTMLStyleElement;\n  private _rules: string[] = [];\n  private _preservedRules: string[] = [];\n  private _config: IStyleSheetConfig;\n  private _rulesToInsert: string[] = [];\n  private _counter = 0;\n  private _keyToClassName: { [key: string]: string } = {};\n  private _onResetCallbacks: (() => void)[] = [];\n\n  private _classNameToArgs: { [key: string]: { args: any; rules: string[] } } = {};\n\n  /**\n   * Gets the singleton instance.\n   */\n  public static getInstance(): Stylesheet {\n    _stylesheet = _global[STYLESHEET_SETTING] as Stylesheet;\n\n    if (!_stylesheet || (_stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document)) {\n      const fabricConfig = _global?.FabricConfig || {};\n\n      _stylesheet = _global[STYLESHEET_SETTING] = new Stylesheet(fabricConfig.mergeStyles);\n    }\n\n    return _stylesheet;\n  }\n\n  constructor(config?: IStyleSheetConfig) {\n    this._config = {\n      injectionMode: InjectionMode.insertNode,\n      defaultPrefix: 'css',\n      namespace: undefined,\n      cspSettings: undefined,\n      ...config,\n    };\n\n    this._keyToClassName = this._config.classNameCache || {};\n  }\n\n  /**\n   * Configures the stylesheet.\n   */\n  public setConfig(config?: IStyleSheetConfig): void {\n    this._config = {\n      ...this._config,\n      ...config,\n    };\n  }\n\n  /**\n   * Configures a reset callback.\n   *\n   * @param callback - A callback which will be called when the Stylesheet is reset.\n   */\n  public onReset(callback: () => void): void {\n    this._onResetCallbacks.push(callback);\n  }\n\n  /**\n   * Generates a unique classname.\n   *\n   * @param displayName - Optional value to use as a prefix.\n   */\n  public getClassName(displayName?: string): string {\n    const { namespace } = this._config;\n    const prefix = displayName || this._config.defaultPrefix;\n\n    return `${namespace ? namespace + '-' : ''}${prefix}-${this._counter++}`;\n  }\n\n  /**\n   * Used internally to cache information about a class which was\n   * registered with the stylesheet.\n   */\n  public cacheClassName(className: string, key: string, args: IStyle[], rules: string[]): void {\n    this._keyToClassName[key] = className;\n    this._classNameToArgs[className] = {\n      args,\n      rules,\n    };\n  }\n\n  /**\n   * Gets the appropriate classname given a key which was previously\n   * registered using cacheClassName.\n   */\n  public classNameFromKey(key: string): string | undefined {\n    return this._keyToClassName[key];\n  }\n\n  /**\n   * Gets all classnames cache with the stylesheet.\n   */\n  public getClassNameCache(): { [key: string]: string } {\n    return this._keyToClassName;\n  }\n\n  /**\n   * Gets the arguments associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n  public argsFromClassName(className: string): IStyle[] | undefined {\n    const entry = this._classNameToArgs[className];\n\n    return entry && entry.args;\n  }\n\n  /**\n   * Gets the arguments associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n  public insertedRulesFromClassName(className: string): string[] | undefined {\n    const entry = this._classNameToArgs[className];\n\n    return entry && entry.rules;\n  }\n\n  /**\n   * Inserts a css rule into the stylesheet.\n   * @param preserve - Preserves the rule beyond a reset boundary.\n   */\n  public insertRule(rule: string, preserve?: boolean): void {\n    const { injectionMode } = this._config;\n    const element = injectionMode !== InjectionMode.none ? this._getStyleElement() : undefined;\n\n    if (preserve) {\n      this._preservedRules.push(rule);\n    }\n\n    if (element) {\n      switch (this._config.injectionMode) {\n        case InjectionMode.insertNode:\n          const { sheet } = element!;\n\n          try {\n            (sheet as CSSStyleSheet).insertRule(rule, (sheet as CSSStyleSheet).cssRules.length);\n          } catch (e) {\n            // The browser will throw exceptions on unsupported rules (such as a moz prefix in webkit.)\n            // We need to swallow the exceptions for this scenario, otherwise we'd need to filter\n            // which could be slower and bulkier.\n          }\n          break;\n\n        case InjectionMode.appendChild:\n          element.appendChild(document.createTextNode(rule));\n          break;\n      }\n    } else {\n      this._rules.push(rule);\n    }\n\n    if (this._config.onInsertRule) {\n      this._config.onInsertRule(rule);\n    }\n  }\n\n  /**\n   * Gets all rules registered with the stylesheet; only valid when\n   * using InsertionMode.none.\n   */\n  public getRules(includePreservedRules?: boolean): string {\n    return (\n      (includePreservedRules ? this._preservedRules.join('') : '') + this._rules.join('') + this._rulesToInsert.join('')\n    );\n  }\n\n  /**\n   * Resets the internal state of the stylesheet. Only used in server\n   * rendered scenarios where we're using InsertionMode.none.\n   */\n  public reset(): void {\n    this._rules = [];\n    this._rulesToInsert = [];\n    this._counter = 0;\n    this._classNameToArgs = {};\n    this._keyToClassName = {};\n\n    this._onResetCallbacks.forEach((callback: () => void) => callback());\n  }\n\n  // Forces the regeneration of incoming styles without totally resetting the stylesheet.\n  public resetKeys(): void {\n    this._keyToClassName = {};\n  }\n\n  private _getStyleElement(): HTMLStyleElement | undefined {\n    if (!this._styleElement && typeof document !== 'undefined') {\n      this._styleElement = this._createStyleElement();\n\n      if (!REUSE_STYLE_NODE) {\n        // Reset the style element on the next frame.\n        window.requestAnimationFrame(() => {\n          this._styleElement = undefined;\n        });\n      }\n    }\n    return this._styleElement;\n  }\n\n  private _createStyleElement(): HTMLStyleElement {\n    const head: HTMLHeadElement = document.head;\n    const styleElement = document.createElement('style');\n\n    styleElement.setAttribute('data-merge-styles', 'true');\n\n    const { cspSettings } = this._config;\n    if (cspSettings) {\n      if (cspSettings.nonce) {\n        styleElement.setAttribute('nonce', cspSettings.nonce);\n      }\n    }\n    if (this._lastStyleElement) {\n      // If the `nextElementSibling` is null, then the insertBefore will act as a regular append.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore#Syntax\n      head!.insertBefore(styleElement, this._lastStyleElement.nextElementSibling);\n    } else {\n      const placeholderStyleTag: Element | null = this._findPlaceholderStyleTag();\n\n      if (placeholderStyleTag) {\n        head!.insertBefore(styleElement, placeholderStyleTag.nextElementSibling);\n      } else {\n        head!.insertBefore(styleElement, head.childNodes[0]);\n      }\n    }\n    this._lastStyleElement = styleElement;\n\n    return styleElement;\n  }\n\n  private _findPlaceholderStyleTag(): Element | null {\n    const head: HTMLHeadElement = document.head;\n    if (head) {\n      return head.querySelector('style[data-merge-styles]');\n    }\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}