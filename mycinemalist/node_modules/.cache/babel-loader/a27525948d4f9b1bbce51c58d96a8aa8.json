{"ast":null,"code":"export var TextStyles = function TextStyles(props, theme) {\n  var as = props.as,\n      className = props.className,\n      block = props.block,\n      nowrap = props.nowrap,\n      variant = props.variant;\n  var fonts = theme.fonts;\n  var variantObject = fonts[variant || 'medium'];\n  return {\n    root: [theme.fonts.medium, {\n      display: block ? as === 'td' ? 'table-cell' : 'block' : 'inline',\n      fontFamily: variantObject.fontFamily,\n      fontSize: variantObject.fontSize,\n      fontWeight: variantObject.fontWeight,\n      color: variantObject.color,\n      mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n      webkitFontSmoothing: variantObject.WebkitFontSmoothing\n    }, nowrap && {\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    }, className]\n  };\n};","map":{"version":3,"mappings":"AAIA,OAAO,IAAMA,UAAU,GAA6B,SAAvCA,UAAuC,CAACC,KAAD,EAAoBC,KAApB,EAAiC;EAC3E;EAAA,IAAIC,2BAAJ;EAAA,IAAeC,mBAAf;EAAA,IAAsBC,qBAAtB;EAAA,IAA8BC,uBAA9B;EACA;EACR,IAAMC,aAAa,GAAGC,KAAK,CAACF,OAAO,IAAI,QAAZ,CAA3B;EAEA,OAAO;IACLG,IAAI,EAAE,CACJP,KAAK,CAACM,KAAN,CAAYE,MADR,EAEJ;MACEC,OAAO,EAAEP,KAAK,GAAIQ,EAAE,KAAK,IAAP,GAAc,YAAd,GAA6B,OAAjC,GAA4C,QAD5D;MAEEC,UAAU,EAAEN,aAAa,CAACM,UAF5B;MAGEC,QAAQ,EAAEP,aAAa,CAACO,QAH1B;MAIEC,UAAU,EAAER,aAAa,CAACQ,UAJ5B;MAKEC,KAAK,EAAET,aAAa,CAACS,KALvB;MAMEC,mBAAmB,EAAEV,aAAa,CAACW,mBANrC;MAOEC,mBAAmB,EAAEZ,aAAa,CAACa;IAPrC,CAFI,EAWJf,MAAM,IAAI;MACRgB,UAAU,EAAE,QADJ;MAERC,QAAQ,EAAE,QAFF;MAGRC,YAAY,EAAE;IAHN,CAXN,EAgBJpB,SAhBI;EADD,CAAP;AAoBD,CAzBM","names":["TextStyles","props","theme","className","block","nowrap","variant","variantObject","fonts","root","medium","display","as","fontFamily","fontSize","fontWeight","color","mozOsxFontSmoothing","MozOsxFontSmoothing","webkitFontSmoothing","WebkitFontSmoothing","whiteSpace","overflow","textOverflow"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Text\\Text.styles.ts"],"sourcesContent":["import { ITextComponent, ITextStyles, ITextStylesReturnType, ITextProps } from './Text.types';\n\nimport { ITheme } from '../../Styling';\n\nexport const TextStyles: ITextComponent['styles'] = (props: ITextProps, theme: ITheme): ITextStylesReturnType => {\n  const { as, className, block, nowrap, variant } = props;\n  const { fonts } = theme;\n  const variantObject = fonts[variant || 'medium'];\n\n  return {\n    root: [\n      theme.fonts.medium,\n      {\n        display: block ? (as === 'td' ? 'table-cell' : 'block') : 'inline',\n        fontFamily: variantObject.fontFamily,\n        fontSize: variantObject.fontSize,\n        fontWeight: variantObject.fontWeight,\n        color: variantObject.color,\n        mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n        webkitFontSmoothing: variantObject.WebkitFontSmoothing,\n      },\n      nowrap && {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n      className,\n    ],\n  } as ITextStyles;\n};\n"]},"metadata":{},"sourceType":"module"}