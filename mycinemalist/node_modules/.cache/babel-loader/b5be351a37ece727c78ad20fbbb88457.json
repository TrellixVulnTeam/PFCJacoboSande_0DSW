{"ast":null,"code":"import { getVirtualParent } from './getVirtualParent';\n/**\n * Gets the element which is the parent of a given element.\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\n * real DOM parent when present.\n *\n * @public\n */\n\nexport function getParent(child, allowVirtualParents) {\n  if (allowVirtualParents === void 0) {\n    allowVirtualParents = true;\n  }\n\n  return child && (allowVirtualParents && getVirtualParent(child) || child.parentNode && child.parentNode);\n}","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,QAAiC,oBAAjC;AACA;;;;;;;;AAOA,OAAM,SAAUC,SAAV,CAAoBC,KAApB,EAAwCC,mBAAxC,EAA2E;AAAnC;AAAAA;AAAmC;;AAC/E,SACED,KAAK,KACHC,mBAAmB,IAAIH,gBAAgB,CAACE,KAAD,CAAxC,IAAqDA,KAAK,CAACE,UAAN,IAAqBF,KAAK,CAACE,UAD5E,CADP;AAID","names":["getVirtualParent","getParent","child","allowVirtualParents","parentNode"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@fluentui\\dom-utilities\\src\\getParent.ts"],"sourcesContent":["import { getVirtualParent } from './getVirtualParent';\n/**\n * Gets the element which is the parent of a given element.\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\n * real DOM parent when present.\n *\n * @public\n */\nexport function getParent(child: HTMLElement, allowVirtualParents: boolean = true): HTMLElement | null {\n  return (\n    child &&\n    ((allowVirtualParents && getVirtualParent(child)) || (child.parentNode && (child.parentNode as HTMLElement)))\n  );\n}\n"]},"metadata":{},"sourceType":"module"}