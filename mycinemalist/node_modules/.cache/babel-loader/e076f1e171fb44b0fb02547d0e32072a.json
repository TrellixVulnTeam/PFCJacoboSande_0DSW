{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, EventGroup, classNamesFunction } from '../../Utilities';\nimport { initializeComponentRef } from '@uifabric/utilities';\nvar getClassNames = classNamesFunction();\nvar TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD = 5;\n/**\n * {@docCategory DocumentCard}\n */\n\nvar DocumentCardTitleBase =\n/** @class */\nfunction (_super) {\n  __extends(DocumentCardTitleBase, _super);\n\n  function DocumentCardTitleBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._titleElement = React.createRef();\n    _this._measureTitleElement = React.createRef(); // Truncate logic here way can't handle the case that chars with different widths are mixed very well.\n    // Let _shrinkTitle take care of that.\n\n    _this._truncateTitle = function () {\n      if (!_this.state.needMeasurement) {\n        return;\n      }\n\n      _this._async.requestAnimationFrame(_this._truncateWhenInAnimation);\n    };\n\n    _this._truncateWhenInAnimation = function () {\n      var originalTitle = _this.props.title;\n      var element = _this._measureTitleElement.current;\n\n      if (element) {\n        var style = getComputedStyle(element);\n\n        if (style.width && style.lineHeight && style.height) {\n          var clientWidth = element.clientWidth,\n              scrollWidth = element.scrollWidth;\n          var lines = Math.floor((parseInt(style.height, 10) + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD) / parseInt(style.lineHeight, 10)); // Use overflow to predict truncated length.\n          // Take an example.The text is: A text with A very long text that need to be truncated.ppt\n          // if container is like\n          // |A text with A very| long text that need to be truncated.ppt\n          // The scroll width is 58, (take two | out of length)\n          // The client width is 18\n          // the overflow rate is scrollWidth/clientWidth which should be close to length(overflowText)/length(visualText)\n          // And the length of remaining text should be truncated is (original Length)/(58/18) -3 = 15.\n          // So that the logic can predict truncated text well.\n          // first piece will be `A text `, * second piece will be `ated.ppt`\n          // |A text ...ated.ppt|\n\n          var overFlowRate = scrollWidth / (parseInt(style.width, 10) * lines);\n\n          if (overFlowRate > 1) {\n            var truncatedLength = originalTitle.length / overFlowRate - 3\n            /** Saved for separator */\n            ;\n            return _this.setState({\n              truncatedTitleFirstPiece: originalTitle.slice(0, truncatedLength / 2),\n              truncatedTitleSecondPiece: originalTitle.slice(originalTitle.length - truncatedLength / 2),\n              clientWidth: clientWidth,\n              needMeasurement: false\n            });\n          }\n        }\n      }\n\n      return _this.setState({\n        needMeasurement: false\n      });\n    };\n\n    _this._shrinkTitle = function () {\n      var _a = _this.state,\n          truncatedTitleFirstPiece = _a.truncatedTitleFirstPiece,\n          truncatedTitleSecondPiece = _a.truncatedTitleSecondPiece;\n\n      if (truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n        var titleElement = _this._titleElement.current;\n\n        if (!titleElement) {\n          return;\n        }\n\n        if (titleElement.scrollHeight > titleElement.clientHeight + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD || titleElement.scrollWidth > titleElement.clientWidth) {\n          _this.setState({\n            truncatedTitleFirstPiece: truncatedTitleFirstPiece.slice(0, truncatedTitleFirstPiece.length - 1),\n            truncatedTitleSecondPiece: truncatedTitleSecondPiece.slice(1)\n          });\n        }\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      truncatedTitleFirstPiece: '',\n      truncatedTitleSecondPiece: '',\n      previousTitle: props.title,\n      needMeasurement: !!props.shouldTruncate\n    };\n    return _this;\n  }\n\n  DocumentCardTitleBase.prototype.componentDidUpdate = function () {\n    if (this.props.title !== this.state.previousTitle) {\n      this.setState({\n        truncatedTitleFirstPiece: undefined,\n        truncatedTitleSecondPiece: undefined,\n        clientWidth: undefined,\n        previousTitle: this.props.title,\n        needMeasurement: !!this.props.shouldTruncate\n      });\n    }\n\n    this._events.off(window, 'resize', this._updateTruncation);\n\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n\n      requestAnimationFrame(this._shrinkTitle);\n\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  };\n\n  DocumentCardTitleBase.prototype.componentDidMount = function () {\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  };\n\n  DocumentCardTitleBase.prototype.componentWillUnmount = function () {\n    this._events.dispose();\n\n    this._async.dispose();\n  };\n\n  DocumentCardTitleBase.prototype.render = function () {\n    var _a = this.props,\n        title = _a.title,\n        shouldTruncate = _a.shouldTruncate,\n        showAsSecondaryTitle = _a.showAsSecondaryTitle,\n        styles = _a.styles,\n        theme = _a.theme,\n        className = _a.className;\n    var _b = this.state,\n        truncatedTitleFirstPiece = _b.truncatedTitleFirstPiece,\n        truncatedTitleSecondPiece = _b.truncatedTitleSecondPiece,\n        needMeasurement = _b.needMeasurement;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      showAsSecondaryTitle: showAsSecondaryTitle\n    });\n    var documentCardTitle;\n\n    if (needMeasurement) {\n      documentCardTitle = React.createElement(\"div\", {\n        className: this._classNames.root,\n        ref: this._measureTitleElement,\n        title: title,\n        style: {\n          whiteSpace: 'nowrap'\n        }\n      }, title);\n    } else if (shouldTruncate && truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      documentCardTitle = React.createElement(\"div\", {\n        className: this._classNames.root,\n        ref: this._titleElement,\n        title: title\n      }, truncatedTitleFirstPiece, \"\\u2026\", truncatedTitleSecondPiece);\n    } else {\n      documentCardTitle = React.createElement(\"div\", {\n        className: this._classNames.root,\n        ref: this._titleElement,\n        title: title\n      }, title);\n    }\n\n    return documentCardTitle;\n  };\n\n  DocumentCardTitleBase.prototype._updateTruncation = function () {\n    var _this = this;\n\n    this._async.requestAnimationFrame(function () {\n      // Only update truncation if the title's size has changed since the last time we truncated\n      if (_this._titleElement.current) {\n        var clientWidth = _this._titleElement.current.clientWidth; // Throttle truncation so that it doesn't happen during a window resize\n\n        clearTimeout(_this._titleTruncationTimer);\n\n        if (_this.state.clientWidth !== clientWidth) {\n          _this._titleTruncationTimer = _this._async.setTimeout(function () {\n            return _this.setState({\n              truncatedTitleFirstPiece: undefined,\n              truncatedTitleSecondPiece: undefined,\n              needMeasurement: true\n            });\n          }, 250);\n        }\n      }\n    });\n  };\n\n  return DocumentCardTitleBase;\n}(React.Component);\n\nexport { DocumentCardTitleBase };","map":{"version":3,"mappings":"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","names":["React","Async","EventGroup","classNamesFunction","initializeComponentRef","getClassNames","TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD","__extends","props","_super","_this","createRef","state","needMeasurement","_async","requestAnimationFrame","_truncateWhenInAnimation","originalTitle","title","element","_measureTitleElement","current","style","getComputedStyle","width","lineHeight","height","scrollWidth","lines","Math","floor","parseInt","overFlowRate","truncatedLength","length","setState","truncatedTitleFirstPiece","slice","truncatedTitleSecondPiece","clientWidth","titleElement","_titleElement","scrollHeight","clientHeight","_events","previousTitle","shouldTruncate","DocumentCardTitleBase","undefined","off","window","_updateTruncation","_truncateTitle","_shrinkTitle","on","dispose","showAsSecondaryTitle","styles","theme","className","_classNames","documentCardTitle","root","ref","whiteSpace","clearTimeout","_titleTruncationTimer","setTimeout","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\DocumentCard\\DocumentCardTitle.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Async, EventGroup, classNamesFunction } from '../../Utilities';\nimport {\n  IDocumentCardTitleProps,\n  IDocumentCardTitleStyleProps,\n  IDocumentCardTitleStyles,\n} from './DocumentCardTitle.types';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { initializeComponentRef } from '@uifabric/utilities';\n\nconst getClassNames = classNamesFunction<IDocumentCardTitleStyleProps, IDocumentCardTitleStyles>();\n\nexport interface IDocumentCardTitleState {\n  truncatedTitleFirstPiece?: string;\n  truncatedTitleSecondPiece?: string;\n  clientWidth?: number;\n  previousTitle: string;\n\n  /**\n   * In measuring, it will render a same style text with whiteSpace: 'nowrap', to get overflow rate.\n   * So that the logic can predict truncated text well.\n   */\n  needMeasurement: boolean;\n}\n\nconst TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD = 5;\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardTitleBase extends React.Component<IDocumentCardTitleProps, IDocumentCardTitleState> {\n  private _titleElement = React.createRef<HTMLDivElement>();\n  private _measureTitleElement = React.createRef<HTMLDivElement>();\n\n  private _titleTruncationTimer: number;\n  private _classNames: IProcessedStyleSet<IDocumentCardTitleStyles>;\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  constructor(props: IDocumentCardTitleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      truncatedTitleFirstPiece: '',\n      truncatedTitleSecondPiece: '',\n      previousTitle: props.title,\n      needMeasurement: !!props.shouldTruncate,\n    };\n  }\n\n  public componentDidUpdate(): void {\n    if (this.props.title !== this.state.previousTitle) {\n      this.setState({\n        truncatedTitleFirstPiece: undefined,\n        truncatedTitleSecondPiece: undefined,\n        clientWidth: undefined,\n        previousTitle: this.props.title,\n        needMeasurement: !!this.props.shouldTruncate,\n      });\n    }\n\n    this._events.off(window, 'resize', this._updateTruncation);\n\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n      requestAnimationFrame(this._shrinkTitle);\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  }\n\n  public componentDidMount(): void {\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { title, shouldTruncate, showAsSecondaryTitle, styles, theme, className } = this.props;\n    const { truncatedTitleFirstPiece, truncatedTitleSecondPiece, needMeasurement } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      showAsSecondaryTitle,\n    });\n\n    let documentCardTitle;\n    if (needMeasurement) {\n      documentCardTitle = (\n        <div\n          className={this._classNames.root}\n          ref={this._measureTitleElement}\n          title={title}\n          style={{ whiteSpace: 'nowrap' }}\n        >\n          {title}\n        </div>\n      );\n    } else if (shouldTruncate && truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      documentCardTitle = (\n        <div className={this._classNames.root} ref={this._titleElement} title={title}>\n          {truncatedTitleFirstPiece}\n          &hellip;\n          {truncatedTitleSecondPiece}\n        </div>\n      );\n    } else {\n      documentCardTitle = (\n        <div className={this._classNames.root} ref={this._titleElement} title={title}>\n          {title}\n        </div>\n      );\n    }\n    return documentCardTitle;\n  }\n\n  // Truncate logic here way can't handle the case that chars with different widths are mixed very well.\n  // Let _shrinkTitle take care of that.\n  private _truncateTitle = (): void => {\n    if (!this.state.needMeasurement) {\n      return;\n    }\n\n    this._async.requestAnimationFrame(this._truncateWhenInAnimation);\n  };\n\n  private _truncateWhenInAnimation: () => void = () => {\n    const originalTitle = this.props.title;\n    const element: HTMLDivElement | null = this._measureTitleElement.current;\n\n    if (element) {\n      const style: CSSStyleDeclaration = getComputedStyle(element);\n      if (style.width && style.lineHeight && style.height) {\n        const { clientWidth, scrollWidth } = element;\n        const lines: number = Math.floor(\n          (parseInt(style.height, 10) + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD) / parseInt(style.lineHeight, 10),\n        );\n\n        // Use overflow to predict truncated length.\n        // Take an example.The text is: A text with A very long text that need to be truncated.ppt\n        // if container is like\n        // |A text with A very| long text that need to be truncated.ppt\n        // The scroll width is 58, (take two | out of length)\n        // The client width is 18\n        // the overflow rate is scrollWidth/clientWidth which should be close to length(overflowText)/length(visualText)\n        // And the length of remaining text should be truncated is (original Length)/(58/18) -3 = 15.\n        // So that the logic can predict truncated text well.\n        // first piece will be `A text `, * second piece will be `ated.ppt`\n        // |A text ...ated.ppt|\n        const overFlowRate: number = scrollWidth / (parseInt(style.width, 10) * lines);\n\n        if (overFlowRate > 1) {\n          const truncatedLength: number = originalTitle.length / overFlowRate - 3 /** Saved for separator */;\n          return this.setState({\n            truncatedTitleFirstPiece: originalTitle.slice(0, truncatedLength / 2),\n            truncatedTitleSecondPiece: originalTitle.slice(originalTitle.length - truncatedLength / 2),\n            clientWidth,\n            needMeasurement: false,\n          });\n        }\n      }\n    }\n\n    return this.setState({ needMeasurement: false });\n  };\n\n  private _shrinkTitle: () => void = () => {\n    const { truncatedTitleFirstPiece, truncatedTitleSecondPiece } = this.state;\n    if (truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      const titleElement = this._titleElement.current;\n\n      if (!titleElement) {\n        return;\n      }\n\n      if (\n        titleElement.scrollHeight > titleElement.clientHeight + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD ||\n        titleElement.scrollWidth > titleElement.clientWidth\n      ) {\n        this.setState({\n          truncatedTitleFirstPiece: truncatedTitleFirstPiece.slice(0, truncatedTitleFirstPiece.length - 1),\n          truncatedTitleSecondPiece: truncatedTitleSecondPiece.slice(1),\n        });\n      }\n    }\n  };\n\n  private _updateTruncation(): void {\n    this._async.requestAnimationFrame(() => {\n      // Only update truncation if the title's size has changed since the last time we truncated\n      if (this._titleElement.current) {\n        const clientWidth: number = this._titleElement.current.clientWidth;\n        // Throttle truncation so that it doesn't happen during a window resize\n        clearTimeout(this._titleTruncationTimer);\n        if (this.state.clientWidth !== clientWidth) {\n          this._titleTruncationTimer = this._async.setTimeout(\n            () =>\n              this.setState({\n                truncatedTitleFirstPiece: undefined,\n                truncatedTitleSecondPiece: undefined,\n                needMeasurement: true,\n              }),\n            250,\n          );\n        }\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}