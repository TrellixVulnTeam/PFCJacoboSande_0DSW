{"ast":null,"code":"var _layersByHostId = {};\n\nvar _defaultHostSelector;\n/**\n * Register a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\n\n\nexport function registerLayer(hostId, callback) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(callback);\n}\n/**\n * Unregister a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\n\nexport function unregisterLayer(hostId, callback) {\n  if (_layersByHostId[hostId]) {\n    var idx = _layersByHostId[hostId].indexOf(callback);\n\n    if (idx >= 0) {\n      _layersByHostId[hostId].splice(idx, 1);\n\n      if (_layersByHostId[hostId].length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n}\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\n\nexport function notifyHostChanged(id) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(function (callback) {\n      return callback();\n    });\n  }\n}\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsey value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\n\nexport function setDefaultTarget(selector) {\n  _defaultHostSelector = selector;\n}\n/**\n * Get the default target selector when determining a host\n */\n\nexport function getDefaultTarget() {\n  return _defaultHostSelector;\n}","map":{"version":3,"mappings":"AAAA,IAAMA,eAAe,GAAyC,EAA9D;;AAEA,IAAIC,oBAAJ;AAEA;;;;;;;AAKA,OAAM,SAAUC,aAAV,CAAwBC,MAAxB,EAAwCC,QAAxC,EAA4D;EAChE,IAAI,CAACJ,eAAe,CAACG,MAAD,CAApB,EAA8B;IAC5BH,eAAe,CAACG,MAAD,CAAf,GAA0B,EAA1B;EACD;;EAEDH,eAAe,CAACG,MAAD,CAAf,CAAwBE,IAAxB,CAA6BD,QAA7B;AACD;AAED;;;;;;AAKA,OAAM,SAAUE,eAAV,CAA0BH,MAA1B,EAA0CC,QAA1C,EAA8D;EAClE,IAAIJ,eAAe,CAACG,MAAD,CAAnB,EAA6B;IAC3B,IAAMI,GAAG,GAAGP,eAAe,CAACG,MAAD,CAAf,CAAwBK,OAAxB,CAAgCJ,QAAhC,CAAZ;;IACA,IAAIG,GAAG,IAAI,CAAX,EAAc;MACZP,eAAe,CAACG,MAAD,CAAf,CAAwBM,MAAxB,CAA+BF,GAA/B,EAAoC,CAApC;;MACA,IAAIP,eAAe,CAACG,MAAD,CAAf,CAAwBO,MAAxB,KAAmC,CAAvC,EAA0C;QACxC,OAAOV,eAAe,CAACG,MAAD,CAAtB;MACD;IACF;EACF;AACF;AAED;;;;;AAIA,OAAM,SAAUQ,iBAAV,CAA4BC,EAA5B,EAAsC;EAC1C,IAAIZ,eAAe,CAACY,EAAD,CAAnB,EAAyB;IACvBZ,eAAe,CAACY,EAAD,CAAf,CAAoBC,OAApB,CAA4B,oBAAQ;MAAI,eAAQ,EAAR;IAAU,CAAlD;EACD;AACF;AAED;;;;;;;;;AAQA,OAAM,SAAUC,gBAAV,CAA2BC,QAA3B,EAA4C;EAChDd,oBAAoB,GAAGc,QAAvB;AACD;AAED;;;;AAGA,OAAM,SAAUC,gBAAV,GAA0B;EAC9B,OAAOf,oBAAP;AACD","names":["_layersByHostId","_defaultHostSelector","registerLayer","hostId","callback","push","unregisterLayer","idx","indexOf","splice","length","notifyHostChanged","id","forEach","setDefaultTarget","selector","getDefaultTarget"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Layer\\Layer.notification.ts"],"sourcesContent":["const _layersByHostId: { [hostId: string]: (() => void)[] } = {};\n\nlet _defaultHostSelector: string | undefined;\n\n/**\n * Register a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function registerLayer(hostId: string, callback: () => void) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(callback);\n}\n\n/**\n * Unregister a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function unregisterLayer(hostId: string, callback: () => void) {\n  if (_layersByHostId[hostId]) {\n    const idx = _layersByHostId[hostId].indexOf(callback);\n    if (idx >= 0) {\n      _layersByHostId[hostId].splice(idx, 1);\n      if (_layersByHostId[hostId].length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n}\n\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\nexport function notifyHostChanged(id: string) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(callback => callback());\n  }\n}\n\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsey value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\nexport function setDefaultTarget(selector?: string) {\n  _defaultHostSelector = selector;\n}\n\n/**\n * Get the default target selector when determining a host\n */\nexport function getDefaultTarget(): string | undefined {\n  return _defaultHostSelector;\n}\n"]},"metadata":{},"sourceType":"module"}