{"ast":null,"code":"import { DefaultPalette } from './colors/index';\nimport { DefaultEffects } from './effects/index';\nimport { DefaultFontStyles } from './fonts/index';\nimport { mergeThemes } from './mergeThemes';\nimport { DefaultSpacing } from './spacing/index';\nimport { makeSemanticColors } from './utilities/makeSemanticColors';\n/**\n * Creates a custom theme definition.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\n\nexport function createTheme(theme, depComments) {\n  if (theme === void 0) {\n    theme = {};\n  }\n\n  if (depComments === void 0) {\n    depComments = false;\n  }\n\n  var isInverted = !!theme.isInverted;\n  var baseTheme = {\n    palette: DefaultPalette,\n    effects: DefaultEffects,\n    fonts: DefaultFontStyles,\n    spacing: DefaultSpacing,\n    isInverted: isInverted,\n    disableGlobalClassNames: false,\n    semanticColors: makeSemanticColors(DefaultPalette, DefaultEffects, undefined, isInverted, depComments),\n    rtl: undefined\n  };\n  return mergeThemes(baseTheme, theme);\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,QAA+B,gBAA/B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,iBAAT,QAAkC,eAAlC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AAEA,SAASC,kBAAT,QAAmC,gCAAnC;AAEA;;;;;;AAKA,OAAM,SAAUC,WAAV,CAAsBC,KAAtB,EAAgDC,WAAhD,EAA4E;AAAtD;AAAAD;AAAwB;;AAAE;AAAAC;AAA4B;;AAChF,MAAMC,UAAU,GAAG,CAAC,CAACF,KAAK,CAACE,UAA3B;AACA,MAAMC,SAAS,GAAU;AACvBC,WAAO,EAAEX,cADc;AAEvBY,WAAO,EAAEX,cAFc;AAGvBY,SAAK,EAAEX,iBAHgB;AAIvBY,WAAO,EAAEV,cAJc;AAKvBK,cAAU,YALa;AAMvBM,2BAAuB,EAAE,KANF;AAOvBC,kBAAc,EAAEX,kBAAkB,CAACL,cAAD,EAAiBC,cAAjB,EAAiCgB,SAAjC,EAA4CR,UAA5C,EAAwDD,WAAxD,CAPX;AAQvBU,OAAG,EAAED;AARkB,GAAzB;AAWA,SAAOd,WAAW,CAACO,SAAD,EAAYH,KAAZ,CAAlB;AACD","names":["DefaultPalette","DefaultEffects","DefaultFontStyles","mergeThemes","DefaultSpacing","makeSemanticColors","createTheme","theme","depComments","isInverted","baseTheme","palette","effects","fonts","spacing","disableGlobalClassNames","semanticColors","undefined","rtl"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@fluentui\\theme\\src\\createTheme.ts"],"sourcesContent":["import { DefaultPalette } from './colors/index';\nimport { DefaultEffects } from './effects/index';\nimport { DefaultFontStyles } from './fonts/index';\nimport { mergeThemes } from './mergeThemes';\nimport { DefaultSpacing } from './spacing/index';\nimport { PartialTheme, Theme } from './types/index';\nimport { makeSemanticColors } from './utilities/makeSemanticColors';\n\n/**\n * Creates a custom theme definition.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function createTheme(theme: PartialTheme = {}, depComments: boolean = false): Theme {\n  const isInverted = !!theme.isInverted;\n  const baseTheme: Theme = {\n    palette: DefaultPalette,\n    effects: DefaultEffects,\n    fonts: DefaultFontStyles,\n    spacing: DefaultSpacing,\n    isInverted,\n    disableGlobalClassNames: false,\n    semanticColors: makeSemanticColors(DefaultPalette, DefaultEffects, undefined, isInverted, depComments),\n    rtl: undefined,\n  };\n\n  return mergeThemes(baseTheme, theme);\n}\n"]},"metadata":{},"sourceType":"module"}