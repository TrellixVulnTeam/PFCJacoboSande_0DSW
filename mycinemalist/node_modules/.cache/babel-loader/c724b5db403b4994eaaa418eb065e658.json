{"ast":null,"code":"import * as React from 'react';\nimport { getId } from '@uifabric/utilities/lib/getId';\n/**\n * Hook to generate a unique ID in the global scope (spanning across duplicate copies of the same library).\n *\n * @param prefix - Optional prefix for the ID\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\n *  without conditioning the hook call\n * @returns The ID\n */\n\nexport function useId(prefix, providedId) {\n  // getId should only be called once since it updates the global constant for the next ID value.\n  // (While an extra update isn't likely to cause problems in practice, it's better to avoid it.)\n  var ref = React.useRef(providedId);\n\n  if (!ref.current) {\n    ref.current = getId(prefix);\n  }\n\n  return ref.current;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,QAAsB,+BAAtB;AAEA;;;;;;;;;AAQA,OAAM,SAAUC,KAAV,CAAgBC,MAAhB,EAAiCC,UAAjC,EAAoD;EACxD;EACA;EACA,IAAMC,GAAG,GAAGL,KAAK,CAACM,MAAN,CAAiCF,UAAjC,CAAZ;;EACA,IAAI,CAACC,GAAG,CAACE,OAAT,EAAkB;IAChBF,GAAG,CAACE,OAAJ,GAAcN,KAAK,CAACE,MAAD,CAAnB;EACD;;EACD,OAAOE,GAAG,CAACE,OAAX;AACD","names":["React","getId","useId","prefix","providedId","ref","useRef","current"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\react-hooks\\src\\useId.ts"],"sourcesContent":["import * as React from 'react';\nimport { getId } from '@uifabric/utilities/lib/getId';\n\n/**\n * Hook to generate a unique ID in the global scope (spanning across duplicate copies of the same library).\n *\n * @param prefix - Optional prefix for the ID\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\n *  without conditioning the hook call\n * @returns The ID\n */\nexport function useId(prefix?: string, providedId?: string): string {\n  // getId should only be called once since it updates the global constant for the next ID value.\n  // (While an extra update isn't likely to cause problems in practice, it's better to avoid it.)\n  const ref = React.useRef<string | undefined>(providedId);\n  if (!ref.current) {\n    ref.current = getId(prefix);\n  }\n  return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}