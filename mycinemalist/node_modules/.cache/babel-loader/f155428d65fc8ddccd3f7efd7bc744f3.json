{"ast":null,"code":"import { on } from '@uifabric/utilities';\nimport * as React from 'react';\n/**\n * Hook to attach an event handler on mount and handle cleanup.\n * @param element - Element (or ref to an element) to attach the event handler to\n * @param eventName - The event to attach a handler for\n * @param callback - The handler for the event\n * @param useCapture - Whether or not to attach the handler for the capture phase\n */\n\nexport function useOnEvent(element, eventName, callback, useCapture) {\n  // Use a ref for the callback to prevent repeatedly attaching/unattaching callbacks that are unstable across renders\n  var callbackRef = React.useRef(callback);\n  callbackRef.current = callback;\n  React.useEffect(function () {\n    var actualElement = element && 'current' in element ? element.current : element;\n\n    if (!actualElement) {\n      return;\n    }\n\n    var dispose = on(actualElement, eventName, function (ev) {\n      return callbackRef.current(ev);\n    }, useCapture);\n    return dispose;\n  }, [element, eventName, useCapture]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,EAAT,QAAmB,qBAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA;;;;;;;;AAOA,OAAM,SAAUC,UAAV,CACJC,OADI,EAEJC,SAFI,EAGJC,QAHI,EAIJC,UAJI,EAIgB;AAEpB;AACA,MAAMC,WAAW,GAAGN,KAAK,CAACO,MAAN,CAAaH,QAAb,CAApB;AACAE,aAAW,CAACE,OAAZ,GAAsBJ,QAAtB;AAEAJ,OAAK,CAACS,SAAN,CAAgB;AACd,QAAMC,aAAa,GAAGR,OAAO,IAAI,aAAaA,OAAxB,GAAkCA,OAAO,CAACM,OAA1C,GAAoDN,OAA1E;;AACA,QAAI,CAACQ,aAAL,EAAoB;AAClB;AACD;;AAED,QAAMC,OAAO,GAAGZ,EAAE,CAACW,aAAD,EAAgBP,SAAhB,EAA2B,UAACS,EAAD,EAAW;AAAK,wBAAW,CAACJ,OAAZ,CAAoBI,EAApB;AAAuB,KAAlE,EAAoEP,UAApE,CAAlB;AACA,WAAOM,OAAP;AACD,GARD,EAQG,CAACT,OAAD,EAAUC,SAAV,EAAqBE,UAArB,CARH;AASD","names":["on","React","useOnEvent","element","eventName","callback","useCapture","callbackRef","useRef","current","useEffect","actualElement","dispose","ev"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\react-hooks\\src\\useOnEvent.ts"],"sourcesContent":["import { on } from '@uifabric/utilities';\nimport * as React from 'react';\n\n/**\n * Hook to attach an event handler on mount and handle cleanup.\n * @param element - Element (or ref to an element) to attach the event handler to\n * @param eventName - The event to attach a handler for\n * @param callback - The handler for the event\n * @param useCapture - Whether or not to attach the handler for the capture phase\n */\nexport function useOnEvent<TElement extends Element, TEvent extends Event>(\n  element: React.RefObject<TElement | undefined | null> | TElement | Window | Document | undefined | null,\n  eventName: string,\n  callback: (ev: TEvent) => void,\n  useCapture?: boolean,\n) {\n  // Use a ref for the callback to prevent repeatedly attaching/unattaching callbacks that are unstable across renders\n  const callbackRef = React.useRef(callback);\n  callbackRef.current = callback;\n\n  React.useEffect(() => {\n    const actualElement = element && 'current' in element ? element.current : element;\n    if (!actualElement) {\n      return;\n    }\n\n    const dispose = on(actualElement, eventName, (ev: TEvent) => callbackRef.current(ev), useCapture);\n    return dispose;\n  }, [element, eventName, useCapture]);\n}\n"]},"metadata":{},"sourceType":"module"}