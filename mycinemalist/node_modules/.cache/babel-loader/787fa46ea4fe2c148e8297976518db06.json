{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { mergeOverflows, ktpTargetFromSequences } from '../../utilities/keytips/KeytipUtils';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../ContextualMenu';\nimport { KeytipContent } from './KeytipContent';\nimport { getCalloutStyles, getCalloutOffsetStyles } from './Keytip.styles';\n/**\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\n */\n\nvar Keytip =\n/** @class */\nfunction (_super) {\n  __extends(Keytip, _super);\n\n  function Keytip() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Keytip.prototype.render = function () {\n    var _a = this.props,\n        keySequences = _a.keySequences,\n        offset = _a.offset,\n        overflowSetSequence = _a.overflowSetSequence;\n    var calloutProps = this.props.calloutProps;\n    var keytipTarget; // Take into consideration the overflow sequence\n\n    if (overflowSetSequence) {\n      keytipTarget = ktpTargetFromSequences(mergeOverflows(keySequences, overflowSetSequence));\n    } else {\n      keytipTarget = ktpTargetFromSequences(keySequences);\n    }\n\n    if (offset) {\n      // Set callout to top-left corner, will be further positioned in\n      // getCalloutOffsetStyles\n      calloutProps = __assign(__assign({}, calloutProps), {\n        coverTarget: true,\n        directionalHint: DirectionalHint.topLeftEdge\n      });\n    }\n\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\n      // Default callout directional hint to BottomCenter\n      calloutProps = __assign(__assign({}, calloutProps), {\n        directionalHint: DirectionalHint.bottomCenter\n      });\n    }\n\n    return React.createElement(Callout, __assign({}, calloutProps, {\n      isBeakVisible: false,\n      doNotLayer: true,\n      minPagePadding: 0,\n      styles: offset ? getCalloutOffsetStyles(offset) : getCalloutStyles,\n      preventDismissOnScroll: true,\n      target: keytipTarget\n    }), React.createElement(KeytipContent, __assign({}, this.props)));\n  };\n\n  return Keytip;\n}(React.Component);\n\nexport { Keytip };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,EAAyBC,sBAAzB,QAAuD,qCAAvD;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,gBAAT,EAA2BC,sBAA3B,QAAyD,iBAAzD;AAEA;;;;AAGA;AAAA;AAAA;EAA4BC;;EAA5B;;EA6CC;;EA5CQC,0BAAP;IACQ;IAAA,IAAEC,8BAAF;IAAA,IAAgBC,kBAAhB;IAAA,IAAwBC,4CAAxB;IACA;IAEN,IAAIC,YAAJ,CAJF,CAKE;;IACA,IAAID,mBAAJ,EAAyB;MACvBC,YAAY,GAAGX,sBAAsB,CAACD,cAAc,CAACS,YAAD,EAAeE,mBAAf,CAAf,CAArC;IACD,CAFD,MAEO;MACLC,YAAY,GAAGX,sBAAsB,CAACQ,YAAD,CAArC;IACD;;IAED,IAAIC,MAAJ,EAAY;MACV;MACA;MACAG,YAAY,yBACPA,YADO,GACK;QACfC,WAAW,EAAE,IADE;QAEfC,eAAe,EAAEZ,eAAe,CAACa;MAFlB,CADL,CAAZ;IAKD;;IAED,IAAI,CAACH,YAAD,IAAiBA,YAAY,CAACE,eAAb,KAAiCE,SAAtD,EAAiE;MAC/D;MACAJ,YAAY,yBACPA,YADO,GACK;QACfE,eAAe,EAAEZ,eAAe,CAACe;MADlB,CADL,CAAZ;IAID;;IAED,OACEnB,oBAACG,OAAD,EAAQiB,aACFN,YADE,EACU;MAChBO,aAAa,EAAE,KADC;MAEhBC,UAAU,EAAE,IAFI;MAGhBC,cAAc,EAAE,CAHA;MAIhBC,MAAM,EAAEb,MAAM,GAAGJ,sBAAsB,CAACI,MAAD,CAAzB,GAAoCL,gBAJlC;MAKhBmB,sBAAsB,EAAE,IALR;MAMhBC,MAAM,EAAEb;IANQ,CADV,CAAR,EASEb,oBAACK,aAAD,EAAce,aAAK,KAAKO,KAAV,CAAd,CATF,CADF;EAaD,CA3CM;;EA4CT;AAAC,CA7CD,CAA4B3B,KAAK,CAAC4B,SAAlC","names":["React","mergeOverflows","ktpTargetFromSequences","Callout","DirectionalHint","KeytipContent","getCalloutStyles","getCalloutOffsetStyles","__extends","Keytip","keySequences","offset","overflowSetSequence","keytipTarget","calloutProps","coverTarget","directionalHint","topLeftEdge","undefined","bottomCenter","__assign","isBeakVisible","doNotLayer","minPagePadding","styles","preventDismissOnScroll","target","props","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Keytip\\Keytip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { mergeOverflows, ktpTargetFromSequences } from '../../utilities/keytips/KeytipUtils';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../ContextualMenu';\nimport { IKeytipProps } from './Keytip.types';\nimport { KeytipContent } from './KeytipContent';\nimport { getCalloutStyles, getCalloutOffsetStyles } from './Keytip.styles';\n\n/**\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\n */\nexport class Keytip extends React.Component<IKeytipProps, {}> {\n  public render(): JSX.Element {\n    const { keySequences, offset, overflowSetSequence } = this.props;\n    let { calloutProps } = this.props;\n\n    let keytipTarget: string;\n    // Take into consideration the overflow sequence\n    if (overflowSetSequence) {\n      keytipTarget = ktpTargetFromSequences(mergeOverflows(keySequences, overflowSetSequence));\n    } else {\n      keytipTarget = ktpTargetFromSequences(keySequences);\n    }\n\n    if (offset) {\n      // Set callout to top-left corner, will be further positioned in\n      // getCalloutOffsetStyles\n      calloutProps = {\n        ...calloutProps,\n        coverTarget: true,\n        directionalHint: DirectionalHint.topLeftEdge,\n      };\n    }\n\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\n      // Default callout directional hint to BottomCenter\n      calloutProps = {\n        ...calloutProps,\n        directionalHint: DirectionalHint.bottomCenter,\n      };\n    }\n\n    return (\n      <Callout\n        {...calloutProps}\n        isBeakVisible={false}\n        doNotLayer={true}\n        minPagePadding={0}\n        styles={offset ? getCalloutOffsetStyles(offset) : getCalloutStyles}\n        preventDismissOnScroll={true}\n        target={keytipTarget}\n      >\n        <KeytipContent {...this.props} />\n      </Callout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}