{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { EventGroup, getId } from '../../Utilities';\nimport { KeytipEvents } from '../../utilities/keytips/KeytipConstants';\n/**\n * This class is responsible for handling registering, updating, and unregistering of keytips\n */\n\nvar KeytipManager =\n/** @class */\nfunction () {\n  function KeytipManager() {\n    this.keytips = {};\n    this.persistedKeytips = {};\n    this.sequenceMapping = {}; // This is (and should be) updated and kept in sync\n    // with the inKeytipMode in KeytipLayer.\n\n    this.inKeytipMode = false; // Boolean that gets checked before entering keytip mode by the KeytipLayer\n    // Used for an override in special cases (e.g. Disable entering keytip mode when a modal is shown)\n\n    this.shouldEnterKeytipMode = true; // Boolean to indicate whether to delay firing an event to update subscribers of\n    // keytip data changed.\n\n    this.delayUpdatingKeytipChange = false;\n  }\n  /**\n   * Static function to get singleton KeytipManager instance\n   *\n   * @returns Singleton KeytipManager instance\n   */\n\n\n  KeytipManager.getInstance = function () {\n    return this._instance;\n  };\n  /**\n   * Initialization code to set set parameters to define\n   * how the KeytipManager handles keytip data.\n   *\n   * @param delayUpdatingKeytipChange - T/F if we should delay notifiying keytip subscribers\n   * of keytip changes\n   */\n\n\n  KeytipManager.prototype.init = function (delayUpdatingKeytipChange) {\n    this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;\n  };\n  /**\n   * Registers a keytip\n   *\n   * @param keytipProps - Keytip to register\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   * @returns Unique ID for this keytip\n   */\n\n\n  KeytipManager.prototype.register = function (keytipProps, persisted) {\n    if (persisted === void 0) {\n      persisted = false;\n    }\n\n    var props = keytipProps;\n\n    if (!persisted) {\n      // Add the overflowSetSequence if necessary\n      props = this.addParentOverflow(keytipProps);\n      this.sequenceMapping[props.keySequences.toString()] = props;\n    } // Create a unique keytip\n\n\n    var uniqueKeytip = this._getUniqueKtp(props); // Add to dictionary\n\n\n    persisted ? this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip : this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip; // We only want to add something new if we are currently showing keytip mode\n\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      var event_1 = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;\n      EventGroup.raise(this, event_1, {\n        keytip: props,\n        uniqueID: uniqueKeytip.uniqueID\n      });\n    }\n\n    return uniqueKeytip.uniqueID;\n  };\n  /**\n   * Update a keytip\n   *\n   * @param keytipProps - Keytip to update\n   * @param uniqueID - Unique ID of this keytip\n   */\n\n\n  KeytipManager.prototype.update = function (keytipProps, uniqueID) {\n    var newKeytipProps = this.addParentOverflow(keytipProps);\n\n    var uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);\n\n    var oldKeyTip = this.keytips[uniqueID];\n\n    if (oldKeyTip) {\n      // Update everything except 'visible'\n      uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible; // Update keytip in this.keytips\n\n      this.keytips[uniqueID] = uniqueKeytip; // Update the sequence to be up to date\n\n      delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];\n      this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip; // Raise event only if we are currently in keytip mode\n\n      if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n        EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {\n          keytip: uniqueKeytip.keytip,\n          uniqueID: uniqueKeytip.uniqueID\n        });\n      }\n    }\n  };\n  /**\n   * Unregisters a keytip\n   *\n   * @param keytipToRemove - IKeytipProps of the keytip to remove\n   * @param uniqueID - Unique ID of this keytip\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   */\n\n\n  KeytipManager.prototype.unregister = function (keytipToRemove, uniqueID, persisted) {\n    if (persisted === void 0) {\n      persisted = false;\n    }\n\n    persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];\n    !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];\n    var event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED; // Update keytips only if we're in keytip mode\n\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      EventGroup.raise(this, event, {\n        keytip: keytipToRemove,\n        uniqueID: uniqueID\n      });\n    }\n  };\n  /**\n   * Manual call to enter keytip mode\n   */\n\n\n  KeytipManager.prototype.enterKeytipMode = function () {\n    EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);\n  };\n  /**\n   * Manual call to exit keytip mode\n   */\n\n\n  KeytipManager.prototype.exitKeytipMode = function () {\n    EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);\n  };\n  /**\n   * Gets all IKeytipProps from this.keytips\n   *\n   * @returns All keytips stored in the manager\n   */\n\n\n  KeytipManager.prototype.getKeytips = function () {\n    var _this = this;\n\n    return Object.keys(this.keytips).map(function (key) {\n      return _this.keytips[key].keytip;\n    });\n  };\n  /**\n   * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it\n   *\n   * @param keytipProps - Keytip props to add overflowSetSequence to if necessary\n   * @returns - Modified keytip props, if needed to be modified\n   */\n\n\n  KeytipManager.prototype.addParentOverflow = function (keytipProps) {\n    var fullSequence = __spreadArrays(keytipProps.keySequences);\n\n    fullSequence.pop();\n\n    if (fullSequence.length !== 0) {\n      var parentKeytip = this.sequenceMapping[fullSequence.toString()];\n\n      if (parentKeytip && parentKeytip.overflowSetSequence) {\n        return __assign(__assign({}, keytipProps), {\n          overflowSetSequence: parentKeytip.overflowSetSequence\n        });\n      }\n    }\n\n    return keytipProps;\n  };\n  /**\n   * Public function to bind for overflow items that have a submenu\n   */\n\n\n  KeytipManager.prototype.menuExecute = function (overflowButtonSequences, keytipSequences) {\n    EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {\n      overflowButtonSequences: overflowButtonSequences,\n      keytipSequences: keytipSequences\n    });\n  };\n  /**\n   * Creates an IUniqueKeytip object\n   *\n   * @param keytipProps - IKeytipProps\n   * @param uniqueID - Unique ID, will default to the next unique ID if not passed\n   * @returns IUniqueKeytip object\n   */\n\n\n  KeytipManager.prototype._getUniqueKtp = function (keytipProps, uniqueID) {\n    if (uniqueID === void 0) {\n      uniqueID = getId();\n    }\n\n    return {\n      keytip: __assign({}, keytipProps),\n      uniqueID: uniqueID\n    };\n  };\n\n  KeytipManager._instance = new KeytipManager();\n  return KeytipManager;\n}();\n\nexport { KeytipManager };","map":{"version":3,"mappings":";AACA,SAASA,UAAT,EAAqBC,KAArB,QAAkC,iBAAlC;AACA,SAASC,YAAT,QAA6B,yCAA7B;AAOA;;;;AAGA;AAAA;AAAA;AAAA;AAGS,mBAA4C,EAA5C;AACA,4BAAqD,EAArD;AACA,2BAAmD,EAAnD,CALT,CAOE;AACA;;AACO,wBAAe,KAAf,CATT,CAWE;AACA;;AACO,iCAAwB,IAAxB,CAbT,CAeE;AACA;;AACO,qCAA4B,KAA5B;AA0KR;AAxKC;;;;;;;AAKcC,8BAAd;AACE,WAAO,KAAKC,SAAZ;AACD,GAFa;AAId;;;;;;;;;AAOOD,iCAAP,UAAYE,yBAAZ,EAA8C;AAC5C,SAAKA,yBAAL,GAAiCA,yBAAjC;AACD,GAFM;AAIP;;;;;;;;;AAOOF,qCAAP,UAAgBG,WAAhB,EAA2CC,SAA3C,EAAqE;AAA1B;AAAAA;AAA0B;;AACnE,QAAIC,KAAK,GAAiBF,WAA1B;;AACA,QAAI,CAACC,SAAL,EAAgB;AACd;AACAC,WAAK,GAAG,KAAKC,iBAAL,CAAuBH,WAAvB,CAAR;AACA,WAAKI,eAAL,CAAqBF,KAAK,CAACG,YAAN,CAAmBC,QAAnB,EAArB,IAAsDJ,KAAtD;AACD,KANkE,CAOnE;;;AACA,QAAMK,YAAY,GAAkB,KAAKC,aAAL,CAAmBN,KAAnB,CAApC,CARmE,CASnE;;;AACAD,aAAS,GACJ,KAAKQ,gBAAL,CAAsBF,YAAY,CAACG,QAAnC,IAA+CH,YAD3C,GAEJ,KAAKI,OAAL,CAAaJ,YAAY,CAACG,QAA1B,IAAsCH,YAF3C,CAVmE,CAcnE;;AACA,QAAI,KAAKK,YAAL,IAAqB,CAAC,KAAKb,yBAA/B,EAA0D;AACxD,UAAMc,OAAK,GAAGZ,SAAS,GAAGL,YAAY,CAACkB,sBAAhB,GAAyClB,YAAY,CAACmB,YAA7E;AACArB,gBAAU,CAACsB,KAAX,CAAiB,IAAjB,EAAuBH,OAAvB,EAA8B;AAC5BI,cAAM,EAAEf,KADoB;AAE5BQ,gBAAQ,EAAEH,YAAY,CAACG;AAFK,OAA9B;AAID;;AAED,WAAOH,YAAY,CAACG,QAApB;AACD,GAxBM;AA0BP;;;;;;;;AAMOb,mCAAP,UAAcG,WAAd,EAAyCU,QAAzC,EAAyD;AACvD,QAAMQ,cAAc,GAAG,KAAKf,iBAAL,CAAuBH,WAAvB,CAAvB;;AACA,QAAMO,YAAY,GAAG,KAAKC,aAAL,CAAmBU,cAAnB,EAAmCR,QAAnC,CAArB;;AACA,QAAMS,SAAS,GAAG,KAAKR,OAAL,CAAaD,QAAb,CAAlB;;AACA,QAAIS,SAAJ,EAAe;AACb;AACAZ,kBAAY,CAACU,MAAb,CAAoBG,OAApB,GAA8BD,SAAS,CAACF,MAAV,CAAiBG,OAA/C,CAFa,CAGb;;AACA,WAAKT,OAAL,CAAaD,QAAb,IAAyBH,YAAzB,CAJa,CAMb;;AACA,aAAO,KAAKH,eAAL,CAAqBe,SAAS,CAACF,MAAV,CAAiBZ,YAAjB,CAA8BC,QAA9B,EAArB,CAAP;AACA,WAAKF,eAAL,CAAqBG,YAAY,CAACU,MAAb,CAAoBZ,YAApB,CAAiCC,QAAjC,EAArB,IAAoEC,YAAY,CAACU,MAAjF,CARa,CAUb;;AACA,UAAI,KAAKL,YAAL,IAAqB,CAAC,KAAKb,yBAA/B,EAA0D;AACxDL,kBAAU,CAACsB,KAAX,CAAiB,IAAjB,EAAuBpB,YAAY,CAACyB,cAApC,EAAoD;AAClDJ,gBAAM,EAAEV,YAAY,CAACU,MAD6B;AAElDP,kBAAQ,EAAEH,YAAY,CAACG;AAF2B,SAApD;AAID;AACF;AACF,GAtBM;AAwBP;;;;;;;;;AAOOb,uCAAP,UAAkByB,cAAlB,EAAgDZ,QAAhD,EAAkET,SAAlE,EAA4F;AAA1B;AAAAA;AAA0B;;AAC1FA,aAAS,GAAG,OAAO,KAAKQ,gBAAL,CAAsBC,QAAtB,CAAV,GAA4C,OAAO,KAAKC,OAAL,CAAaD,QAAb,CAA5D;AACA,KAACT,SAAD,IAAc,OAAO,KAAKG,eAAL,CAAqBkB,cAAc,CAACjB,YAAf,CAA4BC,QAA5B,EAArB,CAArB;AAEA,QAAMiB,KAAK,GAAGtB,SAAS,GAAGL,YAAY,CAAC4B,wBAAhB,GAA2C5B,YAAY,CAAC6B,cAA/E,CAJ0F,CAK1F;;AACA,QAAI,KAAKb,YAAL,IAAqB,CAAC,KAAKb,yBAA/B,EAA0D;AACxDL,gBAAU,CAACsB,KAAX,CAAiB,IAAjB,EAAuBO,KAAvB,EAA8B;AAC5BN,cAAM,EAAEK,cADoB;AAE5BZ,gBAAQ,EAAEA;AAFkB,OAA9B;AAID;AACF,GAZM;AAcP;;;;;AAGOb,4CAAP;AACEH,cAAU,CAACsB,KAAX,CAAiB,IAAjB,EAAuBpB,YAAY,CAAC8B,iBAApC;AACD,GAFM;AAIP;;;;;AAGO7B,2CAAP;AACEH,cAAU,CAACsB,KAAX,CAAiB,IAAjB,EAAuBpB,YAAY,CAAC+B,gBAApC;AACD,GAFM;AAIP;;;;;;;AAKO9B,uCAAP;AAAA;;AACE,WAAO+B,MAAM,CAACC,IAAP,CAAY,KAAKlB,OAAjB,EAA0BmB,GAA1B,CAA8B,eAAG;AAAI,kBAAI,CAACnB,OAAL,CAAaoB,GAAb,EAAkBd,MAAlB;AAAwB,KAA7D,CAAP;AACD,GAFM;AAIP;;;;;;;;AAMOpB,8CAAP,UAAyBG,WAAzB,EAAkD;AAChD,QAAMgC,YAAY,kBAAOhC,WAAW,CAACK,YAAnB,CAAlB;;AACA2B,gBAAY,CAACC,GAAb;;AACA,QAAID,YAAY,CAACE,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,UAAMC,YAAY,GAAG,KAAK/B,eAAL,CAAqB4B,YAAY,CAAC1B,QAAb,EAArB,CAArB;;AACA,UAAI6B,YAAY,IAAIA,YAAY,CAACC,mBAAjC,EAAsD;AACpD,qCACKpC,WADL,GACgB;AACdoC,6BAAmB,EAAED,YAAY,CAACC;AADpB,SADhB;AAID;AACF;;AACD,WAAOpC,WAAP;AACD,GAbM;AAeP;;;;;AAGOH,wCAAP,UAAmBwC,uBAAnB,EAAsDC,eAAtD,EAA+E;AAC7E5C,cAAU,CAACsB,KAAX,CAAiB,IAAjB,EAAuBpB,YAAY,CAAC2C,wBAApC,EAA8D;AAC5DF,6BAAuB,yBADqC;AAE5DC,qBAAe;AAF6C,KAA9D;AAID,GALM;AAOP;;;;;;;;;AAOQzC,0CAAR,UAAsBG,WAAtB,EAAiDU,QAAjD,EAA2E;AAA1B;AAAAA,iBAAmBf,KAAK,EAAxB;AAA0B;;AACzE,WAAO;AAAEsB,YAAM,eAAOjB,WAAP,CAAR;AAA8BU,cAAQ;AAAtC,KAAP;AACD,GAFO;;AAvLOb,4BAA2B,IAAIA,aAAJ,EAA3B;AA0LjB;AAAC,CA3LD;;SAAaA","names":["EventGroup","getId","KeytipEvents","KeytipManager","_instance","delayUpdatingKeytipChange","keytipProps","persisted","props","addParentOverflow","sequenceMapping","keySequences","toString","uniqueKeytip","_getUniqueKtp","persistedKeytips","uniqueID","keytips","inKeytipMode","event_1","PERSISTED_KEYTIP_ADDED","KEYTIP_ADDED","raise","keytip","newKeytipProps","oldKeyTip","visible","KEYTIP_UPDATED","keytipToRemove","event","PERSISTED_KEYTIP_REMOVED","KEYTIP_REMOVED","ENTER_KEYTIP_MODE","EXIT_KEYTIP_MODE","Object","keys","map","key","fullSequence","pop","length","parentKeytip","overflowSetSequence","overflowButtonSequences","keytipSequences","PERSISTED_KEYTIP_EXECUTE"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\utilities\\src\\utilities\\keytips\\KeytipManager.ts"],"sourcesContent":["import { IKeytipProps } from '../../Keytip';\nimport { EventGroup, getId } from '../../Utilities';\nimport { KeytipEvents } from '../../utilities/keytips/KeytipConstants';\n\nexport interface IUniqueKeytip {\n  uniqueID: string;\n  keytip: IKeytipProps;\n}\n\n/**\n * This class is responsible for handling registering, updating, and unregistering of keytips\n */\nexport class KeytipManager {\n  private static _instance: KeytipManager = new KeytipManager();\n\n  public keytips: { [key: string]: IUniqueKeytip } = {};\n  public persistedKeytips: { [key: string]: IUniqueKeytip } = {};\n  public sequenceMapping: { [key: string]: IKeytipProps } = {};\n\n  // This is (and should be) updated and kept in sync\n  // with the inKeytipMode in KeytipLayer.\n  public inKeytipMode = false;\n\n  // Boolean that gets checked before entering keytip mode by the KeytipLayer\n  // Used for an override in special cases (e.g. Disable entering keytip mode when a modal is shown)\n  public shouldEnterKeytipMode = true;\n\n  // Boolean to indicate whether to delay firing an event to update subscribers of\n  // keytip data changed.\n  public delayUpdatingKeytipChange = false;\n\n  /**\n   * Static function to get singleton KeytipManager instance\n   *\n   * @returns Singleton KeytipManager instance\n   */\n  public static getInstance(): KeytipManager {\n    return this._instance;\n  }\n\n  /**\n   * Initialization code to set set parameters to define\n   * how the KeytipManager handles keytip data.\n   *\n   * @param delayUpdatingKeytipChange - T/F if we should delay notifiying keytip subscribers\n   * of keytip changes\n   */\n  public init(delayUpdatingKeytipChange: boolean) {\n    this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;\n  }\n\n  /**\n   * Registers a keytip\n   *\n   * @param keytipProps - Keytip to register\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   * @returns Unique ID for this keytip\n   */\n  public register(keytipProps: IKeytipProps, persisted: boolean = false): string {\n    let props: IKeytipProps = keytipProps;\n    if (!persisted) {\n      // Add the overflowSetSequence if necessary\n      props = this.addParentOverflow(keytipProps);\n      this.sequenceMapping[props.keySequences.toString()] = props;\n    }\n    // Create a unique keytip\n    const uniqueKeytip: IUniqueKeytip = this._getUniqueKtp(props);\n    // Add to dictionary\n    persisted\n      ? (this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip)\n      : (this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip);\n\n    // We only want to add something new if we are currently showing keytip mode\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      const event = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;\n      EventGroup.raise(this, event, {\n        keytip: props,\n        uniqueID: uniqueKeytip.uniqueID,\n      });\n    }\n\n    return uniqueKeytip.uniqueID;\n  }\n\n  /**\n   * Update a keytip\n   *\n   * @param keytipProps - Keytip to update\n   * @param uniqueID - Unique ID of this keytip\n   */\n  public update(keytipProps: IKeytipProps, uniqueID: string): void {\n    const newKeytipProps = this.addParentOverflow(keytipProps);\n    const uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);\n    const oldKeyTip = this.keytips[uniqueID];\n    if (oldKeyTip) {\n      // Update everything except 'visible'\n      uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;\n      // Update keytip in this.keytips\n      this.keytips[uniqueID] = uniqueKeytip;\n\n      // Update the sequence to be up to date\n      delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];\n      this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;\n\n      // Raise event only if we are currently in keytip mode\n      if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n        EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {\n          keytip: uniqueKeytip.keytip,\n          uniqueID: uniqueKeytip.uniqueID,\n        });\n      }\n    }\n  }\n\n  /**\n   * Unregisters a keytip\n   *\n   * @param keytipToRemove - IKeytipProps of the keytip to remove\n   * @param uniqueID - Unique ID of this keytip\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   */\n  public unregister(keytipToRemove: IKeytipProps, uniqueID: string, persisted: boolean = false): void {\n    persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];\n    !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];\n\n    const event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;\n    // Update keytips only if we're in keytip mode\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      EventGroup.raise(this, event, {\n        keytip: keytipToRemove,\n        uniqueID: uniqueID,\n      });\n    }\n  }\n\n  /**\n   * Manual call to enter keytip mode\n   */\n  public enterKeytipMode(): void {\n    EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);\n  }\n\n  /**\n   * Manual call to exit keytip mode\n   */\n  public exitKeytipMode(): void {\n    EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);\n  }\n\n  /**\n   * Gets all IKeytipProps from this.keytips\n   *\n   * @returns All keytips stored in the manager\n   */\n  public getKeytips(): IKeytipProps[] {\n    return Object.keys(this.keytips).map(key => this.keytips[key].keytip);\n  }\n\n  /**\n   * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it\n   *\n   * @param keytipProps - Keytip props to add overflowSetSequence to if necessary\n   * @returns - Modified keytip props, if needed to be modified\n   */\n  public addParentOverflow(keytipProps: IKeytipProps): IKeytipProps {\n    const fullSequence = [...keytipProps.keySequences];\n    fullSequence.pop();\n    if (fullSequence.length !== 0) {\n      const parentKeytip = this.sequenceMapping[fullSequence.toString()];\n      if (parentKeytip && parentKeytip.overflowSetSequence) {\n        return {\n          ...keytipProps,\n          overflowSetSequence: parentKeytip.overflowSetSequence,\n        };\n      }\n    }\n    return keytipProps;\n  }\n\n  /**\n   * Public function to bind for overflow items that have a submenu\n   */\n  public menuExecute(overflowButtonSequences: string[], keytipSequences: string[]) {\n    EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {\n      overflowButtonSequences,\n      keytipSequences,\n    });\n  }\n\n  /**\n   * Creates an IUniqueKeytip object\n   *\n   * @param keytipProps - IKeytipProps\n   * @param uniqueID - Unique ID, will default to the next unique ID if not passed\n   * @returns IUniqueKeytip object\n   */\n  private _getUniqueKtp(keytipProps: IKeytipProps, uniqueID: string = getId()): IUniqueKeytip {\n    return { keytip: { ...keytipProps }, uniqueID };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}