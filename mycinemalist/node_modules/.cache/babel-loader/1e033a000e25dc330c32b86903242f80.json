{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nvar getClassNames = classNamesFunction();\n\nvar SpinnerBase =\n/** @class */\nfunction (_super) {\n  __extends(SpinnerBase, _super);\n\n  function SpinnerBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SpinnerBase.prototype.render = function () {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n        type = _a.type,\n        size = _a.size,\n        ariaLabel = _a.ariaLabel,\n        ariaLive = _a.ariaLive,\n        styles = _a.styles,\n        label = _a.label,\n        theme = _a.theme,\n        className = _a.className,\n        labelPosition = _a.labelPosition;\n    var statusMessage = ariaLabel;\n    var nativeProps = getNativeProps(this.props, divProperties, ['size']); // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n\n    var styleSize = size;\n\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      size: styleSize,\n      className: className,\n      labelPosition: labelPosition\n    });\n    return React.createElement(\"div\", __assign({}, nativeProps, {\n      className: classNames.root\n    }), React.createElement(\"div\", {\n      className: classNames.circle\n    }), label && React.createElement(\"div\", {\n      className: classNames.label\n    }, label), statusMessage && React.createElement(\"div\", {\n      role: \"status\",\n      \"aria-live\": ariaLive\n    }, React.createElement(DelayedRender, null, React.createElement(\"div\", {\n      className: classNames.screenReaderText\n    }, statusMessage))));\n  };\n\n  SpinnerBase.defaultProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom'\n  };\n  return SpinnerBase;\n}(React.Component);\n\nexport { SpinnerBase };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAA4DC,WAA5D,EAAyEC,WAAzE,QAA4F,iBAA5F;AACA,SAASC,kBAAT,EAA6BC,aAA7B,EAA4CC,cAA5C,EAA4DC,aAA5D,QAAiF,iBAAjF;AAEA,IAAMC,aAAa,GAAGJ,kBAAkB,EAAxC;;AAEA;AAAA;AAAA;EAAiCK;;EAAjC;;EA2CC;;EApCQC,+BAAP;IACE;IACM;IAAA,IAAEC,cAAF;IAAA,IAAQC,cAAR;IAAA,IAAcC,wBAAd;IAAA,IAAyBC,sBAAzB;IAAA,IAAmCC,kBAAnC;IAAA,IAA2CC,gBAA3C;IAAA,IAAkDC,gBAAlD;IAAA,IAAyDC,wBAAzD;IAAA,IAAoEC,gCAApE;IACN,IAAMC,aAAa,GAAGP,SAAtB;IACA,IAAMQ,WAAW,GAAGf,cAAc,CAAuC,KAAKgB,KAA5C,EAAmDf,aAAnD,EAAkE,CAAC,MAAD,CAAlE,CAAlC,CAJF,CAME;IACA;IACA;;IACA,IAAIgB,SAAS,GAAGX,IAAhB;;IACA,IAAIW,SAAS,KAAKC,SAAd,IAA2Bb,IAAI,KAAKa,SAAxC,EAAmD;MACjD;MACAD,SAAS,GAAGZ,IAAI,KAAKT,WAAW,CAACuB,KAArB,GAA6BtB,WAAW,CAACsB,KAAzC,GAAiDtB,WAAW,CAACuB,MAAzE;IACD;;IAED,IAAMC,UAAU,GAAGnB,aAAa,CAACO,MAAD,EAAU;MACxCE,KAAK,EAAEA,KADiC;MAExCL,IAAI,EAAEW,SAFkC;MAGxCL,SAAS,WAH+B;MAIxCC,aAAa;IAJ2B,CAAV,CAAhC;IAOA,OACElB,wCAASoB,WAAT,EAAoB;MAAEH,SAAS,EAAES,UAAU,CAACC;IAAxB,CAApB,GACE3B;MAAKiB,SAAS,EAAES,UAAU,CAACE;IAA3B,EADF,EAEGb,KAAK,IAAIf;MAAKiB,SAAS,EAAES,UAAU,CAACX;IAA3B,GAAmCA,KAAnC,CAFZ,EAGGI,aAAa,IACZnB;MAAK6B,IAAI,EAAC,QAAV;MAAkB,aAAYhB;IAA9B,GACEb,oBAACI,aAAD,EAAc,IAAd,EACEJ;MAAKiB,SAAS,EAAES,UAAU,CAACI;IAA3B,GAA8CX,aAA9C,CADF,CADF,CAJJ,CADF;EAaD,CAnCM;;EANOV,2BAA8B;IAC1CE,IAAI,EAAET,WAAW,CAACuB,MADwB;IAE1CZ,QAAQ,EAAE,QAFgC;IAG1CK,aAAa,EAAE;EAH2B,CAA9B;EA0ChB;AAAC,CA3CD,CAAiClB,KAAK,CAAC+B,SAAvC;;SAAatB","names":["React","SpinnerType","SpinnerSize","classNamesFunction","DelayedRender","getNativeProps","divProperties","getClassNames","__extends","SpinnerBase","type","size","ariaLabel","ariaLive","styles","label","theme","className","labelPosition","statusMessage","nativeProps","props","styleSize","undefined","large","medium","classNames","root","circle","role","screenReaderText","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Spinner\\Spinner.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles, SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // eslint-disable-next-line deprecation/deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}