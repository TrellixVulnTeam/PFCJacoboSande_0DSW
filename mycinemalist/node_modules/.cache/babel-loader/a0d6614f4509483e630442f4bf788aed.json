{"ast":null,"code":"import { extractStyleParts } from './extractStyleParts';\nimport { getStyleOptions } from './StyleOptionsState';\nimport { styleToClassName } from './styleToClassName';\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\n\nexport function mergeStyles() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return mergeCss(args, getStyleOptions());\n}\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n * Accepts a set of options that will be used when calculating styles.\n *\n * @public\n */\n\nexport function mergeCss(args, options) {\n  var styleArgs = args instanceof Array ? args : [args];\n\n  var _a = extractStyleParts(styleArgs),\n      classes = _a.classes,\n      objects = _a.objects;\n\n  if (objects.length) {\n    classes.push(styleToClassName(options || {}, objects));\n  }\n\n  return classes.join(' ');\n}","map":{"version":3,"mappings":"AAAA,SAASA,iBAAT,QAAkC,qBAAlC;AAGA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA;;;;;;AAKA,OAAM,SAAUC,WAAV,GAAqB;EAAC;;OAAA,yCAAgE;IAAhEC;;;EAC1B,OAAOC,QAAQ,CAACD,IAAD,EAAOH,eAAe,EAAtB,CAAf;AACD;AAED;;;;;;;AAMA,OAAM,SAAUI,QAAV,CACJD,IADI,EAEJE,OAFI,EAEmB;EAEvB,IAAMC,SAAS,GAAGH,IAAI,YAAYI,KAAhB,GAAwBJ,IAAxB,GAA+B,CAACA,IAAD,CAAjD;;EACM;EAAA,IAAEK,oBAAF;EAAA,IAAWC,oBAAX;;EAEN,IAAIA,OAAO,CAACC,MAAZ,EAAoB;IAClBF,OAAO,CAACG,IAAR,CAAaV,gBAAgB,CAACI,OAAO,IAAI,EAAZ,EAAgBI,OAAhB,CAA7B;EACD;;EAED,OAAOD,OAAO,CAACI,IAAR,CAAa,GAAb,CAAP;AACD","names":["extractStyleParts","getStyleOptions","styleToClassName","mergeStyles","args","mergeCss","options","styleArgs","Array","classes","objects","length","push","join"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\merge-styles\\src\\mergeStyles.ts"],"sourcesContent":["import { extractStyleParts } from './extractStyleParts';\nimport { IStyle, IStyleBaseArray } from './IStyle';\nimport { IStyleOptions } from './IStyleOptions';\nimport { getStyleOptions } from './StyleOptionsState';\nimport { styleToClassName } from './styleToClassName';\n\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\nexport function mergeStyles(...args: (IStyle | IStyleBaseArray | false | null | undefined)[]): string {\n  return mergeCss(args, getStyleOptions());\n}\n\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n * Accepts a set of options that will be used when calculating styles.\n *\n * @public\n */\nexport function mergeCss(\n  args: (IStyle | IStyleBaseArray | false | null | undefined) | (IStyle | IStyleBaseArray | false | null | undefined)[],\n  options?: IStyleOptions,\n): string {\n  const styleArgs = args instanceof Array ? args : [args];\n  const { classes, objects } = extractStyleParts(styleArgs);\n\n  if (objects.length) {\n    classes.push(styleToClassName(options || {}, objects));\n  }\n\n  return classes.join(' ');\n}\n"]},"metadata":{},"sourceType":"module"}