{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { warnDeprecations, KeyCodes, getId, getNativeProps, divProperties, classNamesFunction, warn, initializeComponentRef } from '../../Utilities';\nimport { CommandButton } from '../../Button';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { PivotItem } from './PivotItem';\nimport { PivotLinkFormat } from './Pivot.types';\nimport { PivotLinkSize } from './Pivot.types';\nimport { Icon } from '../../Icon';\nvar getClassNames = classNamesFunction();\nvar PivotName = 'Pivot';\n/**\n *  Usage:\n *\n *     <Pivot>\n *       <PivotItem headerText=\"Foo\">\n *         <Label>Pivot #1</Label>\n *       </PivotItem>\n *       <PivotItem headerText=\"Bar\">\n *         <Label>Pivot #2</Label>\n *       </PivotItem>\n *       <PivotItem headerText=\"Bas\">\n *         <Label>Pivot #3</Label>\n *       </PivotItem>\n *     </Pivot>\n */\n\nvar PivotBase =\n/** @class */\nfunction (_super) {\n  __extends(PivotBase, _super);\n\n  function PivotBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusZone = React.createRef();\n\n    _this._renderPivotLink = function (linkCollection, link, selectedKey) {\n      var itemKey = link.itemKey,\n          headerButtonProps = link.headerButtonProps;\n      var tabId = linkCollection.keyToTabIdMapping[itemKey];\n      var onRenderItemLink = link.onRenderItemLink;\n      var linkContent;\n      var isSelected = selectedKey === itemKey;\n\n      if (onRenderItemLink) {\n        linkContent = onRenderItemLink(link, _this._renderLinkContent);\n      } else {\n        linkContent = _this._renderLinkContent(link);\n      }\n\n      var contentString = link.headerText || '';\n      contentString += link.itemCount ? ' (' + link.itemCount + ')' : ''; // Adding space supplementary for icon\n\n      contentString += link.itemIcon ? ' xx' : '';\n      return React.createElement(CommandButton, __assign({}, headerButtonProps, {\n        id: tabId,\n        key: itemKey,\n        className: isSelected ? _this._classNames.linkIsSelected : _this._classNames.link,\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick: _this._onLinkClick.bind(_this, itemKey),\n        // eslint-disable-next-line react/jsx-no-bind\n        onKeyDown: _this._onKeyDown.bind(_this, itemKey),\n        \"aria-label\": link.ariaLabel,\n        role: \"tab\",\n        \"aria-selected\": isSelected,\n        name: link.headerText,\n        keytipProps: link.keytipProps,\n        \"data-content\": contentString\n      }), linkContent);\n    };\n\n    _this._renderLinkContent = function (link) {\n      var itemCount = link.itemCount,\n          itemIcon = link.itemIcon,\n          headerText = link.headerText;\n      var classNames = _this._classNames;\n      return React.createElement(\"span\", {\n        className: classNames.linkContent\n      }, itemIcon !== undefined && React.createElement(\"span\", {\n        className: classNames.icon\n      }, React.createElement(Icon, {\n        iconName: itemIcon\n      })), headerText !== undefined && React.createElement(\"span\", {\n        className: classNames.text\n      }, \" \", link.headerText), itemCount !== undefined && React.createElement(\"span\", {\n        className: classNames.count\n      }, \" (\", itemCount, \")\"));\n    };\n\n    initializeComponentRef(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations(PivotName, props, {\n        initialSelectedKey: 'defaultSelectedKey',\n        initialSelectedIndex: 'defaultSelectedIndex'\n      });\n    }\n\n    _this._pivotId = getId(PivotName);\n\n    var links = _this._getPivotLinks(props).links; // eslint-disable-next-line deprecation/deprecation\n\n\n    var _a = props.defaultSelectedKey,\n        defaultSelectedKey = _a === void 0 ? props.initialSelectedKey : _a,\n        _b = props.defaultSelectedIndex,\n        defaultSelectedIndex = _b === void 0 ? props.initialSelectedIndex : _b;\n    var selectedKey;\n\n    if (defaultSelectedKey) {\n      selectedKey = defaultSelectedKey;\n    } else if (typeof defaultSelectedIndex === 'number') {\n      selectedKey = links[defaultSelectedIndex].itemKey;\n    } else if (links.length) {\n      selectedKey = links[0].itemKey;\n    }\n\n    _this.state = {\n      selectedKey: selectedKey\n    };\n    return _this;\n  }\n  /**\n   * Sets focus to the first pivot tab.\n   */\n\n\n  PivotBase.prototype.focus = function () {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  };\n\n  PivotBase.prototype.render = function () {\n    var _this = this;\n\n    var linkCollection = this._getPivotLinks(this.props);\n\n    var selectedKey = this._getSelectedKey(linkCollection);\n\n    var divProps = getNativeProps(this.props, divProperties);\n    this._classNames = this._getClassNames(this.props);\n    return React.createElement(\"div\", __assign({\n      role: \"toolbar\"\n    }, divProps), this._renderPivotLinks(linkCollection, selectedKey), selectedKey && linkCollection.links.map(function (link) {\n      return (link.alwaysRender === true || selectedKey === link.itemKey) && _this._renderPivotItem(linkCollection, link.itemKey, selectedKey === link.itemKey);\n    }));\n  };\n\n  PivotBase.prototype._getSelectedKey = function (linkCollection) {\n    var propsSelectedKey = this.props.selectedKey;\n\n    if (this._isKeyValid(linkCollection, propsSelectedKey) || propsSelectedKey === null) {\n      return propsSelectedKey;\n    }\n\n    var stateSelectedKey = this.state.selectedKey;\n\n    if (this._isKeyValid(linkCollection, stateSelectedKey)) {\n      return stateSelectedKey;\n    }\n\n    if (linkCollection.links.length) {\n      return linkCollection.links[0].itemKey;\n    }\n\n    return undefined;\n  };\n  /**\n   * Renders the set of links to route between pivots\n   */\n\n\n  PivotBase.prototype._renderPivotLinks = function (linkCollection, selectedKey) {\n    var _this = this;\n\n    var items = linkCollection.links.map(function (l) {\n      return _this._renderPivotLink(linkCollection, l, selectedKey);\n    });\n    return React.createElement(FocusZone, {\n      className: this._classNames.root,\n      role: \"tablist\",\n      componentRef: this._focusZone,\n      direction: FocusZoneDirection.horizontal\n    }, items);\n  };\n  /**\n   * Renders a Pivot Item\n   */\n\n\n  PivotBase.prototype._renderPivotItem = function (linkCollection, itemKey, isActive) {\n    if (this.props.headersOnly || !itemKey) {\n      return null;\n    }\n\n    var index = linkCollection.keyToIndexMapping[itemKey];\n    var selectedTabId = linkCollection.keyToTabIdMapping[itemKey];\n    return React.createElement(\"div\", {\n      role: \"tabpanel\",\n      hidden: !isActive,\n      key: itemKey,\n      \"aria-hidden\": !isActive,\n      \"aria-labelledby\": selectedTabId,\n      className: this._classNames.itemContainer\n    }, React.Children.toArray(this.props.children)[index]);\n  };\n  /**\n   * Gets the set of PivotLinks as array of IPivotItemProps\n   * The set of Links is determined by child components of type PivotItem\n   */\n\n\n  PivotBase.prototype._getPivotLinks = function (props) {\n    var _this = this;\n\n    var result = {\n      links: [],\n      keyToIndexMapping: {},\n      keyToTabIdMapping: {}\n    };\n    React.Children.map(React.Children.toArray(props.children), function (child, index) {\n      if (_isPivotItem(child)) {\n        var pivotItem = child;\n\n        var _a = pivotItem.props,\n            linkText = _a.linkText,\n            pivotItemProps = __rest(_a, [\"linkText\"]);\n\n        var itemKey = pivotItem.props.itemKey || index.toString();\n        result.links.push(__assign(__assign({\n          // Use linkText (deprecated) if headerText is not provided\n          headerText: linkText\n        }, pivotItemProps), {\n          itemKey: itemKey\n        }));\n        result.keyToIndexMapping[itemKey] = index;\n        result.keyToTabIdMapping[itemKey] = _this._getTabId(itemKey, index);\n      } else {\n        warn('The children of a Pivot component must be of type PivotItem to be rendered.');\n      }\n    });\n    return result;\n  };\n  /**\n   * Generates the Id for the tab button.\n   */\n\n\n  PivotBase.prototype._getTabId = function (itemKey, index) {\n    if (this.props.getTabId) {\n      return this.props.getTabId(itemKey, index);\n    }\n\n    return this._pivotId + (\"-Tab\" + index);\n  };\n  /**\n   * whether the key exists in the pivot items.\n   */\n\n\n  PivotBase.prototype._isKeyValid = function (linkCollection, itemKey) {\n    return itemKey !== undefined && itemKey !== null && linkCollection.keyToIndexMapping[itemKey] !== undefined;\n  };\n  /**\n   * Handles the onClick event on PivotLinks\n   */\n\n\n  PivotBase.prototype._onLinkClick = function (itemKey, ev) {\n    ev.preventDefault();\n\n    this._updateSelectedItem(itemKey, ev);\n  };\n  /**\n   * Handle the onKeyDown event on the PivotLinks\n   */\n\n\n  PivotBase.prototype._onKeyDown = function (itemKey, ev) {\n    if (ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n\n      this._updateSelectedItem(itemKey);\n    }\n  };\n  /**\n   * Updates the state with the new selected index\n   */\n\n\n  PivotBase.prototype._updateSelectedItem = function (itemKey, ev) {\n    this.setState({\n      selectedKey: itemKey\n    });\n\n    var linkCollection = this._getPivotLinks(this.props);\n\n    if (this.props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {\n      var index = linkCollection.keyToIndexMapping[itemKey]; // React.Element<any> cannot directly convert to PivotItem.\n\n      var item = React.Children.toArray(this.props.children)[index];\n\n      if (_isPivotItem(item)) {\n        this.props.onLinkClick(item, ev);\n      }\n    }\n  };\n\n  PivotBase.prototype._getClassNames = function (props) {\n    var theme = props.theme;\n    var rootIsLarge = props.linkSize === PivotLinkSize.large;\n    var rootIsTabs = props.linkFormat === PivotLinkFormat.tabs;\n    return getClassNames(props.styles, {\n      theme: theme,\n      rootIsLarge: rootIsLarge,\n      rootIsTabs: rootIsTabs\n    });\n  };\n\n  return PivotBase;\n}(React.Component);\n\nexport { PivotBase };\n\nfunction _isPivotItem(item) {\n  // In theory, we should be able to just check item.type === PivotItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return !!item && typeof item === 'object' && !!item.type && // Casting as an any to avoid [ object Object ] errors.\n  item.type.name === PivotItem.name;\n}","map":{"version":3,"mappings":"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","names":["React","warnDeprecations","KeyCodes","getId","getNativeProps","divProperties","classNamesFunction","warn","initializeComponentRef","CommandButton","FocusZone","FocusZoneDirection","PivotItem","PivotLinkFormat","PivotLinkSize","Icon","getClassNames","PivotName","__extends","props","_super","_this","createRef","linkCollection","link","selectedKey","headerButtonProps","tabId","keyToTabIdMapping","itemKey","linkContent","isSelected","onRenderItemLink","_renderLinkContent","contentString","headerText","itemCount","itemIcon","__assign","id","key","className","_classNames","linkIsSelected","onClick","_onLinkClick","bind","onKeyDown","_onKeyDown","ariaLabel","role","name","keytipProps","classNames","undefined","icon","iconName","text","count","process","env","NODE_ENV","initialSelectedKey","initialSelectedIndex","_pivotId","links","_getPivotLinks","_b","defaultSelectedIndex","defaultSelectedKey","length","state","PivotBase","_focusZone","current","focus","_getSelectedKey","divProps","_getClassNames","_renderPivotLinks","map","alwaysRender","_renderPivotItem","_isKeyValid","propsSelectedKey","stateSelectedKey","items","_renderPivotLink","l","root","componentRef","direction","horizontal","isActive","headersOnly","index","keyToIndexMapping","selectedTabId","hidden","itemContainer","Children","toArray","children","result","child","_isPivotItem","pivotItem","_a","linkText","pivotItemProps","toString","push","_getTabId","getTabId","ev","preventDefault","_updateSelectedItem","which","enter","setState","onLinkClick","item","rootIsLarge","linkSize","large","rootIsTabs","linkFormat","tabs","styles","theme","Component","type"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Pivot\\Pivot.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  warnDeprecations,\n  KeyCodes,\n  getId,\n  getNativeProps,\n  divProperties,\n  classNamesFunction,\n  warn,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { CommandButton } from '../../Button';\nimport { IPivotProps, IPivotStyleProps, IPivotStyles } from './Pivot.types';\nimport { IPivotItemProps } from './PivotItem.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { PivotItem } from './PivotItem';\nimport { PivotLinkFormat } from './Pivot.types';\nimport { PivotLinkSize } from './Pivot.types';\nimport { Icon } from '../../Icon';\n\nconst getClassNames = classNamesFunction<IPivotStyleProps, IPivotStyles>();\nconst PivotName = 'Pivot';\n\nexport interface IPivotState {\n  selectedKey: string | undefined;\n}\n\ntype PivotLinkCollection = {\n  links: IPivotItemProps[];\n  keyToIndexMapping: { [key: string]: number };\n  keyToTabIdMapping: { [key: string]: string };\n};\n\n/**\n *  Usage:\n *\n *     <Pivot>\n *       <PivotItem headerText=\"Foo\">\n *         <Label>Pivot #1</Label>\n *       </PivotItem>\n *       <PivotItem headerText=\"Bar\">\n *         <Label>Pivot #2</Label>\n *       </PivotItem>\n *       <PivotItem headerText=\"Bas\">\n *         <Label>Pivot #3</Label>\n *       </PivotItem>\n *     </Pivot>\n */\nexport class PivotBase extends React.Component<IPivotProps, IPivotState> {\n  private _pivotId: string;\n  private _focusZone = React.createRef<FocusZone>();\n  private _classNames: { [key in keyof IPivotStyles]: string };\n\n  constructor(props: IPivotProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations(PivotName, props, {\n        initialSelectedKey: 'defaultSelectedKey',\n        initialSelectedIndex: 'defaultSelectedIndex',\n      });\n    }\n\n    this._pivotId = getId(PivotName);\n    const links: IPivotItemProps[] = this._getPivotLinks(props).links;\n\n    // eslint-disable-next-line deprecation/deprecation\n    const { defaultSelectedKey = props.initialSelectedKey, defaultSelectedIndex = props.initialSelectedIndex } = props;\n\n    let selectedKey: string | undefined;\n\n    if (defaultSelectedKey) {\n      selectedKey = defaultSelectedKey;\n    } else if (typeof defaultSelectedIndex === 'number') {\n      selectedKey = links[defaultSelectedIndex].itemKey!;\n    } else if (links.length) {\n      selectedKey = links[0].itemKey!;\n    }\n\n    this.state = {\n      selectedKey,\n    };\n  }\n\n  /**\n   * Sets focus to the first pivot tab.\n   */\n  public focus(): void {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    const linkCollection = this._getPivotLinks(this.props);\n    const selectedKey = this._getSelectedKey(linkCollection);\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    this._classNames = this._getClassNames(this.props);\n\n    return (\n      <div role=\"toolbar\" {...divProps}>\n        {this._renderPivotLinks(linkCollection, selectedKey)}\n        {selectedKey &&\n          linkCollection.links.map(\n            link =>\n              (link.alwaysRender === true || selectedKey === link.itemKey) &&\n              this._renderPivotItem(linkCollection, link.itemKey, selectedKey === link.itemKey),\n          )}\n      </div>\n    );\n  }\n\n  private _getSelectedKey(linkCollection: PivotLinkCollection) {\n    const { selectedKey: propsSelectedKey } = this.props;\n\n    if (this._isKeyValid(linkCollection, propsSelectedKey) || propsSelectedKey === null) {\n      return propsSelectedKey;\n    }\n\n    const { selectedKey: stateSelectedKey } = this.state;\n    if (this._isKeyValid(linkCollection, stateSelectedKey)) {\n      return stateSelectedKey;\n    }\n\n    if (linkCollection.links.length) {\n      return linkCollection.links[0].itemKey;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Renders the set of links to route between pivots\n   */\n  private _renderPivotLinks(linkCollection: PivotLinkCollection, selectedKey: string | null | undefined): JSX.Element {\n    const items = linkCollection.links.map(l => this._renderPivotLink(linkCollection, l, selectedKey));\n\n    return (\n      <FocusZone\n        className={this._classNames.root}\n        role=\"tablist\"\n        componentRef={this._focusZone}\n        direction={FocusZoneDirection.horizontal}\n      >\n        {items}\n      </FocusZone>\n    );\n  }\n\n  private _renderPivotLink = (\n    linkCollection: PivotLinkCollection,\n    link: IPivotItemProps,\n    selectedKey: string | null | undefined,\n  ): JSX.Element => {\n    const { itemKey, headerButtonProps } = link;\n    const tabId = linkCollection.keyToTabIdMapping[itemKey!];\n    const { onRenderItemLink } = link;\n    let linkContent: JSX.Element | null;\n    const isSelected: boolean = selectedKey === itemKey;\n\n    if (onRenderItemLink) {\n      linkContent = onRenderItemLink(link, this._renderLinkContent);\n    } else {\n      linkContent = this._renderLinkContent(link);\n    }\n\n    let contentString = link.headerText || '';\n    contentString += link.itemCount ? ' (' + link.itemCount + ')' : '';\n    // Adding space supplementary for icon\n    contentString += link.itemIcon ? ' xx' : '';\n\n    return (\n      <CommandButton\n        {...headerButtonProps}\n        id={tabId}\n        key={itemKey}\n        className={isSelected ? this._classNames.linkIsSelected : this._classNames.link}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={this._onLinkClick.bind(this, itemKey)}\n        // eslint-disable-next-line react/jsx-no-bind\n        onKeyDown={this._onKeyDown.bind(this, itemKey)}\n        aria-label={link.ariaLabel}\n        role=\"tab\"\n        aria-selected={isSelected}\n        name={link.headerText}\n        keytipProps={link.keytipProps}\n        data-content={contentString}\n      >\n        {linkContent}\n      </CommandButton>\n    );\n  };\n\n  private _renderLinkContent = (link: IPivotItemProps): JSX.Element => {\n    const { itemCount, itemIcon, headerText } = link;\n    const classNames = this._classNames;\n\n    return (\n      <span className={classNames.linkContent}>\n        {itemIcon !== undefined && (\n          <span className={classNames.icon}>\n            <Icon iconName={itemIcon} />\n          </span>\n        )}\n        {headerText !== undefined && <span className={classNames.text}> {link.headerText}</span>}\n        {itemCount !== undefined && <span className={classNames.count}> ({itemCount})</span>}\n      </span>\n    );\n  };\n\n  /**\n   * Renders a Pivot Item\n   */\n  private _renderPivotItem(\n    linkCollection: PivotLinkCollection,\n    itemKey: string | undefined,\n    isActive: boolean,\n  ): JSX.Element | null {\n    if (this.props.headersOnly || !itemKey) {\n      return null;\n    }\n\n    const index = linkCollection.keyToIndexMapping[itemKey];\n    const selectedTabId = linkCollection.keyToTabIdMapping[itemKey];\n\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={!isActive}\n        key={itemKey}\n        aria-hidden={!isActive}\n        aria-labelledby={selectedTabId}\n        className={this._classNames.itemContainer}\n      >\n        {React.Children.toArray(this.props.children)[index]}\n      </div>\n    );\n  }\n\n  /**\n   * Gets the set of PivotLinks as array of IPivotItemProps\n   * The set of Links is determined by child components of type PivotItem\n   */\n  private _getPivotLinks(props: IPivotProps): PivotLinkCollection {\n    const result: PivotLinkCollection = {\n      links: [],\n      keyToIndexMapping: {},\n      keyToTabIdMapping: {},\n    };\n\n    React.Children.map(React.Children.toArray(props.children), (child: React.ReactChild, index: number) => {\n      if (_isPivotItem(child)) {\n        const pivotItem = child;\n        const { linkText, ...pivotItemProps } = pivotItem.props;\n        const itemKey = pivotItem.props.itemKey || index.toString();\n\n        result.links.push({\n          // Use linkText (deprecated) if headerText is not provided\n          headerText: linkText,\n          ...pivotItemProps,\n          itemKey: itemKey,\n        });\n        result.keyToIndexMapping[itemKey] = index;\n        result.keyToTabIdMapping[itemKey] = this._getTabId(itemKey, index);\n      } else {\n        warn('The children of a Pivot component must be of type PivotItem to be rendered.');\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Generates the Id for the tab button.\n   */\n  private _getTabId(itemKey: string, index: number): string {\n    if (this.props.getTabId) {\n      return this.props.getTabId(itemKey, index);\n    }\n\n    return this._pivotId + `-Tab${index}`;\n  }\n\n  /**\n   * whether the key exists in the pivot items.\n   */\n  private _isKeyValid(linkCollection: PivotLinkCollection, itemKey: string | null | undefined): boolean {\n    return itemKey !== undefined && itemKey !== null && linkCollection.keyToIndexMapping[itemKey] !== undefined;\n  }\n\n  /**\n   * Handles the onClick event on PivotLinks\n   */\n  private _onLinkClick(itemKey: string, ev: React.MouseEvent<HTMLElement>): void {\n    ev.preventDefault();\n    this._updateSelectedItem(itemKey, ev);\n  }\n\n  /**\n   * Handle the onKeyDown event on the PivotLinks\n   */\n  private _onKeyDown(itemKey: string, ev: React.KeyboardEvent<HTMLElement>): void {\n    if (ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n      this._updateSelectedItem(itemKey);\n    }\n  }\n\n  /**\n   * Updates the state with the new selected index\n   */\n  private _updateSelectedItem(itemKey: string, ev?: React.MouseEvent<HTMLElement>): void {\n    this.setState({\n      selectedKey: itemKey,\n    });\n\n    const linkCollection = this._getPivotLinks(this.props);\n\n    if (this.props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {\n      const index = linkCollection.keyToIndexMapping[itemKey];\n\n      // React.Element<any> cannot directly convert to PivotItem.\n      const item = React.Children.toArray(this.props.children)[index];\n\n      if (_isPivotItem(item)) {\n        this.props.onLinkClick(item, ev);\n      }\n    }\n  }\n\n  private _getClassNames(props: IPivotProps): { [key in keyof IPivotStyles]: string } {\n    const { theme } = props;\n    const rootIsLarge: boolean = props.linkSize === PivotLinkSize.large;\n    const rootIsTabs: boolean = props.linkFormat === PivotLinkFormat.tabs;\n\n    return getClassNames(props.styles!, {\n      theme: theme!,\n      rootIsLarge,\n      rootIsTabs,\n    });\n  }\n}\n\nfunction _isPivotItem(item: React.ReactNode): item is PivotItem {\n  // In theory, we should be able to just check item.type === PivotItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // Casting as an any to avoid [ object Object ] errors.\n    ((item as React.ReactElement).type as any).name === (PivotItem as any).name\n  );\n}\n"]},"metadata":{},"sourceType":"module"}