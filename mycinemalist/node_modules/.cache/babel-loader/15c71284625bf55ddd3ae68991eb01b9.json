{"ast":null,"code":"import { getWindow } from './dom/getWindow';\nimport { isDirectionalKeyCode } from './keyboard';\nimport { setFocusVisibility } from './setFocusVisibility';\n/**\n * Initializes the logic which:\n *\n * 1. Subscribes keydown and mousedown events. (It will only do it once per window,\n *    so it's safe to call this method multiple times.)\n * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname\n *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.\n * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the\n *    document body, removes the 'ms-Fabric--isFocusVisible' classname.\n *\n * This logic allows components on the page to conditionally render focus treatments based on\n * the existence of global classnames, which simplifies logic overall.\n *\n * @param window - the window used to add the event listeners\n * @deprecated Use useFocusRects hook or FocusRects component instead.\n */\n\nexport function initializeFocusRects(window) {\n  var _a;\n\n  var win = window || getWindow();\n\n  if (!win || ((_a = win.FabricConfig) === null || _a === void 0 ? void 0 : _a.disableFocusRects) === true) {\n    return;\n  }\n\n  if (!win.__hasInitializeFocusRects__) {\n    win.__hasInitializeFocusRects__ = true;\n    win.addEventListener('mousedown', _onMouseDown, true);\n    win.addEventListener('pointerdown', _onPointerDown, true);\n    win.addEventListener('keydown', _onKeyDown, true);\n  }\n}\n\nfunction _onMouseDown(ev) {\n  setFocusVisibility(false, ev.target);\n}\n\nfunction _onPointerDown(ev) {\n  if (ev.pointerType !== 'mouse') {\n    setFocusVisibility(false, ev.target);\n  }\n}\n\nfunction _onKeyDown(ev) {\n  // eslint-disable-next-line deprecation/deprecation\n  isDirectionalKeyCode(ev.which) && setFocusVisibility(true, ev.target);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,SAASC,oBAAT,QAAqC,YAArC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AASA;;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUC,oBAAV,CAA+BC,MAA/B,EAA8C;;;AAClD,MAAMC,GAAG,GAAID,MAAM,IAAIJ,SAAS,EAAhC;;AACA,MAAI,CAACK,GAAD,IAAQ,UAAG,CAACC,YAAJ,MAAgB,IAAhB,IAAgBC,aAAhB,GAAgB,MAAhB,GAAgBA,GAAEC,iBAAlB,MAAwC,IAApD,EAA0D;AACxD;AACD;;AAED,MAAI,CAACH,GAAG,CAACI,2BAAT,EAAsC;AACpCJ,OAAG,CAACI,2BAAJ,GAAkC,IAAlC;AACAJ,OAAG,CAACK,gBAAJ,CAAqB,WAArB,EAAkCC,YAAlC,EAAgD,IAAhD;AACAN,OAAG,CAACK,gBAAJ,CAAqB,aAArB,EAAoCE,cAApC,EAAoD,IAApD;AACAP,OAAG,CAACK,gBAAJ,CAAqB,SAArB,EAAgCG,UAAhC,EAA0D,IAA1D;AACD;AACF;;AAED,SAASF,YAAT,CAAsBG,EAAtB,EAAoC;AAClCZ,oBAAkB,CAAC,KAAD,EAAQY,EAAE,CAACC,MAAX,CAAlB;AACD;;AAED,SAASH,cAAT,CAAwBE,EAAxB,EAAwC;AACtC,MAAIA,EAAE,CAACE,WAAH,KAAmB,OAAvB,EAAgC;AAC9Bd,sBAAkB,CAAC,KAAD,EAAQY,EAAE,CAACC,MAAX,CAAlB;AACD;AACF;;AAED,SAASF,UAAT,CAAoBC,EAApB,EAAqC;AACnC;AACAb,sBAAoB,CAACa,EAAE,CAACG,KAAJ,CAApB,IAAkCf,kBAAkB,CAAC,IAAD,EAAOY,EAAE,CAACC,MAAV,CAApD;AACD","names":["getWindow","isDirectionalKeyCode","setFocusVisibility","initializeFocusRects","window","win","FabricConfig","_a","disableFocusRects","__hasInitializeFocusRects__","addEventListener","_onMouseDown","_onPointerDown","_onKeyDown","ev","target","pointerType","which"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\src\\initializeFocusRects.ts"],"sourcesContent":["import { getWindow } from './dom/getWindow';\nimport { isDirectionalKeyCode } from './keyboard';\nimport { setFocusVisibility } from './setFocusVisibility';\n\ntype AppWindow =\n  | (Window & {\n      __hasInitializeFocusRects__: boolean;\n      FabricConfig?: { disableFocusRects?: boolean };\n    })\n  | undefined;\n\n/**\n * Initializes the logic which:\n *\n * 1. Subscribes keydown and mousedown events. (It will only do it once per window,\n *    so it's safe to call this method multiple times.)\n * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname\n *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.\n * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the\n *    document body, removes the 'ms-Fabric--isFocusVisible' classname.\n *\n * This logic allows components on the page to conditionally render focus treatments based on\n * the existence of global classnames, which simplifies logic overall.\n *\n * @param window - the window used to add the event listeners\n * @deprecated Use useFocusRects hook or FocusRects component instead.\n */\nexport function initializeFocusRects(window?: Window): void {\n  const win = (window || getWindow()) as AppWindow;\n  if (!win || win.FabricConfig?.disableFocusRects === true) {\n    return;\n  }\n\n  if (!win.__hasInitializeFocusRects__) {\n    win.__hasInitializeFocusRects__ = true;\n    win.addEventListener('mousedown', _onMouseDown, true);\n    win.addEventListener('pointerdown', _onPointerDown, true);\n    win.addEventListener('keydown', _onKeyDown as () => void, true);\n  }\n}\n\nfunction _onMouseDown(ev: MouseEvent): void {\n  setFocusVisibility(false, ev.target as Element);\n}\n\nfunction _onPointerDown(ev: PointerEvent): void {\n  if (ev.pointerType !== 'mouse') {\n    setFocusVisibility(false, ev.target as Element);\n  }\n}\n\nfunction _onKeyDown(ev: KeyboardEvent): void {\n  // eslint-disable-next-line deprecation/deprecation\n  isDirectionalKeyCode(ev.which) && setFocusVisibility(true, ev.target as Element);\n}\n"]},"metadata":{},"sourceType":"module"}