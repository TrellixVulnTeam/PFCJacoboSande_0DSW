{"ast":null,"code":"import { concatStyleSets } from './concatStyleSets';\n/**\n * Concatenates style sets into one, but resolves functional sets using the given props.\n * @param styleProps - Props used to resolve functional sets.\n * @param allStyles - Style sets, which can be functions or objects.\n */\n\nexport function concatStyleSetsWithProps(styleProps) {\n  var allStyles = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    allStyles[_i - 1] = arguments[_i];\n  }\n\n  var result = [];\n\n  for (var _a = 0, allStyles_1 = allStyles; _a < allStyles_1.length; _a++) {\n    var styles = allStyles_1[_a];\n\n    if (styles) {\n      result.push(typeof styles === 'function' ? styles(styleProps) : styles);\n    }\n  }\n\n  if (result.length === 1) {\n    return result[0];\n  } else if (result.length) {\n    // cliffkoh: I cannot figure out how to avoid the cast to any here.\n    // It is something to do with the use of Omit in IStyleSet.\n    // It might not be necessary once  Omit becomes part of lib.d.ts (when we remove our own Omit and rely on\n    // the official version).\n    return concatStyleSets.apply(void 0, result);\n  }\n\n  return {};\n}","map":{"version":3,"mappings":"AAAA,SAASA,eAAT,QAAgC,mBAAhC;AAKA;;;;;;AAKA,OAAM,SAAUC,wBAAV,CACJC,UADI,EACmB;EACvB;;OAAA,yCAA4E;IAA5EC;;;EAEA,IAAMC,MAAM,GAA6B,EAAzC;;EACA,KAAqB,mCAArB,EAAqBC,uBAArB,EAAqBA,IAArB,EAAgC;IAA3B,IAAMC,MAAM,kBAAZ;;IACH,IAAIA,MAAJ,EAAY;MACVF,MAAM,CAACG,IAAP,CAAY,OAAOD,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAACJ,UAAD,CAArC,GAAoDI,MAAhE;IACD;EACF;;EACD,IAAIF,MAAM,CAACI,MAAP,KAAkB,CAAtB,EAAyB;IACvB,OAAOJ,MAAM,CAAC,CAAD,CAAb;EACD,CAFD,MAEO,IAAIA,MAAM,CAACI,MAAX,EAAmB;IACxB;IACA;IACA;IACA;IACA,OAAOR,eAAe,MAAf,CAAe,MAAf,EAAoBI,MAApB,CAAP;EACD;;EAED,OAAO,EAAP;AACD","names":["concatStyleSets","concatStyleSetsWithProps","styleProps","allStyles","result","_a","styles","push","length"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\merge-styles\\src\\concatStyleSetsWithProps.ts"],"sourcesContent":["import { concatStyleSets } from './concatStyleSets';\nimport { IStyleSet } from './IStyleSet';\nimport { IStyleFunctionOrObject } from './IStyleFunction';\nimport { DeepPartial } from './DeepPartial';\n\n/**\n * Concatenates style sets into one, but resolves functional sets using the given props.\n * @param styleProps - Props used to resolve functional sets.\n * @param allStyles - Style sets, which can be functions or objects.\n */\nexport function concatStyleSetsWithProps<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>>(\n  styleProps: TStyleProps,\n  ...allStyles: (IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined)[]\n): DeepPartial<TStyleSet> {\n  const result: DeepPartial<TStyleSet>[] = [];\n  for (const styles of allStyles) {\n    if (styles) {\n      result.push(typeof styles === 'function' ? styles(styleProps) : styles);\n    }\n  }\n  if (result.length === 1) {\n    return result[0] as DeepPartial<TStyleSet>;\n  } else if (result.length) {\n    // cliffkoh: I cannot figure out how to avoid the cast to any here.\n    // It is something to do with the use of Omit in IStyleSet.\n    // It might not be necessary once  Omit becomes part of lib.d.ts (when we remove our own Omit and rely on\n    // the official version).\n    return concatStyleSets(...(result as any)) as any;\n  }\n\n  return {};\n}\n"]},"metadata":{},"sourceType":"module"}