{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { warn, warnControlledUsage, warnConditionallyRequiredProps, warnDeprecations, warnMutuallyExclusive } from '@uifabric/utilities/lib/warn';\nimport { usePrevious } from './usePrevious';\nimport { useConst } from './useConst';\nvar warningId = 0;\n/**\n * Only in development mode, display console warnings when certain conditions are met.\n * Note that all warnings except `controlledUsage` will only be shown on first render\n * (new `controlledUsage` warnings may be shown later due to prop changes).\n */\n\nexport function useWarnings(options) {\n  if (process.env.NODE_ENV !== 'production') {\n    var name_1 = options.name,\n        props = options.props,\n        _a = options.other,\n        other = _a === void 0 ? [] : _a,\n        conditionallyRequired = options.conditionallyRequired,\n        deprecations = options.deprecations,\n        mutuallyExclusive = options.mutuallyExclusive,\n        controlledUsage = options.controlledUsage;\n    /* eslint-disable react-hooks/rules-of-hooks -- build-time conditional */\n\n    var hasWarnedRef = React.useRef(false);\n    var componentId = useConst(function () {\n      return \"useWarnings_\" + warningId++;\n    });\n    var oldProps = usePrevious(props);\n    /* eslint-enable react-hooks/rules-of-hooks */\n    // Warn synchronously (not in useEffect) on first render to make debugging easier.\n\n    if (!hasWarnedRef.current) {\n      hasWarnedRef.current = true;\n\n      for (var _i = 0, other_1 = other; _i < other_1.length; _i++) {\n        var warning = other_1[_i];\n        warn(warning);\n      }\n\n      if (conditionallyRequired) {\n        for (var _b = 0, conditionallyRequired_1 = conditionallyRequired; _b < conditionallyRequired_1.length; _b++) {\n          var req = conditionallyRequired_1[_b];\n          warnConditionallyRequiredProps(name_1, props, req.requiredProps, req.conditionalPropName, req.condition);\n        }\n      }\n\n      deprecations && warnDeprecations(name_1, props, deprecations);\n      mutuallyExclusive && warnMutuallyExclusive(name_1, props, mutuallyExclusive);\n    } // Controlled usage warnings may be displayed on either first or subsequent renders due to\n    // prop changes. Note that it's safe to run this synchronously (not in useEffect) even in\n    // concurrent mode because `warnControlledUsage` internally tracks which warnings have been\n    // displayed for each component instance (so nothing will be displayed twice).\n\n\n    controlledUsage && warnControlledUsage(__assign(__assign({}, controlledUsage), {\n      componentId: componentId,\n      props: props,\n      componentName: name_1,\n      oldProps: oldProps\n    }));\n  }\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAGEC,IAHF,EAIEC,mBAJF,EAKEC,8BALF,EAMEC,gBANF,EAOEC,qBAPF,QAQO,8BARP;AASA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,QAAT,QAAyB,YAAzB;AAkDA,IAAIC,SAAS,GAAG,CAAhB;AAEA;;;;;;AAKA,OAAM,SAAUC,WAAV,CAAyBC,OAAzB,EAAoD;EACxD,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IAEvC;IAAA,IACAC,qBADA;IAAA,IAEAC,kBAFA;IAAA,IAEAC,+BAFA;IAAA,IAGAC,qDAHA;IAAA,IAIAC,mCAJA;IAAA,IAKAC,6CALA;IAAA,IAMAC,yCANA;IASF;;IACA,IAAMC,YAAY,GAAGrB,KAAK,CAACsB,MAAN,CAAa,KAAb,CAArB;IACA,IAAMC,WAAW,GAAGhB,QAAQ,CAAC;MAAM,wBAAeC,SAAS,EAAxB;IAA4B,CAAnC,CAA5B;IACA,IAAMgB,QAAQ,GAAGlB,WAAW,CAACQ,KAAD,CAA5B;IACA;IAEA;;IACA,IAAI,CAACO,YAAY,CAACI,OAAlB,EAA2B;MACzBJ,YAAY,CAACI,OAAb,GAAuB,IAAvB;;MAEA,KAAsB,2BAAtB,EAAsBC,mBAAtB,EAAsBA,IAAtB,EAA6B;QAAxB,IAAMC,OAAO,cAAb;QACH1B,IAAI,CAAC0B,OAAD,CAAJ;MACD;;MAED,IAAIV,qBAAJ,EAA2B;QACzB,KAAkB,2DAAlB,EAAkBW,mCAAlB,EAAkBA,IAAlB,EAAyC;UAApC,IAAMC,GAAG,8BAAT;UACH1B,8BAA8B,CAAC2B,MAAD,EAAOhB,KAAP,EAAce,GAAG,CAACE,aAAlB,EAAiCF,GAAG,CAACG,mBAArC,EAA0DH,GAAG,CAACI,SAA9D,CAA9B;QACD;MACF;;MAEDf,YAAY,IAAId,gBAAgB,CAAC0B,MAAD,EAAOhB,KAAP,EAAcI,YAAd,CAAhC;MAEAC,iBAAiB,IAAId,qBAAqB,CAACyB,MAAD,EAAOhB,KAAP,EAAcK,iBAAd,CAA1C;IACD,CAlCwC,CAoCzC;IACA;IACA;IACA;;;IACAC,eAAe,IAAIlB,mBAAmB,uBAAMkB,eAAN,GAAqB;MAAEG,WAAW,aAAb;MAAeT,KAAK,OAApB;MAAsBoB,aAAa,EAAEJ,MAArC;MAA2CN,QAAQ;IAAnD,CAArB,EAAtC;EACD;AACF","names":["React","warn","warnControlledUsage","warnConditionallyRequiredProps","warnDeprecations","warnMutuallyExclusive","usePrevious","useConst","warningId","useWarnings","options","process","env","NODE_ENV","props","_a","other","conditionallyRequired","deprecations","mutuallyExclusive","controlledUsage","hasWarnedRef","useRef","componentId","oldProps","current","_i","warning","_b","req","name_1","requiredProps","conditionalPropName","condition","componentName"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\react-hooks\\src\\useWarnings.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  ISettingsMap,\n  IWarnControlledUsageParams,\n  warn,\n  warnControlledUsage,\n  warnConditionallyRequiredProps,\n  warnDeprecations,\n  warnMutuallyExclusive,\n} from '@uifabric/utilities/lib/warn';\nimport { usePrevious } from './usePrevious';\nimport { useConst } from './useConst';\n\nexport interface IWarningOptions<P> {\n  /** Name of the component */\n  name: string;\n\n  /** Current component props */\n  props: P;\n\n  /** Generic messages */\n  other?: string[];\n\n  /** Warns when props are required if a condition is met */\n  conditionallyRequired?: {\n    /** Props required when the condition is met */\n    requiredProps: string[];\n    /** Name of the prop that the condition is based on */\n    conditionalPropName: string;\n    /** Whether the condition is met */\n    condition: boolean;\n  }[];\n\n  /**\n   * Warns when deprecated props are being used. Each key is a prop name and each value is\n   * either undefined or a replacement prop name.\n   */\n  deprecations?: ISettingsMap<P>;\n\n  /**\n   * Warns when two props which are mutually exclusive are both being used.\n   * The key is one prop name and the value is the other.\n   */\n  mutuallyExclusive?: ISettingsMap<P>;\n\n  /**\n   * Check for and warn on the following error conditions with a form component:\n   * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n   *    and the component is not read-only\n   * - Both the value and defaultValue props are provided\n   * - The component is attempting to switch between controlled and uncontrolled\n   *\n   * The messages mimic the warnings React gives for these error conditions on input elements.\n   * The warning will only be displayed once per component instance.\n   */\n  controlledUsage?: Pick<\n    IWarnControlledUsageParams<P>,\n    'valueProp' | 'defaultValueProp' | 'onChangeProp' | 'readOnlyProp'\n  >;\n}\n\nlet warningId = 0;\n\n/**\n * Only in development mode, display console warnings when certain conditions are met.\n * Note that all warnings except `controlledUsage` will only be shown on first render\n * (new `controlledUsage` warnings may be shown later due to prop changes).\n */\nexport function useWarnings<P>(options: IWarningOptions<P>) {\n  if (process.env.NODE_ENV !== 'production') {\n    const {\n      name,\n      props,\n      other = [],\n      conditionallyRequired,\n      deprecations,\n      mutuallyExclusive,\n      controlledUsage,\n    } = options;\n\n    /* eslint-disable react-hooks/rules-of-hooks -- build-time conditional */\n    const hasWarnedRef = React.useRef(false);\n    const componentId = useConst(() => `useWarnings_${warningId++}`);\n    const oldProps = usePrevious(props);\n    /* eslint-enable react-hooks/rules-of-hooks */\n\n    // Warn synchronously (not in useEffect) on first render to make debugging easier.\n    if (!hasWarnedRef.current) {\n      hasWarnedRef.current = true;\n\n      for (const warning of other) {\n        warn(warning);\n      }\n\n      if (conditionallyRequired) {\n        for (const req of conditionallyRequired) {\n          warnConditionallyRequiredProps(name, props, req.requiredProps, req.conditionalPropName, req.condition);\n        }\n      }\n\n      deprecations && warnDeprecations(name, props, deprecations);\n\n      mutuallyExclusive && warnMutuallyExclusive(name, props, mutuallyExclusive);\n    }\n\n    // Controlled usage warnings may be displayed on either first or subsequent renders due to\n    // prop changes. Note that it's safe to run this synchronously (not in useEffect) even in\n    // concurrent mode because `warnControlledUsage` internally tracks which warnings have been\n    // displayed for each component instance (so nothing will be displayed twice).\n    controlledUsage && warnControlledUsage({ ...controlledUsage, componentId, props, componentName: name, oldProps });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}