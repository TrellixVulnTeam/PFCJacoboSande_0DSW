{"ast":null,"code":"import { useRef, useEffect } from 'react';\n/**\n * Hook keeping track of a given value from a previous execution of the component the Hook is used in.\n *\n * See [React Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state)\n */\n\nexport function usePrevious(value) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AAEA;;;;;;AAKA,OAAM,SAAUC,WAAV,CAAyBC,KAAzB,EAAiC;AACrC,MAAMC,GAAG,GAAGJ,MAAM,EAAlB;AACAC,WAAS,CAAC;AACRG,OAAG,CAACC,OAAJ,GAAcF,KAAd;AACD,GAFQ,CAAT;AAGA,SAAOC,GAAG,CAACC,OAAX;AACD","names":["useRef","useEffect","usePrevious","value","ref","current"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\react-hooks\\src\\usePrevious.ts"],"sourcesContent":["import { useRef, useEffect } from 'react';\n\n/**\n * Hook keeping track of a given value from a previous execution of the component the Hook is used in.\n *\n * See [React Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state)\n */\nexport function usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T | undefined>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}