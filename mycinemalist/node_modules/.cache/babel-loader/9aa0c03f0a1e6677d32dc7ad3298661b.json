{"ast":null,"code":"/**\n * Helper to find the index of an item within an array, using a callback to\n * determine the match.\n *\n * @public\n * @param array - Array to search.\n * @param cb - Callback which returns true on matches.\n * @param fromIndex - Optional index to start from (defaults to 0)\n */\nexport function findIndex(array, cb, fromIndex) {\n  if (fromIndex === void 0) {\n    fromIndex = 0;\n  }\n\n  var index = -1;\n\n  for (var i = fromIndex; array && i < array.length; i++) {\n    if (cb(array[i], i)) {\n      index = i;\n      break;\n    }\n  }\n\n  return index;\n}\n/**\n * Helper to find the first item within an array that satisfies the callback.\n * @param array - Array to search\n * @param cb - Callback which returns true on matches\n */\n\nexport function find(array, cb) {\n  var index = findIndex(array, cb);\n\n  if (index < 0) {\n    return undefined;\n  }\n\n  return array[index];\n}\n/**\n * Creates an array of a given size and helper method to populate.\n *\n * @public\n * @param size - Size of array.\n * @param getItem - Callback to populate given cell index.\n */\n\nexport function createArray(size, getItem) {\n  var array = [];\n\n  for (var i = 0; i < size; i++) {\n    array.push(getItem(i));\n  }\n\n  return array;\n}\n/**\n * Convert the given array to a matrix with columnCount number\n * of columns.\n *\n * @public\n * @param items - The array to convert\n * @param columnCount - The number of columns for the resulting matrix\n * @returns A matrix of items\n */\n\nexport function toMatrix(items, columnCount) {\n  return items.reduce(function (rows, currentValue, index) {\n    if (index % columnCount === 0) {\n      rows.push([currentValue]);\n    } else {\n      rows[rows.length - 1].push(currentValue);\n    }\n\n    return rows;\n  }, []);\n}\n/**\n * Given an array, it returns a new array that does not contain the item at the given index.\n * @param array - The array to operate on\n * @param index - The index of the element to remove\n */\n\nexport function removeIndex(array, index) {\n  return array.filter(function (_, i) {\n    return index !== i;\n  });\n}\n/**\n * Given an array, this function returns a new array where the element at a given index has been replaced.\n * @param array - The array to operate on\n * @param newElement - The element that will be placed in the new array\n * @param index - The index of the element that should be replaced\n */\n\nexport function replaceElement(array, newElement, index) {\n  var copy = array.slice();\n  copy[index] = newElement;\n  return copy;\n}\n/**\n * Given an array, this function returns a new array where an element has been inserted at the given index.\n * @param array - The array to operate on\n * @param index - The index where an element should be inserted\n * @param itemToAdd - The element to insert\n */\n\nexport function addElementAtIndex(array, index, itemToAdd) {\n  var copy = array.slice();\n  copy.splice(index, 0, itemToAdd);\n  return copy;\n}\n/**\n * Given an array where each element is of type T or T[], flatten it into an array of T\n * @param array - The array where each element can optionally also be an array\n */\n\nexport function flatten(array) {\n  var result = [];\n  array.forEach(function (item) {\n    return result = result.concat(item);\n  });\n  return result;\n}\n/**\n * Returns a boolean indicating if the two given arrays are equal in length and values.\n *\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.\n */\n\nexport function arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"mappings":"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","names":["findIndex","array","cb","fromIndex","index","i","length","find","undefined","createArray","size","getItem","push","toMatrix","items","columnCount","reduce","rows","currentValue","removeIndex","filter","_","replaceElement","newElement","copy","slice","addElementAtIndex","itemToAdd","splice","flatten","result","forEach","item","concat","arraysEqual","array1","array2"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\src\\array.ts"],"sourcesContent":["/**\n * Helper to find the index of an item within an array, using a callback to\n * determine the match.\n *\n * @public\n * @param array - Array to search.\n * @param cb - Callback which returns true on matches.\n * @param fromIndex - Optional index to start from (defaults to 0)\n */\nexport function findIndex<T>(array: T[], cb: (item: T, index: number) => boolean, fromIndex: number = 0): number {\n  let index = -1;\n\n  for (let i = fromIndex; array && i < array.length; i++) {\n    if (cb(array[i], i)) {\n      index = i;\n      break;\n    }\n  }\n\n  return index;\n}\n\n/**\n * Helper to find the first item within an array that satisfies the callback.\n * @param array - Array to search\n * @param cb - Callback which returns true on matches\n */\nexport function find<T>(array: T[], cb: (item: T, index: number) => boolean): T | undefined {\n  let index = findIndex(array, cb);\n\n  if (index < 0) {\n    return undefined;\n  }\n\n  return array[index];\n}\n\n/**\n * Creates an array of a given size and helper method to populate.\n *\n * @public\n * @param size - Size of array.\n * @param getItem - Callback to populate given cell index.\n */\nexport function createArray<T>(size: number, getItem: (index: number) => T): T[] {\n  let array: T[] = [];\n\n  for (let i = 0; i < size; i++) {\n    array.push(getItem(i));\n  }\n\n  return array;\n}\n\n/**\n * Convert the given array to a matrix with columnCount number\n * of columns.\n *\n * @public\n * @param items - The array to convert\n * @param columnCount - The number of columns for the resulting matrix\n * @returns A matrix of items\n */\nexport function toMatrix<T>(items: T[], columnCount: number): T[][] {\n  return items.reduce((rows: T[][], currentValue: T, index: number) => {\n    if (index % columnCount === 0) {\n      rows.push([currentValue]);\n    } else {\n      rows[rows.length - 1].push(currentValue);\n    }\n    return rows;\n  }, [] as T[][]);\n}\n\n/**\n * Given an array, it returns a new array that does not contain the item at the given index.\n * @param array - The array to operate on\n * @param index - The index of the element to remove\n */\nexport function removeIndex<T>(array: T[], index: number): T[] {\n  return array.filter((_: T, i: number) => index !== i);\n}\n\n/**\n * Given an array, this function returns a new array where the element at a given index has been replaced.\n * @param array - The array to operate on\n * @param newElement - The element that will be placed in the new array\n * @param index - The index of the element that should be replaced\n */\nexport function replaceElement<T>(array: T[], newElement: T, index: number): T[] {\n  const copy = array.slice();\n  copy[index] = newElement;\n  return copy;\n}\n\n/**\n * Given an array, this function returns a new array where an element has been inserted at the given index.\n * @param array - The array to operate on\n * @param index - The index where an element should be inserted\n * @param itemToAdd - The element to insert\n */\nexport function addElementAtIndex<T>(array: T[], index: number, itemToAdd: T): T[] {\n  const copy = array.slice();\n  copy.splice(index, 0, itemToAdd);\n  return copy;\n}\n\n/**\n * Given an array where each element is of type T or T[], flatten it into an array of T\n * @param array - The array where each element can optionally also be an array\n */\nexport function flatten<T>(array: (T | T[])[]): T[] {\n  let result: T[] = [];\n  array.forEach((item: T | T[]): T[] => (result = result.concat(item)));\n  return result;\n}\n\n/**\n * Returns a boolean indicating if the two given arrays are equal in length and values.\n *\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.\n */\nexport function arraysEqual<T>(array1: T[], array2: T[]): boolean {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}