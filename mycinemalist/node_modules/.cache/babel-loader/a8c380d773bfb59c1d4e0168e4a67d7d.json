{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { concatStyleSets } from '@uifabric/styling';\nimport { Customizations, CustomizerContext } from '@uifabric/utilities';\nimport { createFactory } from './slots';\nimport { assign } from './utilities';\n/**\n * Assembles a higher order component based on the following: styles, theme, view, and state.\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\n * the view prop.\n *\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n *\n * State component is optional. If state is not provided, created component is essentially a functional\n * stateless component.\n *\n * @param options - component Component options. See IComponentOptions for more detail.\n */\n\nexport function createComponent(view, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.factoryOptions,\n      factoryOptions = _a === void 0 ? {} : _a;\n  var defaultProp = factoryOptions.defaultProp;\n\n  var ResultComponent = function (componentProps) {\n    var settings = _getCustomizations(options.displayName, React.useContext(CustomizerContext), options.fields);\n\n    var stateReducer = options.state;\n\n    if (stateReducer) {\n      // Don't assume state will return all props, so spread useState result over component props.\n      componentProps = __assign(__assign({}, componentProps), stateReducer(componentProps));\n    }\n\n    var theme = componentProps.theme || settings.theme;\n\n    var tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);\n\n    var styles = _resolveStyles(componentProps, theme, tokens, options.styles, settings.styles, componentProps.styles);\n\n    var viewProps = __assign(__assign({}, componentProps), {\n      styles: styles,\n      tokens: tokens,\n      _defaultStyles: styles,\n      theme: theme\n    });\n\n    return view(viewProps);\n  };\n\n  ResultComponent.displayName = options.displayName || view.name; // If a shorthand prop is defined, create a factory for the component.\n  // TODO: This shouldn't be a concern of createComponent.. factoryOptions should just be forwarded.\n  //       Need to weigh creating default factories on component creation vs. memoizing them on use in slots.tsx.\n\n  if (defaultProp) {\n    ResultComponent.create = createFactory(ResultComponent, {\n      defaultProp: defaultProp\n    });\n  }\n\n  assign(ResultComponent, options.statics); // Later versions of TypeSript should allow us to merge objects in a type safe way and avoid this cast.\n\n  return ResultComponent;\n}\n/**\n * Resolve all styles functions with both props and tokens and flatten results along with all styles objects.\n */\n\nfunction _resolveStyles(props, theme, tokens) {\n  var allStyles = [];\n\n  for (var _i = 3; _i < arguments.length; _i++) {\n    allStyles[_i - 3] = arguments[_i];\n  }\n\n  return concatStyleSets.apply(void 0, allStyles.map(function (styles) {\n    return typeof styles === 'function' ? styles(props, theme, tokens) : styles;\n  }));\n}\n/**\n * Resolve all tokens functions with props flatten results along with all tokens objects.\n */\n\n\nfunction _resolveTokens(props, theme) {\n  var allTokens = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    allTokens[_i - 2] = arguments[_i];\n  }\n\n  var tokens = {};\n\n  for (var _a = 0, allTokens_1 = allTokens; _a < allTokens_1.length; _a++) {\n    var currentTokens = allTokens_1[_a];\n\n    if (currentTokens) {\n      // TODO: why is this cast needed? TS seems to think there is a (TToken | Function) union from somewhere.\n      currentTokens = typeof currentTokens === 'function' ? currentTokens(props, theme) : currentTokens;\n\n      if (Array.isArray(currentTokens)) {\n        currentTokens = _resolveTokens.apply(void 0, __spreadArrays([props, theme], currentTokens));\n      }\n\n      assign(tokens, currentTokens);\n    }\n  }\n\n  return tokens;\n}\n/**\n * Helper function for calling Customizations.getSettings falling back to default fields.\n *\n * @param displayName Displayable name for component.\n * @param context React context passed to component containing contextual settings.\n * @param fields Optional list of properties to grab from global store and context.\n */\n\n\nfunction _getCustomizations(displayName, context, fields) {\n  // TODO: do we want field props? should fields be part of IComponent and used here?\n  // TODO: should we centrally define DefaultFields? (not exported from styling)\n  // TODO: tie this array to ICustomizationProps, such that each array element is keyof ICustomizationProps\n  var DefaultFields = ['theme', 'styles', 'tokens'];\n  return Customizations.getSettings(fields || DefaultFields, displayName, context.customizations);\n}","map":{"version":3,"mappings":"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","names":["React","concatStyleSets","Customizations","CustomizerContext","createFactory","assign","createComponent","view","options","ResultComponent","componentProps","settings","_getCustomizations","displayName","useContext","fields","stateReducer","state","theme","tokens","_resolveTokens","styles","_resolveStyles","viewProps","__assign","_defaultStyles","name","defaultProp","create","statics","props","allStyles","map","allTokens","_a","currentTokens","Array","isArray","__spreadArrays","context","DefaultFields","getSettings","customizations"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\foundation\\src\\createComponent.tsx"],"sourcesContent":["import * as React from 'react';\nimport { concatStyleSets, IStyleSet, ITheme } from '@uifabric/styling';\nimport { Customizations, CustomizerContext, ICustomizerContext } from '@uifabric/utilities';\nimport { createFactory } from './slots';\nimport { assign } from './utilities';\n\nimport {\n  IComponentOptions,\n  ICustomizationProps,\n  IStyleableComponentProps,\n  IStylesFunctionOrObject,\n  IToken,\n  ITokenFunction,\n  IViewComponent,\n} from './IComponent';\nimport { IDefaultSlotProps, ISlotCreator, ValidProps } from './ISlots';\n\n/**\n * Assembles a higher order component based on the following: styles, theme, view, and state.\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\n * the view prop.\n *\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n *\n * State component is optional. If state is not provided, created component is essentially a functional\n * stateless component.\n *\n * @param options - component Component options. See IComponentOptions for more detail.\n */\nexport function createComponent<\n  TComponentProps extends ValidProps,\n  TTokens,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TViewProps extends TComponentProps = TComponentProps,\n  TStatics = {}\n>(\n  view: IViewComponent<TViewProps>,\n  options: IComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TStatics> = {},\n): React.FunctionComponent<TComponentProps> & TStatics {\n  const { factoryOptions = {} } = options;\n  const { defaultProp } = factoryOptions;\n\n  const ResultComponent: React.FunctionComponent<TComponentProps> = (\n    componentProps: TComponentProps & IStyleableComponentProps<TViewProps, TTokens, TStyleSet>,\n  ) => {\n    const settings: ICustomizationProps<TViewProps, TTokens, TStyleSet> = _getCustomizations(\n      options.displayName,\n      React.useContext(CustomizerContext),\n      options.fields,\n    );\n\n    const stateReducer = options.state;\n\n    if (stateReducer) {\n      // Don't assume state will return all props, so spread useState result over component props.\n      componentProps = {\n        ...componentProps,\n        ...stateReducer(componentProps),\n      };\n    }\n\n    const theme = componentProps.theme || settings.theme;\n\n    const tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);\n    const styles = _resolveStyles(\n      componentProps,\n      theme,\n      tokens,\n      options.styles,\n      settings.styles,\n      componentProps.styles,\n    );\n\n    const viewProps = {\n      ...componentProps,\n      styles,\n      tokens,\n      _defaultStyles: styles,\n      theme,\n    } as TViewProps & IDefaultSlotProps<any>;\n\n    return view(viewProps);\n  };\n\n  ResultComponent.displayName = options.displayName || view.name;\n\n  // If a shorthand prop is defined, create a factory for the component.\n  // TODO: This shouldn't be a concern of createComponent.. factoryOptions should just be forwarded.\n  //       Need to weigh creating default factories on component creation vs. memoizing them on use in slots.tsx.\n  if (defaultProp) {\n    (ResultComponent as ISlotCreator<TComponentProps, any>).create = createFactory(ResultComponent, { defaultProp });\n  }\n\n  assign(ResultComponent, options.statics);\n\n  // Later versions of TypeSript should allow us to merge objects in a type safe way and avoid this cast.\n  return ResultComponent as React.FunctionComponent<TComponentProps> & TStatics;\n}\n\n/**\n * Resolve all styles functions with both props and tokens and flatten results along with all styles objects.\n */\nfunction _resolveStyles<TProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  props: TProps,\n  theme: ITheme,\n  tokens: TTokens,\n  ...allStyles: (IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined)[]\n): ReturnType<typeof concatStyleSets> {\n  return concatStyleSets(\n    ...allStyles.map((styles: IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined) =>\n      typeof styles === 'function' ? styles(props, theme, tokens) : styles,\n    ),\n  );\n}\n\n/**\n * Resolve all tokens functions with props flatten results along with all tokens objects.\n */\nfunction _resolveTokens<TViewProps, TTokens>(\n  props: TViewProps,\n  theme: ITheme,\n  ...allTokens: (IToken<TViewProps, TTokens> | false | null | undefined)[]\n): TTokens {\n  const tokens = {};\n\n  for (let currentTokens of allTokens) {\n    if (currentTokens) {\n      // TODO: why is this cast needed? TS seems to think there is a (TToken | Function) union from somewhere.\n      currentTokens =\n        typeof currentTokens === 'function'\n          ? (currentTokens as ITokenFunction<TViewProps, TTokens>)(props, theme)\n          : currentTokens;\n\n      if (Array.isArray(currentTokens)) {\n        currentTokens = _resolveTokens(props, theme, ...currentTokens);\n      }\n\n      assign(tokens, currentTokens);\n    }\n  }\n\n  return tokens as TTokens;\n}\n\n/**\n * Helper function for calling Customizations.getSettings falling back to default fields.\n *\n * @param displayName Displayable name for component.\n * @param context React context passed to component containing contextual settings.\n * @param fields Optional list of properties to grab from global store and context.\n */\nfunction _getCustomizations<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  displayName: string | undefined,\n  context: ICustomizerContext,\n  fields?: string[],\n): ICustomizationProps<TViewProps, TTokens, TStyleSet> {\n  // TODO: do we want field props? should fields be part of IComponent and used here?\n  // TODO: should we centrally define DefaultFields? (not exported from styling)\n  // TODO: tie this array to ICustomizationProps, such that each array element is keyof ICustomizationProps\n  const DefaultFields = ['theme', 'styles', 'tokens'];\n  return Customizations.getSettings(fields || DefaultFields, displayName, context.customizations);\n}\n"]},"metadata":{},"sourceType":"module"}