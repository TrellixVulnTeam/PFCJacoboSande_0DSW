{"ast":null,"code":"/**\n * Rectangle helper class.\n *\n * @public\n * {@docCategory Rectangle}\n */\nvar Rectangle =\n/** @class */\nfunction () {\n  function Rectangle(left, right, top, bottom) {\n    if (left === void 0) {\n      left = 0;\n    }\n\n    if (right === void 0) {\n      right = 0;\n    }\n\n    if (top === void 0) {\n      top = 0;\n    }\n\n    if (bottom === void 0) {\n      bottom = 0;\n    }\n\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n\n  Object.defineProperty(Rectangle.prototype, \"width\", {\n    /**\n     * Calculated automatically by subtracting the right from left\n     */\n    get: function get() {\n      return this.right - this.left;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"height\", {\n    /**\n     * Calculated automatically by subtracting the bottom from top.\n     */\n    get: function get() {\n      return this.bottom - this.top;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Tests if another rect is approximately equal to this rect (within 4 decimal places.)\n   */\n\n  Rectangle.prototype.equals = function (rect) {\n    // Fixing to 4 decimal places because it allows enough precision and will handle cases when something\n    // should be rounded, like .999999 should round to 1.\n    return parseFloat(this.top.toFixed(4)) === parseFloat(rect.top.toFixed(4)) && parseFloat(this.bottom.toFixed(4)) === parseFloat(rect.bottom.toFixed(4)) && parseFloat(this.left.toFixed(4)) === parseFloat(rect.left.toFixed(4)) && parseFloat(this.right.toFixed(4)) === parseFloat(rect.right.toFixed(4));\n  };\n\n  return Rectangle;\n}();\n\nexport { Rectangle };","map":{"version":3,"mappings":"AAAA;;;;;;AAMA;AAAA;AAAA;AAME,qBAAYA,IAAZ,EAA8BC,KAA9B,EAAiDC,GAAjD,EAAkEC,MAAlE,EAAoF;AAAxE;AAAAH;AAAgB;;AAAE;AAAAC;AAAiB;;AAAE;AAAAC;AAAe;;AAAE;AAAAC;AAAkB;;AAClF,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD;;AAKDG,wBAAWC,mBAAX,EAAW,OAAX,EAAgB;AAHhB;;;SAGA;AACE,aAAO,KAAKJ,KAAL,GAAa,KAAKD,IAAzB;AACD,KAFe;oBAAA;;AAAA,GAAhB;AAOAI,wBAAWC,mBAAX,EAAW,QAAX,EAAiB;AAHjB;;;SAGA;AACE,aAAO,KAAKF,MAAL,GAAc,KAAKD,GAA1B;AACD,KAFgB;oBAAA;;AAAA,GAAjB;AAIA;;;;AAGOG,+BAAP,UAAcC,IAAd,EAA6B;AAC3B;AACA;AACA,WACEC,UAAU,CAAC,KAAKL,GAAL,CAASM,OAAT,CAAiB,CAAjB,CAAD,CAAV,KAAoCD,UAAU,CAACD,IAAI,CAACJ,GAAL,CAASM,OAAT,CAAiB,CAAjB,CAAD,CAA9C,IACAD,UAAU,CAAC,KAAKJ,MAAL,CAAYK,OAAZ,CAAoB,CAApB,CAAD,CAAV,KAAuCD,UAAU,CAACD,IAAI,CAACH,MAAL,CAAYK,OAAZ,CAAoB,CAApB,CAAD,CADjD,IAEAD,UAAU,CAAC,KAAKP,IAAL,CAAUQ,OAAV,CAAkB,CAAlB,CAAD,CAAV,KAAqCD,UAAU,CAACD,IAAI,CAACN,IAAL,CAAUQ,OAAV,CAAkB,CAAlB,CAAD,CAF/C,IAGAD,UAAU,CAAC,KAAKN,KAAL,CAAWO,OAAX,CAAmB,CAAnB,CAAD,CAAV,KAAsCD,UAAU,CAACD,IAAI,CAACL,KAAL,CAAWO,OAAX,CAAmB,CAAnB,CAAD,CAJlD;AAMD,GATM;;AAUT;AAAC,CAxCD","names":["left","right","top","bottom","Object","Rectangle","rect","parseFloat","toFixed"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\src\\Rectangle.ts"],"sourcesContent":["/**\n * Rectangle helper class.\n *\n * @public\n * {@docCategory Rectangle}\n */\nexport class Rectangle {\n  public top: number;\n  public bottom: number;\n  public left: number;\n  public right: number;\n\n  constructor(left: number = 0, right: number = 0, top: number = 0, bottom: number = 0) {\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n\n  /**\n   * Calculated automatically by subtracting the right from left\n   */\n  public get width(): number {\n    return this.right - this.left;\n  }\n\n  /**\n   * Calculated automatically by subtracting the bottom from top.\n   */\n  public get height(): number {\n    return this.bottom - this.top;\n  }\n\n  /**\n   * Tests if another rect is approximately equal to this rect (within 4 decimal places.)\n   */\n  public equals(rect: Rectangle): boolean {\n    // Fixing to 4 decimal places because it allows enough precision and will handle cases when something\n    // should be rounded, like .999999 should round to 1.\n    return (\n      parseFloat(this.top.toFixed(4)) === parseFloat(rect.top.toFixed(4)) &&\n      parseFloat(this.bottom.toFixed(4)) === parseFloat(rect.bottom.toFixed(4)) &&\n      parseFloat(this.left.toFixed(4)) === parseFloat(rect.left.toFixed(4)) &&\n      parseFloat(this.right.toFixed(4)) === parseFloat(rect.right.toFixed(4))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}