{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, KeyCodes, getNativeProps, divProperties, warnDeprecations, initializeComponentRef } from '../../Utilities';\nimport { DocumentCardType } from './DocumentCard.types';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'DocumentCard';\n/**\n * {@docCategory DocumentCard}\n */\n\nvar DocumentCardBase =\n/** @class */\nfunction (_super) {\n  __extends(DocumentCardBase, _super);\n\n  function DocumentCardBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._rootElement = React.createRef();\n\n    _this._onClick = function (ev) {\n      _this._onAction(ev);\n    };\n\n    _this._onKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n        _this._onAction(ev);\n      }\n    };\n\n    _this._onAction = function (ev) {\n      var _a = _this.props,\n          onClick = _a.onClick,\n          onClickHref = _a.onClickHref,\n          onClickTarget = _a.onClickTarget;\n\n      if (onClick) {\n        onClick(ev);\n      } else if (!onClick && onClickHref) {\n        // If no onClick Function was provided and we do have an onClickHref, redirect to the onClickHref\n        if (onClickTarget) {\n          window.open(onClickHref, onClickTarget, 'noreferrer noopener nofollow');\n        } else {\n          window.location.href = onClickHref;\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    };\n\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      accentColor: undefined\n    });\n    return _this;\n  }\n\n  DocumentCardBase.prototype.render = function () {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n        onClick = _a.onClick,\n        onClickHref = _a.onClickHref,\n        children = _a.children,\n        type = _a.type,\n        accentColor = _a.accentColor,\n        styles = _a.styles,\n        theme = _a.theme,\n        className = _a.className;\n    var nativeProps = getNativeProps(this.props, divProperties, ['className', 'onClick', 'type', 'role']);\n    var actionable = onClick || onClickHref ? true : false;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      actionable: actionable,\n      compact: type === DocumentCardType.compact ? true : false\n    }); // Override the border color if an accent color was provided (compact card only)\n\n    var style;\n\n    if (type === DocumentCardType.compact && accentColor) {\n      style = {\n        borderBottomColor: accentColor\n      };\n    } // if this element is actionable it should have an aria role\n\n\n    var role = this.props.role || (actionable ? onClick ? 'button' : 'link' : undefined);\n    var tabIndex = actionable ? 0 : undefined;\n    return React.createElement(\"div\", __assign({\n      ref: this._rootElement,\n      tabIndex: tabIndex,\n      \"data-is-focusable\": actionable,\n      role: role,\n      className: this._classNames.root,\n      onKeyDown: actionable ? this._onKeyDown : undefined,\n      onClick: actionable ? this._onClick : undefined,\n      style: style\n    }, nativeProps), children);\n  };\n\n  DocumentCardBase.prototype.focus = function () {\n    if (this._rootElement.current) {\n      this._rootElement.current.focus();\n    }\n  };\n\n  DocumentCardBase.defaultProps = {\n    type: DocumentCardType.normal\n  };\n  return DocumentCardBase;\n}(React.Component);\n\nexport { DocumentCardBase };","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","KeyCodes","getNativeProps","divProperties","warnDeprecations","initializeComponentRef","DocumentCardType","getClassNames","COMPONENT_NAME","__extends","props","_super","_this","createRef","ev","_onAction","which","enter","space","onClick","onClickHref","onClickTarget","window","open","location","href","preventDefault","stopPropagation","accentColor","undefined","DocumentCardBase","children","type","styles","theme","className","nativeProps","actionable","_classNames","compact","style","borderBottomColor","role","tabIndex","ref","_rootElement","root","onKeyDown","_onKeyDown","_onClick","current","focus","normal","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\DocumentCard\\DocumentCard.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  classNamesFunction,\n  KeyCodes,\n  getNativeProps,\n  divProperties,\n  warnDeprecations,\n  initializeComponentRef,\n} from '../../Utilities';\nimport {\n  DocumentCardType,\n  IDocumentCard,\n  IDocumentCardProps,\n  IDocumentCardStyleProps,\n  IDocumentCardStyles,\n} from './DocumentCard.types';\n\nconst getClassNames = classNamesFunction<IDocumentCardStyleProps, IDocumentCardStyles>();\n\nconst COMPONENT_NAME = 'DocumentCard';\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardBase extends React.Component<IDocumentCardProps, any> implements IDocumentCard {\n  public static defaultProps: IDocumentCardProps = {\n    type: DocumentCardType.normal,\n  };\n\n  private _rootElement = React.createRef<HTMLDivElement>();\n  private _classNames: IProcessedStyleSet<IDocumentCardStyles>;\n\n  constructor(props: IDocumentCardProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      accentColor: undefined,\n    });\n  }\n\n  public render(): JSX.Element {\n    // eslint-disable-next-line deprecation/deprecation\n    const { onClick, onClickHref, children, type, accentColor, styles, theme, className } = this.props;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, [\n      'className',\n      'onClick',\n      'type',\n      'role',\n    ]);\n    const actionable = onClick || onClickHref ? true : false;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      actionable,\n      compact: type === DocumentCardType.compact ? true : false,\n    });\n\n    // Override the border color if an accent color was provided (compact card only)\n    let style;\n    if (type === DocumentCardType.compact && accentColor) {\n      style = {\n        borderBottomColor: accentColor,\n      };\n    }\n\n    // if this element is actionable it should have an aria role\n    const role = this.props.role || (actionable ? (onClick ? 'button' : 'link') : undefined);\n    const tabIndex = actionable ? 0 : undefined;\n\n    return (\n      <div\n        ref={this._rootElement}\n        tabIndex={tabIndex}\n        data-is-focusable={actionable}\n        role={role}\n        className={this._classNames.root}\n        onKeyDown={actionable ? this._onKeyDown : undefined}\n        onClick={actionable ? this._onClick : undefined}\n        style={style}\n        {...nativeProps}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  public focus(): void {\n    if (this._rootElement.current) {\n      this._rootElement.current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._onAction(ev);\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n      this._onAction(ev);\n    }\n  };\n\n  private _onAction = (ev: React.SyntheticEvent<HTMLElement>): void => {\n    const { onClick, onClickHref, onClickTarget } = this.props;\n\n    if (onClick) {\n      onClick(ev);\n    } else if (!onClick && onClickHref) {\n      // If no onClick Function was provided and we do have an onClickHref, redirect to the onClickHref\n      if (onClickTarget) {\n        window.open(onClickHref, onClickTarget, 'noreferrer noopener nofollow');\n      } else {\n        window.location.href = onClickHref;\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}