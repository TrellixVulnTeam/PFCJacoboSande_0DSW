{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { useConst, usePrevious } from '@uifabric/react-hooks';\nimport { mergeAriaAttributeValues } from '../../Utilities';\nimport { KeytipManager, mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/index';\n/**\n * Hook that creates attributes for components which are enabled with Keytip.\n */\n\nexport function useKeytipData(options) {\n  var _a, _b;\n\n  var uniqueId = React.useRef();\n  var keytipProps = options.keytipProps ? __assign({\n    disabled: options.disabled\n  }, options.keytipProps) : undefined;\n  var keytipManager = useConst(KeytipManager.getInstance());\n  React.useEffect(function () {\n    // Register Keytip in KeytipManager\n    if (keytipProps) {\n      uniqueId.current = keytipManager.register(keytipProps);\n    }\n\n    return function () {\n      // Unregister Keytip in KeytipManager\n      keytipProps && keytipManager.unregister(keytipProps, uniqueId.current);\n    }; // this is meant to run only at mount, and updates are handled separately\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var prevOptions = usePrevious(options);\n\n  if (uniqueId.current && keytipProps && (((_a = prevOptions) === null || _a === void 0 ? void 0 : _a.keytipProps) !== options.keytipProps || ((_b = prevOptions) === null || _b === void 0 ? void 0 : _b.disabled) !== options.disabled)) {\n    keytipManager.update(keytipProps, uniqueId.current);\n  }\n\n  var nativeKeytipProps = {\n    ariaDescribedBy: undefined,\n    keytipId: undefined\n  };\n\n  if (keytipProps) {\n    nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);\n  }\n\n  return nativeKeytipProps;\n}\n/**\n * Gets the aria- and data- attributes to attach to the component\n * @param keytipProps - options for Keytip\n * @param describedByPrepend - ariaDescribedBy value to prepend\n */\n\nfunction getKeytipData(keytipManager, keytipProps, describedByPrepend) {\n  // Add the parent overflow sequence if necessary\n  var newKeytipProps = keytipManager.addParentOverflow(keytipProps); // Construct aria-describedby and data-ktp-id attributes\n\n  var ariaDescribedBy = mergeAriaAttributeValues(describedByPrepend, getAriaDescribedBy(newKeytipProps.keySequences));\n\n  var keySequences = __spreadArrays(newKeytipProps.keySequences);\n\n  if (newKeytipProps.overflowSetSequence) {\n    keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n  }\n\n  var keytipId = sequencesToID(keySequences);\n  return {\n    ariaDescribedBy: ariaDescribedBy,\n    keytipId: keytipId\n  };\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,uBAAtC;AACA,SAASC,wBAAT,QAAyC,iBAAzC;AAGA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,aAAxC,EAAuDC,kBAAvD,QAAiF,+BAAjF;AAOA;;;;AAGA,OAAM,SAAUC,aAAV,CAAwBC,OAAxB,EAAkD;;;EACtD,IAAMC,QAAQ,GAAGV,KAAK,CAACW,MAAN,EAAjB;EACA,IAAMC,WAAW,GAA6BH,OAAO,CAACG,WAAR,GAC3CC;IACGC,QAAQ,EAAEL,OAAO,CAACK;EADrB,GAEML,OAAO,CAACG,WAFd,CAD2C,GAK1CG,SALJ;EAOA,IAAMC,aAAa,GAAGf,QAAQ,CAAgBG,aAAa,CAACa,WAAd,EAAhB,CAA9B;EAEAjB,KAAK,CAACkB,SAAN,CAAgB;IACd;IACA,IAAIN,WAAJ,EAAiB;MACfF,QAAQ,CAACS,OAAT,GAAmBH,aAAa,CAACI,QAAd,CAAuBR,WAAvB,CAAnB;IACD;;IAED,OAAO;MACL;MACAA,WAAW,IAAII,aAAa,CAACK,UAAd,CAAyBT,WAAzB,EAAsCF,QAAQ,CAACS,OAA/C,CAAf;IACD,CAHD,CANc,CAUd;IACA;EACD,CAZD,EAYG,EAZH;EAcA,IAAMG,WAAW,GAAGpB,WAAW,CAACO,OAAD,CAA/B;;EAEA,IACEC,QAAQ,CAACS,OAAT,IACAP,WADA,KAEC,wBAAW,IAAX,IAAWW,aAAX,GAAW,MAAX,GAAWA,GAAEX,WAAb,MAA6BH,OAAO,CAACG,WAArC,IAAoD,wBAAW,IAAX,IAAWY,aAAX,GAAW,MAAX,GAAWA,GAAEV,QAAb,MAA0BL,OAAO,CAACK,QAFvF,CADF,EAIE;IACAE,aAAa,CAACS,MAAd,CAAqBb,WAArB,EAAkCF,QAAQ,CAACS,OAA3C;EACD;;EAED,IAAIO,iBAAiB,GAAgB;IACnCC,eAAe,EAAEZ,SADkB;IAEnCa,QAAQ,EAAEb;EAFyB,CAArC;;EAKA,IAAIH,WAAJ,EAAiB;IACfc,iBAAiB,GAAGG,aAAa,CAACb,aAAD,EAAgBJ,WAAhB,EAA6BH,OAAO,CAACkB,eAArC,CAAjC;EACD;;EAED,OAAOD,iBAAP;AACD;AAED;;;;;;AAKA,SAASG,aAAT,CACEb,aADF,EAEEJ,WAFF,EAGEkB,kBAHF,EAG6B;EAE3B;EACA,IAAMC,cAAc,GAAGf,aAAa,CAACgB,iBAAd,CAAgCpB,WAAhC,CAAvB,CAH2B,CAK3B;;EACA,IAAMe,eAAe,GAAGxB,wBAAwB,CAC9C2B,kBAD8C,EAE9CvB,kBAAkB,CAACwB,cAAc,CAACE,YAAhB,CAF4B,CAAhD;;EAKA,IAAIA,YAAY,kBAAOF,cAAc,CAACE,YAAtB,CAAhB;;EACA,IAAIF,cAAc,CAACG,mBAAnB,EAAwC;IACtCD,YAAY,GAAG5B,cAAc,CAAC4B,YAAD,EAAeF,cAAc,CAACG,mBAA9B,CAA7B;EACD;;EACD,IAAMN,QAAQ,GAAGtB,aAAa,CAAC2B,YAAD,CAA9B;EAEA,OAAO;IACLN,eAAe,iBADV;IAELC,QAAQ;EAFH,CAAP;AAID","names":["React","useConst","usePrevious","mergeAriaAttributeValues","KeytipManager","mergeOverflows","sequencesToID","getAriaDescribedBy","useKeytipData","options","uniqueId","useRef","keytipProps","__assign","disabled","undefined","keytipManager","getInstance","useEffect","current","register","unregister","prevOptions","_a","_b","update","nativeKeytipProps","ariaDescribedBy","keytipId","getKeytipData","describedByPrepend","newKeytipProps","addParentOverflow","keySequences","overflowSetSequence"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\KeytipData\\useKeytipData.ts"],"sourcesContent":["import * as React from 'react';\nimport { useConst, usePrevious } from '@uifabric/react-hooks';\nimport { mergeAriaAttributeValues } from '../../Utilities';\nimport { KeytipDataOptions } from './KeytipData.types';\nimport { IKeytipProps } from '../../Keytip';\nimport { KeytipManager, mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/index';\n\nexport interface IKeytipData {\n  ariaDescribedBy: string | undefined;\n  keytipId: string | undefined;\n}\n\n/**\n * Hook that creates attributes for components which are enabled with Keytip.\n */\nexport function useKeytipData(options: KeytipDataOptions): IKeytipData {\n  const uniqueId = React.useRef<string>();\n  const keytipProps: IKeytipProps | undefined = options.keytipProps\n    ? {\n        disabled: options.disabled,\n        ...options.keytipProps,\n      }\n    : undefined;\n\n  const keytipManager = useConst<KeytipManager>(KeytipManager.getInstance());\n\n  React.useEffect(() => {\n    // Register Keytip in KeytipManager\n    if (keytipProps) {\n      uniqueId.current = keytipManager.register(keytipProps);\n    }\n\n    return () => {\n      // Unregister Keytip in KeytipManager\n      keytipProps && keytipManager.unregister(keytipProps, uniqueId.current!);\n    };\n    // this is meant to run only at mount, and updates are handled separately\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const prevOptions = usePrevious(options);\n\n  if (\n    uniqueId.current &&\n    keytipProps &&\n    (prevOptions?.keytipProps !== options.keytipProps || prevOptions?.disabled !== options.disabled)\n  ) {\n    keytipManager.update(keytipProps, uniqueId.current);\n  }\n\n  let nativeKeytipProps: IKeytipData = {\n    ariaDescribedBy: undefined,\n    keytipId: undefined,\n  };\n\n  if (keytipProps) {\n    nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);\n  }\n\n  return nativeKeytipProps;\n}\n\n/**\n * Gets the aria- and data- attributes to attach to the component\n * @param keytipProps - options for Keytip\n * @param describedByPrepend - ariaDescribedBy value to prepend\n */\nfunction getKeytipData(\n  keytipManager: KeytipManager,\n  keytipProps: IKeytipProps,\n  describedByPrepend?: string,\n): IKeytipData {\n  // Add the parent overflow sequence if necessary\n  const newKeytipProps = keytipManager.addParentOverflow(keytipProps);\n\n  // Construct aria-describedby and data-ktp-id attributes\n  const ariaDescribedBy = mergeAriaAttributeValues(\n    describedByPrepend,\n    getAriaDescribedBy(newKeytipProps.keySequences),\n  )!;\n\n  let keySequences = [...newKeytipProps.keySequences];\n  if (newKeytipProps.overflowSetSequence) {\n    keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n  }\n  const keytipId = sequencesToID(keySequences);\n\n  return {\n    ariaDescribedBy,\n    keytipId,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}