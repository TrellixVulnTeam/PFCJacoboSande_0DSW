{"ast":null,"code":"import { getWindow } from './dom/getWindow';\n/**\n * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.\n * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.\n *\n * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a\n * new instance of the class and remember to call dispose() during your code's dispose handler.\n *\n * @public\n */\n\nvar Async =\n/** @class */\nfunction () {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function Async(parent, onError) {\n    this._timeoutIds = null;\n    this._immediateIds = null;\n    this._intervalIds = null;\n    this._animationFrameIds = null;\n    this._isDisposed = false;\n    this._parent = parent || null;\n    this._onErrorHandler = onError;\n\n    this._noop = function () {\n      /* do nothing */\n    };\n  }\n  /**\n   * Dispose function, clears all async operations.\n   */\n\n\n  Async.prototype.dispose = function () {\n    var id;\n    this._isDisposed = true;\n    this._parent = null; // Clear timeouts.\n\n    if (this._timeoutIds) {\n      for (id in this._timeoutIds) {\n        if (this._timeoutIds.hasOwnProperty(id)) {\n          this.clearTimeout(parseInt(id, 10));\n        }\n      }\n\n      this._timeoutIds = null;\n    } // Clear immediates.\n\n\n    if (this._immediateIds) {\n      for (id in this._immediateIds) {\n        if (this._immediateIds.hasOwnProperty(id)) {\n          this.clearImmediate(parseInt(id, 10));\n        }\n      }\n\n      this._immediateIds = null;\n    } // Clear intervals.\n\n\n    if (this._intervalIds) {\n      for (id in this._intervalIds) {\n        if (this._intervalIds.hasOwnProperty(id)) {\n          this.clearInterval(parseInt(id, 10));\n        }\n      }\n\n      this._intervalIds = null;\n    } // Clear animation frames.\n\n\n    if (this._animationFrameIds) {\n      for (id in this._animationFrameIds) {\n        if (this._animationFrameIds.hasOwnProperty(id)) {\n          this.cancelAnimationFrame(parseInt(id, 10));\n        }\n      }\n\n      this._animationFrameIds = null;\n    }\n  };\n  /**\n   * SetTimeout override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n\n\n  Async.prototype.setTimeout = function (callback, duration) {\n    var _this = this;\n\n    var timeoutId = 0;\n\n    if (!this._isDisposed) {\n      if (!this._timeoutIds) {\n        this._timeoutIds = {};\n      }\n\n      timeoutId = setTimeout(function () {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n        try {\n          // Now delete the record and call the callback.\n          if (_this._timeoutIds) {\n            delete _this._timeoutIds[timeoutId];\n          }\n\n          callback.apply(_this._parent);\n        } catch (e) {\n          if (_this._onErrorHandler) {\n            _this._onErrorHandler(e);\n          }\n        }\n      }, duration);\n      this._timeoutIds[timeoutId] = true;\n    }\n\n    return timeoutId;\n  };\n  /**\n   * Clears the timeout.\n   * @param id - Id to cancel.\n   */\n\n\n  Async.prototype.clearTimeout = function (id) {\n    if (this._timeoutIds && this._timeoutIds[id]) {\n      clearTimeout(id);\n      delete this._timeoutIds[id];\n    }\n  };\n  /**\n   * SetImmediate override, which will auto cancel the immediate during dispose.\n   * @param callback - Callback to execute.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   * @returns The setTimeout id.\n   */\n\n\n  Async.prototype.setImmediate = function (callback, targetElement) {\n    var _this = this;\n\n    var immediateId = 0;\n    var win = getWindow(targetElement);\n\n    if (!this._isDisposed) {\n      if (!this._immediateIds) {\n        this._immediateIds = {};\n      }\n\n      var setImmediateCallback = function setImmediateCallback() {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n        try {\n          // Now delete the record and call the callback.\n          if (_this._immediateIds) {\n            delete _this._immediateIds[immediateId];\n          }\n\n          callback.apply(_this._parent);\n        } catch (e) {\n          _this._logError(e);\n        }\n      };\n\n      immediateId = win.setTimeout(setImmediateCallback, 0);\n      this._immediateIds[immediateId] = true;\n    }\n\n    return immediateId;\n  };\n  /**\n   * Clears the immediate.\n   * @param id - Id to cancel.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   */\n\n\n  Async.prototype.clearImmediate = function (id, targetElement) {\n    var win = getWindow(targetElement);\n\n    if (this._immediateIds && this._immediateIds[id]) {\n      win.clearTimeout(id);\n      delete this._immediateIds[id];\n    }\n  };\n  /**\n   * SetInterval override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n\n\n  Async.prototype.setInterval = function (callback, duration) {\n    var _this = this;\n\n    var intervalId = 0;\n\n    if (!this._isDisposed) {\n      if (!this._intervalIds) {\n        this._intervalIds = {};\n      }\n\n      intervalId = setInterval(function () {\n        // Time to execute the interval callback, enqueue it as a foreground task to be executed.\n        try {\n          callback.apply(_this._parent);\n        } catch (e) {\n          _this._logError(e);\n        }\n      }, duration);\n      this._intervalIds[intervalId] = true;\n    }\n\n    return intervalId;\n  };\n  /**\n   * Clears the interval.\n   * @param id - Id to cancel.\n   */\n\n\n  Async.prototype.clearInterval = function (id) {\n    if (this._intervalIds && this._intervalIds[id]) {\n      clearInterval(id);\n      delete this._intervalIds[id];\n    }\n  };\n  /**\n   * Creates a function that, when executed, will only call the func function at most once per\n   * every wait milliseconds. Provide an options object to indicate that func should be invoked\n   * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled\n   * function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the throttled function is invoked more than once during the wait timeout.\n   *\n   * @param func - The function to throttle.\n   * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.\n   * @param options - The options object.\n   * @returns The new throttled function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Async.prototype.throttle = function (func, wait, options) {\n    var _this = this;\n\n    if (this._isDisposed) {\n      return this._noop;\n    }\n\n    var waitMS = wait || 0;\n    var leading = true;\n    var trailing = true;\n    var lastExecuteTime = 0;\n    var lastResult; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var lastArgs;\n    var timeoutId = null;\n\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n\n    var callback = function callback(userCall) {\n      var now = Date.now();\n      var delta = now - lastExecuteTime;\n      var waitLength = leading ? waitMS - delta : waitMS;\n\n      if (delta >= waitMS && (!userCall || leading)) {\n        lastExecuteTime = now;\n\n        if (timeoutId) {\n          _this.clearTimeout(timeoutId);\n\n          timeoutId = null;\n        }\n\n        lastResult = func.apply(_this._parent, lastArgs);\n      } else if (timeoutId === null && trailing) {\n        timeoutId = _this.setTimeout(callback, waitLength);\n      }\n\n      return lastResult;\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var resultFunction = function resultFunction() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      lastArgs = args;\n      return callback(true);\n    };\n\n    return resultFunction;\n  };\n  /**\n   * Creates a function that will delay the execution of func until after wait milliseconds have\n   * elapsed since the last time it was invoked. Provide an options object to indicate that func\n   * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls\n   * to the debounced function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the debounced function is invoked more than once during the wait\n   * timeout.\n   *\n   * @param func - The function to debounce.\n   * @param wait - The number of milliseconds to delay.\n   * @param options - The options object.\n   * @returns The new debounced function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Async.prototype.debounce = function (func, wait, options) {\n    var _this = this;\n\n    if (this._isDisposed) {\n      var noOpFunction = function noOpFunction() {\n        /** Do nothing */\n      };\n\n      noOpFunction.cancel = function () {\n        return;\n      };\n\n      noOpFunction.flush = function () {\n        return null;\n      };\n\n      noOpFunction.pending = function () {\n        return false;\n      };\n\n      return noOpFunction;\n    }\n\n    var waitMS = wait || 0;\n    var leading = false;\n    var trailing = true;\n    var maxWait = null;\n    var lastCallTime = 0;\n    var lastExecuteTime = Date.now();\n    var lastResult; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var lastArgs;\n    var timeoutId = null;\n\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n\n    if (options && typeof options.maxWait === 'number' && !isNaN(options.maxWait)) {\n      maxWait = options.maxWait;\n    }\n\n    var markExecuted = function markExecuted(time) {\n      if (timeoutId) {\n        _this.clearTimeout(timeoutId);\n\n        timeoutId = null;\n      }\n\n      lastExecuteTime = time;\n    };\n\n    var invokeFunction = function invokeFunction(time) {\n      markExecuted(time);\n      lastResult = func.apply(_this._parent, lastArgs);\n    };\n\n    var callback = function callback(userCall) {\n      var now = Date.now();\n      var executeImmediately = false;\n\n      if (userCall) {\n        if (leading && now - lastCallTime >= waitMS) {\n          executeImmediately = true;\n        }\n\n        lastCallTime = now;\n      }\n\n      var delta = now - lastCallTime;\n      var waitLength = waitMS - delta;\n      var maxWaitDelta = now - lastExecuteTime;\n      var maxWaitExpired = false;\n\n      if (maxWait !== null) {\n        // maxWait only matters when there is a pending callback\n        if (maxWaitDelta >= maxWait && timeoutId) {\n          maxWaitExpired = true;\n        } else {\n          waitLength = Math.min(waitLength, maxWait - maxWaitDelta);\n        }\n      }\n\n      if (delta >= waitMS || maxWaitExpired || executeImmediately) {\n        invokeFunction(now);\n      } else if ((timeoutId === null || !userCall) && trailing) {\n        timeoutId = _this.setTimeout(callback, waitLength);\n      }\n\n      return lastResult;\n    };\n\n    var pending = function pending() {\n      return !!timeoutId;\n    };\n\n    var cancel = function cancel() {\n      if (pending()) {\n        // Mark the debounced function as having executed\n        markExecuted(Date.now());\n      }\n    };\n\n    var flush = function flush() {\n      if (pending()) {\n        invokeFunction(Date.now());\n      }\n\n      return lastResult;\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var resultFunction = function resultFunction() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      lastArgs = args;\n      return callback(true);\n    };\n\n    resultFunction.cancel = cancel;\n    resultFunction.flush = flush;\n    resultFunction.pending = pending;\n    return resultFunction;\n  };\n\n  Async.prototype.requestAnimationFrame = function (callback, targetElement) {\n    var _this = this;\n\n    var animationFrameId = 0;\n    var win = getWindow(targetElement);\n\n    if (!this._isDisposed) {\n      if (!this._animationFrameIds) {\n        this._animationFrameIds = {};\n      }\n\n      var animationFrameCallback = function animationFrameCallback() {\n        try {\n          // Now delete the record and call the callback.\n          if (_this._animationFrameIds) {\n            delete _this._animationFrameIds[animationFrameId];\n          }\n\n          callback.apply(_this._parent);\n        } catch (e) {\n          _this._logError(e);\n        }\n      };\n\n      animationFrameId = win.requestAnimationFrame ? win.requestAnimationFrame(animationFrameCallback) : win.setTimeout(animationFrameCallback, 0);\n      this._animationFrameIds[animationFrameId] = true;\n    }\n\n    return animationFrameId;\n  };\n\n  Async.prototype.cancelAnimationFrame = function (id, targetElement) {\n    var win = getWindow(targetElement);\n\n    if (this._animationFrameIds && this._animationFrameIds[id]) {\n      win.cancelAnimationFrame ? win.cancelAnimationFrame(id) : win.clearTimeout(id);\n      delete this._animationFrameIds[id];\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Async.prototype._logError = function (e) {\n    if (this._onErrorHandler) {\n      this._onErrorHandler(e);\n    }\n  };\n\n  return Async;\n}();\n\nexport { Async };","map":{"version":3,"mappings":"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","names":["getWindow","parent","onError","_isDisposed","_parent","_onErrorHandler","_noop","Async","id","_timeoutIds","hasOwnProperty","clearTimeout","parseInt","_immediateIds","clearImmediate","_intervalIds","clearInterval","_animationFrameIds","cancelAnimationFrame","callback","duration","timeoutId","setTimeout","_this","apply","e","targetElement","immediateId","win","setImmediateCallback","_logError","intervalId","setInterval","func","wait","options","waitMS","leading","trailing","lastExecuteTime","lastResult","lastArgs","userCall","now","Date","delta","waitLength","resultFunction","args","noOpFunction","cancel","flush","pending","maxWait","lastCallTime","isNaN","markExecuted","time","invokeFunction","executeImmediately","maxWaitDelta","maxWaitExpired","Math","min","animationFrameId","animationFrameCallback","requestAnimationFrame"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\src\\Async.ts"],"sourcesContent":["import { getWindow } from './dom/getWindow';\n\ndeclare function setTimeout(cb: Function, delay: number): number;\ndeclare function setInterval(cb: Function, delay: number): number;\n\n/**\n * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.\n * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.\n *\n * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a\n * new instance of the class and remember to call dispose() during your code's dispose handler.\n *\n * @public\n */\nexport class Async {\n  private _timeoutIds: { [id: number]: boolean } | null = null;\n  private _immediateIds: { [id: number]: boolean } | null = null;\n  private _intervalIds: { [id: number]: boolean } | null = null;\n  private _animationFrameIds: { [id: number]: boolean } | null = null;\n  private _isDisposed: boolean;\n  private _parent: object | null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _onErrorHandler: ((e: any) => void) | undefined;\n  private _noop: () => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(parent?: object, onError?: (e: any) => void) {\n    this._isDisposed = false;\n    this._parent = parent || null;\n    this._onErrorHandler = onError;\n    this._noop = () => {\n      /* do nothing */\n    };\n  }\n\n  /**\n   * Dispose function, clears all async operations.\n   */\n  public dispose(): void {\n    let id;\n\n    this._isDisposed = true;\n    this._parent = null;\n\n    // Clear timeouts.\n    if (this._timeoutIds) {\n      for (id in this._timeoutIds) {\n        if (this._timeoutIds.hasOwnProperty(id)) {\n          this.clearTimeout(parseInt(id, 10));\n        }\n      }\n\n      this._timeoutIds = null;\n    }\n\n    // Clear immediates.\n    if (this._immediateIds) {\n      for (id in this._immediateIds) {\n        if (this._immediateIds.hasOwnProperty(id)) {\n          this.clearImmediate(parseInt(id, 10));\n        }\n      }\n\n      this._immediateIds = null;\n    }\n\n    // Clear intervals.\n    if (this._intervalIds) {\n      for (id in this._intervalIds) {\n        if (this._intervalIds.hasOwnProperty(id)) {\n          this.clearInterval(parseInt(id, 10));\n        }\n      }\n      this._intervalIds = null;\n    }\n\n    // Clear animation frames.\n    if (this._animationFrameIds) {\n      for (id in this._animationFrameIds) {\n        if (this._animationFrameIds.hasOwnProperty(id)) {\n          this.cancelAnimationFrame(parseInt(id, 10));\n        }\n      }\n\n      this._animationFrameIds = null;\n    }\n  }\n\n  /**\n   * SetTimeout override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n  public setTimeout(callback: () => void, duration: number): number {\n    let timeoutId = 0;\n\n    if (!this._isDisposed) {\n      if (!this._timeoutIds) {\n        this._timeoutIds = {};\n      }\n\n      timeoutId = setTimeout(() => {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n\n        try {\n          // Now delete the record and call the callback.\n          if (this._timeoutIds) {\n            delete this._timeoutIds[timeoutId];\n          }\n          callback.apply(this._parent);\n        } catch (e) {\n          if (this._onErrorHandler) {\n            this._onErrorHandler(e);\n          }\n        }\n      }, duration);\n\n      this._timeoutIds[timeoutId] = true;\n    }\n\n    return timeoutId;\n  }\n\n  /**\n   * Clears the timeout.\n   * @param id - Id to cancel.\n   */\n  public clearTimeout(id: number): void {\n    if (this._timeoutIds && this._timeoutIds[id]) {\n      clearTimeout(id);\n      delete this._timeoutIds[id];\n    }\n  }\n\n  /**\n   * SetImmediate override, which will auto cancel the immediate during dispose.\n   * @param callback - Callback to execute.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   * @returns The setTimeout id.\n   */\n  public setImmediate(callback: () => void, targetElement?: Element | null): number {\n    let immediateId = 0;\n    const win = getWindow(targetElement)!;\n\n    if (!this._isDisposed) {\n      if (!this._immediateIds) {\n        this._immediateIds = {};\n      }\n\n      let setImmediateCallback = () => {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n\n        try {\n          // Now delete the record and call the callback.\n          if (this._immediateIds) {\n            delete this._immediateIds[immediateId];\n          }\n          callback.apply(this._parent);\n        } catch (e) {\n          this._logError(e);\n        }\n      };\n\n      immediateId = win.setTimeout(setImmediateCallback, 0);\n\n      this._immediateIds[immediateId] = true;\n    }\n\n    return immediateId;\n  }\n\n  /**\n   * Clears the immediate.\n   * @param id - Id to cancel.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   */\n  public clearImmediate(id: number, targetElement?: Element | null): void {\n    const win = getWindow(targetElement)!;\n\n    if (this._immediateIds && this._immediateIds[id]) {\n      win.clearTimeout(id);\n      delete this._immediateIds[id];\n    }\n  }\n\n  /**\n   * SetInterval override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n  public setInterval(callback: () => void, duration: number): number {\n    let intervalId = 0;\n\n    if (!this._isDisposed) {\n      if (!this._intervalIds) {\n        this._intervalIds = {};\n      }\n\n      intervalId = setInterval(() => {\n        // Time to execute the interval callback, enqueue it as a foreground task to be executed.\n        try {\n          callback.apply(this._parent);\n        } catch (e) {\n          this._logError(e);\n        }\n      }, duration);\n\n      this._intervalIds[intervalId] = true;\n    }\n\n    return intervalId;\n  }\n\n  /**\n   * Clears the interval.\n   * @param id - Id to cancel.\n   */\n  public clearInterval(id: number): void {\n    if (this._intervalIds && this._intervalIds[id]) {\n      clearInterval(id);\n      delete this._intervalIds[id];\n    }\n  }\n\n  /**\n   * Creates a function that, when executed, will only call the func function at most once per\n   * every wait milliseconds. Provide an options object to indicate that func should be invoked\n   * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled\n   * function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the throttled function is invoked more than once during the wait timeout.\n   *\n   * @param func - The function to throttle.\n   * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.\n   * @param options - The options object.\n   * @returns The new throttled function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public throttle<T extends (...args: any[]) => any>(\n    func: T,\n    wait?: number,\n    options?: {\n      leading?: boolean;\n      trailing?: boolean;\n    },\n  ): T {\n    if (this._isDisposed) {\n      return this._noop as T;\n    }\n\n    let waitMS = wait || 0;\n    let leading = true;\n    let trailing = true;\n    let lastExecuteTime = 0;\n    let lastResult: T;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let lastArgs: any[];\n    let timeoutId: number | null = null;\n\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n\n    let callback = (userCall?: boolean) => {\n      let now = Date.now();\n      let delta = now - lastExecuteTime;\n      let waitLength = leading ? waitMS - delta : waitMS;\n      if (delta >= waitMS && (!userCall || leading)) {\n        lastExecuteTime = now;\n        if (timeoutId) {\n          this.clearTimeout(timeoutId);\n          timeoutId = null;\n        }\n        lastResult = func.apply(this._parent, lastArgs);\n      } else if (timeoutId === null && trailing) {\n        timeoutId = this.setTimeout(callback, waitLength);\n      }\n\n      return lastResult;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let resultFunction = ((...args: any[]): any => {\n      lastArgs = args;\n      return callback(true);\n    }) as T;\n\n    return resultFunction;\n  }\n\n  /**\n   * Creates a function that will delay the execution of func until after wait milliseconds have\n   * elapsed since the last time it was invoked. Provide an options object to indicate that func\n   * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls\n   * to the debounced function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the debounced function is invoked more than once during the wait\n   * timeout.\n   *\n   * @param func - The function to debounce.\n   * @param wait - The number of milliseconds to delay.\n   * @param options - The options object.\n   * @returns The new debounced function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public debounce<T extends (...args: any[]) => any>(\n    func: T,\n    wait?: number,\n    options?: {\n      leading?: boolean;\n      maxWait?: number;\n      trailing?: boolean;\n    },\n  ): ICancelable<T> & T {\n    if (this._isDisposed) {\n      let noOpFunction = (() => {\n        /** Do nothing */\n      }) as ICancelable<T> & T;\n\n      noOpFunction.cancel = () => {\n        return;\n      };\n      noOpFunction.flush = ((() => null) as unknown) as () => ReturnType<T>;\n      noOpFunction.pending = () => false;\n\n      return noOpFunction;\n    }\n\n    let waitMS = wait || 0;\n    let leading = false;\n    let trailing = true;\n    let maxWait: number | null = null;\n    let lastCallTime = 0;\n    let lastExecuteTime = Date.now();\n    let lastResult: ReturnType<T>;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let lastArgs: any[];\n    let timeoutId: number | null = null;\n\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n\n    if (options && typeof options.maxWait === 'number' && !isNaN(options.maxWait)) {\n      maxWait = options.maxWait;\n    }\n\n    let markExecuted = (time: number) => {\n      if (timeoutId) {\n        this.clearTimeout(timeoutId);\n        timeoutId = null;\n      }\n      lastExecuteTime = time;\n    };\n\n    let invokeFunction = (time: number) => {\n      markExecuted(time);\n      lastResult = func.apply(this._parent, lastArgs);\n    };\n\n    let callback = (userCall?: boolean) => {\n      let now = Date.now();\n      let executeImmediately = false;\n      if (userCall) {\n        if (leading && now - lastCallTime >= waitMS) {\n          executeImmediately = true;\n        }\n        lastCallTime = now;\n      }\n      let delta = now - lastCallTime;\n      let waitLength = waitMS - delta;\n      let maxWaitDelta = now - lastExecuteTime;\n      let maxWaitExpired = false;\n\n      if (maxWait !== null) {\n        // maxWait only matters when there is a pending callback\n        if (maxWaitDelta >= maxWait && timeoutId) {\n          maxWaitExpired = true;\n        } else {\n          waitLength = Math.min(waitLength, maxWait - maxWaitDelta);\n        }\n      }\n\n      if (delta >= waitMS || maxWaitExpired || executeImmediately) {\n        invokeFunction(now);\n      } else if ((timeoutId === null || !userCall) && trailing) {\n        timeoutId = this.setTimeout(callback, waitLength);\n      }\n\n      return lastResult;\n    };\n\n    let pending = (): boolean => {\n      return !!timeoutId;\n    };\n\n    let cancel = (): void => {\n      if (pending()) {\n        // Mark the debounced function as having executed\n        markExecuted(Date.now());\n      }\n    };\n\n    let flush = () => {\n      if (pending()) {\n        invokeFunction(Date.now());\n      }\n\n      return lastResult;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let resultFunction = ((...args: any[]) => {\n      lastArgs = args;\n      return callback(true);\n    }) as ICancelable<T> & T;\n\n    resultFunction.cancel = cancel;\n    resultFunction.flush = flush;\n    resultFunction.pending = pending;\n\n    return resultFunction;\n  }\n\n  public requestAnimationFrame(callback: () => void, targetElement?: Element | null): number {\n    let animationFrameId = 0;\n    const win = getWindow(targetElement)!;\n\n    if (!this._isDisposed) {\n      if (!this._animationFrameIds) {\n        this._animationFrameIds = {};\n      }\n\n      let animationFrameCallback = () => {\n        try {\n          // Now delete the record and call the callback.\n          if (this._animationFrameIds) {\n            delete this._animationFrameIds[animationFrameId];\n          }\n\n          callback.apply(this._parent);\n        } catch (e) {\n          this._logError(e);\n        }\n      };\n\n      animationFrameId = win.requestAnimationFrame\n        ? win.requestAnimationFrame(animationFrameCallback)\n        : win.setTimeout(animationFrameCallback, 0);\n\n      this._animationFrameIds[animationFrameId] = true;\n    }\n\n    return animationFrameId;\n  }\n\n  public cancelAnimationFrame(id: number, targetElement?: Element | null): void {\n    const win = getWindow(targetElement)!;\n\n    if (this._animationFrameIds && this._animationFrameIds[id]) {\n      win.cancelAnimationFrame ? win.cancelAnimationFrame(id) : win.clearTimeout(id);\n      delete this._animationFrameIds[id];\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected _logError(e: any): void {\n    if (this._onErrorHandler) {\n      this._onErrorHandler(e);\n    }\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ICancelable<T extends (...args: any[]) => any> = {\n  flush: () => ReturnType<T>;\n  cancel: () => void;\n  pending: () => boolean;\n};\n"]},"metadata":{},"sourceType":"module"}