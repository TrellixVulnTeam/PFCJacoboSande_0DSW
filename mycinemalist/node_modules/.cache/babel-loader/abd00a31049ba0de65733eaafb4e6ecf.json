{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { hiddenContentStyle } from '../../Styling';\nimport { initializeComponentRef, Async, divProperties, getNativeProps, getId, assign, hasOverflow, portalContainsElement, classNamesFunction, KeyCodes } from '../../Utilities';\nimport { TooltipOverflowMode } from './TooltipHost.types';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDelay } from './Tooltip.types';\nvar getClassNames = classNamesFunction();\n\nvar TooltipHostBase =\n/** @class */\nfunction (_super) {\n  __extends(TooltipHostBase, _super); // Constructor\n\n\n  function TooltipHostBase(props) {\n    var _this = _super.call(this, props) || this; // The wrapping div that gets the hover events\n\n\n    _this._tooltipHost = React.createRef();\n    _this._defaultTooltipId = getId('tooltip');\n\n    _this.show = function () {\n      _this._toggleTooltip(true);\n    };\n\n    _this.dismiss = function () {\n      _this._hideTooltip();\n    };\n\n    _this._getTargetElement = function () {\n      if (!_this._tooltipHost.current) {\n        return undefined;\n      }\n\n      var overflowMode = _this.props.overflowMode; // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\n      // to the parent element, otherwise it might look off.\n\n      if (overflowMode !== undefined) {\n        switch (overflowMode) {\n          case TooltipOverflowMode.Parent:\n            return _this._tooltipHost.current.parentElement;\n\n          case TooltipOverflowMode.Self:\n            return _this._tooltipHost.current;\n        }\n      }\n\n      return _this._tooltipHost.current;\n    }; // Show Tooltip\n\n\n    _this._onTooltipMouseEnter = function (ev) {\n      var _a = _this.props,\n          overflowMode = _a.overflowMode,\n          delay = _a.delay;\n\n      if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== _this) {\n        TooltipHostBase._currentVisibleTooltip.dismiss();\n      }\n\n      TooltipHostBase._currentVisibleTooltip = _this;\n\n      if (overflowMode !== undefined) {\n        var overflowElement = _this._getTargetElement();\n\n        if (overflowElement && !hasOverflow(overflowElement)) {\n          return;\n        }\n      }\n\n      if (ev.target && portalContainsElement(ev.target, _this._getTargetElement())) {\n        // Do not show tooltip when target is inside a portal relative to TooltipHost.\n        return;\n      }\n\n      _this._clearDismissTimer();\n\n      _this._clearOpenTimer();\n\n      if (delay !== TooltipDelay.zero) {\n        _this.setState({\n          isAriaPlaceholderRendered: true\n        });\n\n        var delayTime = _this._getDelayTime(delay); // non-null assertion because we set it in `defaultProps`\n\n\n        _this._openTimerId = _this._async.setTimeout(function () {\n          _this._toggleTooltip(true);\n        }, delayTime);\n      } else {\n        _this._toggleTooltip(true);\n      }\n    }; // Hide Tooltip\n\n\n    _this._onTooltipMouseLeave = function (ev) {\n      var closeDelay = _this.props.closeDelay;\n\n      _this._clearDismissTimer();\n\n      _this._clearOpenTimer();\n\n      if (closeDelay) {\n        _this._dismissTimerId = _this._async.setTimeout(function () {\n          _this._toggleTooltip(false);\n        }, closeDelay);\n      } else {\n        _this._toggleTooltip(false);\n      }\n\n      if (TooltipHostBase._currentVisibleTooltip === _this) {\n        TooltipHostBase._currentVisibleTooltip = undefined;\n      }\n    };\n\n    _this._onTooltipKeyDown = function (ev) {\n      if ((ev.which === KeyCodes.escape || ev.ctrlKey) && _this.state.isTooltipVisible) {\n        _this._hideTooltip();\n\n        ev.stopPropagation();\n      }\n    };\n\n    _this._clearDismissTimer = function () {\n      _this._async.clearTimeout(_this._dismissTimerId);\n    };\n\n    _this._clearOpenTimer = function () {\n      _this._async.clearTimeout(_this._openTimerId);\n    }; // Hide Tooltip\n\n\n    _this._hideTooltip = function () {\n      _this._clearOpenTimer();\n\n      _this._clearDismissTimer();\n\n      _this._toggleTooltip(false);\n    };\n\n    _this._toggleTooltip = function (isTooltipVisible) {\n      if (_this.state.isTooltipVisible !== isTooltipVisible) {\n        _this.setState({\n          isAriaPlaceholderRendered: false,\n          isTooltipVisible: isTooltipVisible\n        }, function () {\n          return _this.props.onTooltipToggle && _this.props.onTooltipToggle(isTooltipVisible);\n        });\n      }\n    };\n\n    _this._getDelayTime = function (delay) {\n      switch (delay) {\n        case TooltipDelay.medium:\n          return 300;\n\n        case TooltipDelay.long:\n          return 500;\n\n        default:\n          return 0;\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      isAriaPlaceholderRendered: false,\n      isTooltipVisible: false\n    };\n    _this._async = new Async(_this);\n    return _this;\n  } // Render\n\n\n  TooltipHostBase.prototype.render = function () {\n    var _a = this.props,\n        calloutProps = _a.calloutProps,\n        children = _a.children,\n        content = _a.content,\n        directionalHint = _a.directionalHint,\n        directionalHintForRTL = _a.directionalHintForRTL,\n        className = _a.hostClassName,\n        id = _a.id,\n        _b = _a.setAriaDescribedBy,\n        setAriaDescribedBy = _b === void 0 ? true : _b,\n        tooltipProps = _a.tooltipProps,\n        styles = _a.styles,\n        theme = _a.theme;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className\n    });\n    var _c = this.state,\n        isAriaPlaceholderRendered = _c.isAriaPlaceholderRendered,\n        isTooltipVisible = _c.isTooltipVisible;\n    var tooltipId = id || this._defaultTooltipId;\n    var isContentPresent = !!(content || tooltipProps && tooltipProps.onRenderContent && tooltipProps.onRenderContent());\n    var showTooltip = isTooltipVisible && isContentPresent;\n    var ariaDescribedBy = setAriaDescribedBy && isTooltipVisible && isContentPresent ? tooltipId : undefined;\n    return React.createElement(\"div\", __assign({\n      className: this._classNames.root,\n      ref: this._tooltipHost\n    }, {\n      onFocusCapture: this._onTooltipMouseEnter\n    }, {\n      onBlurCapture: this._hideTooltip\n    }, {\n      onMouseEnter: this._onTooltipMouseEnter,\n      onMouseLeave: this._onTooltipMouseLeave,\n      onKeyDown: this._onTooltipKeyDown,\n      \"aria-describedby\": ariaDescribedBy\n    }), children, showTooltip && React.createElement(Tooltip, __assign({\n      id: tooltipId,\n      content: content,\n      targetElement: this._getTargetElement(),\n      directionalHint: directionalHint,\n      directionalHintForRTL: directionalHintForRTL,\n      calloutProps: assign({}, calloutProps, {\n        onDismiss: this._hideTooltip,\n        onMouseEnter: this._onTooltipMouseEnter,\n        onMouseLeave: this._onTooltipMouseLeave\n      }),\n      onMouseEnter: this._onTooltipMouseEnter,\n      onMouseLeave: this._onTooltipMouseLeave\n    }, getNativeProps(this.props, divProperties), tooltipProps)), isAriaPlaceholderRendered && React.createElement(\"div\", {\n      id: tooltipId,\n      style: hiddenContentStyle\n    }, content));\n  };\n\n  TooltipHostBase.prototype.componentWillUnmount = function () {\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n\n    this._async.dispose();\n  };\n\n  TooltipHostBase.defaultProps = {\n    delay: TooltipDelay.medium\n  };\n  return TooltipHostBase;\n}(React.Component);\n\nexport { TooltipHostBase };","map":{"version":3,"mappings":"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","names":["React","hiddenContentStyle","initializeComponentRef","Async","divProperties","getNativeProps","getId","assign","hasOverflow","portalContainsElement","classNamesFunction","KeyCodes","TooltipOverflowMode","Tooltip","TooltipDelay","getClassNames","__extends","props","_super","_this","createRef","_toggleTooltip","_hideTooltip","_tooltipHost","current","undefined","overflowMode","Parent","parentElement","Self","ev","delay","TooltipHostBase","_currentVisibleTooltip","dismiss","overflowElement","_getTargetElement","target","_clearDismissTimer","_clearOpenTimer","zero","setState","isAriaPlaceholderRendered","delayTime","_getDelayTime","_openTimerId","_async","setTimeout","closeDelay","_dismissTimerId","which","escape","ctrlKey","state","isTooltipVisible","stopPropagation","clearTimeout","onTooltipToggle","medium","long","calloutProps","children","content","directionalHint","directionalHintForRTL","className","id","_b","setAriaDescribedBy","tooltipProps","styles","theme","_classNames","tooltipId","_defaultTooltipId","isContentPresent","onRenderContent","showTooltip","ariaDescribedBy","root","ref","onFocusCapture","_onTooltipMouseEnter","onBlurCapture","onMouseEnter","onMouseLeave","_onTooltipMouseLeave","onKeyDown","_onTooltipKeyDown","__assign","targetElement","onDismiss","style","dispose","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Tooltip\\TooltipHost.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { hiddenContentStyle } from '../../Styling';\nimport {\n  initializeComponentRef,\n  Async,\n  divProperties,\n  getNativeProps,\n  getId,\n  assign,\n  hasOverflow,\n  portalContainsElement,\n  classNamesFunction,\n  KeyCodes,\n} from '../../Utilities';\nimport {\n  ITooltipHostProps,\n  TooltipOverflowMode,\n  ITooltipHostStyles,\n  ITooltipHostStyleProps,\n  ITooltipHost,\n} from './TooltipHost.types';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDelay } from './Tooltip.types';\n\nexport interface ITooltipHostState {\n  isAriaPlaceholderRendered: boolean;\n  isTooltipVisible: boolean;\n}\n\nconst getClassNames = classNamesFunction<ITooltipHostStyleProps, ITooltipHostStyles>();\n\nexport class TooltipHostBase extends React.Component<ITooltipHostProps, ITooltipHostState> implements ITooltipHost {\n  public static defaultProps = {\n    delay: TooltipDelay.medium,\n  };\n\n  private static _currentVisibleTooltip: ITooltipHost | undefined;\n\n  // The wrapping div that gets the hover events\n  private _tooltipHost = React.createRef<HTMLDivElement>();\n\n  private _classNames: { [key in keyof ITooltipHostStyles]: string };\n  private _async: Async;\n  private _dismissTimerId: number;\n  private _openTimerId: number;\n  private _defaultTooltipId = getId('tooltip');\n\n  // Constructor\n  constructor(props: ITooltipHostProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      isAriaPlaceholderRendered: false,\n      isTooltipVisible: false,\n    };\n\n    this._async = new Async(this);\n  }\n\n  // Render\n  public render(): JSX.Element {\n    const {\n      calloutProps,\n      children,\n      content,\n      directionalHint,\n      directionalHintForRTL,\n      hostClassName: className,\n      id,\n      setAriaDescribedBy = true,\n      tooltipProps,\n      styles,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    const { isAriaPlaceholderRendered, isTooltipVisible } = this.state;\n    const tooltipId = id || this._defaultTooltipId;\n    const isContentPresent = !!(\n      content ||\n      (tooltipProps && tooltipProps.onRenderContent && tooltipProps.onRenderContent())\n    );\n    const showTooltip = isTooltipVisible && isContentPresent;\n    const ariaDescribedBy = setAriaDescribedBy && isTooltipVisible && isContentPresent ? tooltipId : undefined;\n\n    return (\n      <div\n        className={this._classNames.root}\n        ref={this._tooltipHost}\n        {...{ onFocusCapture: this._onTooltipMouseEnter }}\n        {...{ onBlurCapture: this._hideTooltip }}\n        onMouseEnter={this._onTooltipMouseEnter}\n        onMouseLeave={this._onTooltipMouseLeave}\n        onKeyDown={this._onTooltipKeyDown}\n        aria-describedby={ariaDescribedBy}\n      >\n        {children}\n        {showTooltip && (\n          <Tooltip\n            id={tooltipId}\n            content={content}\n            targetElement={this._getTargetElement()}\n            directionalHint={directionalHint}\n            directionalHintForRTL={directionalHintForRTL}\n            calloutProps={assign({}, calloutProps, {\n              onDismiss: this._hideTooltip,\n              onMouseEnter: this._onTooltipMouseEnter,\n              onMouseLeave: this._onTooltipMouseLeave,\n            })}\n            onMouseEnter={this._onTooltipMouseEnter}\n            onMouseLeave={this._onTooltipMouseLeave}\n            {...getNativeProps(this.props, divProperties)}\n            {...tooltipProps}\n          />\n        )}\n        {isAriaPlaceholderRendered && (\n          <div id={tooltipId} style={hiddenContentStyle as React.CSSProperties}>\n            {content}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  public componentWillUnmount(): void {\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n\n    this._async.dispose();\n  }\n\n  public show = (): void => {\n    this._toggleTooltip(true);\n  };\n\n  public dismiss = (): void => {\n    this._hideTooltip();\n  };\n\n  private _getTargetElement = (): HTMLElement | undefined => {\n    if (!this._tooltipHost.current) {\n      return undefined;\n    }\n\n    const { overflowMode } = this.props;\n\n    // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\n    // to the parent element, otherwise it might look off.\n    if (overflowMode !== undefined) {\n      switch (overflowMode) {\n        case TooltipOverflowMode.Parent:\n          return this._tooltipHost.current.parentElement!;\n\n        case TooltipOverflowMode.Self:\n          return this._tooltipHost.current;\n      }\n    }\n\n    return this._tooltipHost.current;\n  };\n\n  // Show Tooltip\n  private _onTooltipMouseEnter = (ev: any): void => {\n    const { overflowMode, delay } = this.props;\n\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== this) {\n      TooltipHostBase._currentVisibleTooltip.dismiss();\n    }\n    TooltipHostBase._currentVisibleTooltip = this;\n\n    if (overflowMode !== undefined) {\n      const overflowElement = this._getTargetElement();\n      if (overflowElement && !hasOverflow(overflowElement)) {\n        return;\n      }\n    }\n\n    if (ev.target && portalContainsElement(ev.target as HTMLElement, this._getTargetElement())) {\n      // Do not show tooltip when target is inside a portal relative to TooltipHost.\n      return;\n    }\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (delay !== TooltipDelay.zero) {\n      this.setState({ isAriaPlaceholderRendered: true });\n      const delayTime = this._getDelayTime(delay!); // non-null assertion because we set it in `defaultProps`\n\n      this._openTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(true);\n      }, delayTime);\n    } else {\n      this._toggleTooltip(true);\n    }\n  };\n\n  // Hide Tooltip\n  private _onTooltipMouseLeave = (ev: any): void => {\n    const { closeDelay } = this.props;\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (closeDelay) {\n      this._dismissTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(false);\n      }, closeDelay);\n    } else {\n      this._toggleTooltip(false);\n    }\n\n    if (TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n  };\n\n  private _onTooltipKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if ((ev.which === KeyCodes.escape || ev.ctrlKey) && this.state.isTooltipVisible) {\n      this._hideTooltip();\n      ev.stopPropagation();\n    }\n  };\n\n  private _clearDismissTimer = (): void => {\n    this._async.clearTimeout(this._dismissTimerId);\n  };\n\n  private _clearOpenTimer = (): void => {\n    this._async.clearTimeout(this._openTimerId);\n  };\n\n  // Hide Tooltip\n  private _hideTooltip = (): void => {\n    this._clearOpenTimer();\n    this._clearDismissTimer();\n    this._toggleTooltip(false);\n  };\n\n  private _toggleTooltip = (isTooltipVisible: boolean): void => {\n    if (this.state.isTooltipVisible !== isTooltipVisible) {\n      this.setState(\n        { isAriaPlaceholderRendered: false, isTooltipVisible },\n        () => this.props.onTooltipToggle && this.props.onTooltipToggle(isTooltipVisible),\n      );\n    }\n  };\n\n  private _getDelayTime = (delay: TooltipDelay): number => {\n    switch (delay) {\n      case TooltipDelay.medium:\n        return 300;\n      case TooltipDelay.long:\n        return 500;\n      default:\n        return 0;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}