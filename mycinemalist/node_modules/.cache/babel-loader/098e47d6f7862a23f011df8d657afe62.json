{"ast":null,"code":"/**\n * Determines the effective checked state of a menu item.\n *\n * @param item {IContextualMenuItem} to get the check state of.\n * @returns {true} if the item is checked.\n * @returns {false} if the item is unchecked.\n * @returns {null} if the item is not checkable.\n */\nexport function getIsChecked(item) {\n  if (item.canCheck) {\n    return !!(item.isChecked || item.checked);\n  }\n\n  if (typeof item.isChecked === 'boolean') {\n    return item.isChecked;\n  }\n\n  if (typeof item.checked === 'boolean') {\n    return item.checked;\n  } // Item is not checkable.\n\n\n  return null;\n}\nexport function hasSubmenu(item) {\n  return !!(item.subMenuProps || item.items);\n}\nexport function isItemDisabled(item) {\n  return !!(item.isDisabled || item.disabled);\n}\nexport function getMenuItemAriaRole(item) {\n  var isChecked = getIsChecked(item);\n  var canCheck = isChecked !== null;\n  return canCheck ? 'menuitemcheckbox' : 'menuitem';\n}","map":{"version":3,"mappings":"AAEA;;;;;;;;AAQA,OAAM,SAAUA,YAAV,CAAuBC,IAAvB,EAAgD;AACpD,MAAIA,IAAI,CAACC,QAAT,EAAmB;AACjB,WAAO,CAAC,EAAED,IAAI,CAACE,SAAL,IAAkBF,IAAI,CAACG,OAAzB,CAAR;AACD;;AAED,MAAI,OAAOH,IAAI,CAACE,SAAZ,KAA0B,SAA9B,EAAyC;AACvC,WAAOF,IAAI,CAACE,SAAZ;AACD;;AAED,MAAI,OAAOF,IAAI,CAACG,OAAZ,KAAwB,SAA5B,EAAuC;AACrC,WAAOH,IAAI,CAACG,OAAZ;AACD,GAXmD,CAapD;;;AACA,SAAO,IAAP;AACD;AAED,OAAM,SAAUC,UAAV,CAAqBJ,IAArB,EAA8C;AAClD,SAAO,CAAC,EAAEA,IAAI,CAACK,YAAL,IAAqBL,IAAI,CAACM,KAA5B,CAAR;AACD;AAED,OAAM,SAAUC,cAAV,CAAyBP,IAAzB,EAAkD;AACtD,SAAO,CAAC,EAAEA,IAAI,CAACQ,UAAL,IAAmBR,IAAI,CAACS,QAA1B,CAAR;AACD;AAED,OAAM,SAAUC,mBAAV,CAA8BV,IAA9B,EAAuD;AAC3D,MAAME,SAAS,GAAGH,YAAY,CAACC,IAAD,CAA9B;AACA,MAAMC,QAAQ,GAAYC,SAAS,KAAK,IAAxC;AACA,SAAOD,QAAQ,GAAG,kBAAH,GAAwB,UAAvC;AACD","names":["getIsChecked","item","canCheck","isChecked","checked","hasSubmenu","subMenuProps","items","isItemDisabled","isDisabled","disabled","getMenuItemAriaRole"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\utilities\\src\\utilities\\contextualMenu\\contextualMenuUtility.ts"],"sourcesContent":["import { IContextualMenuItem } from '../../index';\n\n/**\n * Determines the effective checked state of a menu item.\n *\n * @param item {IContextualMenuItem} to get the check state of.\n * @returns {true} if the item is checked.\n * @returns {false} if the item is unchecked.\n * @returns {null} if the item is not checkable.\n */\nexport function getIsChecked(item: IContextualMenuItem): boolean | null {\n  if (item.canCheck) {\n    return !!(item.isChecked || item.checked);\n  }\n\n  if (typeof item.isChecked === 'boolean') {\n    return item.isChecked;\n  }\n\n  if (typeof item.checked === 'boolean') {\n    return item.checked;\n  }\n\n  // Item is not checkable.\n  return null;\n}\n\nexport function hasSubmenu(item: IContextualMenuItem): boolean {\n  return !!(item.subMenuProps || item.items);\n}\n\nexport function isItemDisabled(item: IContextualMenuItem): boolean {\n  return !!(item.isDisabled || item.disabled);\n}\n\nexport function getMenuItemAriaRole(item: IContextualMenuItem): string {\n  const isChecked = getIsChecked(item);\n  const canCheck: boolean = isChecked !== null;\n  return canCheck ? 'menuitemcheckbox' : 'menuitem';\n}\n"]},"metadata":{},"sourceType":"module"}