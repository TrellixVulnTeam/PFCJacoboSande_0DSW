{"ast":null,"code":"/**\n * {@docCategory Pickers}\n */\nvar SuggestionsController =\n/** @class */\nfunction () {\n  function SuggestionsController() {\n    var _this = this;\n\n    this._isSuggestionModel = function (value) {\n      return value.item !== undefined;\n    };\n\n    this._ensureSuggestionModel = function (suggestion) {\n      if (_this._isSuggestionModel(suggestion)) {\n        return suggestion;\n      } else {\n        return {\n          item: suggestion,\n          selected: false,\n          ariaLabel: suggestion.name || suggestion.primaryText\n        };\n      }\n    };\n\n    this.suggestions = [];\n    this.currentIndex = -1;\n  }\n\n  SuggestionsController.prototype.updateSuggestions = function (newSuggestions, selectedIndex) {\n    if (newSuggestions && newSuggestions.length > 0) {\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n      this.currentIndex = selectedIndex ? selectedIndex : 0;\n\n      if (selectedIndex === -1) {\n        this.currentSuggestion = undefined;\n      } else if (selectedIndex !== undefined) {\n        this.suggestions[selectedIndex].selected = true;\n        this.currentSuggestion = this.suggestions[selectedIndex];\n      }\n    } else {\n      this.suggestions = [];\n      this.currentIndex = -1;\n      this.currentSuggestion = undefined;\n    }\n  };\n  /**\n   * Increments the suggestion index and gets the next suggestion in the list.\n   */\n\n\n  SuggestionsController.prototype.nextSuggestion = function () {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex < this.suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.currentIndex === this.suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Decrements the suggestion index and gets the previous suggestion in the list.\n   */\n\n\n  SuggestionsController.prototype.previousSuggestion = function () {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.currentIndex === 0) {\n        this.setSelectedSuggestion(this.suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  SuggestionsController.prototype.getSuggestions = function () {\n    return this.suggestions;\n  };\n\n  SuggestionsController.prototype.getCurrentItem = function () {\n    return this.currentSuggestion;\n  };\n\n  SuggestionsController.prototype.getSuggestionAtIndex = function (index) {\n    return this.suggestions[index];\n  };\n\n  SuggestionsController.prototype.hasSelectedSuggestion = function () {\n    return this.currentSuggestion ? true : false;\n  };\n\n  SuggestionsController.prototype.removeSuggestion = function (index) {\n    this.suggestions.splice(index, 1);\n  };\n\n  SuggestionsController.prototype.createGenericSuggestion = function (itemToConvert) {\n    var itemToAdd = this.convertSuggestionsToSuggestionItems([itemToConvert])[0];\n    this.currentSuggestion = itemToAdd;\n  };\n\n  SuggestionsController.prototype.convertSuggestionsToSuggestionItems = function (suggestions) {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  };\n\n  SuggestionsController.prototype.deselectAllSuggestions = function () {\n    if (this.currentIndex > -1) {\n      this.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n    }\n  };\n\n  SuggestionsController.prototype.setSelectedSuggestion = function (index) {\n    if (index > this.suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion.selected = false;\n      this.currentSuggestion = this.suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1) {\n        this.suggestions[this.currentIndex].selected = false;\n      }\n\n      this.suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = this.suggestions[index];\n    }\n  };\n\n  return SuggestionsController;\n}();\n\nexport { SuggestionsController };","map":{"version":3,"mappings":"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","names":["value","item","undefined","suggestion","_this","_isSuggestionModel","selected","ariaLabel","name","primaryText","suggestions","currentIndex","SuggestionsController","newSuggestions","selectedIndex","length","convertSuggestionsToSuggestionItems","currentSuggestion","setSelectedSuggestion","index","splice","itemToConvert","itemToAdd","Array","isArray","map","_ensureSuggestionModel"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\pickers\\src\\components\\pickers\\Suggestions\\SuggestionsController.ts"],"sourcesContent":["import { ISuggestionModel } from './Suggestions.types';\n\n/**\n * {@docCategory Pickers}\n */\nexport class SuggestionsController<T> {\n  public currentIndex: number;\n  public currentSuggestion: ISuggestionModel<T> | undefined;\n  public suggestions: ISuggestionModel<T>[];\n\n  constructor() {\n    this.suggestions = [];\n    this.currentIndex = -1;\n  }\n\n  public updateSuggestions(newSuggestions: T[], selectedIndex?: number): void {\n    if (newSuggestions && newSuggestions.length > 0) {\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n      this.currentIndex = selectedIndex ? selectedIndex : 0;\n      if (selectedIndex! === -1) {\n        this.currentSuggestion = undefined;\n      } else if (selectedIndex !== undefined) {\n        this.suggestions[selectedIndex].selected = true;\n        this.currentSuggestion = this.suggestions[selectedIndex];\n      }\n    } else {\n      this.suggestions = [];\n      this.currentIndex = -1;\n      this.currentSuggestion = undefined;\n    }\n  }\n\n  /**\n   * Increments the suggestion index and gets the next suggestion in the list.\n   */\n  public nextSuggestion(): boolean {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex < this.suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.currentIndex === this.suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrements the suggestion index and gets the previous suggestion in the list.\n   */\n  public previousSuggestion(): boolean {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.currentIndex === 0) {\n        this.setSelectedSuggestion(this.suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getSuggestions(): ISuggestionModel<T>[] {\n    return this.suggestions;\n  }\n\n  public getCurrentItem(): ISuggestionModel<T> {\n    return this.currentSuggestion!;\n  }\n\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\n    return this.suggestions[index];\n  }\n\n  public hasSelectedSuggestion(): boolean {\n    return this.currentSuggestion ? true : false;\n  }\n\n  public removeSuggestion(index: number): void {\n    this.suggestions.splice(index, 1);\n  }\n\n  public createGenericSuggestion(itemToConvert: ISuggestionModel<T> | T) {\n    const itemToAdd = this.convertSuggestionsToSuggestionItems([itemToConvert])[0];\n    this.currentSuggestion = itemToAdd;\n  }\n\n  public convertSuggestionsToSuggestionItems(suggestions: Array<ISuggestionModel<T> | T>): ISuggestionModel<T>[] {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  }\n\n  public deselectAllSuggestions(): void {\n    if (this.currentIndex > -1) {\n      this.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n    }\n  }\n\n  public setSelectedSuggestion(index: number): void {\n    if (index > this.suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion!.selected = false;\n      this.currentSuggestion = this.suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1) {\n        this.suggestions[this.currentIndex].selected = false;\n      }\n      this.suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = this.suggestions[index];\n    }\n  }\n\n  private _isSuggestionModel = (value: ISuggestionModel<T> | T): value is ISuggestionModel<T> => {\n    return (<ISuggestionModel<T>>value).item !== undefined;\n  };\n\n  private _ensureSuggestionModel = (suggestion: ISuggestionModel<T> | T): ISuggestionModel<T> => {\n    if (this._isSuggestionModel(suggestion)) {\n      return suggestion as ISuggestionModel<T>;\n    } else {\n      return {\n        item: suggestion,\n        selected: false,\n        ariaLabel: (<any>suggestion).name || (<any>suggestion).primaryText,\n      } as ISuggestionModel<T>;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}