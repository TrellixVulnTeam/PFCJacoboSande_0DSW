{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/** @jsx withSlots */\n\nimport * as React from 'react';\nimport { withSlots, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\nexport var TextView = function (props) {\n  if (React.Children.count(props.children) === 0) {\n    return null;\n  }\n\n  var block = props.block,\n      className = props.className,\n      _a = props.as,\n      RootType = _a === void 0 ? 'span' : _a,\n      variant = props.variant,\n      nowrap = props.nowrap,\n      rest = __rest(props, [\"block\", \"className\", \"as\", \"variant\", \"nowrap\"]);\n\n  var Slots = getSlots(props, {\n    root: RootType\n  });\n  return withSlots(Slots.root, __assign({}, getNativeProps(rest, htmlElementProperties)));\n};","map":{"version":3,"mappings":";AAAA;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,kBAApC;AACA,SAASC,cAAT,EAAyBC,qBAAzB,QAAsD,iBAAtD;AAGA,OAAO,IAAMC,QAAQ,GAA2B,iBAAK;AACnD,MAAIL,KAAK,CAACM,QAAN,CAAeC,KAAf,CAAqBC,KAAK,CAACC,QAA3B,MAAyC,CAA7C,EAAgD;AAC9C,WAAO,IAAP;AACD;;AAEO;AAAA,MAAOC,2BAAP;AAAA,MAAkBC,aAAlB;AAAA,MAAkBC,sCAAlB;AAAA,MAAyCC,uBAAzC;AAAA,MAAkDC,qBAAlD;AAAA,MAA0DC,uEAA1D;;AAER,MAAMC,KAAK,GAAGd,QAAQ,CAAyBM,KAAzB,EAAgC;AACpDS,QAAI,EAAEL;AAD8C,GAAhC,CAAtB;AAIA,SAAOX,UAACe,KAAK,CAACC,IAAP,EAAWC,aAAKf,cAAc,CAACY,IAAD,EAAOX,qBAAP,CAAnB,CAAX,CAAP;AACD,CAZM","names":["React","withSlots","getSlots","getNativeProps","htmlElementProperties","TextView","Children","count","props","children","className","_a","RootType","variant","nowrap","rest","Slots","root","__assign"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Text\\Text.view.tsx"],"sourcesContent":["/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { ITextComponent, ITextProps, ITextSlots } from './Text.types';\n\nexport const TextView: ITextComponent['view'] = props => {\n  if (React.Children.count(props.children) === 0) {\n    return null;\n  }\n\n  const { block, className, as: RootType = 'span', variant, nowrap, ...rest } = props;\n\n  const Slots = getSlots<ITextProps, ITextSlots>(props, {\n    root: RootType,\n  });\n\n  return <Slots.root {...getNativeProps(rest, htmlElementProperties)} />;\n};\n"]},"metadata":{},"sourceType":"module"}