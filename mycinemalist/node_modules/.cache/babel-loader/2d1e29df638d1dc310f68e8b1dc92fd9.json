{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '../../Utilities';\nimport { CommandButton } from '../../Button';\n\nvar ButtonGridCell =\n/** @class */\nfunction (_super) {\n  __extends(ButtonGridCell, _super);\n\n  function ButtonGridCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onClick = function () {\n      var _a = _this.props,\n          onClick = _a.onClick,\n          disabled = _a.disabled,\n          item = _a.item;\n\n      if (onClick && !disabled) {\n        onClick(item);\n      }\n    };\n\n    _this._onMouseEnter = function (ev) {\n      var _a = _this.props,\n          onHover = _a.onHover,\n          disabled = _a.disabled,\n          item = _a.item,\n          onMouseEnter = _a.onMouseEnter;\n      var didUpdateOnEnter = onMouseEnter && onMouseEnter(ev);\n\n      if (!didUpdateOnEnter && onHover && !disabled) {\n        onHover(item);\n      }\n    };\n\n    _this._onMouseMove = function (ev) {\n      var _a = _this.props,\n          onHover = _a.onHover,\n          disabled = _a.disabled,\n          item = _a.item,\n          onMouseMove = _a.onMouseMove;\n      var didUpdateOnMove = onMouseMove && onMouseMove(ev);\n\n      if (!didUpdateOnMove && onHover && !disabled) {\n        onHover(item);\n      }\n    };\n\n    _this._onMouseLeave = function (ev) {\n      var _a = _this.props,\n          onHover = _a.onHover,\n          disabled = _a.disabled,\n          onMouseLeave = _a.onMouseLeave;\n      var didUpdateOnLeave = onMouseLeave && onMouseLeave(ev);\n\n      if (!didUpdateOnLeave && onHover && !disabled) {\n        onHover();\n      }\n    };\n\n    _this._onFocus = function () {\n      var _a = _this.props,\n          onFocus = _a.onFocus,\n          disabled = _a.disabled,\n          item = _a.item;\n\n      if (onFocus && !disabled) {\n        onFocus(item);\n      }\n    };\n\n    return _this;\n  }\n\n  ButtonGridCell.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        item = _b.item,\n        id = _b.id,\n        className = _b.className,\n        role = _b.role,\n        selected = _b.selected,\n        disabled = _b.disabled,\n        onRenderItem = _b.onRenderItem,\n        cellDisabledStyle = _b.cellDisabledStyle,\n        cellIsSelectedStyle = _b.cellIsSelectedStyle,\n        index = _b.index,\n        label = _b.label,\n        getClassNames = _b.getClassNames;\n    return React.createElement(CommandButton, {\n      id: id,\n      \"data-index\": index,\n      \"data-is-focusable\": true,\n      disabled: disabled,\n      className: css(className, (_a = {}, _a['' + cellIsSelectedStyle] = selected, _a['' + cellDisabledStyle] = disabled, _a)),\n      onClick: this._onClick,\n      onMouseEnter: this._onMouseEnter,\n      onMouseMove: this._onMouseMove,\n      onMouseLeave: this._onMouseLeave,\n      onFocus: this._onFocus,\n      role: role,\n      \"aria-selected\": selected,\n      ariaLabel: label,\n      title: label,\n      getClassNames: getClassNames\n    }, onRenderItem(item));\n  };\n\n  ButtonGridCell.defaultProps = {\n    disabled: false\n  };\n  return ButtonGridCell;\n}(React.Component);\n\nexport { ButtonGridCell };\n/**\n * @deprecated - use ButtonGridCell instead\n */\n\nexport var GridCell = ButtonGridCell;","map":{"version":3,"mappings":"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","names":["React","css","CommandButton","__extends","_this","onClick","disabled","item","ev","onHover","onMouseEnter","didUpdateOnEnter","onMouseMove","didUpdateOnMove","onMouseLeave","didUpdateOnLeave","onFocus","ButtonGridCell","id","className","role","selected","onRenderItem","cellDisabledStyle","cellIsSelectedStyle","index","label","getClassNames","_a","_onClick","_onMouseEnter","_onMouseMove","_onMouseLeave","_onFocus","ariaLabel","title","Component","GridCell"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\utilities\\src\\utilities\\ButtonGrid\\ButtonGridCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '../../Utilities';\nimport { IButtonGridCellProps } from './ButtonGridCell.types';\nimport { CommandButton } from '../../Button';\n\nexport class ButtonGridCell<T, P extends IButtonGridCellProps<T>> extends React.Component<P, {}> {\n  public static defaultProps = {\n    disabled: false,\n  };\n\n  public render(): JSX.Element {\n    const {\n      item,\n      id,\n      className,\n      role,\n      selected,\n      disabled,\n      onRenderItem,\n      cellDisabledStyle,\n      cellIsSelectedStyle,\n      index,\n      label,\n      getClassNames,\n    } = this.props;\n\n    return (\n      <CommandButton\n        id={id}\n        data-index={index}\n        data-is-focusable={true}\n        disabled={disabled}\n        className={css(className, {\n          ['' + cellIsSelectedStyle]: selected,\n          ['' + cellDisabledStyle]: disabled,\n        })}\n        onClick={this._onClick}\n        onMouseEnter={this._onMouseEnter}\n        onMouseMove={this._onMouseMove}\n        onMouseLeave={this._onMouseLeave}\n        onFocus={this._onFocus}\n        role={role}\n        aria-selected={selected}\n        ariaLabel={label}\n        title={label}\n        getClassNames={getClassNames}\n      >\n        {onRenderItem(item)}\n      </CommandButton>\n    );\n  }\n\n  private _onClick = (): void => {\n    const { onClick, disabled, item } = this.props as P;\n\n    if (onClick && !disabled) {\n      onClick(item);\n    }\n  };\n\n  private _onMouseEnter = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const { onHover, disabled, item, onMouseEnter } = this.props as P;\n\n    const didUpdateOnEnter = onMouseEnter && onMouseEnter(ev);\n\n    if (!didUpdateOnEnter && onHover && !disabled) {\n      onHover(item);\n    }\n  };\n\n  private _onMouseMove = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const { onHover, disabled, item, onMouseMove } = this.props as P;\n\n    const didUpdateOnMove = onMouseMove && onMouseMove(ev);\n\n    if (!didUpdateOnMove && onHover && !disabled) {\n      onHover(item);\n    }\n  };\n\n  private _onMouseLeave = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const { onHover, disabled, onMouseLeave } = this.props as P;\n\n    const didUpdateOnLeave = onMouseLeave && onMouseLeave(ev);\n\n    if (!didUpdateOnLeave && onHover && !disabled) {\n      onHover();\n    }\n  };\n\n  private _onFocus = (): void => {\n    const { onFocus, disabled, item } = this.props as P;\n\n    if (onFocus && !disabled) {\n      onFocus(item);\n    }\n  };\n}\n\n/**\n * @deprecated - use ButtonGridCell instead\n */\nexport const GridCell = ButtonGridCell;\n"]},"metadata":{},"sourceType":"module"}