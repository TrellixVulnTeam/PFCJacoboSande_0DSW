{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\nimport { mergeCustomizations } from './mergeCustomizations';\n/**\n * The Customizer component allows for default props to be mixed into components which\n * are decorated with the customizable() decorator, or use the styled HOC. This enables\n * injection scenarios like:\n *\n * 1. render svg icons instead of the icon font within all buttons\n * 2. inject a custom theme object into a component\n *\n * Props are provided via the settings prop which should be one of the following:\n * - A json map which contains 1 or more name/value pairs representing injectable props.\n * - A function that receives the current settings and returns the new ones that apply to the scope\n *\n * @public\n */\n\nvar Customizer =\n/** @class */\nfunction (_super) {\n  __extends(Customizer, _super);\n\n  function Customizer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onCustomizationChange = function () {\n      return _this.forceUpdate();\n    };\n\n    return _this;\n  }\n\n  Customizer.prototype.componentDidMount = function () {\n    Customizations.observe(this._onCustomizationChange);\n  };\n\n  Customizer.prototype.componentWillUnmount = function () {\n    Customizations.unobserve(this._onCustomizationChange);\n  };\n\n  Customizer.prototype.render = function () {\n    var _this = this;\n\n    var contextTransform = this.props.contextTransform;\n    return React.createElement(CustomizerContext.Consumer, null, function (parentContext) {\n      var newContext = mergeCustomizations(_this.props, parentContext);\n\n      if (contextTransform) {\n        newContext = contextTransform(newContext);\n      }\n\n      return React.createElement(CustomizerContext.Provider, {\n        value: newContext\n      }, _this.props.children);\n    });\n  };\n\n  return Customizer;\n}(React.Component);\n\nexport { Customizer };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,iBAAT,QAAsD,qBAAtD;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAGA;;;;;;;;;;;;;;;AAcA;AAAA;AAAA;AAAgCC;;AAAhC;AAAA;;AA0BUC,mCAAyB;AAAM,kBAAI,CAACC,WAAL;AAAkB,KAAjD;;;AACT;;AA1BQC,2CAAP;AACEN,kBAAc,CAACO,OAAf,CAAuB,KAAKC,sBAA5B;AACD,GAFM;;AAIAF,8CAAP;AACEN,kBAAc,CAACS,SAAf,CAAyB,KAAKD,sBAA9B;AACD,GAFM;;AAIAF,gCAAP;AAAA;;AACU;AACR,WACEP,oBAACE,iBAAiB,CAACS,QAAnB,EAA2B,IAA3B,EACG,UAACC,aAAD,EAAkC;AACjC,UAAIC,UAAU,GAAGV,mBAAmB,CAACE,KAAI,CAACS,KAAN,EAAaF,aAAb,CAApC;;AAEA,UAAIG,gBAAJ,EAAsB;AACpBF,kBAAU,GAAGE,gBAAgB,CAACF,UAAD,CAA7B;AACD;;AAED,aAAOb,oBAACE,iBAAiB,CAACc,QAAnB,EAA2B;AAACC,aAAK,EAAEJ;AAAR,OAA3B,EAAgDR,KAAI,CAACS,KAAL,CAAWI,QAA3D,CAAP;AACD,KATH,CADF;AAaD,GAfM;;AAkBT;AAAC,CA3BD,CAAgClB,KAAK,CAACmB,SAAtC","names":["React","Customizations","CustomizerContext","mergeCustomizations","__extends","_this","forceUpdate","Customizer","observe","_onCustomizationChange","unobserve","Consumer","parentContext","newContext","props","contextTransform","Provider","value","children","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\lib\\src\\customizations\\Customizer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext, ICustomizerContext } from './CustomizerContext';\nimport { mergeCustomizations } from './mergeCustomizations';\nimport { ICustomizerProps } from './Customizer.types';\n\n/**\n * The Customizer component allows for default props to be mixed into components which\n * are decorated with the customizable() decorator, or use the styled HOC. This enables\n * injection scenarios like:\n *\n * 1. render svg icons instead of the icon font within all buttons\n * 2. inject a custom theme object into a component\n *\n * Props are provided via the settings prop which should be one of the following:\n * - A json map which contains 1 or more name/value pairs representing injectable props.\n * - A function that receives the current settings and returns the new ones that apply to the scope\n *\n * @public\n */\nexport class Customizer extends React.Component<ICustomizerProps> {\n  public componentDidMount(): void {\n    Customizations.observe(this._onCustomizationChange);\n  }\n\n  public componentWillUnmount(): void {\n    Customizations.unobserve(this._onCustomizationChange);\n  }\n\n  public render(): React.ReactElement<{}> {\n    const { contextTransform } = this.props;\n    return (\n      <CustomizerContext.Consumer>\n        {(parentContext: ICustomizerContext) => {\n          let newContext = mergeCustomizations(this.props, parentContext);\n\n          if (contextTransform) {\n            newContext = contextTransform(newContext);\n          }\n\n          return <CustomizerContext.Provider value={newContext}>{this.props.children}</CustomizerContext.Provider>;\n        }}\n      </CustomizerContext.Consumer>\n    );\n  }\n\n  private _onCustomizationChange = () => this.forceUpdate();\n}\n"]},"metadata":{},"sourceType":"module"}