{"ast":null,"code":"import { concatStyleSets, HighContrastSelector, IconFontSizes, getInputFocusStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nvar ARROW_BUTTON_WIDTH = 23;\nvar ARROW_BUTTON_ICON_SIZE = 8;\nvar DEFAULT_HEIGHT = 32;\nvar DEFAULT_MIN_WIDTH = 86;\nvar LABEL_MARGIN = 10;\n\nvar _getDisabledStyles = memoizeFunction(function (theme) {\n  var _a;\n\n  var semanticColors = theme.semanticColors;\n  var SpinButtonTextColorDisabled = semanticColors.disabledText;\n  var SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\n  return {\n    backgroundColor: SpinButtonBackgroundColorDisabled,\n    pointerEvents: 'none',\n    cursor: 'default',\n    color: SpinButtonTextColorDisabled,\n    selectors: (_a = {\n      ':after': {\n        borderColor: SpinButtonBackgroundColorDisabled\n      }\n    }, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  };\n});\n\nexport var getArrowButtonStyles = memoizeFunction(function (theme, isUpArrow, customSpecificArrowStyles) {\n  var _a, _b, _c;\n\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects; // TODO: after updating the semanticColor slots all this need to be reevaluated.\n\n  var ArrowButtonTextColor = palette.neutralSecondary;\n  var ArrowButtonTextColorHovered = semanticColors.buttonText;\n  var ArrowButtonTextColorPressed = semanticColors.buttonText;\n  var ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\n  var ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\n  var defaultArrowButtonStyles = {\n    root: {\n      outline: 'none',\n      display: 'block',\n      height: '50%',\n      width: ARROW_BUTTON_WIDTH,\n      padding: 0,\n      backgroundColor: 'transparent',\n      textAlign: 'center',\n      cursor: 'default',\n      color: ArrowButtonTextColor,\n      selectors: {\n        '&.ms-DownButton': {\n          borderRadius: \"0 0 \" + effects.roundedCorner2 + \" 0\"\n        },\n        '&.ms-UpButton': {\n          borderRadius: \"0 \" + effects.roundedCorner2 + \" 0 0\"\n        }\n      }\n    },\n    rootHovered: {\n      backgroundColor: ArrowButtonBackgroundHovered,\n      color: ArrowButtonTextColorHovered\n    },\n    rootChecked: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _a)\n    },\n    rootPressed: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _b)\n    },\n    rootDisabled: {\n      opacity: 0.5,\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        color: 'GrayText',\n        opacity: 1\n      }, _c)\n    },\n    icon: {\n      fontSize: ARROW_BUTTON_ICON_SIZE,\n      marginTop: 0,\n      marginRight: 0,\n      marginBottom: 0,\n      marginLeft: 0\n    }\n  }; // No specific styles needed as of now.\n\n  var defaultUpArrowButtonStyles = {};\n  var defaultDownArrowButtonStyles = {};\n  return concatStyleSets(defaultArrowButtonStyles, isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles, customSpecificArrowStyles);\n});\nexport var getStyles = memoizeFunction(function (theme, customStyles) {\n  var _a, _b;\n\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      fonts = theme.fonts;\n  var SpinButtonRootBorderColor = semanticColors.inputBorder;\n  var SpinButtonRootBackgroundColor = semanticColors.inputBackground;\n  var SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\n  var SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\n  var SpinButtonInputTextColor = semanticColors.inputText;\n  var SpinButtonInputTextColorSelected = palette.white;\n  var SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\n  var SpinButtonIconDisabledColor = semanticColors.disabledText;\n  var defaultStyles = {\n    root: [fonts.medium, {\n      outline: 'none',\n      width: '100%',\n      minWidth: DEFAULT_MIN_WIDTH\n    }],\n    labelWrapper: {\n      display: 'inline-flex',\n      alignItems: 'center'\n    },\n    labelWrapperStart: {\n      height: DEFAULT_HEIGHT,\n      float: 'left',\n      marginRight: LABEL_MARGIN\n    },\n    labelWrapperEnd: {\n      height: DEFAULT_HEIGHT,\n      float: 'right',\n      marginLeft: LABEL_MARGIN\n    },\n    labelWrapperTop: {\n      // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\n      // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\n      // the SpinButton is displayed with the label on top next to other form fields.\n      // Decrease the wrapper's effective height slightly to compensate.\n      marginBottom: -1\n    },\n    labelWrapperBottom: {},\n    icon: {\n      padding: '0 5px',\n      fontSize: IconFontSizes.large\n    },\n    iconDisabled: {\n      color: SpinButtonIconDisabledColor\n    },\n    label: {\n      pointerEvents: 'none',\n      // centering the label with the icon by forcing the exact same height as the icon.\n      lineHeight: IconFontSizes.large\n    },\n    labelDisabled: {},\n    spinButtonWrapper: {\n      display: 'flex',\n      position: 'relative',\n      boxSizing: 'border-box',\n      height: DEFAULT_HEIGHT,\n      minWidth: DEFAULT_MIN_WIDTH,\n      selectors: {\n        // setting border using pseudo-element here in order to prevent:\n        // input and chevron buttons to overlap border under certain resolutions\n        ':after': {\n          pointerEvents: 'none',\n          content: \"''\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: SpinButtonRootBorderColor,\n          borderRadius: effects.roundedCorner2\n        }\n      }\n    },\n    spinButtonWrapperTopBottom: {\n      width: '100%'\n    },\n    spinButtonWrapperHovered: {\n      selectors: (_a = {\n        ':after': {\n          borderColor: SpinButtonRootBorderColorHovered\n        }\n      }, _a[HighContrastSelector] = {\n        selectors: {\n          ':after': {\n            borderColor: 'Highlight'\n          }\n        }\n      }, _a)\n    },\n    spinButtonWrapperFocused: getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\n    spinButtonWrapperDisabled: _getDisabledStyles(theme),\n    input: {\n      boxSizing: 'border-box',\n      boxShadow: 'none',\n      borderStyle: 'none',\n      flex: 1,\n      margin: 0,\n      fontSize: fonts.medium.fontSize,\n      fontFamily: 'inherit',\n      color: SpinButtonInputTextColor,\n      backgroundColor: SpinButtonRootBackgroundColor,\n      height: '100%',\n      padding: '0 8px 0 9px',\n      outline: 0,\n      display: 'block',\n      minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      cursor: 'text',\n      userSelect: 'text',\n      borderRadius: effects.roundedCorner2 + \" 0 0 \" + effects.roundedCorner2\n    },\n    inputTextSelected: {\n      backgroundColor: SpinButtonInputBackgroundColorSelected,\n      color: SpinButtonInputTextColorSelected,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        borderColor: 'Highlight',\n        color: 'HighlightText'\n      }, _b)\n    },\n    inputDisabled: _getDisabledStyles(theme),\n    arrowButtonsContainer: {\n      display: 'block',\n      height: '100%',\n      cursor: 'default'\n    },\n    arrowButtonsContainerDisabled: _getDisabledStyles(theme)\n  };\n  return concatStyleSets(defaultStyles, customStyles);\n});","map":{"version":3,"mappings":"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","names":["concatStyleSets","HighContrastSelector","IconFontSizes","getInputFocusStyle","memoizeFunction","ARROW_BUTTON_WIDTH","ARROW_BUTTON_ICON_SIZE","DEFAULT_HEIGHT","DEFAULT_MIN_WIDTH","LABEL_MARGIN","_getDisabledStyles","theme","SpinButtonTextColorDisabled","semanticColors","disabledText","SpinButtonBackgroundColorDisabled","disabledBackground","backgroundColor","pointerEvents","cursor","color","selectors","borderColor","_a","getArrowButtonStyles","isUpArrow","customSpecificArrowStyles","effects","ArrowButtonTextColor","palette","neutralSecondary","ArrowButtonTextColorHovered","buttonText","ArrowButtonTextColorPressed","ArrowButtonBackgroundHovered","buttonBackgroundHovered","ArrowButtonBackgroundPressed","buttonBackgroundPressed","defaultArrowButtonStyles","root","outline","display","height","width","padding","textAlign","borderRadius","roundedCorner2","rootHovered","rootChecked","rootPressed","_b","rootDisabled","opacity","_c","icon","fontSize","marginTop","marginRight","marginBottom","marginLeft","defaultUpArrowButtonStyles","defaultDownArrowButtonStyles","getStyles","customStyles","fonts","SpinButtonRootBorderColor","inputBorder","SpinButtonRootBackgroundColor","inputBackground","SpinButtonRootBorderColorHovered","inputBorderHovered","SpinButtonRootBorderColorFocused","inputFocusBorderAlt","SpinButtonInputTextColor","inputText","SpinButtonInputTextColorSelected","white","SpinButtonInputBackgroundColorSelected","inputBackgroundChecked","SpinButtonIconDisabledColor","defaultStyles","medium","minWidth","labelWrapper","alignItems","labelWrapperStart","float","labelWrapperEnd","labelWrapperTop","labelWrapperBottom","large","iconDisabled","label","lineHeight","labelDisabled","spinButtonWrapper","position","boxSizing","content","left","top","bottom","right","borderWidth","borderStyle","spinButtonWrapperTopBottom","spinButtonWrapperHovered","spinButtonWrapperFocused","spinButtonWrapperDisabled","input","boxShadow","flex","margin","fontFamily","whiteSpace","textOverflow","overflow","userSelect","inputTextSelected","inputDisabled","arrowButtonsContainer","arrowButtonsContainerDisabled"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\SpinButton\\SpinButton.styles.ts"],"sourcesContent":["import {\r\n  IRawStyle,\r\n  ITheme,\r\n  concatStyleSets,\r\n  HighContrastSelector,\r\n  IconFontSizes,\r\n  getInputFocusStyle,\r\n} from '../../Styling';\r\nimport { IButtonStyles } from '../../Button';\r\nimport { ISpinButtonStyles } from './SpinButton.types';\r\nimport { memoizeFunction } from '../../Utilities';\r\n\r\nconst ARROW_BUTTON_WIDTH = 23;\r\nconst ARROW_BUTTON_ICON_SIZE = 8;\r\nconst DEFAULT_HEIGHT = 32;\r\nconst DEFAULT_MIN_WIDTH = 86;\r\nconst LABEL_MARGIN = 10;\r\n\r\nconst _getDisabledStyles = memoizeFunction(\r\n  (theme: ITheme): IRawStyle => {\r\n    const { semanticColors } = theme;\r\n\r\n    const SpinButtonTextColorDisabled = semanticColors.disabledText;\r\n    const SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\r\n\r\n    return {\r\n      backgroundColor: SpinButtonBackgroundColorDisabled,\r\n      pointerEvents: 'none',\r\n      cursor: 'default',\r\n      color: SpinButtonTextColorDisabled,\r\n      selectors: {\r\n        ':after': {\r\n          borderColor: SpinButtonBackgroundColorDisabled,\r\n        },\r\n        [HighContrastSelector]: {\r\n          color: 'GrayText',\r\n        },\r\n      },\r\n    };\r\n  },\r\n);\r\n\r\nexport const getArrowButtonStyles = memoizeFunction(\r\n  (theme: ITheme, isUpArrow: boolean, customSpecificArrowStyles?: Partial<IButtonStyles>): IButtonStyles => {\r\n    const { palette, semanticColors, effects } = theme;\r\n\r\n    // TODO: after updating the semanticColor slots all this need to be reevaluated.\r\n    const ArrowButtonTextColor = palette.neutralSecondary;\r\n    const ArrowButtonTextColorHovered = semanticColors.buttonText;\r\n    const ArrowButtonTextColorPressed = semanticColors.buttonText;\r\n\r\n    const ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\r\n    const ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\r\n\r\n    const defaultArrowButtonStyles: IButtonStyles = {\r\n      root: {\r\n        outline: 'none',\r\n        display: 'block',\r\n        height: '50%',\r\n        width: ARROW_BUTTON_WIDTH,\r\n        padding: 0,\r\n        backgroundColor: 'transparent',\r\n        textAlign: 'center',\r\n        cursor: 'default',\r\n        color: ArrowButtonTextColor,\r\n        selectors: {\r\n          '&.ms-DownButton': {\r\n            borderRadius: `0 0 ${effects.roundedCorner2} 0`,\r\n          },\r\n          '&.ms-UpButton': {\r\n            borderRadius: `0 ${effects.roundedCorner2} 0 0`,\r\n          },\r\n        },\r\n      },\r\n      rootHovered: {\r\n        backgroundColor: ArrowButtonBackgroundHovered,\r\n        color: ArrowButtonTextColorHovered,\r\n      },\r\n      rootChecked: {\r\n        backgroundColor: ArrowButtonBackgroundPressed,\r\n        color: ArrowButtonTextColorPressed,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      rootPressed: {\r\n        backgroundColor: ArrowButtonBackgroundPressed,\r\n        color: ArrowButtonTextColorPressed,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      rootDisabled: {\r\n        opacity: 0.5,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            color: 'GrayText',\r\n            opacity: 1,\r\n          },\r\n        },\r\n      },\r\n      icon: {\r\n        fontSize: ARROW_BUTTON_ICON_SIZE,\r\n        marginTop: 0,\r\n        marginRight: 0,\r\n        marginBottom: 0,\r\n        marginLeft: 0,\r\n      },\r\n    };\r\n\r\n    // No specific styles needed as of now.\r\n    const defaultUpArrowButtonStyles: Partial<IButtonStyles> = {};\r\n\r\n    const defaultDownArrowButtonStyles: Partial<IButtonStyles> = {};\r\n\r\n    return concatStyleSets(\r\n      defaultArrowButtonStyles,\r\n      isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles,\r\n      customSpecificArrowStyles,\r\n    ) as IButtonStyles;\r\n  },\r\n);\r\n\r\nexport const getStyles = memoizeFunction(\r\n  (theme: ITheme, customStyles?: Partial<ISpinButtonStyles>): ISpinButtonStyles => {\r\n    const { palette, semanticColors, effects, fonts } = theme;\r\n\r\n    const SpinButtonRootBorderColor = semanticColors.inputBorder;\r\n    const SpinButtonRootBackgroundColor = semanticColors.inputBackground;\r\n    const SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\r\n    const SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\r\n\r\n    const SpinButtonInputTextColor = semanticColors.inputText;\r\n    const SpinButtonInputTextColorSelected = palette.white;\r\n    const SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\r\n\r\n    const SpinButtonIconDisabledColor = semanticColors.disabledText;\r\n\r\n    const defaultStyles: ISpinButtonStyles = {\r\n      root: [\r\n        fonts.medium,\r\n        {\r\n          outline: 'none',\r\n          width: '100%',\r\n          minWidth: DEFAULT_MIN_WIDTH,\r\n        },\r\n      ],\r\n      labelWrapper: {\r\n        display: 'inline-flex',\r\n        alignItems: 'center',\r\n      },\r\n      labelWrapperStart: {\r\n        height: DEFAULT_HEIGHT,\r\n        float: 'left',\r\n        marginRight: LABEL_MARGIN,\r\n      },\r\n      labelWrapperEnd: {\r\n        height: DEFAULT_HEIGHT,\r\n        float: 'right',\r\n        marginLeft: LABEL_MARGIN,\r\n      },\r\n      labelWrapperTop: {\r\n        // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\r\n        // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\r\n        // the SpinButton is displayed with the label on top next to other form fields.\r\n        // Decrease the wrapper's effective height slightly to compensate.\r\n        marginBottom: -1,\r\n      },\r\n      labelWrapperBottom: {},\r\n      icon: {\r\n        padding: '0 5px',\r\n        fontSize: IconFontSizes.large,\r\n      },\r\n      iconDisabled: {\r\n        color: SpinButtonIconDisabledColor,\r\n      },\r\n      label: {\r\n        pointerEvents: 'none',\r\n        // centering the label with the icon by forcing the exact same height as the icon.\r\n        lineHeight: IconFontSizes.large,\r\n      },\r\n      labelDisabled: {},\r\n      spinButtonWrapper: {\r\n        display: 'flex',\r\n        position: 'relative',\r\n        boxSizing: 'border-box',\r\n        height: DEFAULT_HEIGHT,\r\n        minWidth: DEFAULT_MIN_WIDTH,\r\n        selectors: {\r\n          // setting border using pseudo-element here in order to prevent:\r\n          // input and chevron buttons to overlap border under certain resolutions\r\n          ':after': {\r\n            pointerEvents: 'none',\r\n            content: \"''\",\r\n            position: 'absolute',\r\n            left: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n            right: 0,\r\n            borderWidth: '1px',\r\n            borderStyle: 'solid',\r\n            borderColor: SpinButtonRootBorderColor,\r\n            borderRadius: effects.roundedCorner2,\r\n          },\r\n        },\r\n      },\r\n      spinButtonWrapperTopBottom: {\r\n        width: '100%',\r\n      },\r\n      spinButtonWrapperHovered: {\r\n        selectors: {\r\n          ':after': {\r\n            borderColor: SpinButtonRootBorderColorHovered,\r\n          },\r\n          [HighContrastSelector]: {\r\n            selectors: {\r\n              ':after': {\r\n                borderColor: 'Highlight',\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      spinButtonWrapperFocused: getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\r\n      spinButtonWrapperDisabled: _getDisabledStyles(theme),\r\n      input: {\r\n        boxSizing: 'border-box',\r\n        boxShadow: 'none',\r\n        borderStyle: 'none',\r\n        flex: 1,\r\n        margin: 0,\r\n        fontSize: fonts.medium.fontSize,\r\n        fontFamily: 'inherit',\r\n        color: SpinButtonInputTextColor,\r\n        backgroundColor: SpinButtonRootBackgroundColor,\r\n        height: '100%',\r\n        padding: '0 8px 0 9px',\r\n        outline: 0,\r\n        display: 'block',\r\n        minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\r\n        whiteSpace: 'nowrap',\r\n        textOverflow: 'ellipsis',\r\n        overflow: 'hidden',\r\n        cursor: 'text',\r\n        userSelect: 'text',\r\n        borderRadius: `${effects.roundedCorner2} 0 0 ${effects.roundedCorner2}`,\r\n      },\r\n      inputTextSelected: {\r\n        backgroundColor: SpinButtonInputBackgroundColorSelected,\r\n        color: SpinButtonInputTextColorSelected,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            borderColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      inputDisabled: _getDisabledStyles(theme),\r\n      arrowButtonsContainer: {\r\n        display: 'block',\r\n        height: '100%',\r\n        cursor: 'default',\r\n      },\r\n      arrowButtonsContainerDisabled: _getDisabledStyles(theme),\r\n    };\r\n    return concatStyleSets(defaultStyles, customStyles) as ISpinButtonStyles;\r\n  },\r\n);\r\n"]},"metadata":{},"sourceType":"module"}