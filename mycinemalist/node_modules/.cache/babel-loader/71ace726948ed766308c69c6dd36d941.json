{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { createMemoizer } from '../memoize';\n\nfunction createComposedComponent(outer) {\n  var Outer = outer;\n  var outerMemoizer = createMemoizer(function (inner) {\n    if (outer === inner) {\n      throw new Error('Attempted to compose a component with itself.');\n    }\n\n    var Inner = inner;\n    var innerMemoizer = createMemoizer(function (defaultRender) {\n      var InnerWithDefaultRender = function InnerWithDefaultRender(innerProps) {\n        return React.createElement(Inner, __assign({}, innerProps, {\n          defaultRender: defaultRender\n        }));\n      };\n\n      return InnerWithDefaultRender;\n    });\n\n    var OuterWithDefaultRender = function OuterWithDefaultRender(outerProps) {\n      var defaultRender = outerProps.defaultRender;\n      return React.createElement(Outer, __assign({}, outerProps, {\n        defaultRender: defaultRender ? innerMemoizer(defaultRender) : Inner\n      }));\n    };\n\n    return OuterWithDefaultRender;\n  });\n  return outerMemoizer;\n}\n\nvar componentAsMemoizer = createMemoizer(createComposedComponent);\n/**\n * Composes two components which conform to the `IComponentAs` specification; that is, two\n * components which accept a `defaultRender` prop, which is a 'default' implementation of\n * a component which accepts the same overall props.\n *\n * @public\n */\n\nexport function composeComponentAs(outer, inner) {\n  return componentAsMemoizer(outer)(inner);\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,cAAT,QAA+B,YAA/B;;AAMA,SAASC,uBAAT,CACEC,KADF,EAC6B;EAE3B,IAAMC,KAAK,GAAGD,KAAd;EAEA,IAAME,aAAa,GAAGJ,cAAc,CAAC,UAACK,KAAD,EAA4B;IAC/D,IAAIH,KAAK,KAAKG,KAAd,EAAqB;MACnB,MAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;IACD;;IAED,IAAMC,KAAK,GAAGF,KAAd;IAEA,IAAMG,aAAa,GAAGR,cAAc,CAAC,UAACS,aAAD,EAAoC;MACvE,IAAMC,sBAAsB,GAAmD,SAAzEA,sBAAyE,CAC7EC,UAD6E,EACxC;QAErC,OAAOZ,oBAACQ,KAAD,EAAMK,aAAKD,UAAL,EAAe;UAAEF,aAAa,EAAEA;QAAjB,CAAf,CAAN,CAAP;MACD,CAJD;;MAMA,OAAOC,sBAAP;IACD,CARmC,CAApC;;IAUA,IAAMG,sBAAsB,GAAmD,SAAzEA,sBAAyE,CAC7EC,UAD6E,EACxC;MAE7B;MAER,OAAOf,oBAACI,KAAD,EAAMS,aAAKE,UAAL,EAAe;QAAEL,aAAa,EAAEA,aAAa,GAAGD,aAAa,CAACC,aAAD,CAAhB,GAAkCF;MAAhE,CAAf,CAAN,CAAP;IACD,CAND;;IAQA,OAAOM,sBAAP;EACD,CA1BmC,CAApC;EA4BA,OAAOT,aAAP;AACD;;AAED,IAAMW,mBAAmB,GAAGf,cAAc,CAAsBC,uBAAtB,CAA1C;AAEA;;;;;;;;AAOA,OAAM,SAAUe,kBAAV,CACJd,KADI,EAEJG,KAFI,EAEuB;EAE3B,OAAOU,mBAAmB,CAACb,KAAD,CAAnB,CAA2BG,KAA3B,CAAP;AACD","names":["React","createMemoizer","createComposedComponent","outer","Outer","outerMemoizer","inner","Error","Inner","innerMemoizer","defaultRender","InnerWithDefaultRender","innerProps","__assign","OuterWithDefaultRender","outerProps","componentAsMemoizer","composeComponentAs"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\utilities\\lib\\src\\componentAs\\composeComponentAs.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IComponentAs, IComponentAsProps } from '../IComponentAs';\nimport { createMemoizer } from '../memoize';\n\ninterface IComposeComponentAs {\n  <TProps>(outer: IComponentAs<TProps>): (inner: IComponentAs<TProps>) => IComponentAs<TProps>;\n}\n\nfunction createComposedComponent<TProps>(\n  outer: IComponentAs<TProps>,\n): (inner: IComponentAs<TProps>) => IComponentAs<TProps> {\n  const Outer = outer;\n\n  const outerMemoizer = createMemoizer((inner: IComponentAs<TProps>) => {\n    if (outer === inner) {\n      throw new Error('Attempted to compose a component with itself.');\n    }\n\n    const Inner = inner;\n\n    const innerMemoizer = createMemoizer((defaultRender: IComponentAs<TProps>) => {\n      const InnerWithDefaultRender: React.ComponentType<IComponentAsProps<TProps>> = (\n        innerProps: IComponentAsProps<TProps>,\n      ): JSX.Element => {\n        return <Inner {...innerProps} defaultRender={defaultRender} />;\n      };\n\n      return InnerWithDefaultRender;\n    });\n\n    const OuterWithDefaultRender: React.ComponentType<IComponentAsProps<TProps>> = (\n      outerProps: IComponentAsProps<TProps>,\n    ): JSX.Element => {\n      const { defaultRender } = outerProps;\n\n      return <Outer {...outerProps} defaultRender={defaultRender ? innerMemoizer(defaultRender) : Inner} />;\n    };\n\n    return OuterWithDefaultRender;\n  });\n\n  return outerMemoizer;\n}\n\nconst componentAsMemoizer = createMemoizer<IComposeComponentAs>(createComposedComponent);\n\n/**\n * Composes two components which conform to the `IComponentAs` specification; that is, two\n * components which accept a `defaultRender` prop, which is a 'default' implementation of\n * a component which accepts the same overall props.\n *\n * @public\n */\nexport function composeComponentAs<TProps>(\n  outer: IComponentAs<TProps>,\n  inner: IComponentAs<TProps>,\n): IComponentAs<TProps> {\n  return componentAsMemoizer(outer)(inner);\n}\n"]},"metadata":{},"sourceType":"module"}