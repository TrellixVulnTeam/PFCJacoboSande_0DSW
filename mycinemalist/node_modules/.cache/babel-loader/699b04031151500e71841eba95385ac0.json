{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, memoizeFunction } from '../../../Utilities';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Shimmer}\n */\n\nexport var ShimmerElementsGroupBase = function (props) {\n  var styles = props.styles,\n      _a = props.width,\n      width = _a === void 0 ? 'auto' : _a,\n      shimmerElements = props.shimmerElements,\n      _b = props.rowHeight,\n      rowHeight = _b === void 0 ? findMaxElementHeight(shimmerElements || []) : _b,\n      _c = props.flexWrap,\n      flexWrap = _c === void 0 ? false : _c,\n      theme = props.theme,\n      backgroundColor = props.backgroundColor;\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    flexWrap: flexWrap\n  });\n  return React.createElement(\"div\", {\n    style: {\n      width: width\n    },\n    className: classNames.root\n  }, getRenderedElements(shimmerElements, backgroundColor, rowHeight));\n};\n\nfunction getRenderedElements(shimmerElements, backgroundColor, rowHeight) {\n  var renderedElements = shimmerElements ? shimmerElements.map( // false positive\n  // eslint-disable-next-line array-callback-return\n  function (element, index) {\n    var type = element.type,\n        filteredElem = __rest(element, [\"type\"]);\n\n    var verticalAlign = filteredElem.verticalAlign,\n        height = filteredElem.height;\n    var styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);\n\n    switch (element.type) {\n      case ShimmerElementType.circle:\n        return React.createElement(ShimmerCircle, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n\n      case ShimmerElementType.gap:\n        return React.createElement(ShimmerGap, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n\n      case ShimmerElementType.line:\n        return React.createElement(ShimmerLine, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n    }\n  }) : React.createElement(ShimmerLine, {\n    height: ShimmerElementsDefaultHeights.line\n  });\n  return renderedElements;\n}\n\nvar getElementStyles = memoizeFunction(function (verticalAlign, elementType, elementHeight, backgroundColor, rowHeight) {\n  var dif = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n  var borderStyle;\n\n  if (!verticalAlign || verticalAlign === 'center') {\n    borderStyle = {\n      borderBottomWidth: (dif ? Math.floor(dif / 2) : 0) + \"px\",\n      borderTopWidth: (dif ? Math.ceil(dif / 2) : 0) + \"px\"\n    };\n  } else if (verticalAlign && verticalAlign === 'top') {\n    borderStyle = {\n      borderBottomWidth: dif + \"px\",\n      borderTopWidth: \"0px\"\n    };\n  } else if (verticalAlign && verticalAlign === 'bottom') {\n    borderStyle = {\n      borderBottomWidth: \"0px\",\n      borderTopWidth: dif + \"px\"\n    };\n  }\n\n  if (backgroundColor) {\n    switch (elementType) {\n      case ShimmerElementType.circle:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor\n          }),\n          svg: {\n            fill: backgroundColor\n          }\n        };\n\n      case ShimmerElementType.gap:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor,\n            backgroundColor: backgroundColor\n          })\n        };\n\n      case ShimmerElementType.line:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor\n          }),\n          topLeftCorner: {\n            fill: backgroundColor\n          },\n          topRightCorner: {\n            fill: backgroundColor\n          },\n          bottomLeftCorner: {\n            fill: backgroundColor\n          },\n          bottomRightCorner: {\n            fill: backgroundColor\n          }\n        };\n    }\n  }\n\n  return {\n    root: borderStyle\n  };\n});\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\n\nfunction findMaxElementHeight(shimmerElements) {\n  var shimmerElementsDefaulted = shimmerElements.map(function (element) {\n    switch (element.type) {\n      case ShimmerElementType.circle:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.circle;\n        }\n\n        break;\n\n      case ShimmerElementType.line:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.line;\n        }\n\n        break;\n\n      case ShimmerElementType.gap:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.gap;\n        }\n\n        break;\n    }\n\n    return element;\n  });\n  var rowHeight = shimmerElementsDefaulted.reduce(function (acc, next) {\n    return next.height ? next.height > acc ? next.height : acc : acc;\n  }, 0);\n  return rowHeight;\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,EAA6BC,eAA7B,QAAoD,oBAApD;AAOA,SAASC,kBAAT,EAA6BC,6BAA7B,QAAmF,kBAAnF;AACA,SAASC,WAAT,QAA4B,4BAA5B;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,SAASC,aAAT,QAA8B,gCAA9B;AAGA,IAAMC,aAAa,GAAGP,kBAAkB,EAAxC;AAEA;;;;AAGA,OAAO,IAAMQ,wBAAwB,GAAwD,iBAAK;EAE9F;EAAA,IACAC,gBADA;EAAA,IACAC,mCADA;EAAA,IAEAC,uCAFA;EAAA,IAGAC,oBAHA;EAAA,IAGAC,4EAHA;EAAA,IAIAC,mBAJA;EAAA,IAIAC,qCAJA;EAAA,IAKAC,mBALA;EAAA,IAMAC,uCANA;EASF,IAAMC,UAAU,GAAGX,aAAa,CAACY,MAAD,EAAU;IACxCH,KAAK,EAAEA,KADiC;IAExCD,QAAQ;EAFgC,CAAV,CAAhC;EAKA,OACEhB;IAAKqB,KAAK,EAAE;MAAEV,KAAK,EAAEA;IAAT,CAAZ;IAA8BW,SAAS,EAAEH,UAAU,CAACI;EAApD,GACGC,mBAAmB,CAACZ,eAAD,EAAkBM,eAAlB,EAAmCJ,SAAnC,CADtB,CADF;AAKD,CArBM;;AAuBP,SAASU,mBAAT,CACEZ,eADF,EAEEM,eAFF,EAGEJ,SAHF,EAGoB;EAElB,IAAMW,gBAAgB,GAAoBb,eAAe,GACvDA,eAAe,CAACc,GAAhB,EACE;EACA;EACA,UAACC,OAAD,EAA2BC,KAA3B,EAAwC;IAC9B;IAAA,IAAMC,wCAAN;;IACA;IAAA,IAAeC,4BAAf;IACR,IAAMV,MAAM,GAAGW,gBAAgB,CAACC,aAAD,EAAgBC,IAAhB,EAAsBH,MAAtB,EAA8BZ,eAA9B,EAA+CJ,SAA/C,CAA/B;;IAEA,QAAQa,OAAO,CAACM,IAAhB;MACE,KAAK9B,kBAAkB,CAAC+B,MAAxB;QACE,OAAOlC,oBAACO,aAAD,EAAc4B;UAACC,GAAG,EAAER;QAAN,GAAiBC,YAAjB,EAA6B;UAAET,MAAM,EAAEA;QAAV,CAA7B,CAAd,CAAP;;MACF,KAAKjB,kBAAkB,CAACkC,GAAxB;QACE,OAAOrC,oBAACM,UAAD,EAAW6B;UAACC,GAAG,EAAER;QAAN,GAAiBC,YAAjB,EAA6B;UAAET,MAAM,EAAEA;QAAV,CAA7B,CAAX,CAAP;;MACF,KAAKjB,kBAAkB,CAACmC,IAAxB;QACE,OAAOtC,oBAACK,WAAD,EAAY8B;UAACC,GAAG,EAAER;QAAN,GAAiBC,YAAjB,EAA6B;UAAET,MAAM,EAAEA;QAAV,CAA7B,CAAZ,CAAP;IANJ;EAQD,CAhBH,CADuD,GAoBvDpB,oBAACK,WAAD,EAAY;IAACyB,MAAM,EAAE1B,6BAA6B,CAACkC;EAAvC,CAAZ,CApBF;EAuBA,OAAOb,gBAAP;AACD;;AAED,IAAMM,gBAAgB,GAAG7B,eAAe,CACtC,UACE8B,aADF,EAEEO,WAFF,EAGEC,aAHF,EAIEtB,eAJF,EAKEJ,SALF,EAKoB;EAElB,IAAM2B,GAAG,GAAW3B,SAAS,IAAI0B,aAAb,GAA6B1B,SAAS,GAAG0B,aAAzC,GAAyD,CAA7E;EAEA,IAAIE,WAAJ;;EAEA,IAAI,CAACV,aAAD,IAAkBA,aAAa,KAAK,QAAxC,EAAkD;IAChDU,WAAW,GAAG;MACZC,iBAAiB,EAAE,CAAGF,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWJ,GAAG,GAAG,CAAjB,CAAH,GAAyB,CAA/B,IAAgC,IADvC;MAEZK,cAAc,EAAE,CAAGL,GAAG,GAAGG,IAAI,CAACG,IAAL,CAAUN,GAAG,GAAG,CAAhB,CAAH,GAAwB,CAA9B,IAA+B;IAFnC,CAAd;EAID,CALD,MAKO,IAAIT,aAAa,IAAIA,aAAa,KAAK,KAAvC,EAA8C;IACnDU,WAAW,GAAG;MACZC,iBAAiB,EAAKF,GAAG,OADb;MAEZK,cAAc,EAAE;IAFJ,CAAd;EAID,CALM,MAKA,IAAId,aAAa,IAAIA,aAAa,KAAK,QAAvC,EAAiD;IACtDU,WAAW,GAAG;MACZC,iBAAiB,EAAE,KADP;MAEZG,cAAc,EAAKL,GAAG;IAFV,CAAd;EAID;;EAED,IAAIvB,eAAJ,EAAqB;IACnB,QAAQqB,WAAR;MACE,KAAKpC,kBAAkB,CAAC+B,MAAxB;QACE,OAAO;UACLX,IAAI,wBAAOmB,WAAP,GAAkB;YAAEM,WAAW,EAAE9B;UAAf,CAAlB,CADC;UAEL+B,GAAG,EAAE;YAAEC,IAAI,EAAEhC;UAAR;QAFA,CAAP;;MAIF,KAAKf,kBAAkB,CAACkC,GAAxB;QACE,OAAO;UACLd,IAAI,wBAAOmB,WAAP,GAAkB;YAAEM,WAAW,EAAE9B,eAAf;YAAgCA,eAAe,EAAEA;UAAjD,CAAlB;QADC,CAAP;;MAGF,KAAKf,kBAAkB,CAACmC,IAAxB;QACE,OAAO;UACLf,IAAI,wBAAOmB,WAAP,GAAkB;YAAEM,WAAW,EAAE9B;UAAf,CAAlB,CADC;UAELiC,aAAa,EAAE;YAAED,IAAI,EAAEhC;UAAR,CAFV;UAGLkC,cAAc,EAAE;YAAEF,IAAI,EAAEhC;UAAR,CAHX;UAILmC,gBAAgB,EAAE;YAAEH,IAAI,EAAEhC;UAAR,CAJb;UAKLoC,iBAAiB,EAAE;YAAEJ,IAAI,EAAEhC;UAAR;QALd,CAAP;IAXJ;EAmBD;;EAED,OAAO;IACLK,IAAI,EAAEmB;EADD,CAAP;AAGD,CAtDqC,CAAxC;AAyDA;;;;;AAIA,SAASa,oBAAT,CAA8B3C,eAA9B,EAAgE;EAC9D,IAAM4C,wBAAwB,GAAsB5C,eAAe,CAACc,GAAhB,CAClD,UAACC,OAAD,EAAyB;IACvB,QAAQA,OAAO,CAACM,IAAhB;MACE,KAAK9B,kBAAkB,CAAC+B,MAAxB;QACE,IAAI,CAACP,OAAO,CAACG,MAAb,EAAqB;UACnBH,OAAO,CAACG,MAAR,GAAiB1B,6BAA6B,CAAC8B,MAA/C;QACD;;QACD;;MACF,KAAK/B,kBAAkB,CAACmC,IAAxB;QACE,IAAI,CAACX,OAAO,CAACG,MAAb,EAAqB;UACnBH,OAAO,CAACG,MAAR,GAAiB1B,6BAA6B,CAACkC,IAA/C;QACD;;QACD;;MACF,KAAKnC,kBAAkB,CAACkC,GAAxB;QACE,IAAI,CAACV,OAAO,CAACG,MAAb,EAAqB;UACnBH,OAAO,CAACG,MAAR,GAAiB1B,6BAA6B,CAACiC,GAA/C;QACD;;QACD;IAfJ;;IAiBA,OAAOV,OAAP;EACD,CApBiD,CAApD;EAuBA,IAAMb,SAAS,GAAG0C,wBAAwB,CAACC,MAAzB,CAAgC,UAACC,GAAD,EAAcC,IAAd,EAAmC;IACnF,OAAOA,IAAI,CAAC7B,MAAL,GAAe6B,IAAI,CAAC7B,MAAL,GAAc4B,GAAd,GAAoBC,IAAI,CAAC7B,MAAzB,GAAkC4B,GAAjD,GAAwDA,GAA/D;EACD,CAFiB,EAEf,CAFe,CAAlB;EAIA,OAAO5C,SAAP;AACD","names":["React","classNamesFunction","memoizeFunction","ShimmerElementType","ShimmerElementsDefaultHeights","ShimmerLine","ShimmerGap","ShimmerCircle","getClassNames","ShimmerElementsGroupBase","_a","width","shimmerElements","_b","rowHeight","_c","flexWrap","theme","backgroundColor","classNames","styles","style","className","root","getRenderedElements","renderedElements","map","element","index","filteredElem","height","getElementStyles","verticalAlign","type","circle","__assign","key","gap","line","elementType","elementHeight","dif","borderStyle","borderBottomWidth","Math","floor","borderTopWidth","ceil","borderColor","svg","fill","topLeftCorner","topRightCorner","bottomLeftCorner","bottomRightCorner","findMaxElementHeight","shimmerElementsDefaulted","reduce","acc","next"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\Shimmer\\src\\components\\Shimmer\\ShimmerElementsGroup\\ShimmerElementsGroup.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, memoizeFunction } from '../../../Utilities';\nimport { IRawStyle } from '../../../Styling';\nimport {\n  IShimmerElementsGroupProps,\n  IShimmerElementsGroupStyleProps,\n  IShimmerElementsGroupStyles,\n} from './ShimmerElementsGroup.types';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights, IShimmerElement } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { IShimmerLineStyles } from '../ShimmerLine/ShimmerLine.types';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { IShimmerGapStyles } from '../ShimmerGap/ShimmerGap.types';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nimport { IShimmerCircleStyles } from '../ShimmerCircle/ShimmerCircle.types';\n\nconst getClassNames = classNamesFunction<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerElementsGroupBase: React.FunctionComponent<IShimmerElementsGroupProps> = props => {\n  const {\n    styles,\n    width = 'auto',\n    shimmerElements,\n    rowHeight = findMaxElementHeight(shimmerElements || []),\n    flexWrap = false,\n    theme,\n    backgroundColor,\n  } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    flexWrap,\n  });\n\n  return (\n    <div style={{ width: width }} className={classNames.root}>\n      {getRenderedElements(shimmerElements, backgroundColor, rowHeight)}\n    </div>\n  );\n};\n\nfunction getRenderedElements(\n  shimmerElements?: IShimmerElement[],\n  backgroundColor?: string,\n  rowHeight?: number,\n): React.ReactNode {\n  const renderedElements: React.ReactNode = shimmerElements ? (\n    shimmerElements.map(\n      // false positive\n      // eslint-disable-next-line array-callback-return\n      (element: IShimmerElement, index: number): JSX.Element => {\n        const { type, ...filteredElem } = element;\n        const { verticalAlign, height } = filteredElem;\n        const styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);\n\n        switch (element.type) {\n          case ShimmerElementType.circle:\n            return <ShimmerCircle key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.gap:\n            return <ShimmerGap key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.line:\n            return <ShimmerLine key={index} {...filteredElem} styles={styles} />;\n        }\n      },\n    )\n  ) : (\n    <ShimmerLine height={ShimmerElementsDefaultHeights.line} />\n  );\n\n  return renderedElements;\n}\n\nconst getElementStyles = memoizeFunction(\n  (\n    verticalAlign: 'center' | 'bottom' | 'top' | undefined,\n    elementType: ShimmerElementType,\n    elementHeight: number | undefined,\n    backgroundColor?: string,\n    rowHeight?: number,\n  ): IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles => {\n    const dif: number = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n\n    let borderStyle: IRawStyle | undefined;\n\n    if (!verticalAlign || verticalAlign === 'center') {\n      borderStyle = {\n        borderBottomWidth: `${dif ? Math.floor(dif / 2) : 0}px`,\n        borderTopWidth: `${dif ? Math.ceil(dif / 2) : 0}px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'top') {\n      borderStyle = {\n        borderBottomWidth: `${dif}px`,\n        borderTopWidth: `0px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'bottom') {\n      borderStyle = {\n        borderBottomWidth: `0px`,\n        borderTopWidth: `${dif}px`,\n      };\n    }\n\n    if (backgroundColor) {\n      switch (elementType) {\n        case ShimmerElementType.circle:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            svg: { fill: backgroundColor },\n          };\n        case ShimmerElementType.gap:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor, backgroundColor: backgroundColor },\n          };\n        case ShimmerElementType.line:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            topLeftCorner: { fill: backgroundColor },\n            topRightCorner: { fill: backgroundColor },\n            bottomLeftCorner: { fill: backgroundColor },\n            bottomRightCorner: { fill: backgroundColor },\n          };\n      }\n    }\n\n    return {\n      root: borderStyle,\n    };\n  },\n);\n\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\nfunction findMaxElementHeight(shimmerElements: IShimmerElement[]): number {\n  const shimmerElementsDefaulted: IShimmerElement[] = shimmerElements.map(\n    (element: IShimmerElement): IShimmerElement => {\n      switch (element.type) {\n        case ShimmerElementType.circle:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.circle;\n          }\n          break;\n        case ShimmerElementType.line:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.line;\n          }\n          break;\n        case ShimmerElementType.gap:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.gap;\n          }\n          break;\n      }\n      return element;\n    },\n  );\n\n  const rowHeight = shimmerElementsDefaulted.reduce((acc: number, next: IShimmerElement): number => {\n    return next.height ? (next.height > acc ? next.height : acc) : acc;\n  }, 0);\n\n  return rowHeight;\n}\n"]},"metadata":{},"sourceType":"module"}