{"ast":null,"code":"import { find } from '../../Utilities';\n/**\n * Tests for equality between two IKeytipTransitionKeys.\n *\n * @param key1 - First IKeytipTransitionKey.\n * @param key2 - Second IKeytipTransitionKey.\n * @returns T/F if the transition keys are equal.\n */\n\nexport function transitionKeysAreEqual(key1, key2) {\n  if (key1.key !== key2.key) {\n    return false;\n  }\n\n  var mod1 = key1.modifierKeys;\n  var mod2 = key2.modifierKeys;\n\n  if (!mod1 && mod2 || mod1 && !mod2) {\n    // Not equal if one modifier is defined and the other isn't\n    return false;\n  }\n\n  if (mod1 && mod2) {\n    if (mod1.length !== mod2.length) {\n      return false;\n    } // Sort both arrays\n\n\n    mod1 = mod1.sort();\n    mod2 = mod2.sort();\n\n    for (var i = 0; i < mod1.length; i++) {\n      if (mod1[i] !== mod2[i]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * Tests if 'key' is present in 'keys'.\n *\n * @param keys - Array of IKeytipTransitionKey.\n * @param key - IKeytipTransitionKey to find in 'keys'.\n * @returns T/F if 'keys' contains 'key'.\n */\n\nexport function transitionKeysContain(keys, key) {\n  return !!find(keys, function (transitionKey) {\n    return transitionKeysAreEqual(transitionKey, key);\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAA+B,iBAA/B;AAaA;;;;;;;;AAOA,OAAM,SAAUC,sBAAV,CAAiCC,IAAjC,EAA6DC,IAA7D,EAAuF;AAC3F,MAAID,IAAI,CAACE,GAAL,KAAaD,IAAI,CAACC,GAAtB,EAA2B;AACzB,WAAO,KAAP;AACD;;AAED,MAAIC,IAAI,GAAGH,IAAI,CAACI,YAAhB;AACA,MAAIC,IAAI,GAAGJ,IAAI,CAACG,YAAhB;;AAEA,MAAK,CAACD,IAAD,IAASE,IAAV,IAAoBF,IAAI,IAAI,CAACE,IAAjC,EAAwC;AACtC;AACA,WAAO,KAAP;AACD;;AAED,MAAIF,IAAI,IAAIE,IAAZ,EAAkB;AAChB,QAAIF,IAAI,CAACG,MAAL,KAAgBD,IAAI,CAACC,MAAzB,EAAiC;AAC/B,aAAO,KAAP;AACD,KAHe,CAKhB;;;AACAH,QAAI,GAAGA,IAAI,CAACI,IAAL,EAAP;AACAF,QAAI,GAAGA,IAAI,CAACE,IAAL,EAAP;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACG,MAAzB,EAAiCE,CAAC,EAAlC,EAAsC;AACpC,UAAIL,IAAI,CAACK,CAAD,CAAJ,KAAYH,IAAI,CAACG,CAAD,CAApB,EAAyB;AACvB,eAAO,KAAP;AACD;AACF;AACF;;AAED,SAAO,IAAP;AACD;AAED;;;;;;;;AAOA,OAAM,SAAUC,qBAAV,CAAgCC,IAAhC,EAA8DR,GAA9D,EAAuF;AAC3F,SAAO,CAAC,CAACJ,IAAI,CAACY,IAAD,EAAO,UAACC,aAAD,EAAoC;AACtD,WAAOZ,sBAAsB,CAACY,aAAD,EAAgBT,GAAhB,CAA7B;AACD,GAFY,CAAb;AAGD","names":["find","transitionKeysAreEqual","key1","key2","key","mod1","modifierKeys","mod2","length","sort","i","transitionKeysContain","keys","transitionKey"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\utilities\\src\\utilities\\keytips\\IKeytipTransitionKey.ts"],"sourcesContent":["import { find, KeyCodes } from '../../Utilities';\n\nexport type KeytipTransitionModifier =\n  | typeof KeyCodes.shift\n  | typeof KeyCodes.ctrl\n  | typeof KeyCodes.alt\n  | typeof KeyCodes.leftWindow;\n\nexport interface IKeytipTransitionKey {\n  key: string;\n  modifierKeys?: KeytipTransitionModifier[];\n}\n\n/**\n * Tests for equality between two IKeytipTransitionKeys.\n *\n * @param key1 - First IKeytipTransitionKey.\n * @param key2 - Second IKeytipTransitionKey.\n * @returns T/F if the transition keys are equal.\n */\nexport function transitionKeysAreEqual(key1: IKeytipTransitionKey, key2: IKeytipTransitionKey): boolean {\n  if (key1.key !== key2.key) {\n    return false;\n  }\n\n  let mod1 = key1.modifierKeys;\n  let mod2 = key2.modifierKeys;\n\n  if ((!mod1 && mod2) || (mod1 && !mod2)) {\n    // Not equal if one modifier is defined and the other isn't\n    return false;\n  }\n\n  if (mod1 && mod2) {\n    if (mod1.length !== mod2.length) {\n      return false;\n    }\n\n    // Sort both arrays\n    mod1 = mod1.sort();\n    mod2 = mod2.sort();\n    for (let i = 0; i < mod1.length; i++) {\n      if (mod1[i] !== mod2[i]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Tests if 'key' is present in 'keys'.\n *\n * @param keys - Array of IKeytipTransitionKey.\n * @param key - IKeytipTransitionKey to find in 'keys'.\n * @returns T/F if 'keys' contains 'key'.\n */\nexport function transitionKeysContain(keys: IKeytipTransitionKey[], key: IKeytipTransitionKey): boolean {\n  return !!find(keys, (transitionKey: IKeytipTransitionKey) => {\n    return transitionKeysAreEqual(transitionKey, key);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}