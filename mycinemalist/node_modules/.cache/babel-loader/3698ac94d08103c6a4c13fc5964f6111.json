{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { Modal } from '../../Modal';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nvar getClassNames = classNamesFunction();\nimport { DialogContent } from './DialogContent';\nvar DefaultModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false\n};\nvar DefaultDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: []\n};\n\nvar DialogBase =\n/** @class */\nfunction (_super) {\n  __extends(DialogBase, _super);\n\n  function DialogBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._getSubTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          ariaDescribedById = _a.ariaDescribedById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          subText = _a.subText;\n      var id = modalProps && modalProps.subtitleAriaId || ariaDescribedById;\n\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.subText || subText) && _this._defaultSubTextId;\n      }\n\n      return id;\n    };\n\n    _this._getTitleTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          ariaLabelledById = _a.ariaLabelledById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          title = _a.title;\n      var id = modalProps && modalProps.titleAriaId || ariaLabelledById;\n\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.title || title) && _this._defaultTitleTextId;\n      }\n\n      return id;\n    };\n\n    _this._id = getId('Dialog');\n    _this._defaultTitleTextId = _this._id + '-title';\n    _this._defaultSubTextId = _this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId'\n      });\n    }\n\n    return _this;\n  }\n\n  DialogBase.prototype.render = function () {\n    var _a, _b;\n\n    var _c = this.props,\n\n    /* eslint-disable deprecation/deprecation */\n    className = _c.className,\n        containerClassName = _c.containerClassName,\n        contentClassName = _c.contentClassName,\n        elementToFocusOnDismiss = _c.elementToFocusOnDismiss,\n        firstFocusableSelector = _c.firstFocusableSelector,\n        forceFocusInsideTrap = _c.forceFocusInsideTrap,\n        styles = _c.styles,\n        hidden = _c.hidden,\n        ignoreExternalFocusing = _c.ignoreExternalFocusing,\n        isBlocking = _c.isBlocking,\n        isClickableOutsideFocusTrap = _c.isClickableOutsideFocusTrap,\n        isDarkOverlay = _c.isDarkOverlay,\n        isOpen = _c.isOpen,\n        onDismiss = _c.onDismiss,\n        onDismissed = _c.onDismissed,\n        onLayerDidMount = _c.onLayerDidMount,\n        responsiveMode = _c.responsiveMode,\n        subText = _c.subText,\n        theme = _c.theme,\n        title = _c.title,\n        topButtonsProps = _c.topButtonsProps,\n        type = _c.type,\n\n    /* eslint-enable deprecation/deprecation */\n    minWidth = _c.minWidth,\n        maxWidth = _c.maxWidth,\n        modalProps = _c.modalProps;\n\n    var mergedLayerProps = __assign({}, modalProps ? modalProps.layerProps : {\n      onLayerDidMount: onLayerDidMount\n    });\n\n    if (onLayerDidMount && !mergedLayerProps.onLayerDidMount) {\n      mergedLayerProps.onLayerDidMount = onLayerDidMount;\n    }\n\n    var dialogDraggableClassName;\n    var dragOptions; // if we are draggable, make sure we are using the correct\n    // draggable classname and selectors\n\n    if (modalProps && modalProps.dragOptions && !modalProps.dragOptions.dragHandleSelector) {\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions = __assign(__assign({}, modalProps.dragOptions), {\n        dragHandleSelector: \".\" + dialogDraggableClassName\n      });\n    } else {\n      dragOptions = modalProps && modalProps.dragOptions;\n    }\n\n    var mergedModalProps = __assign(__assign(__assign(__assign({}, DefaultModalProps), {\n      className: className,\n      containerClassName: containerClassName,\n      isBlocking: isBlocking,\n      isDarkOverlay: isDarkOverlay,\n      onDismissed: onDismissed\n    }), modalProps), {\n      layerProps: mergedLayerProps,\n      dragOptions: dragOptions\n    });\n\n    var dialogContentProps = __assign(__assign(__assign({\n      className: contentClassName,\n      subText: subText,\n      title: title,\n      topButtonsProps: topButtonsProps,\n      type: type\n    }, DefaultDialogContentProps), this.props.dialogContentProps), {\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: __assign({\n        // eslint-disable-next-line deprecation/deprecation\n        id: ((_a = this.props.dialogContentProps) === null || _a === void 0 ? void 0 : _a.titleId) || this._defaultTitleTextId\n      }, (_b = this.props.dialogContentProps) === null || _b === void 0 ? void 0 : _b.titleProps)\n    });\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden: hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth\n    });\n    return React.createElement(Modal, __assign({\n      elementToFocusOnDismiss: elementToFocusOnDismiss,\n      firstFocusableSelector: firstFocusableSelector,\n      forceFocusInsideTrap: forceFocusInsideTrap,\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      isClickableOutsideFocusTrap: isClickableOutsideFocusTrap,\n      onDismissed: mergedModalProps.onDismissed,\n      responsiveMode: responsiveMode\n    }, mergedModalProps, {\n      isDarkOverlay: mergedModalProps.isDarkOverlay,\n      isBlocking: mergedModalProps.isBlocking,\n      isOpen: isOpen !== undefined ? isOpen : !hidden,\n      className: classNames.root,\n      containerClassName: classNames.main,\n      onDismiss: onDismiss ? onDismiss : mergedModalProps.onDismiss,\n      subtitleAriaId: this._getSubTextId(),\n      titleAriaId: this._getTitleTextId()\n    }), React.createElement(DialogContent, __assign({\n      subTextId: this._defaultSubTextId,\n      title: dialogContentProps.title,\n      subText: dialogContentProps.subText,\n      showCloseButton: mergedModalProps.isBlocking,\n      topButtonsProps: dialogContentProps.topButtonsProps,\n      type: dialogContentProps.type,\n      onDismiss: onDismiss ? onDismiss : dialogContentProps.onDismiss,\n      className: dialogContentProps.className\n    }, dialogContentProps), this.props.children));\n  };\n\n  DialogBase.defaultProps = {\n    hidden: true\n  };\n  DialogBase = __decorate([withResponsiveMode], DialogBase);\n  return DialogBase;\n}(React.Component);\n\nexport { DialogBase };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,EAA2BC,kBAA3B,EAA+CC,KAA/C,QAA4D,iBAA5D;AAEA,SAASC,UAAT,QAAgD,uBAAhD;AACA,SAASC,KAAT,QAAiD,aAAjD;AAEA,SAASC,kBAAT,QAAmC,+CAAnC;AAEA,IAAMC,aAAa,GAAGL,kBAAkB,EAAxC;AAEA,SAASM,aAAT,QAA8B,iBAA9B;AAEA,IAAMC,iBAAiB,GAAgB;AACrCC,eAAa,EAAE,KADsB;AAErCC,YAAU,EAAE,KAFyB;AAGrCC,WAAS,EAAE,EAH0B;AAIrCC,oBAAkB,EAAE,EAJiB;AAKrCC,gBAAc,EAAE;AALqB,CAAvC;AAQA,IAAMC,yBAAyB,GAAwB;AACrDC,MAAI,EAAEZ,UAAU,CAACa,MADoC;AAErDL,WAAS,EAAE,EAF0C;AAGrDM,iBAAe,EAAE;AAHoC,CAAvD;;AAOA;AAAA;AAAA;AAAgCC;;AAS9B,sBAAYC,KAAZ,EAA+B;AAA/B,gBACEC,kBAAMD,KAAN,KAAY,IADd;;AAwJQE,0BAAgB;AACtB;AACM;AAAA,UAAEC,wCAAF;AAAA,UAAqBC,0BAArB;AAAA,UAAiCC,0CAAjC;AAAA,UAAqDC,oBAArD;AACN,UAAIC,EAAE,GAAIH,UAAU,IAAIA,UAAU,CAACI,cAA1B,IAA6CL,iBAAtD;;AAEA,UAAI,CAACI,EAAL,EAAS;AACPA,UAAE,GAAG,CAAEF,kBAAkB,IAAIA,kBAAkB,CAACC,OAA1C,IAAsDA,OAAvD,KAAmEJ,KAAI,CAACO,iBAA7E;AACD;;AAED,aAAOF,EAAP;AACD,KAVO;;AAYAL,4BAAkB;AACxB;AACM;AAAA,UAAEQ,sCAAF;AAAA,UAAoBN,0BAApB;AAAA,UAAgCC,0CAAhC;AAAA,UAAoDM,gBAApD;AACN,UAAIJ,EAAE,GAAIH,UAAU,IAAIA,UAAU,CAACQ,WAA1B,IAA0CF,gBAAnD;;AAEA,UAAI,CAACH,EAAL,EAAS;AACPA,UAAE,GAAG,CAAEF,kBAAkB,IAAIA,kBAAkB,CAACM,KAA1C,IAAoDA,KAArD,KAA+DT,KAAI,CAACW,mBAAzE;AACD;;AAED,aAAON,EAAP;AACD,KAVO;;AAjKNL,SAAI,CAACY,GAAL,GAAW/B,KAAK,CAAC,QAAD,CAAhB;AACAmB,SAAI,CAACW,mBAAL,GAA2BX,KAAI,CAACY,GAAL,GAAW,QAAtC;AACAZ,SAAI,CAACO,iBAAL,GAAyBP,KAAI,CAACY,GAAL,GAAW,UAApC;;AAEA,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCpC,sBAAgB,CAAC,QAAD,EAAWmB,KAAX,EAAkB;AAChCkB,cAAM,EAAE,QADwB;AAEhCtB,YAAI,EAAE,yBAF0B;AAGhCU,eAAO,EAAE,4BAHuB;AAIhCa,wBAAgB,EAAE,8BAJc;AAKhCrB,uBAAe,EAAE,oCALe;AAMhCN,iBAAS,EAAE,sBANqB;AAOhCF,qBAAa,EAAE,0BAPiB;AAQhCC,kBAAU,EAAE,uBARoB;AAShCE,0BAAkB,EAAE,+BATY;AAUhC2B,mBAAW,EAAE,wBAVmB;AAWhCC,uBAAe,EAAE,uCAXe;AAYhClB,yBAAiB,EAAE,2BAZa;AAahCO,wBAAgB,EAAE;AAbc,OAAlB,CAAhB;AAeD;;;AACF;;AAEMY,gCAAP;;;AACQ;;AACJ;AACA9B,4BAFI;AAAA,QAGJC,0CAHI;AAAA,QAIJ0B,sCAJI;AAAA,QAKJI,oDALI;AAAA,QAMJC,kDANI;AAAA,QAOJC,8CAPI;AAAA,QAQJC,kBARI;AAAA,QASJC,kBATI;AAAA,QAUJC,kDAVI;AAAA,QAWJrC,0BAXI;AAAA,QAYJsC,4DAZI;AAAA,QAaJvC,gCAbI;AAAA,QAcJ4B,kBAdI;AAAA,QAeJY,wBAfI;AAAA,QAgBJV,4BAhBI;AAAA,QAiBJC,oCAjBI;AAAA,QAkBJU,kCAlBI;AAAA,QAmBJzB,oBAnBI;AAAA,QAoBJ0B,gBApBI;AAAA,QAqBJrB,gBArBI;AAAA,QAsBJb,oCAtBI;AAAA,QAuBJF,cAvBI;;AAwBJ;AACAqC,0BAzBI;AAAA,QA0BJC,sBA1BI;AAAA,QA2BJ9B,0BA3BI;;AA8BN,QAAM+B,gBAAgB,gBAChB/B,UAAU,GAAGA,UAAU,CAACgC,UAAd,GAA2B;AAAEf,qBAAe;AAAjB,KADrB,CAAtB;;AAGA,QAAIA,eAAe,IAAI,CAACc,gBAAgB,CAACd,eAAzC,EAA0D;AACxDc,sBAAgB,CAACd,eAAjB,GAAmCA,eAAnC;AACD;;AAED,QAAIgB,wBAAJ;AACA,QAAIC,WAAJ,CAvCF,CAyCE;AACA;;AACA,QAAIlC,UAAU,IAAIA,UAAU,CAACkC,WAAzB,IAAwC,CAAClC,UAAU,CAACkC,WAAX,CAAuBC,kBAApE,EAAwF;AACtFF,8BAAwB,GAAG,4BAA3B;AACAC,iBAAW,yBACNlC,UAAU,CAACkC,WADL,GACgB;AACzBC,0BAAkB,EAAE,MAAIF;AADC,OADhB,CAAX;AAID,KAND,MAMO;AACLC,iBAAW,GAAGlC,UAAU,IAAIA,UAAU,CAACkC,WAAvC;AACD;;AAED,QAAME,gBAAgB,2CACjBnD,iBADiB,GACA;AACpBG,eAAS,WADW;AAEpBC,wBAAkB,oBAFE;AAGpBF,gBAAU,YAHU;AAIpBD,mBAAa,eAJO;AAKpB8B,iBAAW;AALS,KADA,GAOjBhB,UAPiB,GAOP;AACbgC,gBAAU,EAAED,gBADC;AAEbG,iBAAW;AAFE,KAPO,CAAtB;;AAYA,QAAMjC,kBAAkB;AACtBb,eAAS,EAAE2B,gBADW;AAEtBb,aAAO,SAFe;AAGtBK,WAAK,OAHiB;AAItBb,qBAAe,iBAJO;AAKtBF,UAAI;AALkB,OAMnBD,yBANmB,GAOnB,KAAKK,KAAL,CAAWK,kBAPQ,GAOU;AAChCoC,8BAAwB,EAAEJ,wBADM;AAEhCK,gBAAU;AACR;AACAnC,UAAE,EAAE,YAAKP,KAAL,CAAWK,kBAAX,MAA6B,IAA7B,IAA6BsC,aAA7B,GAA6B,MAA7B,GAA6BA,GAAEC,OAA/B,KAA0C,KAAK/B;AAF3C,SAE8D,MACnE,KAAKb,KAAL,CAAWK,kBADwD,MACtC,IADsC,IACtCwC,aADsC,GACtC,MADsC,GACtCA,GAAEH,UAH1B;AAFsB,KAPV,CAAxB;;AAgBA,QAAMI,UAAU,GAAG3D,aAAa,CAACuC,MAAD,EAAU;AACxCM,WAAK,EAAEA,KADiC;AAExCxC,eAAS,EAAEgD,gBAAgB,CAAChD,SAFY;AAGxCC,wBAAkB,EAAE+C,gBAAgB,CAAC/C,kBAHG;AAIxCkC,YAAM,QAJkC;AAKxCoB,2BAAqB,EAAEd,QALiB;AAMxCe,2BAAqB,EAAEd;AANiB,KAAV,CAAhC;AASA,WACEtD,oBAACK,KAAD,EAAMgE;AACJ1B,6BAAuB,EAAEA,uBADrB;AAEJC,4BAAsB,EAAEA,sBAFpB;AAGJC,0BAAoB,EAAEA,oBAHlB;AAIJG,4BAAsB,EAAEA,sBAJpB;AAKJC,iCAA2B,EAAEA,2BALzB;AAMJT,iBAAW,EAAEoB,gBAAgB,CAACpB,WAN1B;AAOJW,oBAAc,EAAEA;AAPZ,OAQAS,gBARA,EAQgB;AACpBlD,mBAAa,EAAEkD,gBAAgB,CAAClD,aADZ;AAEpBC,gBAAU,EAAEiD,gBAAgB,CAACjD,UAFT;AAGpB2B,YAAM,EAAEA,MAAM,KAAKgC,SAAX,GAAuBhC,MAAvB,GAAgC,CAACS,MAHrB;AAIpBnC,eAAS,EAAEsD,UAAU,CAACK,IAJF;AAKpB1D,wBAAkB,EAAEqD,UAAU,CAACM,IALX;AAMpBtB,eAAS,EAAEA,SAAS,GAAGA,SAAH,GAAeU,gBAAgB,CAACV,SANhC;AAOpBtB,oBAAc,EAAE,KAAK6C,aAAL,EAPI;AAQpBzC,iBAAW,EAAE,KAAK0C,eAAL;AARO,KARhB,CAAN,EAkBE1E,oBAACQ,aAAD,EAAc6D;AACZM,eAAS,EAAE,KAAK9C,iBADJ;AAEZE,WAAK,EAAEN,kBAAkB,CAACM,KAFd;AAGZL,aAAO,EAAED,kBAAkB,CAACC,OAHhB;AAIZkD,qBAAe,EAAEhB,gBAAgB,CAACjD,UAJtB;AAKZO,qBAAe,EAAEO,kBAAkB,CAACP,eALxB;AAMZF,UAAI,EAAES,kBAAkB,CAACT,IANb;AAOZkC,eAAS,EAAEA,SAAS,GAAGA,SAAH,GAAezB,kBAAkB,CAACyB,SAP1C;AAQZtC,eAAS,EAAEa,kBAAkB,CAACb;AARlB,OASRa,kBATQ,CAAd,EAWG,KAAKL,KAAL,CAAWyD,QAXd,CAlBF,CADF;AAkCD,GA5HM;;AAlCOnC,4BAA6B;AACzCK,UAAM,EAAE;AADiC,GAA7B;AADHL,YAAU,eADtBpC,kBACsB,GAAVoC,UAAU,CAAV;AAwLb;AAAC,CAxLD,CAAgC1C,KAAK,CAAC8E,SAAtC;;SAAapC","names":["React","warnDeprecations","classNamesFunction","getId","DialogType","Modal","withResponsiveMode","getClassNames","DialogContent","DefaultModalProps","isDarkOverlay","isBlocking","className","containerClassName","topOffsetFixed","DefaultDialogContentProps","type","normal","topButtonsProps","__extends","props","_super","_this","ariaDescribedById","modalProps","dialogContentProps","subText","id","subtitleAriaId","_defaultSubTextId","ariaLabelledById","title","titleAriaId","_defaultTitleTextId","_id","process","env","NODE_ENV","isOpen","contentClassName","onDismissed","onLayerDidMount","DialogBase","elementToFocusOnDismiss","firstFocusableSelector","forceFocusInsideTrap","styles","hidden","ignoreExternalFocusing","isClickableOutsideFocusTrap","onDismiss","responsiveMode","theme","minWidth","maxWidth","mergedLayerProps","layerProps","dialogDraggableClassName","dragOptions","dragHandleSelector","mergedModalProps","draggableHeaderClassName","titleProps","_a","titleId","_b","classNames","dialogDefaultMinWidth","dialogDefaultMaxWidth","__assign","undefined","root","main","_getSubTextId","_getTitleTextId","subTextId","showCloseButton","children","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Dialog\\Dialog.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { IDialogProps, IDialogStyleProps, IDialogStyles } from './Dialog.types';\nimport { DialogType, IDialogContentProps } from './DialogContent.types';\nimport { Modal, IModalProps, IDragOptions } from '../../Modal';\nimport { ILayerProps } from '../../Layer';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogStyleProps, IDialogStyles>();\n\nimport { DialogContent } from './DialogContent';\n\nconst DefaultModalProps: IModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false,\n};\n\nconst DefaultDialogContentProps: IDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: [],\n};\n\n@withResponsiveMode\nexport class DialogBase extends React.Component<IDialogProps, {}> {\n  public static defaultProps: IDialogProps = {\n    hidden: true,\n  };\n\n  private _id: string;\n  private _defaultTitleTextId: string;\n  private _defaultSubTextId: string;\n\n  constructor(props: IDialogProps) {\n    super(props);\n\n    this._id = getId('Dialog');\n    this._defaultTitleTextId = this._id + '-title';\n    this._defaultSubTextId = this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId',\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      /* eslint-disable deprecation/deprecation */\n      className,\n      containerClassName,\n      contentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      styles,\n      hidden,\n      ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      isOpen,\n      onDismiss,\n      onDismissed,\n      onLayerDidMount,\n      responsiveMode,\n      subText,\n      theme,\n      title,\n      topButtonsProps,\n      type,\n      /* eslint-enable deprecation/deprecation */\n      minWidth,\n      maxWidth,\n      modalProps,\n    } = this.props;\n\n    const mergedLayerProps: ILayerProps = {\n      ...(modalProps ? modalProps.layerProps : { onLayerDidMount }),\n    };\n    if (onLayerDidMount && !mergedLayerProps.onLayerDidMount) {\n      mergedLayerProps.onLayerDidMount = onLayerDidMount;\n    }\n\n    let dialogDraggableClassName: string | undefined;\n    let dragOptions: IDragOptions | undefined;\n\n    // if we are draggable, make sure we are using the correct\n    // draggable classname and selectors\n    if (modalProps && modalProps.dragOptions && !modalProps.dragOptions.dragHandleSelector) {\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions = {\n        ...modalProps.dragOptions,\n        dragHandleSelector: `.${dialogDraggableClassName}`,\n      };\n    } else {\n      dragOptions = modalProps && modalProps.dragOptions;\n    }\n\n    const mergedModalProps = {\n      ...DefaultModalProps,\n      className,\n      containerClassName,\n      isBlocking,\n      isDarkOverlay,\n      onDismissed,\n      ...modalProps,\n      layerProps: mergedLayerProps,\n      dragOptions,\n    };\n\n    const dialogContentProps: IDialogContentProps = {\n      className: contentClassName,\n      subText,\n      title,\n      topButtonsProps,\n      type,\n      ...DefaultDialogContentProps,\n      ...this.props.dialogContentProps,\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: {\n        // eslint-disable-next-line deprecation/deprecation\n        id: this.props.dialogContentProps?.titleId || this._defaultTitleTextId,\n        ...this.props.dialogContentProps?.titleProps,\n      },\n    };\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth,\n    });\n\n    return (\n      <Modal\n        elementToFocusOnDismiss={elementToFocusOnDismiss}\n        firstFocusableSelector={firstFocusableSelector}\n        forceFocusInsideTrap={forceFocusInsideTrap}\n        ignoreExternalFocusing={ignoreExternalFocusing}\n        isClickableOutsideFocusTrap={isClickableOutsideFocusTrap}\n        onDismissed={mergedModalProps.onDismissed}\n        responsiveMode={responsiveMode}\n        {...mergedModalProps}\n        isDarkOverlay={mergedModalProps.isDarkOverlay}\n        isBlocking={mergedModalProps.isBlocking}\n        isOpen={isOpen !== undefined ? isOpen : !hidden}\n        className={classNames.root}\n        containerClassName={classNames.main}\n        onDismiss={onDismiss ? onDismiss : mergedModalProps.onDismiss}\n        subtitleAriaId={this._getSubTextId()}\n        titleAriaId={this._getTitleTextId()}\n      >\n        <DialogContent\n          subTextId={this._defaultSubTextId}\n          title={dialogContentProps.title}\n          subText={dialogContentProps.subText}\n          showCloseButton={mergedModalProps.isBlocking}\n          topButtonsProps={dialogContentProps.topButtonsProps}\n          type={dialogContentProps.type}\n          onDismiss={onDismiss ? onDismiss : dialogContentProps.onDismiss}\n          className={dialogContentProps.className}\n          {...dialogContentProps}\n        >\n          {this.props.children}\n        </DialogContent>\n      </Modal>\n    );\n  }\n\n  private _getSubTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaDescribedById, modalProps, dialogContentProps, subText } = this.props;\n    let id = (modalProps && modalProps.subtitleAriaId) || ariaDescribedById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.subText) || subText) && this._defaultSubTextId;\n    }\n\n    return id;\n  };\n\n  private _getTitleTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaLabelledById, modalProps, dialogContentProps, title } = this.props;\n    let id = (modalProps && modalProps.titleAriaId) || ariaLabelledById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.title) || title) && this._defaultTitleTextId;\n    }\n\n    return id;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}