{"ast":null,"code":"var _a;\n\nimport { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { getClassNames } from './PositioningContainer.styles';\nimport { Layer } from '../../../Layer'; // Utilites/Helpers\n\nimport { DirectionalHint } from '../../../common/DirectionalHint';\nimport { css, elementContains, focusFirstChild, getWindow, getDocument, initializeComponentRef, Async, EventGroup } from '../../../Utilities';\nimport { getMaxHeight, positionElement, RectangleEdge } from '../../../utilities/positioning';\nimport { AnimationClassNames, mergeStyles } from '../../../Styling';\nvar OFF_SCREEN_STYLE = {\n  opacity: 0\n}; // In order for some of the max height logic to work\n// properly we need to set the border.\n// The value is abitrary.\n\nvar BORDER_WIDTH = 1;\nvar SLIDE_ANIMATIONS = (_a = {}, _a[RectangleEdge.top] = 'slideUpIn20', _a[RectangleEdge.bottom] = 'slideDownIn20', _a[RectangleEdge.left] = 'slideLeftIn20', _a[RectangleEdge.right] = 'slideRightIn20', _a);\n\nvar PositioningContainer =\n/** @class */\nfunction (_super) {\n  __extends(PositioningContainer, _super);\n\n  function PositioningContainer(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * The primary positioned div.\n     */\n\n\n    _this._positionedHost = React.createRef(); // @TODO rename to reflect the name of this class\n\n    _this._contentHost = React.createRef();\n    /**\n     * Deprecated, use `onResize` instead.\n     * @deprecated Use `onResize` instead.\n     */\n\n    _this.dismiss = function (ev) {\n      _this.onResize(ev);\n    };\n\n    _this.onResize = function (ev) {\n      var onDismiss = _this.props.onDismiss;\n\n      if (onDismiss) {\n        onDismiss(ev);\n      } else {\n        _this._updateAsyncPosition();\n      }\n    };\n\n    _this._setInitialFocus = function () {\n      if (_this._contentHost.current && _this.props.setInitialFocus && !_this._didSetInitialFocus && _this.state.positions) {\n        _this._didSetInitialFocus = true;\n        focusFirstChild(_this._contentHost.current);\n      }\n    };\n\n    _this._onComponentDidMount = function () {\n      // This is added so the positioningContainer will dismiss when the window is scrolled\n      // but not when something inside the positioningContainer is scrolled. The delay seems\n      // to be required to avoid React firing an async focus event in IE from\n      // the target changing focus quickly prior to rendering the positioningContainer.\n      _this._async.setTimeout(function () {\n        _this._events.on(_this._targetWindow, 'scroll', _this._async.throttle(_this._dismissOnScroll, 10), true);\n\n        _this._events.on(_this._targetWindow, 'resize', _this._async.throttle(_this.onResize, 10), true);\n\n        _this._events.on(_this._targetWindow.document.body, 'focus', _this._dismissOnLostFocus, true);\n\n        _this._events.on(_this._targetWindow.document.body, 'click', _this._dismissOnLostFocus, true);\n      }, 0);\n\n      if (_this.props.onLayerMounted) {\n        _this.props.onLayerMounted();\n      }\n\n      _this._updateAsyncPosition();\n\n      _this._setHeightOffsetEveryFrame();\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this._didSetInitialFocus = false;\n    _this.state = {\n      positions: undefined,\n      heightOffset: 0\n    };\n    _this._positionAttempts = 0;\n    return _this;\n  }\n\n  PositioningContainer.prototype.UNSAFE_componentWillMount = function () {\n    this._setTargetWindowAndElement(this._getTarget());\n  };\n\n  PositioningContainer.prototype.componentDidMount = function () {\n    this._onComponentDidMount();\n  };\n\n  PositioningContainer.prototype.componentDidUpdate = function () {\n    this._setInitialFocus();\n\n    this._updateAsyncPosition();\n  };\n\n  PositioningContainer.prototype.UNSAFE_componentWillUpdate = function (newProps) {\n    // If the target element changed, find the new one. If we are tracking\n    // target with class name, always find element because we do not know if\n    // fabric has rendered a new element and disposed the old element.\n    var newTarget = this._getTarget(newProps);\n\n    var oldTarget = this._getTarget();\n\n    if (newTarget !== oldTarget || typeof newTarget === 'string' || newTarget instanceof String) {\n      this._maxHeight = undefined;\n\n      this._setTargetWindowAndElement(newTarget);\n    }\n\n    if (newProps.offsetFromTarget !== this.props.offsetFromTarget) {\n      this._maxHeight = undefined;\n    }\n\n    if (newProps.finalHeight !== this.props.finalHeight) {\n      this._setHeightOffsetEveryFrame();\n    }\n  };\n\n  PositioningContainer.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._events.dispose();\n  };\n\n  PositioningContainer.prototype.render = function () {\n    // If there is no target window then we are likely in server side rendering and we should not render anything.\n    if (!this._targetWindow) {\n      return null;\n    }\n\n    var _a = this.props,\n        className = _a.className,\n        positioningContainerWidth = _a.positioningContainerWidth,\n        positioningContainerMaxHeight = _a.positioningContainerMaxHeight,\n        children = _a.children;\n    var positions = this.state.positions;\n    var styles = getClassNames();\n    var directionalClassName = positions && positions.targetEdge ? AnimationClassNames[SLIDE_ANIMATIONS[positions.targetEdge]] : '';\n    var getContentMaxHeight = this._getMaxHeight() + this.state.heightOffset;\n    var contentMaxHeight = positioningContainerMaxHeight && positioningContainerMaxHeight > getContentMaxHeight ? getContentMaxHeight : positioningContainerMaxHeight;\n    var content = React.createElement(\"div\", {\n      ref: this._positionedHost,\n      className: css('ms-PositioningContainer', styles.container)\n    }, React.createElement(\"div\", {\n      className: mergeStyles('ms-PositioningContainer-layerHost', styles.root, className, directionalClassName, !!positioningContainerWidth && {\n        width: positioningContainerWidth\n      }),\n      style: positions ? positions.elementPosition : OFF_SCREEN_STYLE,\n      // Safari and Firefox on Mac OS requires this to back-stop click events so focus remains in the Callout.\n      // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus\n      tabIndex: -1,\n      ref: this._contentHost\n    }, children, // @TODO apply to the content container\n    contentMaxHeight));\n    return this.props.doNotLayer ? content : React.createElement(Layer, null, content);\n  };\n\n  PositioningContainer.prototype._dismissOnScroll = function (ev) {\n    var preventDismissOnScroll = this.props.preventDismissOnScroll;\n\n    if (this.state.positions && !preventDismissOnScroll) {\n      this._dismissOnLostFocus(ev);\n    }\n  };\n\n  PositioningContainer.prototype._dismissOnLostFocus = function (ev) {\n    var target = ev.target;\n    var clickedOutsideCallout = this._positionedHost.current && !elementContains(this._positionedHost.current, target);\n\n    if (!this._target && clickedOutsideCallout || ev.target !== this._targetWindow && clickedOutsideCallout && (this._target.stopPropagation || !this._target || target !== this._target && !elementContains(this._target, target))) {\n      this.onResize(ev);\n    }\n  };\n\n  PositioningContainer.prototype._updateAsyncPosition = function () {\n    var _this = this;\n\n    this._async.requestAnimationFrame(function () {\n      return _this._updatePosition();\n    });\n  };\n\n  PositioningContainer.prototype._updatePosition = function () {\n    var positions = this.state.positions;\n    var _a = this.props,\n        offsetFromTarget = _a.offsetFromTarget,\n        onPositioned = _a.onPositioned;\n    var hostElement = this._positionedHost.current;\n    var positioningContainerElement = this._contentHost.current;\n\n    if (hostElement && positioningContainerElement) {\n      var currentProps = __assign({}, this.props);\n\n      currentProps.bounds = this._getBounds();\n      currentProps.target = this._target;\n\n      if (document.body.contains(currentProps.target)) {\n        currentProps.gapSpace = offsetFromTarget;\n        var newPositions_1 = positionElement(currentProps, hostElement, positioningContainerElement); // Set the new position only when the positions are not exists or one of the new positioningContainer positions\n        // are different. The position should not change if the position is within 2 decimal places.\n\n        if (!positions && newPositions_1 || positions && newPositions_1 && !this._arePositionsEqual(positions, newPositions_1) && this._positionAttempts < 5) {\n          // We should not reposition the positioningContainer more than a few times, if it is then the content is\n          // likely resizing and we should stop trying to reposition to prevent a stack overflow.\n          this._positionAttempts++;\n          this.setState({\n            positions: newPositions_1\n          }, function () {\n            if (onPositioned) {\n              onPositioned(newPositions_1);\n            }\n          });\n        } else {\n          this._positionAttempts = 0;\n\n          if (onPositioned) {\n            onPositioned(newPositions_1);\n          }\n        }\n      } else if (positions !== undefined) {\n        this.setState({\n          positions: undefined\n        });\n      }\n    }\n  };\n\n  PositioningContainer.prototype._getBounds = function () {\n    if (!this._positioningBounds) {\n      var currentBounds = this.props.bounds;\n\n      if (!currentBounds) {\n        currentBounds = {\n          top: 0 + this.props.minPagePadding,\n          left: 0 + this.props.minPagePadding,\n          right: this._targetWindow.innerWidth - this.props.minPagePadding,\n          bottom: this._targetWindow.innerHeight - this.props.minPagePadding,\n          width: this._targetWindow.innerWidth - this.props.minPagePadding * 2,\n          height: this._targetWindow.innerHeight - this.props.minPagePadding * 2\n        };\n      }\n\n      this._positioningBounds = currentBounds;\n    }\n\n    return this._positioningBounds;\n  };\n  /**\n   * Return the maximum height the container can grow to\n   * without going out of the specified bounds\n   */\n\n\n  PositioningContainer.prototype._getMaxHeight = function () {\n    var _a = this.props,\n        directionalHintFixed = _a.directionalHintFixed,\n        offsetFromTarget = _a.offsetFromTarget,\n        directionalHint = _a.directionalHint;\n\n    if (!this._maxHeight) {\n      if (directionalHintFixed && this._target) {\n        var gapSpace = offsetFromTarget ? offsetFromTarget : 0;\n        this._maxHeight = getMaxHeight(this._target, directionalHint, gapSpace, this._getBounds());\n      } else {\n        this._maxHeight = this._getBounds().height - BORDER_WIDTH * 2;\n      }\n    }\n\n    return this._maxHeight;\n  };\n\n  PositioningContainer.prototype._arePositionsEqual = function (positions, newPosition) {\n    return this._comparePositions(positions.elementPosition, newPosition.elementPosition);\n  };\n\n  PositioningContainer.prototype._comparePositions = function (oldPositions, newPositions) {\n    for (var key in newPositions) {\n      if (newPositions.hasOwnProperty(key)) {\n        var oldPositionEdge = oldPositions[key];\n        var newPositionEdge = newPositions[key];\n\n        if (oldPositionEdge && newPositionEdge) {\n          if (oldPositionEdge.toFixed(2) !== newPositionEdge.toFixed(2)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n\n  PositioningContainer.prototype._setTargetWindowAndElement = function (target) {\n    var currentElement = this._positionedHost.current;\n\n    if (target) {\n      if (typeof target === 'string') {\n        var currentDoc = getDocument();\n        this._target = currentDoc ? currentDoc.querySelector(target) : null;\n        this._targetWindow = getWindow(currentElement); // Cast to any prevents error about stopPropagation always existing\n      } else if (target.stopPropagation) {\n        this._targetWindow = getWindow(target.target);\n        this._target = target;\n      } else if ( // eslint-disable-next-line deprecation/deprecation\n      (target.left !== undefined || target.x !== undefined) && ( // eslint-disable-next-line deprecation/deprecation\n      target.top !== undefined || target.y !== undefined)) {\n        this._targetWindow = getWindow(currentElement);\n        this._target = target;\n      } else {\n        var targetElement = target;\n        this._targetWindow = getWindow(targetElement);\n        this._target = target;\n      }\n    } else {\n      this._targetWindow = getWindow(currentElement);\n    }\n  };\n  /**\n   * Animates the height if finalHeight was given.\n   */\n\n\n  PositioningContainer.prototype._setHeightOffsetEveryFrame = function () {\n    var _this = this;\n\n    if (this._contentHost && this.props.finalHeight) {\n      this._setHeightOffsetTimer = this._async.requestAnimationFrame(function () {\n        if (!_this._contentHost.current) {\n          return;\n        }\n\n        var positioningContainerMainElem = _this._contentHost.current.lastChild;\n        var cardScrollHeight = positioningContainerMainElem.scrollHeight;\n        var cardCurrHeight = positioningContainerMainElem.offsetHeight;\n        var scrollDiff = cardScrollHeight - cardCurrHeight;\n\n        _this.setState({\n          heightOffset: _this.state.heightOffset + scrollDiff\n        });\n\n        if (positioningContainerMainElem.offsetHeight < _this.props.finalHeight) {\n          _this._setHeightOffsetEveryFrame();\n        } else {\n          _this._async.cancelAnimationFrame(_this._setHeightOffsetTimer);\n        }\n      });\n    }\n  };\n\n  PositioningContainer.prototype._getTarget = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var target = props.target;\n    return target;\n  };\n\n  PositioningContainer.defaultProps = {\n    preventDismissOnScroll: false,\n    offsetFromTarget: 0,\n    minPagePadding: 8,\n    directionalHint: DirectionalHint.bottomAutoEdge\n  };\n  return PositioningContainer;\n}(React.Component);\n\nexport { PositioningContainer };","map":{"version":3,"mappings":"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","names":["React","getClassNames","Layer","DirectionalHint","css","elementContains","focusFirstChild","getWindow","getDocument","initializeComponentRef","Async","EventGroup","getMaxHeight","positionElement","RectangleEdge","AnimationClassNames","mergeStyles","OFF_SCREEN_STYLE","opacity","BORDER_WIDTH","SLIDE_ANIMATIONS","_a","top","bottom","left","right","__extends","props","_super","_this","createRef","ev","onResize","onDismiss","_updateAsyncPosition","_contentHost","current","setInitialFocus","_didSetInitialFocus","state","positions","_async","setTimeout","_events","on","_targetWindow","throttle","_dismissOnScroll","document","body","_dismissOnLostFocus","onLayerMounted","_setHeightOffsetEveryFrame","undefined","heightOffset","_positionAttempts","PositioningContainer","_setTargetWindowAndElement","_getTarget","_onComponentDidMount","_setInitialFocus","newProps","newTarget","oldTarget","String","_maxHeight","offsetFromTarget","finalHeight","dispose","className","positioningContainerWidth","positioningContainerMaxHeight","children","styles","directionalClassName","targetEdge","getContentMaxHeight","_getMaxHeight","contentMaxHeight","content","ref","_positionedHost","container","root","width","style","elementPosition","tabIndex","doNotLayer","preventDismissOnScroll","target","clickedOutsideCallout","_target","stopPropagation","requestAnimationFrame","_updatePosition","onPositioned","hostElement","positioningContainerElement","currentProps","bounds","_getBounds","contains","gapSpace","newPositions_1","_arePositionsEqual","setState","_positioningBounds","currentBounds","minPagePadding","innerWidth","innerHeight","height","directionalHintFixed","directionalHint","newPosition","_comparePositions","oldPositions","newPositions","key","hasOwnProperty","oldPositionEdge","newPositionEdge","toFixed","currentElement","currentDoc","querySelector","x","y","targetElement","_setHeightOffsetTimer","positioningContainerMainElem","lastChild","cardScrollHeight","scrollHeight","cardCurrHeight","offsetHeight","scrollDiff","cancelAnimationFrame","bottomAutoEdge","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\Coachmark\\src\\components\\Coachmark\\PositioningContainer\\PositioningContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IPositioningContainerProps } from './PositioningContainer.types';\nimport { getClassNames } from './PositioningContainer.styles';\nimport { Layer } from '../../../Layer';\n\n// Utilites/Helpers\nimport { DirectionalHint } from '../../../common/DirectionalHint';\nimport {\n  Point,\n  IRectangle,\n  css,\n  elementContains,\n  focusFirstChild,\n  getWindow,\n  getDocument,\n  initializeComponentRef,\n  Async,\n  EventGroup,\n} from '../../../Utilities';\n\nimport {\n  getMaxHeight,\n  positionElement,\n  IPositionedData,\n  IPositionProps,\n  IPosition,\n  RectangleEdge,\n} from '../../../utilities/positioning';\n\nimport { AnimationClassNames, mergeStyles } from '../../../Styling';\n\nconst OFF_SCREEN_STYLE = { opacity: 0 };\n\n// In order for some of the max height logic to work\n// properly we need to set the border.\n// The value is abitrary.\nconst BORDER_WIDTH = 1;\nconst SLIDE_ANIMATIONS: { [key: number]: string } = {\n  [RectangleEdge.top]: 'slideUpIn20',\n  [RectangleEdge.bottom]: 'slideDownIn20',\n  [RectangleEdge.left]: 'slideLeftIn20',\n  [RectangleEdge.right]: 'slideRightIn20',\n};\n\nexport interface IPositioningContainerState {\n  /**\n   * Current set of calcualted positions for the outermost parent container.\n   */\n  positions?: IPositionedData;\n\n  /**\n   * Tracks the current height offset and updates during\n   * the height animation when props.finalHeight is specified.\n   */\n  heightOffset?: number;\n}\n\nexport class PositioningContainer extends React.Component<IPositioningContainerProps, IPositioningContainerState>\n  implements PositioningContainer {\n  public static defaultProps: IPositioningContainerProps = {\n    preventDismissOnScroll: false,\n    offsetFromTarget: 0,\n    minPagePadding: 8,\n    directionalHint: DirectionalHint.bottomAutoEdge,\n  };\n\n  private _didSetInitialFocus: boolean;\n\n  /**\n   * The primary positioned div.\n   */\n  private _positionedHost = React.createRef<HTMLDivElement>();\n\n  // @TODO rename to reflect the name of this class\n  private _contentHost = React.createRef<HTMLDivElement>();\n\n  /**\n   * Stores an instance of Window, used to check\n   * for server side rendering and if focus was lost.\n   */\n  private _targetWindow: Window;\n\n  /**\n   * The bounds used when determing if and where the\n   * PositioningContainer should be placed.\n   */\n  private _positioningBounds: IRectangle;\n\n  /**\n   * The maximum height the PositioningContainer can grow to\n   * without going being the window or target bounds\n   */\n  private _maxHeight: number | undefined;\n  private _positionAttempts: number;\n  private _target: HTMLElement | MouseEvent | Point | null;\n  private _setHeightOffsetTimer: number;\n  private _async: Async;\n  private _events: EventGroup;\n\n  constructor(props: IPositioningContainerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this._didSetInitialFocus = false;\n    this.state = {\n      positions: undefined,\n      heightOffset: 0,\n    };\n    this._positionAttempts = 0;\n  }\n\n  public UNSAFE_componentWillMount(): void {\n    this._setTargetWindowAndElement(this._getTarget());\n  }\n\n  public componentDidMount(): void {\n    this._onComponentDidMount();\n  }\n\n  public componentDidUpdate(): void {\n    this._setInitialFocus();\n    this._updateAsyncPosition();\n  }\n\n  public UNSAFE_componentWillUpdate(newProps: IPositioningContainerProps): void {\n    // If the target element changed, find the new one. If we are tracking\n    // target with class name, always find element because we do not know if\n    // fabric has rendered a new element and disposed the old element.\n    const newTarget = this._getTarget(newProps);\n    const oldTarget = this._getTarget();\n    if (newTarget !== oldTarget || typeof newTarget === 'string' || newTarget instanceof String) {\n      this._maxHeight = undefined;\n      this._setTargetWindowAndElement(newTarget!);\n    }\n\n    if (newProps.offsetFromTarget !== this.props.offsetFromTarget) {\n      this._maxHeight = undefined;\n    }\n\n    if (newProps.finalHeight !== this.props.finalHeight) {\n      this._setHeightOffsetEveryFrame();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element | null {\n    // If there is no target window then we are likely in server side rendering and we should not render anything.\n    if (!this._targetWindow) {\n      return null;\n    }\n\n    const { className, positioningContainerWidth, positioningContainerMaxHeight, children } = this.props;\n    const { positions } = this.state;\n\n    const styles = getClassNames();\n\n    const directionalClassName =\n      positions && positions.targetEdge ? (AnimationClassNames as any)[SLIDE_ANIMATIONS[positions.targetEdge]] : '';\n\n    const getContentMaxHeight: number = this._getMaxHeight() + this.state.heightOffset!;\n    const contentMaxHeight: number =\n      positioningContainerMaxHeight! && positioningContainerMaxHeight! > getContentMaxHeight\n        ? getContentMaxHeight\n        : positioningContainerMaxHeight!;\n    const content = (\n      <div ref={this._positionedHost} className={css('ms-PositioningContainer', styles.container)}>\n        <div\n          className={mergeStyles(\n            'ms-PositioningContainer-layerHost',\n            styles.root,\n            className,\n            directionalClassName,\n            !!positioningContainerWidth && { width: positioningContainerWidth },\n          )}\n          style={positions ? positions.elementPosition : OFF_SCREEN_STYLE}\n          // Safari and Firefox on Mac OS requires this to back-stop click events so focus remains in the Callout.\n          // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus\n          tabIndex={-1}\n          ref={this._contentHost}\n        >\n          {children}\n          {\n            // @TODO apply to the content container\n            contentMaxHeight\n          }\n        </div>\n      </div>\n    );\n\n    return this.props.doNotLayer ? content : <Layer>{content}</Layer>;\n  }\n\n  /**\n   * Deprecated, use `onResize` instead.\n   * @deprecated Use `onResize` instead.\n   */\n  public dismiss = (ev?: Event | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>): void => {\n    this.onResize(ev);\n  };\n\n  public onResize = (ev?: Event | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>): void => {\n    const { onDismiss } = this.props;\n    if (onDismiss) {\n      onDismiss(ev);\n    } else {\n      this._updateAsyncPosition();\n    }\n  };\n\n  protected _dismissOnScroll(ev: Event): void {\n    const { preventDismissOnScroll } = this.props;\n    if (this.state.positions && !preventDismissOnScroll) {\n      this._dismissOnLostFocus(ev);\n    }\n  }\n\n  protected _dismissOnLostFocus(ev: Event): void {\n    const target = ev.target as HTMLElement;\n    const clickedOutsideCallout =\n      this._positionedHost.current && !elementContains(this._positionedHost.current, target);\n\n    if (\n      (!this._target && clickedOutsideCallout) ||\n      (ev.target !== this._targetWindow &&\n        clickedOutsideCallout &&\n        ((this._target as MouseEvent).stopPropagation ||\n          !this._target ||\n          (target !== this._target && !elementContains(this._target as HTMLElement, target))))\n    ) {\n      this.onResize(ev);\n    }\n  }\n\n  protected _setInitialFocus = (): void => {\n    if (this._contentHost.current && this.props.setInitialFocus && !this._didSetInitialFocus && this.state.positions) {\n      this._didSetInitialFocus = true;\n      focusFirstChild(this._contentHost.current);\n    }\n  };\n\n  protected _onComponentDidMount = (): void => {\n    // This is added so the positioningContainer will dismiss when the window is scrolled\n    // but not when something inside the positioningContainer is scrolled. The delay seems\n    // to be required to avoid React firing an async focus event in IE from\n    // the target changing focus quickly prior to rendering the positioningContainer.\n    this._async.setTimeout(() => {\n      this._events.on(this._targetWindow, 'scroll', this._async.throttle(this._dismissOnScroll, 10), true);\n      this._events.on(this._targetWindow, 'resize', this._async.throttle(this.onResize, 10), true);\n      this._events.on(this._targetWindow.document.body, 'focus', this._dismissOnLostFocus, true);\n      this._events.on(this._targetWindow.document.body, 'click', this._dismissOnLostFocus, true);\n    }, 0);\n\n    if (this.props.onLayerMounted) {\n      this.props.onLayerMounted();\n    }\n\n    this._updateAsyncPosition();\n    this._setHeightOffsetEveryFrame();\n  };\n\n  private _updateAsyncPosition(): void {\n    this._async.requestAnimationFrame(() => this._updatePosition());\n  }\n\n  private _updatePosition(): void {\n    const { positions } = this.state;\n    const { offsetFromTarget, onPositioned } = this.props;\n\n    const hostElement = this._positionedHost.current;\n    const positioningContainerElement = this._contentHost.current;\n\n    if (hostElement && positioningContainerElement) {\n      const currentProps: IPositionProps = { ...(this.props as any) };\n      currentProps.bounds = this._getBounds();\n      currentProps.target = this._target!;\n      if (document.body.contains(currentProps.target as Node)) {\n        currentProps.gapSpace = offsetFromTarget;\n        const newPositions: IPositionedData = positionElement(currentProps, hostElement, positioningContainerElement);\n        // Set the new position only when the positions are not exists or one of the new positioningContainer positions\n        // are different. The position should not change if the position is within 2 decimal places.\n        if (\n          (!positions && newPositions) ||\n          (positions && newPositions && !this._arePositionsEqual(positions, newPositions) && this._positionAttempts < 5)\n        ) {\n          // We should not reposition the positioningContainer more than a few times, if it is then the content is\n          // likely resizing and we should stop trying to reposition to prevent a stack overflow.\n          this._positionAttempts++;\n          this.setState(\n            {\n              positions: newPositions,\n            },\n            () => {\n              if (onPositioned) {\n                onPositioned(newPositions);\n              }\n            },\n          );\n        } else {\n          this._positionAttempts = 0;\n          if (onPositioned) {\n            onPositioned(newPositions);\n          }\n        }\n      } else if (positions !== undefined) {\n        this.setState({\n          positions: undefined,\n        });\n      }\n    }\n  }\n\n  private _getBounds(): IRectangle {\n    if (!this._positioningBounds) {\n      let currentBounds = this.props.bounds;\n\n      if (!currentBounds) {\n        currentBounds = {\n          top: 0 + this.props.minPagePadding!,\n          left: 0 + this.props.minPagePadding!,\n          right: this._targetWindow.innerWidth - this.props.minPagePadding!,\n          bottom: this._targetWindow.innerHeight - this.props.minPagePadding!,\n          width: this._targetWindow.innerWidth - this.props.minPagePadding! * 2,\n          height: this._targetWindow.innerHeight - this.props.minPagePadding! * 2,\n        };\n      }\n      this._positioningBounds = currentBounds;\n    }\n    return this._positioningBounds;\n  }\n\n  /**\n   * Return the maximum height the container can grow to\n   * without going out of the specified bounds\n   */\n  private _getMaxHeight(): number {\n    const { directionalHintFixed, offsetFromTarget, directionalHint } = this.props;\n\n    if (!this._maxHeight) {\n      if (directionalHintFixed && this._target) {\n        const gapSpace = offsetFromTarget ? offsetFromTarget : 0;\n        this._maxHeight = getMaxHeight(this._target, directionalHint!, gapSpace, this._getBounds());\n      } else {\n        this._maxHeight = this._getBounds().height! - BORDER_WIDTH * 2;\n      }\n    }\n    return this._maxHeight!;\n  }\n\n  private _arePositionsEqual(positions: IPositionedData, newPosition: IPositionedData): boolean {\n    return this._comparePositions(positions.elementPosition, newPosition.elementPosition);\n  }\n\n  private _comparePositions(oldPositions: IPosition, newPositions: IPosition): boolean {\n    for (const key in newPositions) {\n      if (newPositions.hasOwnProperty(key)) {\n        const oldPositionEdge = oldPositions[key];\n        const newPositionEdge = newPositions[key];\n\n        if (oldPositionEdge && newPositionEdge) {\n          if (oldPositionEdge.toFixed(2) !== newPositionEdge.toFixed(2)) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  private _setTargetWindowAndElement(target: HTMLElement | string | MouseEvent | Point | null): void {\n    const currentElement = this._positionedHost.current;\n\n    if (target) {\n      if (typeof target === 'string') {\n        const currentDoc: Document = getDocument()!;\n        this._target = currentDoc ? (currentDoc.querySelector(target) as HTMLElement) : null;\n        this._targetWindow = getWindow(currentElement)!;\n        // Cast to any prevents error about stopPropagation always existing\n      } else if ((target as any).stopPropagation) {\n        this._targetWindow = getWindow((target as MouseEvent).target as HTMLElement)!;\n        this._target = target;\n      } else if (\n        // eslint-disable-next-line deprecation/deprecation\n        ((target as Point).left !== undefined || (target as Point).x !== undefined) &&\n        // eslint-disable-next-line deprecation/deprecation\n        ((target as Point).top !== undefined || (target as Point).y !== undefined)\n      ) {\n        this._targetWindow = getWindow(currentElement)!;\n        this._target = target;\n      } else {\n        const targetElement: HTMLElement = target as HTMLElement;\n        this._targetWindow = getWindow(targetElement)!;\n        this._target = target;\n      }\n    } else {\n      this._targetWindow = getWindow(currentElement)!;\n    }\n  }\n\n  /**\n   * Animates the height if finalHeight was given.\n   */\n  private _setHeightOffsetEveryFrame(): void {\n    if (this._contentHost && this.props.finalHeight) {\n      this._setHeightOffsetTimer = this._async.requestAnimationFrame(() => {\n        if (!this._contentHost.current) {\n          return;\n        }\n\n        const positioningContainerMainElem = this._contentHost.current.lastChild as HTMLElement;\n        const cardScrollHeight: number = positioningContainerMainElem.scrollHeight;\n        const cardCurrHeight: number = positioningContainerMainElem.offsetHeight;\n        const scrollDiff: number = cardScrollHeight - cardCurrHeight;\n\n        this.setState({\n          heightOffset: this.state.heightOffset! + scrollDiff,\n        });\n\n        if (positioningContainerMainElem.offsetHeight < this.props.finalHeight!) {\n          this._setHeightOffsetEveryFrame();\n        } else {\n          this._async.cancelAnimationFrame(this._setHeightOffsetTimer);\n        }\n      });\n    }\n  }\n\n  private _getTarget(props: IPositioningContainerProps = this.props): HTMLElement | string | MouseEvent | Point | null {\n    const { target } = props;\n    return target!;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}