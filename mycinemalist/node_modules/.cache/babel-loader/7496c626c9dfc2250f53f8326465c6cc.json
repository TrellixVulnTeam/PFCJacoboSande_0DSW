{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport * as stylesImport from './BaseFloatingPicker.scss';\nimport { Async, initializeComponentRef, css, KeyCodes } from '../../Utilities';\nimport { Callout, DirectionalHint } from '../../Callout';\nimport { SuggestionsControl } from './Suggestions/SuggestionsControl';\nvar styles = stylesImport;\n\nvar BaseFloatingPicker =\n/** @class */\nfunction (_super) {\n  __extends(BaseFloatingPicker, _super);\n\n  function BaseFloatingPicker(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this;\n\n    _this.root = React.createRef();\n    _this.suggestionsControl = React.createRef();\n    _this.SuggestionsControlOfProperType = SuggestionsControl;\n    _this.isComponentMounted = false;\n\n    _this.onQueryStringChanged = function (queryString) {\n      if (queryString !== _this.state.queryString) {\n        _this.setState({\n          queryString: queryString\n        });\n\n        if (_this.props.onInputChanged) {\n          _this.props.onInputChanged(queryString);\n        }\n\n        _this.updateValue(queryString);\n      }\n    };\n\n    _this.hidePicker = function () {\n      var wasShownBeforeUpdate = _this.isSuggestionsShown;\n\n      _this.setState({\n        suggestionsVisible: false\n      });\n\n      if (_this.props.onSuggestionsHidden && wasShownBeforeUpdate) {\n        _this.props.onSuggestionsHidden();\n      }\n    };\n\n    _this.showPicker = function (updateValue) {\n      if (updateValue === void 0) {\n        updateValue = false;\n      }\n\n      var wasShownBeforeUpdate = _this.isSuggestionsShown;\n\n      _this.setState({\n        suggestionsVisible: true\n      }); // Update the suggestions if updateValue == true\n\n\n      var value = _this.props.inputElement ? _this.props.inputElement.value : '';\n\n      if (updateValue) {\n        _this.updateValue(value);\n      }\n\n      if (_this.props.onSuggestionsShown && !wasShownBeforeUpdate) {\n        _this.props.onSuggestionsShown();\n      }\n    };\n\n    _this.completeSuggestion = function () {\n      if (_this.suggestionsControl.current && _this.suggestionsControl.current.hasSuggestionSelected()) {\n        _this.onChange(_this.suggestionsControl.current.currentSuggestion.item);\n      }\n    };\n\n    _this.onSuggestionClick = function (ev, item, index) {\n      _this.onChange(item);\n\n      _this._updateSuggestionsVisible(false\n      /*shouldShow*/\n      );\n    };\n\n    _this.onSuggestionRemove = function (ev, item, index) {\n      if (_this.props.onRemoveSuggestion) {\n        _this.props.onRemoveSuggestion(item);\n      }\n\n      if (_this.suggestionsControl.current) {\n        _this.suggestionsControl.current.removeSuggestion(index);\n      }\n    };\n\n    _this.onKeyDown = function (ev) {\n      if (!_this.state.suggestionsVisible || _this.props.inputElement && !_this.props.inputElement.contains(ev.target)) {\n        return;\n      } // eslint-disable-next-line deprecation/deprecation\n\n\n      var keyCode = ev.which;\n\n      switch (keyCode) {\n        case KeyCodes.escape:\n          _this.hidePicker();\n\n          ev.preventDefault();\n          ev.stopPropagation();\n          break;\n\n        case KeyCodes.tab:\n        case KeyCodes.enter:\n          if (!ev.shiftKey && !ev.ctrlKey && _this.suggestionsControl.current && _this.suggestionsControl.current.handleKeyDown(keyCode)) {\n            ev.preventDefault();\n            ev.stopPropagation();\n          } else {\n            _this._onValidateInput();\n          }\n\n          break;\n\n        case KeyCodes.del:\n          if (_this.props.onRemoveSuggestion && _this.suggestionsControl.current && _this.suggestionsControl.current.hasSuggestionSelected && _this.suggestionsControl.current.currentSuggestion && ev.shiftKey) {\n            _this.props.onRemoveSuggestion(_this.suggestionsControl.current.currentSuggestion.item);\n\n            _this.suggestionsControl.current.removeSuggestion();\n\n            _this.forceUpdate();\n\n            ev.stopPropagation();\n          }\n\n          break;\n\n        case KeyCodes.up:\n          if (_this.suggestionsControl.current && _this.suggestionsControl.current.handleKeyDown(keyCode)) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            _this._updateActiveDescendant();\n          }\n\n          break;\n\n        case KeyCodes.down:\n          if (_this.suggestionsControl.current && _this.suggestionsControl.current.handleKeyDown(keyCode)) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            _this._updateActiveDescendant();\n          }\n\n          break;\n      }\n    };\n\n    _this._onValidateInput = function () {\n      if (_this.state.queryString && _this.props.onValidateInput && _this.props.createGenericItem) {\n        var itemToConvert = _this.props.createGenericItem(_this.state.queryString, _this.props.onValidateInput(_this.state.queryString));\n\n        var convertedItems = _this.suggestionStore.convertSuggestionsToSuggestionItems([itemToConvert]);\n\n        _this.onChange(convertedItems[0].item);\n      }\n    };\n\n    _this._async = new Async(_this);\n    initializeComponentRef(_this);\n    _this.suggestionStore = basePickerProps.suggestionsStore;\n    _this.state = {\n      queryString: '',\n      didBind: false\n    };\n    return _this;\n  }\n\n  Object.defineProperty(BaseFloatingPicker.prototype, \"inputText\", {\n    get: function () {\n      return this.state.queryString;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseFloatingPicker.prototype, \"suggestions\", {\n    get: function () {\n      return this.suggestionStore.suggestions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BaseFloatingPicker.prototype.forceResolveSuggestion = function () {\n    if (this.suggestionsControl.current && this.suggestionsControl.current.hasSuggestionSelected()) {\n      this.completeSuggestion();\n    } else {\n      this._onValidateInput();\n    }\n  };\n\n  Object.defineProperty(BaseFloatingPicker.prototype, \"currentSelectedSuggestionIndex\", {\n    get: function () {\n      return this.suggestionsControl.current ? this.suggestionsControl.current.currentSuggestionIndex : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseFloatingPicker.prototype, \"isSuggestionsShown\", {\n    get: function () {\n      return this.state.suggestionsVisible === undefined ? false : this.state.suggestionsVisible;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BaseFloatingPicker.prototype.componentDidMount = function () {\n    this._bindToInputElement();\n\n    this.isComponentMounted = true;\n    this._onResolveSuggestions = this._async.debounce(this._onResolveSuggestions, this.props.resolveDelay);\n  };\n\n  BaseFloatingPicker.prototype.componentDidUpdate = function () {\n    this._bindToInputElement();\n  };\n\n  BaseFloatingPicker.prototype.componentWillUnmount = function () {\n    this._unbindFromInputElement();\n\n    this.isComponentMounted = false;\n  };\n\n  BaseFloatingPicker.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    if (newProps.suggestionItems) {\n      this.updateSuggestions(newProps.suggestionItems);\n    }\n  };\n\n  BaseFloatingPicker.prototype.updateSuggestions = function (suggestions, forceUpdate) {\n    if (forceUpdate === void 0) {\n      forceUpdate = false;\n    }\n\n    this.suggestionStore.updateSuggestions(suggestions);\n\n    if (forceUpdate) {\n      this.forceUpdate();\n    }\n  };\n\n  BaseFloatingPicker.prototype.render = function () {\n    var className = this.props.className;\n    return React.createElement(\"div\", {\n      ref: this.root,\n      className: css('ms-BasePicker ms-BaseFloatingPicker', className ? className : '')\n    }, this.renderSuggestions());\n  };\n\n  BaseFloatingPicker.prototype.renderSuggestions = function () {\n    var TypedSuggestionsControl = this.SuggestionsControlOfProperType;\n    return this.state.suggestionsVisible ? React.createElement(Callout, __assign({\n      className: styles.callout,\n      isBeakVisible: false,\n      gapSpace: 5,\n      target: this.props.inputElement,\n      onDismiss: this.hidePicker,\n      directionalHint: DirectionalHint.bottomLeftEdge,\n      directionalHintForRTL: DirectionalHint.bottomRightEdge,\n      calloutWidth: this.props.calloutWidth ? this.props.calloutWidth : 0\n    }, this.props.pickerCalloutProps), React.createElement(TypedSuggestionsControl, __assign({\n      onRenderSuggestion: this.props.onRenderSuggestionsItem,\n      onSuggestionClick: this.onSuggestionClick,\n      onSuggestionRemove: this.onSuggestionRemove,\n      suggestions: this.suggestionStore.getSuggestions(),\n      componentRef: this.suggestionsControl,\n      completeSuggestion: this.completeSuggestion,\n      shouldLoopSelection: false\n    }, this.props.pickerSuggestionsProps))) : null;\n  };\n\n  BaseFloatingPicker.prototype.onSelectionChange = function () {\n    this.forceUpdate();\n  };\n\n  BaseFloatingPicker.prototype.updateValue = function (updatedValue) {\n    if (updatedValue === '') {\n      this.updateSuggestionWithZeroState();\n    } else {\n      this._onResolveSuggestions(updatedValue);\n    }\n  };\n\n  BaseFloatingPicker.prototype.updateSuggestionWithZeroState = function () {\n    if (this.props.onZeroQuerySuggestion) {\n      var onEmptyInputFocus = this.props.onZeroQuerySuggestion;\n      var suggestions = onEmptyInputFocus(this.props.selectedItems);\n      this.updateSuggestionsList(suggestions);\n    } else {\n      this.hidePicker();\n    }\n  };\n\n  BaseFloatingPicker.prototype.updateSuggestionsList = function (suggestions) {\n    var _this = this;\n\n    var suggestionsArray = suggestions;\n    var suggestionsPromiseLike = suggestions; // Check to see if the returned value is an array, if it is then just pass it into the next function.\n    // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n    // If it is then resolve it asynchronously.\n\n    if (Array.isArray(suggestionsArray)) {\n      this.updateSuggestions(suggestionsArray, true\n      /*forceUpdate*/\n      );\n    } else if (suggestionsPromiseLike && suggestionsPromiseLike.then) {\n      // Ensure that the promise will only use the callback if it was the most recent one.\n      var promise_1 = this.currentPromise = suggestionsPromiseLike;\n      promise_1.then(function (newSuggestions) {\n        // Only update if the next promise has not yet resolved and\n        // the floating picker is still mounted.\n        if (promise_1 === _this.currentPromise && _this.isComponentMounted) {\n          _this.updateSuggestions(newSuggestions, true\n          /*forceUpdate*/\n          );\n        }\n      });\n    }\n  };\n\n  BaseFloatingPicker.prototype.onChange = function (item) {\n    if (this.props.onChange) {\n      this.props.onChange(item);\n    }\n  };\n\n  BaseFloatingPicker.prototype._updateActiveDescendant = function () {\n    if (this.props.inputElement && this.suggestionsControl.current && this.suggestionsControl.current.selectedElement) {\n      var selectedElId = this.suggestionsControl.current.selectedElement.getAttribute('id');\n\n      if (selectedElId) {\n        this.props.inputElement.setAttribute('aria-activedescendant', selectedElId);\n      }\n    }\n  };\n\n  BaseFloatingPicker.prototype._onResolveSuggestions = function (updatedValue) {\n    var suggestions = this.props.onResolveSuggestions(updatedValue, this.props.selectedItems);\n\n    this._updateSuggestionsVisible(true\n    /*shouldShow*/\n    );\n\n    if (suggestions !== null) {\n      this.updateSuggestionsList(suggestions);\n    }\n  };\n\n  BaseFloatingPicker.prototype._updateSuggestionsVisible = function (shouldShow) {\n    if (shouldShow) {\n      this.showPicker();\n    } else {\n      this.hidePicker();\n    }\n  };\n\n  BaseFloatingPicker.prototype._bindToInputElement = function () {\n    if (this.props.inputElement && !this.state.didBind) {\n      this.props.inputElement.addEventListener('keydown', this.onKeyDown);\n      this.setState({\n        didBind: true\n      });\n    }\n  };\n\n  BaseFloatingPicker.prototype._unbindFromInputElement = function () {\n    if (this.props.inputElement && this.state.didBind) {\n      this.props.inputElement.removeEventListener('keydown', this.onKeyDown);\n      this.setState({\n        didBind: false\n      });\n    }\n  };\n\n  return BaseFloatingPicker;\n}(React.Component);\n\nexport { BaseFloatingPicker };","map":{"version":3,"mappings":"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","names":["React","stylesImport","Async","initializeComponentRef","css","KeyCodes","Callout","DirectionalHint","SuggestionsControl","styles","__extends","basePickerProps","_super","_this","createRef","queryString","state","setState","props","onInputChanged","updateValue","wasShownBeforeUpdate","isSuggestionsShown","suggestionsVisible","onSuggestionsHidden","value","inputElement","onSuggestionsShown","suggestionsControl","current","hasSuggestionSelected","onChange","currentSuggestion","item","ev","index","_updateSuggestionsVisible","onRemoveSuggestion","removeSuggestion","contains","target","keyCode","which","escape","hidePicker","preventDefault","stopPropagation","tab","enter","shiftKey","ctrlKey","handleKeyDown","_onValidateInput","del","forceUpdate","up","_updateActiveDescendant","down","onValidateInput","createGenericItem","itemToConvert","convertedItems","suggestionStore","convertSuggestionsToSuggestionItems","_async","suggestionsStore","didBind","Object","BaseFloatingPicker","suggestions","completeSuggestion","currentSuggestionIndex","undefined","_bindToInputElement","isComponentMounted","_onResolveSuggestions","debounce","resolveDelay","_unbindFromInputElement","newProps","suggestionItems","updateSuggestions","ref","root","className","renderSuggestions","TypedSuggestionsControl","SuggestionsControlOfProperType","__assign","callout","isBeakVisible","gapSpace","onDismiss","directionalHint","bottomLeftEdge","directionalHintForRTL","bottomRightEdge","calloutWidth","pickerCalloutProps","onRenderSuggestion","onRenderSuggestionsItem","onSuggestionClick","onSuggestionRemove","getSuggestions","componentRef","shouldLoopSelection","pickerSuggestionsProps","updatedValue","updateSuggestionWithZeroState","onZeroQuerySuggestion","onEmptyInputFocus","selectedItems","updateSuggestionsList","suggestionsArray","suggestionsPromiseLike","Array","isArray","then","promise_1","currentPromise","newSuggestions","selectedElement","selectedElId","getAttribute","setAttribute","onResolveSuggestions","shouldShow","showPicker","addEventListener","onKeyDown","removeEventListener","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\FloatingPicker\\BaseFloatingPicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as stylesImport from './BaseFloatingPicker.scss';\nimport { Async, initializeComponentRef, css, KeyCodes } from '../../Utilities';\nimport { Callout, DirectionalHint } from '../../Callout';\nimport { IBaseFloatingPicker, IBaseFloatingPickerProps } from './BaseFloatingPicker.types';\nimport { ISuggestionModel } from '../../Pickers';\nimport { ISuggestionsControlProps } from './Suggestions/Suggestions.types';\nimport { SuggestionsControl } from './Suggestions/SuggestionsControl';\nimport { SuggestionsStore } from './Suggestions/SuggestionsStore';\nconst styles: any = stylesImport;\n\nexport interface IBaseFloatingPickerState {\n  queryString: string;\n  suggestionsVisible?: boolean;\n  didBind: boolean;\n}\n\nexport class BaseFloatingPicker<T, P extends IBaseFloatingPickerProps<T>>\n  extends React.Component<P, IBaseFloatingPickerState>\n  implements IBaseFloatingPicker {\n  protected selection: Selection;\n\n  protected root = React.createRef<HTMLDivElement>();\n  protected suggestionStore: SuggestionsStore<T>;\n  protected suggestionsControl: React.RefObject<SuggestionsControl<T>> = React.createRef();\n  protected SuggestionsControlOfProperType: new (props: ISuggestionsControlProps<T>) => SuggestionsControl<\n    T\n  > = SuggestionsControl as new (props: ISuggestionsControlProps<T>) => SuggestionsControl<T>;\n  protected currentPromise: PromiseLike<T[]>;\n  protected isComponentMounted: boolean = false;\n\n  private _async: Async;\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    this.suggestionStore = basePickerProps.suggestionsStore;\n    this.state = {\n      queryString: '',\n      didBind: false,\n    };\n  }\n\n  public get inputText(): string {\n    return this.state.queryString;\n  }\n\n  public get suggestions(): any[] {\n    return this.suggestionStore.suggestions;\n  }\n\n  public forceResolveSuggestion(): void {\n    if (this.suggestionsControl.current && this.suggestionsControl.current.hasSuggestionSelected()) {\n      this.completeSuggestion();\n    } else {\n      this._onValidateInput();\n    }\n  }\n\n  public get currentSelectedSuggestionIndex(): number {\n    return this.suggestionsControl.current ? this.suggestionsControl.current.currentSuggestionIndex : -1;\n  }\n\n  public get isSuggestionsShown(): boolean {\n    return this.state.suggestionsVisible === undefined ? false : this.state.suggestionsVisible;\n  }\n\n  public onQueryStringChanged = (queryString: string): void => {\n    if (queryString !== this.state.queryString) {\n      this.setState({\n        queryString: queryString,\n      });\n\n      if (this.props.onInputChanged) {\n        (this.props.onInputChanged as (filter: string) => void)(queryString);\n      }\n\n      this.updateValue(queryString);\n    }\n  };\n\n  public hidePicker = (): void => {\n    const wasShownBeforeUpdate = this.isSuggestionsShown;\n\n    this.setState({\n      suggestionsVisible: false,\n    });\n\n    if (this.props.onSuggestionsHidden && wasShownBeforeUpdate) {\n      this.props.onSuggestionsHidden();\n    }\n  };\n\n  public showPicker = (updateValue: boolean = false): void => {\n    const wasShownBeforeUpdate = this.isSuggestionsShown;\n    this.setState({\n      suggestionsVisible: true,\n    });\n\n    // Update the suggestions if updateValue == true\n    const value = this.props.inputElement ? this.props.inputElement.value : '';\n    if (updateValue) {\n      this.updateValue(value);\n    }\n\n    if (this.props.onSuggestionsShown && !wasShownBeforeUpdate) {\n      this.props.onSuggestionsShown();\n    }\n  };\n\n  public componentDidMount(): void {\n    this._bindToInputElement();\n    this.isComponentMounted = true;\n\n    this._onResolveSuggestions = this._async.debounce(this._onResolveSuggestions, this.props.resolveDelay);\n  }\n\n  public componentDidUpdate(): void {\n    this._bindToInputElement();\n  }\n\n  public componentWillUnmount(): void {\n    this._unbindFromInputElement();\n    this.isComponentMounted = false;\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: IBaseFloatingPickerProps<T>): void {\n    if (newProps.suggestionItems) {\n      this.updateSuggestions(newProps.suggestionItems);\n    }\n  }\n\n  public completeSuggestion = (): void => {\n    if (this.suggestionsControl.current && this.suggestionsControl.current.hasSuggestionSelected()) {\n      this.onChange(this.suggestionsControl.current.currentSuggestion!.item);\n    }\n  };\n\n  public updateSuggestions(suggestions: T[], forceUpdate: boolean = false): void {\n    this.suggestionStore.updateSuggestions(suggestions);\n\n    if (forceUpdate) {\n      this.forceUpdate();\n    }\n  }\n\n  public render(): JSX.Element {\n    const { className } = this.props;\n    return (\n      <div ref={this.root} className={css('ms-BasePicker ms-BaseFloatingPicker', className ? className : '')}>\n        {this.renderSuggestions()}\n      </div>\n    );\n  }\n\n  protected renderSuggestions(): JSX.Element | null {\n    const TypedSuggestionsControl = this.SuggestionsControlOfProperType;\n    return this.state.suggestionsVisible ? (\n      <Callout\n        className={styles.callout}\n        isBeakVisible={false}\n        gapSpace={5}\n        target={this.props.inputElement}\n        onDismiss={this.hidePicker}\n        directionalHint={DirectionalHint.bottomLeftEdge}\n        directionalHintForRTL={DirectionalHint.bottomRightEdge}\n        calloutWidth={this.props.calloutWidth ? this.props.calloutWidth : 0}\n        {...this.props.pickerCalloutProps}\n      >\n        <TypedSuggestionsControl\n          onRenderSuggestion={this.props.onRenderSuggestionsItem}\n          onSuggestionClick={this.onSuggestionClick}\n          onSuggestionRemove={this.onSuggestionRemove}\n          suggestions={this.suggestionStore.getSuggestions()}\n          componentRef={this.suggestionsControl}\n          completeSuggestion={this.completeSuggestion}\n          shouldLoopSelection={false}\n          {...this.props.pickerSuggestionsProps}\n        />\n      </Callout>\n    ) : null;\n  }\n\n  protected onSelectionChange(): void {\n    this.forceUpdate();\n  }\n\n  protected updateValue(updatedValue: string): void {\n    if (updatedValue === '') {\n      this.updateSuggestionWithZeroState();\n    } else {\n      this._onResolveSuggestions(updatedValue);\n    }\n  }\n\n  protected updateSuggestionWithZeroState(): void {\n    if (this.props.onZeroQuerySuggestion) {\n      const onEmptyInputFocus = this.props.onZeroQuerySuggestion as (selectedItems?: T[]) => T[] | PromiseLike<T[]>;\n      const suggestions: T[] | PromiseLike<T[]> = onEmptyInputFocus(this.props.selectedItems);\n      this.updateSuggestionsList(suggestions);\n    } else {\n      this.hidePicker();\n    }\n  }\n\n  protected updateSuggestionsList(suggestions: T[] | PromiseLike<T[]>): void {\n    const suggestionsArray: T[] = suggestions as T[];\n    const suggestionsPromiseLike: PromiseLike<T[]> = suggestions as PromiseLike<T[]>;\n\n    // Check to see if the returned value is an array, if it is then just pass it into the next function.\n    // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n    // If it is then resolve it asynchronously.\n    if (Array.isArray(suggestionsArray)) {\n      this.updateSuggestions(suggestionsArray, true /*forceUpdate*/);\n    } else if (suggestionsPromiseLike && suggestionsPromiseLike.then) {\n      // Ensure that the promise will only use the callback if it was the most recent one.\n      const promise: PromiseLike<T[]> = (this.currentPromise = suggestionsPromiseLike);\n      promise.then((newSuggestions: T[]) => {\n        // Only update if the next promise has not yet resolved and\n        // the floating picker is still mounted.\n        if (promise === this.currentPromise && this.isComponentMounted) {\n          this.updateSuggestions(newSuggestions, true /*forceUpdate*/);\n        }\n      });\n    }\n  }\n\n  protected onChange(item: T): void {\n    if (this.props.onChange) {\n      (this.props.onChange as (items: T) => void)(item);\n    }\n  }\n\n  protected onSuggestionClick = (ev: React.MouseEvent<HTMLElement>, item: T, index: number): void => {\n    this.onChange(item);\n    this._updateSuggestionsVisible(false /*shouldShow*/);\n  };\n\n  protected onSuggestionRemove = (ev: React.MouseEvent<HTMLElement>, item: T, index: number): void => {\n    if (this.props.onRemoveSuggestion) {\n      (this.props.onRemoveSuggestion as (item: T) => void)(item);\n    }\n\n    if (this.suggestionsControl.current) {\n      this.suggestionsControl.current.removeSuggestion(index);\n    }\n  };\n\n  protected onKeyDown = (ev: MouseEvent): void => {\n    if (\n      !this.state.suggestionsVisible ||\n      (this.props.inputElement && !(this.props.inputElement as HTMLElement).contains(ev.target as HTMLElement))\n    ) {\n      return;\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    const keyCode = ev.which;\n    switch (keyCode) {\n      case KeyCodes.escape:\n        this.hidePicker();\n        ev.preventDefault();\n        ev.stopPropagation();\n        break;\n\n      case KeyCodes.tab:\n      case KeyCodes.enter:\n        if (\n          !ev.shiftKey &&\n          !ev.ctrlKey &&\n          this.suggestionsControl.current &&\n          this.suggestionsControl.current.handleKeyDown(keyCode)\n        ) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        } else {\n          this._onValidateInput();\n        }\n        break;\n\n      case KeyCodes.del:\n        if (\n          this.props.onRemoveSuggestion &&\n          this.suggestionsControl.current &&\n          this.suggestionsControl.current.hasSuggestionSelected &&\n          this.suggestionsControl.current.currentSuggestion &&\n          ev.shiftKey\n        ) {\n          (this.props.onRemoveSuggestion as (item: T) => void)(this.suggestionsControl.current.currentSuggestion!.item);\n\n          this.suggestionsControl.current.removeSuggestion();\n          this.forceUpdate();\n          ev.stopPropagation();\n        }\n        break;\n\n      case KeyCodes.up:\n        if (this.suggestionsControl.current && this.suggestionsControl.current.handleKeyDown(keyCode)) {\n          ev.preventDefault();\n          ev.stopPropagation();\n          this._updateActiveDescendant();\n        }\n        break;\n\n      case KeyCodes.down:\n        if (this.suggestionsControl.current && this.suggestionsControl.current.handleKeyDown(keyCode)) {\n          ev.preventDefault();\n          ev.stopPropagation();\n          this._updateActiveDescendant();\n        }\n        break;\n    }\n  };\n\n  private _updateActiveDescendant(): void {\n    if (this.props.inputElement && this.suggestionsControl.current && this.suggestionsControl.current.selectedElement) {\n      const selectedElId = this.suggestionsControl.current.selectedElement.getAttribute('id');\n      if (selectedElId) {\n        this.props.inputElement.setAttribute('aria-activedescendant', selectedElId as string);\n      }\n    }\n  }\n\n  private _onResolveSuggestions(updatedValue: string): void {\n    const suggestions: T[] | PromiseLike<T[]> | null = this.props.onResolveSuggestions(\n      updatedValue,\n      this.props.selectedItems,\n    );\n\n    this._updateSuggestionsVisible(true /*shouldShow*/);\n    if (suggestions !== null) {\n      this.updateSuggestionsList(suggestions);\n    }\n  }\n\n  private _onValidateInput = (): void => {\n    if (this.state.queryString && this.props.onValidateInput && this.props.createGenericItem) {\n      const itemToConvert: ISuggestionModel<T> = (this.props.createGenericItem as (\n        input: string,\n        isValid: boolean,\n      ) => ISuggestionModel<T>)(\n        this.state.queryString,\n        (this.props.onValidateInput as (input: string) => boolean)(this.state.queryString),\n      );\n      const convertedItems = this.suggestionStore.convertSuggestionsToSuggestionItems([itemToConvert]);\n      this.onChange(convertedItems[0].item);\n    }\n  };\n\n  private _updateSuggestionsVisible(shouldShow: boolean): void {\n    if (shouldShow) {\n      this.showPicker();\n    } else {\n      this.hidePicker();\n    }\n  }\n\n  private _bindToInputElement(): void {\n    if (this.props.inputElement && !this.state.didBind) {\n      this.props.inputElement.addEventListener('keydown', this.onKeyDown);\n      this.setState({ didBind: true });\n    }\n  }\n\n  private _unbindFromInputElement(): void {\n    if (this.props.inputElement && this.state.didBind) {\n      this.props.inputElement.removeEventListener('keydown', this.onKeyDown);\n      this.setState({ didBind: false });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}