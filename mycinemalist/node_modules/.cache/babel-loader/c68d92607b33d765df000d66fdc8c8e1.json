{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { parseGap, parsePadding } from './StackUtils';\nimport { getGlobalClassNames } from '../../Styling';\nvar nameMap = {\n  start: 'flex-start',\n  end: 'flex-end'\n};\nvar GlobalClassNames = {\n  root: 'ms-Stack',\n  inner: 'ms-Stack-inner'\n};\nexport var styles = function (props, theme, tokens) {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  var verticalFill = props.verticalFill,\n      horizontal = props.horizontal,\n      reversed = props.reversed,\n      grow = props.grow,\n      wrap = props.wrap,\n      horizontalAlign = props.horizontalAlign,\n      verticalAlign = props.verticalAlign,\n      disableShrink = props.disableShrink,\n      className = props.className;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  /* eslint-disable deprecation/deprecation */\n\n  var childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;\n  var maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;\n  var maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;\n  var padding = tokens && tokens.padding ? tokens.padding : props.padding;\n  /* eslint-enable deprecation/deprecation */\n\n  var _h = parseGap(childrenGap, theme),\n      rowGap = _h.rowGap,\n      columnGap = _h.columnGap;\n\n  var horizontalMargin = \"\" + -0.5 * columnGap.value + columnGap.unit;\n  var verticalMargin = \"\" + -0.5 * rowGap.value + rowGap.unit; // styles to be applied to all direct children regardless of wrap or direction\n\n  var childStyles = {\n    textOverflow: 'ellipsis'\n  }; // selectors to be applied regardless of wrap or direction\n\n  var commonSelectors = {\n    // flexShrink styles are applied by the StackItem\n    '> *:not(.ms-StackItem)': {\n      flexShrink: disableShrink ? 0 : 1\n    }\n  };\n\n  if (wrap) {\n    return {\n      root: [classNames.root, {\n        flexWrap: 'wrap',\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        width: 'auto',\n        overflow: 'visible',\n        height: '100%'\n      }, horizontalAlign && (_a = {}, _a[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _a), verticalAlign && (_b = {}, _b[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _b), className, {\n        // not allowed to be overridden by className\n        // since this is necessary in order to prevent collapsing margins\n        display: 'flex'\n      }, horizontal && {\n        height: verticalFill ? '100%' : 'auto'\n      }],\n      inner: [classNames.inner, {\n        display: 'flex',\n        flexWrap: 'wrap',\n        marginLeft: horizontalMargin,\n        marginRight: horizontalMargin,\n        marginTop: verticalMargin,\n        marginBottom: verticalMargin,\n        overflow: 'visible',\n        boxSizing: 'border-box',\n        padding: parsePadding(padding, theme),\n        // avoid unnecessary calc() calls if horizontal gap is 0\n        width: columnGap.value === 0 ? '100%' : \"calc(100% + \" + columnGap.value + columnGap.unit + \")\",\n        maxWidth: '100vw',\n        selectors: __assign({\n          '> *': __assign({\n            margin: \"\" + 0.5 * rowGap.value + rowGap.unit + \" \" + 0.5 * columnGap.value + columnGap.unit\n          }, childStyles)\n        }, commonSelectors)\n      }, horizontalAlign && (_c = {}, _c[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _c), verticalAlign && (_d = {}, _d[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _d), horizontal && {\n        flexDirection: reversed ? 'row-reverse' : 'row',\n        // avoid unnecessary calc() calls if vertical gap is 0\n        height: rowGap.value === 0 ? '100%' : \"calc(100% + \" + rowGap.value + rowGap.unit + \")\",\n        selectors: {\n          '> *': {\n            maxWidth: columnGap.value === 0 ? '100%' : \"calc(100% - \" + columnGap.value + columnGap.unit + \")\"\n          }\n        }\n      }, !horizontal && {\n        flexDirection: reversed ? 'column-reverse' : 'column',\n        height: \"calc(100% + \" + rowGap.value + rowGap.unit + \")\",\n        selectors: {\n          '> *': {\n            maxHeight: rowGap.value === 0 ? '100%' : \"calc(100% - \" + rowGap.value + rowGap.unit + \")\"\n          }\n        }\n      }]\n    };\n  }\n\n  return {\n    root: [classNames.root, {\n      display: 'flex',\n      flexDirection: horizontal ? reversed ? 'row-reverse' : 'row' : reversed ? 'column-reverse' : 'column',\n      flexWrap: 'nowrap',\n      width: 'auto',\n      height: verticalFill ? '100%' : 'auto',\n      maxWidth: maxWidth,\n      maxHeight: maxHeight,\n      padding: parsePadding(padding, theme),\n      boxSizing: 'border-box',\n      selectors: __assign((_e = {\n        '> *': childStyles\n      }, _e[reversed ? '> *:not(:last-child)' : '> *:not(:first-child)'] = [horizontal && {\n        marginLeft: \"\" + columnGap.value + columnGap.unit\n      }, !horizontal && {\n        marginTop: \"\" + rowGap.value + rowGap.unit\n      }], _e), commonSelectors)\n    }, grow && {\n      flexGrow: grow === true ? 1 : grow\n    }, horizontalAlign && (_f = {}, _f[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _f), verticalAlign && (_g = {}, _g[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _g), className]\n  };\n};","map":{"version":3,"mappings":"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","names":["parseGap","parsePadding","getGlobalClassNames","nameMap","start","end","GlobalClassNames","root","inner","styles","props","theme","tokens","horizontal","reversed","grow","wrap","horizontalAlign","verticalAlign","disableShrink","className","classNames","childrenGap","gap","maxHeight","maxWidth","padding","rowGap","columnGap","horizontalMargin","value","unit","verticalMargin","childStyles","textOverflow","commonSelectors","flexShrink","flexWrap","width","overflow","height","_a","_b","display","verticalFill","marginLeft","marginRight","marginTop","marginBottom","boxSizing","selectors","__assign","margin","_c","_d","flexDirection","_e","flexGrow","_f","_g"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Stack\\Stack.styles.ts"],"sourcesContent":["import { IStackComponent, IStackStyles, IStackStylesReturnType } from './Stack.types';\nimport { parseGap, parsePadding } from './StackUtils';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst nameMap: { [key: string]: string } = {\n  start: 'flex-start',\n  end: 'flex-end',\n};\n\nconst GlobalClassNames = {\n  root: 'ms-Stack',\n  inner: 'ms-Stack-inner',\n};\n\nexport const styles: IStackComponent['styles'] = (props, theme, tokens): IStackStylesReturnType => {\n  const {\n    verticalFill,\n    horizontal,\n    reversed,\n    grow,\n    wrap,\n    horizontalAlign,\n    verticalAlign,\n    disableShrink,\n    className,\n  } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  /* eslint-disable deprecation/deprecation */\n  const childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;\n  const maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;\n  const maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;\n  const padding = tokens && tokens.padding ? tokens.padding : props.padding;\n  /* eslint-enable deprecation/deprecation */\n\n  const { rowGap, columnGap } = parseGap(childrenGap, theme);\n\n  const horizontalMargin = `${-0.5 * columnGap.value}${columnGap.unit}`;\n  const verticalMargin = `${-0.5 * rowGap.value}${rowGap.unit}`;\n\n  // styles to be applied to all direct children regardless of wrap or direction\n  const childStyles = {\n    textOverflow: 'ellipsis',\n  };\n\n  // selectors to be applied regardless of wrap or direction\n  const commonSelectors = {\n    // flexShrink styles are applied by the StackItem\n    '> *:not(.ms-StackItem)': {\n      flexShrink: disableShrink ? 0 : 1,\n    },\n  };\n\n  if (wrap) {\n    return {\n      root: [\n        classNames.root,\n        {\n          flexWrap: 'wrap',\n          maxWidth,\n          maxHeight,\n          width: 'auto',\n          overflow: 'visible',\n          height: '100%',\n        },\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        className,\n        {\n          // not allowed to be overridden by className\n          // since this is necessary in order to prevent collapsing margins\n          display: 'flex',\n        },\n        horizontal && {\n          height: verticalFill ? '100%' : 'auto',\n        },\n      ],\n\n      inner: [\n        classNames.inner,\n        {\n          display: 'flex',\n          flexWrap: 'wrap',\n          marginLeft: horizontalMargin,\n          marginRight: horizontalMargin,\n          marginTop: verticalMargin,\n          marginBottom: verticalMargin,\n          overflow: 'visible',\n          boxSizing: 'border-box',\n          padding: parsePadding(padding, theme),\n          // avoid unnecessary calc() calls if horizontal gap is 0\n          width: columnGap.value === 0 ? '100%' : `calc(100% + ${columnGap.value}${columnGap.unit})`,\n          maxWidth: '100vw',\n\n          selectors: {\n            '> *': {\n              margin: `${0.5 * rowGap.value}${rowGap.unit} ${0.5 * columnGap.value}${columnGap.unit}`,\n\n              ...childStyles,\n            },\n            ...commonSelectors,\n          },\n        },\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        horizontal && {\n          flexDirection: reversed ? 'row-reverse' : 'row',\n\n          // avoid unnecessary calc() calls if vertical gap is 0\n          height: rowGap.value === 0 ? '100%' : `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          selectors: {\n            '> *': {\n              maxWidth: columnGap.value === 0 ? '100%' : `calc(100% - ${columnGap.value}${columnGap.unit})`,\n            },\n          },\n        },\n        !horizontal && {\n          flexDirection: reversed ? 'column-reverse' : 'column',\n          height: `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          selectors: {\n            '> *': {\n              maxHeight: rowGap.value === 0 ? '100%' : `calc(100% - ${rowGap.value}${rowGap.unit})`,\n            },\n          },\n        },\n      ],\n    } as IStackStyles;\n  }\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: horizontal ? (reversed ? 'row-reverse' : 'row') : reversed ? 'column-reverse' : 'column',\n        flexWrap: 'nowrap',\n        width: 'auto',\n        height: verticalFill ? '100%' : 'auto',\n        maxWidth,\n        maxHeight,\n        padding: parsePadding(padding, theme),\n        boxSizing: 'border-box',\n\n        selectors: {\n          '> *': childStyles,\n\n          // apply gap margin to every direct child except the first direct child if the direction is not reversed,\n          // and the last direct one if it is\n          [reversed ? '> *:not(:last-child)' : '> *:not(:first-child)']: [\n            horizontal && {\n              marginLeft: `${columnGap.value}${columnGap.unit}`,\n            },\n            !horizontal && {\n              marginTop: `${rowGap.value}${rowGap.unit}`,\n            },\n          ],\n\n          ...commonSelectors,\n        },\n      },\n      grow && {\n        flexGrow: grow === true ? 1 : grow,\n      },\n      horizontalAlign && {\n        [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n      },\n      verticalAlign && {\n        [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n      },\n      className,\n    ],\n    // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n  } as IStackStyles;\n};\n"]},"metadata":{},"sourceType":"module"}