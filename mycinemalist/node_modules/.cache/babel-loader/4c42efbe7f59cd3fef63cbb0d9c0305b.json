{"ast":null,"code":"import { memoizeFunction } from '../../Utilities';\nimport { HighContrastSelector, getFocusStyle, hiddenContentStyle } from '../../Styling';\nvar noOutline = {\n  outline: 0\n};\n\nvar iconStyle = function (fontSize) {\n  return {\n    fontSize: fontSize,\n    margin: '0 4px',\n    height: '16px',\n    lineHeight: '16px',\n    textAlign: 'center',\n    flexShrink: 0\n  };\n};\n/**\n * Gets the base button styles. Note: because it is a base class to be used with the `mergeRules`\n * helper, it should have values for all class names in the interface. This let `mergeRules` optimize\n * mixing class names together.\n */\n\n\nexport var getStyles = memoizeFunction(function (theme) {\n  var _a, _b;\n\n  var semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      fonts = theme.fonts;\n  var border = semanticColors.buttonBorder;\n  var disabledBackground = semanticColors.disabledBackground;\n  var disabledText = semanticColors.disabledText;\n  var buttonHighContrastFocus = {\n    left: -2,\n    top: -2,\n    bottom: -2,\n    right: -2,\n    outlineColor: 'ButtonText'\n  };\n  return {\n    root: [getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: buttonHighContrastFocus,\n      borderColor: 'transparent'\n    }), theme.fonts.medium, {\n      boxSizing: 'border-box',\n      border: '1px solid ' + border,\n      userSelect: 'none',\n      display: 'inline-block',\n      textDecoration: 'none',\n      textAlign: 'center',\n      cursor: 'pointer',\n      padding: '0 16px',\n      borderRadius: effects.roundedCorner2,\n      selectors: {\n        // IE11 workaround for preventing shift of child elements of a button when active.\n        ':active > *': {\n          position: 'relative',\n          left: 0,\n          top: 0\n        }\n      }\n    }],\n    rootDisabled: [getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: buttonHighContrastFocus,\n      borderColor: 'transparent'\n    }), {\n      backgroundColor: disabledBackground,\n      borderColor: disabledBackground,\n      color: disabledText,\n      cursor: 'default',\n      pointerEvents: 'none',\n      selectors: {\n        ':hover': noOutline,\n        ':focus': noOutline\n      }\n    }],\n    iconDisabled: {\n      color: disabledText,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        color: 'GrayText'\n      }, _a)\n    },\n    menuIconDisabled: {\n      color: disabledText,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        color: 'GrayText'\n      }, _b)\n    },\n    flexContainer: {\n      display: 'flex',\n      height: '100%',\n      flexWrap: 'nowrap',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    description: {\n      display: 'block'\n    },\n    textContainer: {\n      flexGrow: 1,\n      display: 'block'\n    },\n    icon: iconStyle(fonts.mediumPlus.fontSize),\n    menuIcon: iconStyle(fonts.small.fontSize),\n    label: {\n      margin: '0 4px',\n      lineHeight: '100%',\n      display: 'block'\n    },\n    screenReaderText: hiddenContentStyle\n  };\n});","map":{"version":3,"mappings":"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","names":["memoizeFunction","HighContrastSelector","getFocusStyle","hiddenContentStyle","noOutline","outline","iconStyle","fontSize","margin","height","lineHeight","textAlign","flexShrink","getStyles","theme","effects","fonts","border","semanticColors","buttonBorder","disabledBackground","disabledText","buttonHighContrastFocus","left","top","bottom","right","outlineColor","root","inset","highContrastStyle","borderColor","medium","boxSizing","userSelect","display","textDecoration","cursor","padding","borderRadius","roundedCorner2","selectors","position","rootDisabled","backgroundColor","color","pointerEvents","iconDisabled","_a","menuIconDisabled","_b","flexContainer","flexWrap","justifyContent","alignItems","description","textContainer","flexGrow","icon","mediumPlus","menuIcon","small","label","screenReaderText"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Button\\BaseButton.styles.ts"],"sourcesContent":["import { IButtonStyles } from './Button.types';\nimport { memoizeFunction } from '../../Utilities';\nimport { HighContrastSelector, ITheme, IRawStyle, getFocusStyle, hiddenContentStyle } from '../../Styling';\n\nconst noOutline: IRawStyle = {\n  outline: 0,\n};\n\nconst iconStyle = (fontSize?: string | number): IRawStyle => {\n  return {\n    fontSize: fontSize,\n    margin: '0 4px',\n    height: '16px',\n    lineHeight: '16px',\n    textAlign: 'center',\n    flexShrink: 0,\n  };\n};\n\n/**\n * Gets the base button styles. Note: because it is a base class to be used with the `mergeRules`\n * helper, it should have values for all class names in the interface. This let `mergeRules` optimize\n * mixing class names together.\n */\nexport const getStyles = memoizeFunction(\n  (theme: ITheme): IButtonStyles => {\n    const { semanticColors, effects, fonts } = theme;\n\n    const border = semanticColors.buttonBorder;\n    const disabledBackground = semanticColors.disabledBackground;\n    const disabledText = semanticColors.disabledText;\n    const buttonHighContrastFocus = {\n      left: -2,\n      top: -2,\n      bottom: -2,\n      right: -2,\n      outlineColor: 'ButtonText',\n    };\n\n    return {\n      root: [\n        getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: 'transparent' }),\n        theme.fonts.medium,\n        {\n          boxSizing: 'border-box',\n          border: '1px solid ' + border,\n          userSelect: 'none',\n          display: 'inline-block',\n          textDecoration: 'none',\n          textAlign: 'center',\n          cursor: 'pointer',\n          padding: '0 16px',\n          borderRadius: effects.roundedCorner2,\n\n          selectors: {\n            // IE11 workaround for preventing shift of child elements of a button when active.\n            ':active > *': {\n              position: 'relative',\n              left: 0,\n              top: 0,\n            },\n          },\n        },\n      ],\n\n      rootDisabled: [\n        getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: 'transparent' }),\n        {\n          backgroundColor: disabledBackground,\n          borderColor: disabledBackground,\n          color: disabledText,\n          cursor: 'default',\n          pointerEvents: 'none',\n          selectors: {\n            ':hover': noOutline,\n            ':focus': noOutline,\n          },\n        },\n      ],\n\n      iconDisabled: {\n        color: disabledText,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n          },\n        },\n      },\n\n      menuIconDisabled: {\n        color: disabledText,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n          },\n        },\n      },\n\n      flexContainer: {\n        display: 'flex',\n        height: '100%',\n        flexWrap: 'nowrap',\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n      description: {\n        display: 'block',\n      },\n\n      textContainer: {\n        flexGrow: 1,\n        display: 'block',\n      },\n\n      icon: iconStyle(fonts.mediumPlus.fontSize),\n\n      menuIcon: iconStyle(fonts.small.fontSize),\n\n      label: {\n        margin: '0 4px',\n        lineHeight: '100%',\n        display: 'block',\n      },\n\n      screenReaderText: hiddenContentStyle,\n    };\n  },\n);\n"]},"metadata":{},"sourceType":"module"}