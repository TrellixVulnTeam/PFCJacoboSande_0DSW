{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport { Async, DelayedRender, classNamesFunction, getId, getNativeProps, getWindow, initializeComponentRef, inputProperties, isControlled, isIE11, textAreaProperties, warn, warnControlledUsage, warnMutuallyExclusive } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_STATE_VALUE = '';\nvar COMPONENT_NAME = 'TextField';\nvar REVEAL_ICON_NAME = 'RedEye';\nvar HIDE_ICON_NAME = 'Hide';\n\nvar TextFieldBase =\n/** @class */\nfunction (_super) {\n  __extends(TextFieldBase, _super);\n\n  function TextFieldBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._textElement = React.createRef();\n\n    _this._onFocus = function (ev) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(ev);\n      }\n\n      _this.setState({\n        isFocused: true\n      }, function () {\n        if (_this.props.validateOnFocusIn) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n\n    _this._onBlur = function (ev) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n\n      _this.setState({\n        isFocused: false\n      }, function () {\n        if (_this.props.validateOnFocusOut) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n          required = props.required; // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n\n      var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : undefined;\n\n      if (label) {\n        return React.createElement(Label, {\n          required: required,\n          htmlFor: _this._id,\n          styles: labelStyles,\n          disabled: props.disabled,\n          id: _this._labelId\n        }, props.label);\n      }\n\n      return null;\n    };\n\n    _this._onRenderDescription = function (props) {\n      if (props.description) {\n        return React.createElement(\"span\", {\n          className: _this._classNames.description\n        }, props.description);\n      }\n\n      return null;\n    };\n\n    _this._onRevealButtonClick = function (event) {\n      _this.setState(function (prevState) {\n        return {\n          isRevealingPassword: !prevState.isRevealingPassword\n        };\n      });\n    };\n\n    _this._onInputChange = function (event) {\n      // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n      // which have *probably* been fixed now:\n      // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n      // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n      // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n      // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n      var element = event.target;\n      var value = element.value; // Ignore this event if the value is undefined (in case one of the IE bugs comes back)\n\n      if (value === undefined || value === _this._lastChangeValue) {\n        return;\n      }\n\n      _this._lastChangeValue = value; // This is so developers can access the event properties in asynchronous callbacks\n      // https://reactjs.org/docs/events.html#event-pooling\n\n      event.persist();\n      var isSameValue;\n\n      _this.setState(function (prevState, props) {\n        var prevValue = _getValue(props, prevState) || '';\n        isSameValue = value === prevValue; // Avoid doing unnecessary work when the value has not changed.\n\n        if (isSameValue) {\n          return null;\n        } // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n\n\n        return _this._isControlled ? null : {\n          uncontrolledValue: value\n        };\n      }, function () {\n        // If the value actually changed, call onChange (for either controlled or uncontrolled)\n        var onChange = _this.props.onChange;\n\n        if (!isSameValue && onChange) {\n          onChange(event, value);\n        }\n      });\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage'\n      });\n    }\n\n    _this._fallbackId = getId(COMPONENT_NAME);\n    _this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    _this._labelId = getId(COMPONENT_NAME + 'Label');\n\n    _this._warnControlledUsage();\n\n    var _a = props.defaultValue,\n        defaultValue = _a === void 0 ? DEFAULT_STATE_VALUE : _a;\n\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n\n    _this.state = {\n      uncontrolledValue: _this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: ''\n    };\n    _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);\n    _this._lastValidation = 0;\n    return _this;\n  }\n\n  Object.defineProperty(TextFieldBase.prototype, \"value\", {\n    /**\n     * Gets the current value of the text field.\n     */\n    get: function () {\n      return _getValue(this.props, this.state);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TextFieldBase.prototype.componentDidMount = function () {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  };\n\n  TextFieldBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n\n  TextFieldBase.prototype.getSnapshotBeforeUpdate = function (prevProps, prevState) {\n    return {\n      selection: [this.selectionStart, this.selectionEnd]\n    };\n  };\n\n  TextFieldBase.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {\n    var props = this.props;\n    var _a = (snapshot || {}).selection,\n        selection = _a === void 0 ? [null, null] : _a;\n    var start = selection[0],\n        end = selection[1];\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    var prevValue = _getValue(prevProps, prevState);\n\n    var value = this.value;\n\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps); // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n\n\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({\n          errorMessage: ''\n        });\n      } // Adjust height if needed based on new value\n\n\n      this._adjustInputHeight(); // Reset the record of the last value seen by a change/input event\n\n\n      this._lastChangeValue = undefined; // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  };\n\n  TextFieldBase.prototype.render = function () {\n    var _a = this.props,\n        borderless = _a.borderless,\n        className = _a.className,\n        disabled = _a.disabled,\n        iconProps = _a.iconProps,\n        inputClassName = _a.inputClassName,\n        label = _a.label,\n        multiline = _a.multiline,\n        required = _a.required,\n        underlined = _a.underlined,\n        prefix = _a.prefix,\n        resizable = _a.resizable,\n        suffix = _a.suffix,\n        theme = _a.theme,\n        styles = _a.styles,\n        autoAdjustHeight = _a.autoAdjustHeight,\n        canRevealPassword = _a.canRevealPassword,\n        type = _a.type,\n        _b = _a.onRenderPrefix,\n        onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b,\n        _c = _a.onRenderSuffix,\n        onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c,\n        _d = _a.onRenderLabel,\n        onRenderLabel = _d === void 0 ? this._onRenderLabel : _d,\n        _e = _a.onRenderDescription,\n        onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;\n    var _f = this.state,\n        isFocused = _f.isFocused,\n        isRevealingPassword = _f.isRevealingPassword;\n    var errorMessage = this._errorMessage;\n\n    var hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    var classNames = this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      focused: isFocused,\n      required: required,\n      multiline: multiline,\n      hasLabel: !!label,\n      hasErrorMessage: !!errorMessage,\n      borderless: borderless,\n      resizable: resizable,\n      hasIcon: !!iconProps,\n      underlined: underlined,\n      inputClassName: inputClassName,\n      autoAdjustHeight: autoAdjustHeight,\n      hasRevealButton: hasRevealButton\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, React.createElement(\"div\", {\n      className: classNames.wrapper\n    }, onRenderLabel(this.props, this._onRenderLabel), React.createElement(\"div\", {\n      className: classNames.fieldGroup\n    }, (prefix !== undefined || this.props.onRenderPrefix) && React.createElement(\"div\", {\n      className: classNames.prefix\n    }, onRenderPrefix(this.props, this._onRenderPrefix)), multiline ? this._renderTextArea() : this._renderInput(), iconProps && React.createElement(Icon, __assign({\n      className: classNames.icon\n    }, iconProps)), hasRevealButton && // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n    React.createElement(\"button\", {\n      className: classNames.revealButton,\n      onClick: this._onRevealButtonClick,\n      type: \"button\"\n    }, React.createElement(\"span\", {\n      className: classNames.revealSpan\n    }, React.createElement(Icon, {\n      className: classNames.revealIcon,\n      iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME\n    }))), (suffix !== undefined || this.props.onRenderSuffix) && React.createElement(\"div\", {\n      className: classNames.suffix\n    }, onRenderSuffix(this.props, this._onRenderSuffix)))), this._isDescriptionAvailable && React.createElement(\"span\", {\n      id: this._descriptionId\n    }, onRenderDescription(this.props, this._onRenderDescription), errorMessage && React.createElement(\"div\", {\n      role: \"alert\"\n    }, React.createElement(DelayedRender, null, React.createElement(\"p\", {\n      className: classNames.errorMessage\n    }, React.createElement(\"span\", {\n      \"data-automation-id\": \"error-message\"\n    }, errorMessage))))));\n  };\n  /**\n   * Sets focus on the text field\n   */\n\n\n  TextFieldBase.prototype.focus = function () {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  };\n  /**\n   * Blurs the text field.\n   */\n\n\n  TextFieldBase.prototype.blur = function () {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  };\n  /**\n   * Selects the text field\n   */\n\n\n  TextFieldBase.prototype.select = function () {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  };\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n\n\n  TextFieldBase.prototype.setSelectionStart = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  };\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n\n\n  TextFieldBase.prototype.setSelectionEnd = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"selectionStart\", {\n    /**\n     * Gets the selection start of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionStart : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"selectionEnd\", {\n    /**\n     * Gets the selection end of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n\n  TextFieldBase.prototype.setSelectionRange = function (start, end) {\n    if (this._textElement.current) {\n      this._textElement.current.setSelectionRange(start, end);\n    }\n  };\n\n  TextFieldBase.prototype._warnControlledUsage = function (prevProps) {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly'\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\"Warning: 'value' prop on '\" + COMPONENT_NAME + \"' should not be null. Consider using an \" + 'empty string to clear the component or undefined to indicate an uncontrolled component.');\n    }\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"_id\", {\n    /** Returns `props.id` if available, or a fallback if not. */\n    get: function () {\n      return this.props.id || this._fallbackId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"_isControlled\", {\n    get: function () {\n      return isControlled(this.props, 'value');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TextFieldBase.prototype._onRenderPrefix = function (props) {\n    var prefix = props.prefix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, prefix);\n  };\n\n  TextFieldBase.prototype._onRenderSuffix = function (props) {\n    var suffix = props.suffix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, suffix);\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"_errorMessage\", {\n    /**\n     * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n     *\n     * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n     * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n     */\n    get: function () {\n      var _a = this.props.errorMessage,\n          errorMessage = _a === void 0 ? this.state.errorMessage : _a;\n      return errorMessage || '';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"_isDescriptionAvailable\", {\n    /**\n     * If a custom description render function is supplied then treat description as always available.\n     * Otherwise defer to the presence of description or error message text.\n     */\n    get: function () {\n      var props = this.props;\n      return !!(props.onRenderDescription || props.description || this._errorMessage);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TextFieldBase.prototype._renderTextArea = function () {\n    var textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\n    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return React.createElement(\"textarea\", __assign({\n      id: this._id\n    }, textAreaProps, {\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": !!this._errorMessage,\n      \"aria-label\": this.props.ariaLabel,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n\n  TextFieldBase.prototype._renderInput = function () {\n    var _a;\n\n    var inputProps = getNativeProps(this.props, inputProperties, ['defaultValue', 'type']);\n    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    var type = this.state.isRevealingPassword ? 'text' : (_a = this.props.type, _a !== null && _a !== void 0 ? _a : 'text');\n    return React.createElement(\"input\", __assign({\n      type: type,\n      id: this._id,\n      \"aria-labelledby\": ariaLabelledBy\n    }, inputProps, {\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-label\": this.props.ariaLabel,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": !!this._errorMessage,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n\n  TextFieldBase.prototype._validate = function (value) {\n    var _this = this; // In case _validate is called again while validation promise is executing\n\n\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    var onGetErrorMessage = this.props.onGetErrorMessage;\n    var result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({\n          errorMessage: result\n        });\n\n        this._notifyAfterValidate(value, result);\n      } else {\n        var currentValidation_1 = ++this._lastValidation;\n        result.then(function (errorMessage) {\n          if (currentValidation_1 === _this._lastValidation) {\n            _this.setState({\n              errorMessage: errorMessage\n            });\n          }\n\n          _this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  };\n\n  TextFieldBase.prototype._notifyAfterValidate = function (value, errorMessage) {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  };\n\n  TextFieldBase.prototype._adjustInputHeight = function () {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      var textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  };\n\n  TextFieldBase.defaultProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n    canRevealPassword: false\n  };\n  return TextFieldBase;\n}(React.Component);\n\nexport { TextFieldBase };\n/** Get the value from the given state and props (converting from number to string if needed) */\n\nfunction _getValue(props, state) {\n  var _a = props.value,\n      value = _a === void 0 ? state.uncontrolledValue : _a;\n\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n\n  return value;\n}\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\n\n\nfunction _shouldValidateAllChanges(props) {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n} // Only calculate this once across all TextFields, since will stay the same\n\n\nvar __browserNeedsRevealButton;\n\nfunction _browserNeedsRevealButton() {\n  var _a;\n\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    var win = getWindow();\n\n    if ((_a = win) === null || _a === void 0 ? void 0 : _a.navigator) {\n      // Edge, Chromium Edge\n      var isEdge = /Edg/.test(win.navigator.userAgent || '');\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n\n  return __browserNeedsRevealButton;\n}","map":{"version":3,"mappings":"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","names":["React","Label","Icon","Async","DelayedRender","classNamesFunction","getId","getNativeProps","getWindow","initializeComponentRef","inputProperties","isControlled","isIE11","textAreaProperties","warn","warnControlledUsage","warnMutuallyExclusive","getClassNames","DEFAULT_STATE_VALUE","COMPONENT_NAME","REVEAL_ICON_NAME","HIDE_ICON_NAME","__extends","props","_super","_this","createRef","ev","onFocus","setState","isFocused","validateOnFocusIn","_validate","value","onBlur","validateOnFocusOut","required","labelStyles","_classNames","subComponentStyles","label","undefined","htmlFor","_id","styles","disabled","id","_labelId","description","className","event","isRevealingPassword","prevState","element","target","_lastChangeValue","persist","isSameValue","prevValue","_getValue","_isControlled","uncontrolledValue","onChange","_async","process","env","NODE_ENV","errorMessage","_fallbackId","_descriptionId","_warnControlledUsage","defaultValue","String","state","_delayedValidate","debounce","deferredValidationTime","_lastValidation","Object","TextFieldBase","_adjustInputHeight","validateOnLoad","dispose","prevProps","selection","selectionStart","selectionEnd","snapshot","end","multiline","focus","start","setSelectionRange","_shouldValidateAllChanges","borderless","iconProps","inputClassName","underlined","prefix","resizable","suffix","theme","autoAdjustHeight","canRevealPassword","type","_b","onRenderPrefix","_c","onRenderSuffix","_d","onRenderLabel","_e","onRenderDescription","_errorMessage","hasRevealButton","_browserNeedsRevealButton","classNames","focused","hasLabel","hasErrorMessage","hasIcon","root","wrapper","_onRenderLabel","fieldGroup","_onRenderPrefix","_renderTextArea","_renderInput","__assign","icon","revealButton","onClick","_onRevealButtonClick","revealSpan","revealIcon","iconName","_onRenderSuffix","_isDescriptionAvailable","_onRenderDescription","role","_textElement","current","blur","select","componentId","componentName","oldProps","valueProp","defaultValueProp","onChangeProp","readOnlyProp","_hasWarnedNullValue","style","paddingBottom","textAreaProps","ariaLabelledBy","ref","onInput","_onInputChange","field","ariaLabel","readOnly","_onFocus","_onBlur","inputProps","_a","_latestValidateValue","onGetErrorMessage","result","_notifyAfterValidate","currentValidation_1","then","onNotifyValidationResult","textField","height","scrollHeight","Component","__browserNeedsRevealButton","win","navigator","isEdge","test","userAgent"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\TextField\\TextField.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { Label, ILabelStyleProps, ILabelStyles } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  DelayedRender,\n  IStyleFunctionOrObject,\n  classNamesFunction,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n    canRevealPassword: false,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // Reset the record of the last value seen by a change/input event\n      this._lastChangeValue = undefined;\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: !!errorMessage,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      <div className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix}>{onRenderPrefix(this.props, this._onRenderPrefix)}</div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button className={classNames.revealButton} onClick={this._onRevealButtonClick} type=\"button\">\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix}>{onRenderSuffix(this.props, this._onRenderSuffix)}</div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>\n                  <p className={classNames.errorMessage}>\n                    <span data-automation-id=\"error-message\">{errorMessage}</span>\n                  </p>\n                </DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): React.ReactElement<React.HTMLAttributes<HTMLInputElement>> {\n    const inputProps = getNativeProps<React.HTMLAttributes<HTMLInputElement>>(this.props, inputProperties, [\n      'defaultValue',\n      'type',\n    ]);\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    const type = this.state.isRevealingPassword ? 'text' : this.props.type ?? 'text';\n    return (\n      <input\n        type={type}\n        id={this._id}\n        aria-labelledby={ariaLabelledBy}\n        {...inputProps}\n        ref={this._textElement as React.RefObject<HTMLInputElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-label={this.props.ariaLabel}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if the value is undefined (in case one of the IE bugs comes back)\n    if (value === undefined || value === this._lastChangeValue) {\n      return;\n    }\n    this._lastChangeValue = value;\n\n    // This is so developers can access the event properties in asynchronous callbacks\n    // https://reactjs.org/docs/events.html#event-pooling\n    event.persist();\n\n    let isSameValue: boolean;\n    this.setState(\n      (prevState: ITextFieldState, props: ITextFieldProps) => {\n        const prevValue = _getValue(props, prevState) || '';\n        isSameValue = value === prevValue;\n        // Avoid doing unnecessary work when the value has not changed.\n        if (isSameValue) {\n          return null;\n        }\n\n        // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n        return this._isControlled ? null : { uncontrolledValue: value };\n      },\n      () => {\n        // If the value actually changed, call onChange (for either controlled or uncontrolled)\n        const { onChange } = this.props;\n        if (!isSameValue && onChange) {\n          onChange(event, value);\n        }\n      },\n    );\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n"]},"metadata":{},"sourceType":"module"}