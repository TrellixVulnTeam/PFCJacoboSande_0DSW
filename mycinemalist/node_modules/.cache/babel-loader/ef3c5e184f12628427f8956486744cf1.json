{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { anchorProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\n\nvar ContextualMenuAnchor =\n/** @class */\nfunction (_super) {\n  __extends(ContextualMenuAnchor, _super);\n\n  function ContextualMenuAnchor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._anchor = React.createRef();\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n\n    _this._getSubmenuTarget = function () {\n      return _this._anchor.current ? _this._anchor.current : undefined;\n    };\n\n    _this._onItemClick = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemClick = _a.onItemClick;\n\n      if (onItemClick) {\n        onItemClick(item, ev);\n      }\n    };\n\n    _this._renderAriaDescription = function (ariaDescription, className) {\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n      return ariaDescription ? React.createElement(\"span\", {\n        id: _this._ariaDescriptionId,\n        className: className\n      }, ariaDescription) : null;\n    };\n\n    return _this;\n  }\n\n  ContextualMenuAnchor.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        item = _a.item,\n        classNames = _a.classNames,\n        index = _a.index,\n        focusableElementIndex = _a.focusableElementIndex,\n        totalItemCount = _a.totalItemCount,\n        hasCheckmarks = _a.hasCheckmarks,\n        hasIcons = _a.hasIcons,\n        _b = _a.contextualMenuItemAs,\n        ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n        expandedMenuItemKey = _a.expandedMenuItemKey,\n        onItemClick = _a.onItemClick,\n        openSubMenu = _a.openSubMenu,\n        dismissSubMenu = _a.dismissSubMenu,\n        dismissMenu = _a.dismissMenu;\n    var anchorRel = item.rel;\n\n    if (item.target && item.target.toLowerCase() === '_blank') {\n      anchorRel = anchorRel ? anchorRel : 'nofollow noopener noreferrer'; // Safe default to prevent tabjacking\n    }\n\n    var subMenuId = this._getSubMenuId(item);\n\n    var itemHasSubmenu = hasSubmenu(item);\n    var nativeProps = getNativeProps(item, anchorProperties);\n    var disabled = isItemDisabled(item);\n    var itemProps = item.itemProps,\n        ariaDescription = item.ariaDescription;\n    var keytipProps = item.keytipProps;\n\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    } // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n\n\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    return React.createElement(\"div\", null, React.createElement(KeytipData, {\n      keytipProps: item.keytipProps,\n      ariaDescribedBy: nativeProps['aria-describedby'],\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return React.createElement(\"a\", __assign({}, nativeProps, keytipAttributes, {\n        ref: _this._anchor,\n        href: item.href,\n        target: item.target,\n        rel: anchorRel,\n        className: classNames.root,\n        role: \"menuitem\",\n        \"aria-owns\": item.key === expandedMenuItemKey ? subMenuId : undefined,\n        \"aria-haspopup\": itemHasSubmenu || undefined,\n        \"aria-expanded\": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n        \"aria-posinset\": focusableElementIndex + 1,\n        \"aria-setsize\": totalItemCount,\n        \"aria-disabled\": isItemDisabled(item),\n        \"aria-describedby\": mergeAriaAttributeValues(ariaDescription ? _this._ariaDescriptionId : undefined, keytipAttributes ? keytipAttributes['aria-describedby'] : undefined),\n        // eslint-disable-next-line deprecation/deprecation\n        style: item.style,\n        onClick: _this._onItemClick,\n        onMouseEnter: _this._onItemMouseEnter,\n        onMouseLeave: _this._onItemMouseLeave,\n        onMouseMove: _this._onItemMouseMove,\n        onKeyDown: itemHasSubmenu ? _this._onItemKeyDown : undefined\n      }), React.createElement(ChildrenRenderer, __assign({\n        componentRef: item.componentRef,\n        item: item,\n        classNames: classNames,\n        index: index,\n        onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,\n        hasIcons: hasIcons,\n        openSubMenu: openSubMenu,\n        dismissSubMenu: dismissSubMenu,\n        dismissMenu: dismissMenu,\n        getSubmenuTarget: _this._getSubmenuTarget\n      }, itemProps)), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));\n    }));\n  };\n\n  return ContextualMenuAnchor;\n}(ContextualMenuItemWrapper);\n\nexport { ContextualMenuAnchor };","map":{"version":3,"mappings":"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","names":["React","anchorProperties","getNativeProps","memoizeFunction","getId","mergeAriaAttributeValues","ContextualMenuItemWrapper","KeytipData","isItemDisabled","hasSubmenu","ContextualMenuItem","__extends","_this","createRef","keytipProps","hasMenu","_anchor","current","undefined","ev","item","onItemClick","ariaDescription","className","id","_ariaDescriptionId","ContextualMenuAnchor","classNames","index","focusableElementIndex","totalItemCount","hasCheckmarks","hasIcons","_b","ChildrenRenderer","expandedMenuItemKey","openSubMenu","dismissSubMenu","dismissMenu","anchorRel","rel","target","toLowerCase","subMenuId","_getSubMenuId","itemHasSubmenu","nativeProps","disabled","_getMemoizedMenuButtonKeytipProps","ariaDescribedBy","keytipAttributes","ref","href","root","role","key","style","onClick","_onItemClick","onMouseEnter","_onItemMouseEnter","onMouseLeave","_onItemMouseLeave","onMouseMove","_onItemMouseMove","onKeyDown","_onItemKeyDown","__assign","componentRef","onCheckmarkClick","getSubmenuTarget","_getSubmenuTarget","itemProps","_renderAriaDescription","screenReaderText"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\ContextualMenu\\src\\components\\ContextualMenu\\ContextualMenuItemWrapper\\ContextualMenuAnchor.tsx"],"sourcesContent":["import * as React from 'react';\nimport { anchorProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { IKeytipProps } from '../../Keytip/Keytip.types';\n\nexport class ContextualMenuAnchor extends ContextualMenuItemWrapper {\n  private _anchor = React.createRef<HTMLAnchorElement>();\n  private _ariaDescriptionId: string;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  public render() {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      expandedMenuItemKey,\n      onItemClick,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    let anchorRel = item.rel;\n    if (item.target && item.target.toLowerCase() === '_blank') {\n      anchorRel = anchorRel ? anchorRel : 'nofollow noopener noreferrer'; // Safe default to prevent tabjacking\n    }\n\n    const subMenuId = this._getSubMenuId(item);\n    const itemHasSubmenu = hasSubmenu(item);\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLAnchorElement>>(item, anchorProperties);\n    const disabled = isItemDisabled(item);\n    const { itemProps, ariaDescription } = item;\n\n    let { keytipProps } = item;\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    return (\n      <div>\n        <KeytipData\n          keytipProps={item.keytipProps}\n          ariaDescribedBy={nativeProps['aria-describedby']}\n          disabled={disabled}\n        >\n          {(keytipAttributes: any): JSX.Element => (\n            <a\n              {...nativeProps}\n              {...keytipAttributes}\n              ref={this._anchor}\n              href={item.href}\n              target={item.target}\n              rel={anchorRel}\n              className={classNames.root}\n              role=\"menuitem\"\n              aria-owns={item.key === expandedMenuItemKey ? subMenuId : undefined}\n              aria-haspopup={itemHasSubmenu || undefined}\n              aria-expanded={itemHasSubmenu ? item.key === expandedMenuItemKey : undefined}\n              aria-posinset={focusableElementIndex + 1}\n              aria-setsize={totalItemCount}\n              aria-disabled={isItemDisabled(item)}\n              aria-describedby={mergeAriaAttributeValues(\n                ariaDescription ? this._ariaDescriptionId : undefined,\n                keytipAttributes ? keytipAttributes['aria-describedby'] : undefined,\n              )}\n              // eslint-disable-next-line deprecation/deprecation\n              style={item.style}\n              onClick={this._onItemClick}\n              onMouseEnter={this._onItemMouseEnter}\n              onMouseLeave={this._onItemMouseLeave}\n              onMouseMove={this._onItemMouseMove}\n              onKeyDown={itemHasSubmenu ? this._onItemKeyDown : undefined}\n            >\n              <ChildrenRenderer\n                componentRef={item.componentRef}\n                item={item}\n                classNames={classNames}\n                index={index}\n                onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n                hasIcons={hasIcons}\n                openSubMenu={openSubMenu}\n                dismissSubMenu={dismissSubMenu}\n                dismissMenu={dismissMenu}\n                getSubmenuTarget={this._getSubmenuTarget}\n                {...itemProps}\n              />\n              {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n            </a>\n          )}\n        </KeytipData>\n      </div>\n    );\n  }\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._anchor.current ? this._anchor.current : undefined;\n  };\n\n  protected _onItemClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemClick } = this.props;\n    if (onItemClick) {\n      onItemClick(item, ev);\n    }\n  };\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}