{"ast":null,"code":"import { getFocusStyle, hiddenContentStyle, HighContrastSelector, getGlobalClassNames } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-RatingStar-root',\n  rootIsSmall: 'ms-RatingStar-root--small',\n  rootIsLarge: 'ms-RatingStar-root--large',\n  ratingStar: 'ms-RatingStar-container',\n  ratingStarBack: 'ms-RatingStar-back',\n  ratingStarFront: 'ms-RatingStar-front',\n  ratingButton: 'ms-Rating-button',\n  ratingStarIsSmall: 'ms-Rating--small',\n  ratingStartIsLarge: 'ms-Rating--large',\n  labelText: 'ms-Rating-labelText',\n  ratingFocusZone: 'ms-Rating-focuszone'\n};\n\nfunction _getColorWithHighContrast(color, highContrastColor) {\n  var _a;\n\n  return {\n    color: color,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: highContrastColor\n    }, _a)\n  };\n}\n\nexport function getStyles(props) {\n  var disabled = props.disabled,\n      readOnly = props.readOnly,\n      theme = props.theme;\n  var semanticColors = theme.semanticColors,\n      palette = theme.palette;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var ratingSmallIconSize = 16;\n  var ratingLargeIconSize = 20;\n  var ratingVerticalPadding = 8;\n  var ratingHorizontalPadding = 2;\n  var ratingStarUncheckedColor = palette.neutralSecondary;\n  var ratingStarUncheckedHoverColor = palette.themePrimary;\n  var ratingStarUncheckedHoverSelectedColor = palette.themeDark;\n  var ratingStarCheckedColor = palette.neutralPrimary;\n  var ratingStarDisabledColor = semanticColors.disabledBodySubtext;\n  return {\n    root: [classNames.root, theme.fonts.medium, !disabled && !readOnly && {\n      selectors: {\n        // This is part 1 of highlighting all stars up to the one the user is hovering over\n        '&:hover': {\n          selectors: {\n            '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight')\n          }\n        }\n      }\n    }],\n    rootIsSmall: [classNames.rootIsSmall, {\n      height: ratingSmallIconSize + ratingVerticalPadding * 2 + 'px'\n    }],\n    rootIsLarge: [classNames.rootIsLarge, {\n      height: ratingLargeIconSize + ratingVerticalPadding * 2 + 'px'\n    }],\n    ratingStar: [classNames.ratingStar, {\n      display: 'inline-block',\n      position: 'relative',\n      height: 'inherit'\n    }],\n    ratingStarBack: [classNames.ratingStarBack, {\n      // TODO: Use a proper semantic color for this\n      color: ratingStarUncheckedColor,\n      width: '100%'\n    }, disabled && _getColorWithHighContrast(ratingStarDisabledColor, 'GrayText')],\n    ratingStarFront: [classNames.ratingStarFront, {\n      position: 'absolute',\n      height: '100 %',\n      left: '0',\n      top: '0',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      overflow: 'hidden'\n    }, _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight')],\n    ratingButton: [getFocusStyle(theme), classNames.ratingButton, {\n      backgroundColor: 'transparent',\n      padding: ratingVerticalPadding + \"px \" + ratingHorizontalPadding + \"px\",\n      boxSizing: 'content-box',\n      margin: '0px',\n      border: 'none',\n      cursor: 'pointer',\n      selectors: {\n        '&:disabled': {\n          cursor: 'default'\n        },\n        '&[disabled]': {\n          cursor: 'default'\n        }\n      }\n    }, !disabled && !readOnly && {\n      selectors: {\n        // This is part 2 of highlighting all stars up to the one the user is hovering over\n        '&:hover ~ .ms-Rating-button': {\n          selectors: {\n            '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText'),\n            '.ms-RatingStar-front': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText')\n          }\n        },\n        '&:hover': {\n          selectors: {\n            '.ms-RatingStar-back': {\n              color: ratingStarUncheckedHoverColor\n            },\n            '.ms-RatingStar-front': {\n              color: ratingStarUncheckedHoverSelectedColor\n            }\n          }\n        }\n      }\n    }, disabled && {\n      cursor: 'default'\n    }],\n    ratingStarIsSmall: [classNames.ratingStarIsSmall, {\n      fontSize: ratingSmallIconSize + 'px',\n      lineHeight: ratingSmallIconSize + 'px',\n      height: ratingSmallIconSize + 'px'\n    }],\n    ratingStarIsLarge: [classNames.ratingStartIsLarge, {\n      fontSize: ratingLargeIconSize + 'px',\n      lineHeight: ratingLargeIconSize + 'px',\n      height: ratingLargeIconSize + 'px'\n    }],\n    labelText: [classNames.labelText, hiddenContentStyle],\n    ratingFocusZone: [getFocusStyle(theme), classNames.ratingFocusZone, {\n      display: 'inline-block'\n    }]\n  };\n}","map":{"version":3,"mappings":"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","names":["getFocusStyle","hiddenContentStyle","HighContrastSelector","getGlobalClassNames","GlobalClassNames","root","rootIsSmall","rootIsLarge","ratingStar","ratingStarBack","ratingStarFront","ratingButton","ratingStarIsSmall","ratingStartIsLarge","labelText","ratingFocusZone","_getColorWithHighContrast","color","highContrastColor","selectors","_a","getStyles","props","readOnly","theme","palette","classNames","ratingSmallIconSize","ratingLargeIconSize","ratingVerticalPadding","ratingHorizontalPadding","ratingStarUncheckedColor","neutralSecondary","ratingStarUncheckedHoverColor","themePrimary","ratingStarUncheckedHoverSelectedColor","themeDark","ratingStarCheckedColor","neutralPrimary","ratingStarDisabledColor","semanticColors","disabledBodySubtext","fonts","medium","disabled","height","display","position","width","left","top","textAlign","verticalAlign","overflow","backgroundColor","padding","boxSizing","margin","border","cursor","fontSize","lineHeight","ratingStarIsLarge"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Rating\\Rating.styles.ts"],"sourcesContent":["import { getFocusStyle, hiddenContentStyle, HighContrastSelector, getGlobalClassNames } from '../../Styling';\nimport { IRatingStyleProps, IRatingStyles } from './Rating.types';\n\nconst GlobalClassNames = {\n  root: 'ms-RatingStar-root',\n  rootIsSmall: 'ms-RatingStar-root--small',\n  rootIsLarge: 'ms-RatingStar-root--large',\n  ratingStar: 'ms-RatingStar-container',\n  ratingStarBack: 'ms-RatingStar-back',\n  ratingStarFront: 'ms-RatingStar-front',\n  ratingButton: 'ms-Rating-button',\n  ratingStarIsSmall: 'ms-Rating--small',\n  ratingStartIsLarge: 'ms-Rating--large',\n  labelText: 'ms-Rating-labelText',\n  ratingFocusZone: 'ms-Rating-focuszone',\n};\n\nfunction _getColorWithHighContrast(color: string, highContrastColor: string) {\n  return {\n    color: color,\n    selectors: {\n      [HighContrastSelector]: {\n        color: highContrastColor,\n      },\n    },\n  };\n}\n\nexport function getStyles(props: IRatingStyleProps): IRatingStyles {\n  const { disabled, readOnly, theme } = props;\n\n  const { semanticColors, palette } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const ratingSmallIconSize = 16;\n  const ratingLargeIconSize = 20;\n  const ratingVerticalPadding = 8;\n  const ratingHorizontalPadding = 2;\n\n  const ratingStarUncheckedColor = palette.neutralSecondary;\n  const ratingStarUncheckedHoverColor = palette.themePrimary;\n  const ratingStarUncheckedHoverSelectedColor = palette.themeDark;\n  const ratingStarCheckedColor = palette.neutralPrimary;\n  const ratingStarDisabledColor = semanticColors.disabledBodySubtext;\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      !disabled &&\n        !readOnly && {\n          selectors: {\n            // This is part 1 of highlighting all stars up to the one the user is hovering over\n            '&:hover': {\n              selectors: {\n                '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight'),\n              },\n            },\n          },\n        },\n    ],\n    rootIsSmall: [\n      classNames.rootIsSmall,\n      {\n        height: ratingSmallIconSize + ratingVerticalPadding * 2 + 'px',\n      },\n    ],\n    rootIsLarge: [\n      classNames.rootIsLarge,\n      {\n        height: ratingLargeIconSize + ratingVerticalPadding * 2 + 'px',\n      },\n    ],\n    ratingStar: [\n      classNames.ratingStar,\n      {\n        display: 'inline-block',\n        position: 'relative',\n        height: 'inherit',\n      },\n    ],\n    ratingStarBack: [\n      classNames.ratingStarBack,\n      {\n        // TODO: Use a proper semantic color for this\n        color: ratingStarUncheckedColor,\n        width: '100%',\n      },\n      disabled && _getColorWithHighContrast(ratingStarDisabledColor, 'GrayText'),\n    ],\n    ratingStarFront: [\n      classNames.ratingStarFront,\n      {\n        position: 'absolute',\n        height: '100 %',\n        left: '0',\n        top: '0',\n        textAlign: 'center',\n        verticalAlign: 'middle',\n        overflow: 'hidden',\n      },\n      _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight'),\n    ],\n    ratingButton: [\n      getFocusStyle(theme),\n      classNames.ratingButton,\n      {\n        backgroundColor: 'transparent',\n        padding: `${ratingVerticalPadding}px ${ratingHorizontalPadding}px`,\n        boxSizing: 'content-box',\n        margin: '0px',\n        border: 'none',\n        cursor: 'pointer',\n        selectors: {\n          '&:disabled': {\n            cursor: 'default',\n          },\n          '&[disabled]': {\n            cursor: 'default',\n          },\n        },\n      },\n      !disabled &&\n        !readOnly && {\n          selectors: {\n            // This is part 2 of highlighting all stars up to the one the user is hovering over\n            '&:hover ~ .ms-Rating-button': {\n              selectors: {\n                '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText'),\n                '.ms-RatingStar-front': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText'),\n              },\n            },\n            '&:hover': {\n              selectors: {\n                '.ms-RatingStar-back': {\n                  color: ratingStarUncheckedHoverColor,\n                },\n                '.ms-RatingStar-front': {\n                  color: ratingStarUncheckedHoverSelectedColor,\n                },\n              },\n            },\n          },\n        },\n      disabled && {\n        cursor: 'default',\n      },\n    ],\n    ratingStarIsSmall: [\n      classNames.ratingStarIsSmall,\n      {\n        fontSize: ratingSmallIconSize + 'px',\n        lineHeight: ratingSmallIconSize + 'px',\n        height: ratingSmallIconSize + 'px',\n      },\n    ],\n    ratingStarIsLarge: [\n      classNames.ratingStartIsLarge,\n      {\n        fontSize: ratingLargeIconSize + 'px',\n        lineHeight: ratingLargeIconSize + 'px',\n        height: ratingLargeIconSize + 'px',\n      },\n    ],\n    labelText: [classNames.labelText, hiddenContentStyle],\n    ratingFocusZone: [\n      getFocusStyle(theme),\n      classNames.ratingFocusZone,\n      {\n        display: 'inline-block',\n      },\n    ],\n  };\n}\n"]},"metadata":{},"sourceType":"module"}