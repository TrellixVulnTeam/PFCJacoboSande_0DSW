{"ast":null,"code":"import { warn } from './warn';\n/**\n * Warns when two props which are mutually exclusive are both being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.\n */\n\nexport function warnMutuallyExclusive(componentName, props, exclusiveMap) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var propName in exclusiveMap) {\n      if (props && props[propName] !== undefined) {\n        var propInExclusiveMapValue = exclusiveMap[propName];\n\n        if (propInExclusiveMapValue && props[propInExclusiveMapValue] !== undefined) {\n          warn(componentName + \" property '\" + propName + \"' is mutually exclusive with '\" + exclusiveMap[propName] + \"'. \" + \"Use one or the other.\");\n        }\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAuBA,IAAvB,QAAmC,QAAnC;AACA;;;;;;;;;AAQA,OAAM,SAAUC,qBAAV,CAAmCC,aAAnC,EAA0DC,KAA1D,EAAoEC,YAApE,EAAiG;EACrG,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,KAAK,IAAMC,QAAX,IAAuBJ,YAAvB,EAAqC;MACnC,IAAID,KAAK,IAAIA,KAAK,CAACK,QAAD,CAAL,KAAoBC,SAAjC,EAA4C;QAC1C,IAAIC,uBAAuB,GAAGN,YAAY,CAACI,QAAD,CAA1C;;QACA,IAAIE,uBAAuB,IAAIP,KAAK,CAACO,uBAAD,CAAL,KAA8CD,SAA7E,EAAwF;UACtFT,IAAI,CACCE,aAAa,gBAAb,GAA2BM,QAA3B,GAAmC,gCAAnC,GAAoEJ,YAAY,CAACI,QAAD,CAAhF,GAA0F,KAA1F,GACD,uBAFA,CAAJ;QAID;MACF;IACF;EACF;AACF","names":["warn","warnMutuallyExclusive","componentName","props","exclusiveMap","process","env","NODE_ENV","propName","undefined","propInExclusiveMapValue"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\utilities\\lib\\src\\warn\\warnMutuallyExclusive.ts"],"sourcesContent":["import { ISettingsMap, warn } from './warn';\n/**\n * Warns when two props which are mutually exclusive are both being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.\n */\nexport function warnMutuallyExclusive<P>(componentName: string, props: P, exclusiveMap: ISettingsMap<P>): void {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const propName in exclusiveMap) {\n      if (props && props[propName] !== undefined) {\n        let propInExclusiveMapValue = exclusiveMap[propName];\n        if (propInExclusiveMapValue && props[propInExclusiveMapValue as keyof P] !== undefined) {\n          warn(\n            `${componentName} property '${propName}' is mutually exclusive with '${exclusiveMap[propName]}'. ` +\n              `Use one or the other.`,\n          );\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}