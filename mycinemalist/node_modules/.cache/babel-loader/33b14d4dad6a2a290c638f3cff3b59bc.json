{"ast":null,"code":"import { EventGroup, getDocument } from '../../Utilities';\nvar MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nvar MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nvar DragDropHelper =\n/** @class */\nfunction () {\n  function DragDropHelper(params) {\n    this._selection = params.selection;\n    this._dragEnterCounts = {};\n    this._activeTargets = {};\n    this._lastId = 0; // To make this class cheap to create, which allows simplifying some logic elsewhere,\n    // only initialize the event group and global event handlers as needed.\n\n    this._initialized = false;\n  }\n\n  DragDropHelper.prototype.dispose = function () {\n    if (this._events) {\n      this._events.dispose();\n    }\n  };\n\n  DragDropHelper.prototype.subscribe = function (root, events, dragDropOptions) {\n    var _this = this;\n\n    if (!this._initialized) {\n      this._events = new EventGroup(this);\n      var doc = getDocument(); // clear drag data when mouse up, use capture event to ensure it will be run\n\n      if (doc) {\n        this._events.on(doc.body, 'mouseup', this._onMouseUp.bind(this), true);\n\n        this._events.on(doc, 'mouseup', this._onDocumentMouseUp.bind(this), true);\n      }\n\n      this._initialized = true;\n    }\n\n    var _a = dragDropOptions.key,\n        key = _a === void 0 ? \"\" + ++this._lastId : _a;\n    var handlers = [];\n    var onDragStart;\n    var onDragLeave;\n    var onDragEnter;\n    var onDragEnd;\n    var onDrop;\n    var onDragOver;\n    var onMouseDown;\n    var isDraggable;\n    var isDroppable;\n    var activeTarget;\n\n    if (dragDropOptions && root) {\n      var eventMap = dragDropOptions.eventMap,\n          context = dragDropOptions.context,\n          updateDropState_1 = dragDropOptions.updateDropState;\n      var dragDropTarget = {\n        root: root,\n        options: dragDropOptions,\n        key: key\n      };\n      isDraggable = this._isDraggable(dragDropTarget);\n      isDroppable = this._isDroppable(dragDropTarget);\n\n      if (isDraggable || isDroppable) {\n        if (eventMap) {\n          for (var _i = 0, eventMap_1 = eventMap; _i < eventMap_1.length; _i++) {\n            var event_1 = eventMap_1[_i];\n            var handler = {\n              callback: event_1.callback.bind(null, context),\n              eventName: event_1.eventName\n            };\n            handlers.push(handler);\n\n            this._events.on(root, handler.eventName, handler.callback);\n          }\n        }\n      }\n\n      if (isDroppable) {\n        // If the target is droppable, wire up global event listeners to track drop-related events.\n        onDragLeave = function (event) {\n          if (!event.isHandled) {\n            event.isHandled = true;\n            _this._dragEnterCounts[key]--;\n\n            if (_this._dragEnterCounts[key] === 0) {\n              updateDropState_1(false\n              /* isDropping */\n              , event);\n            }\n          }\n        };\n\n        onDragEnter = function (event) {\n          event.preventDefault(); // needed for IE\n\n          if (!event.isHandled) {\n            event.isHandled = true;\n            _this._dragEnterCounts[key]++;\n\n            if (_this._dragEnterCounts[key] === 1) {\n              updateDropState_1(true\n              /* isDropping */\n              , event);\n            }\n          }\n        };\n\n        onDragEnd = function (event) {\n          _this._dragEnterCounts[key] = 0;\n          updateDropState_1(false\n          /* isDropping */\n          , event);\n        };\n\n        onDrop = function (event) {\n          _this._dragEnterCounts[key] = 0;\n          updateDropState_1(false\n          /* isDropping */\n          , event);\n\n          if (dragDropOptions.onDrop) {\n            dragDropOptions.onDrop(dragDropOptions.context.data, event);\n          }\n        };\n\n        onDragOver = function (event) {\n          event.preventDefault();\n\n          if (dragDropOptions.onDragOver) {\n            dragDropOptions.onDragOver(dragDropOptions.context.data, event);\n          }\n        };\n\n        this._dragEnterCounts[key] = 0; // dragenter and dragleave will be fired when hover to the child element\n        // but we only want to change state when enter or leave the current element\n        // use the count to ensure it.\n\n        events.on(root, 'dragenter', onDragEnter);\n        events.on(root, 'dragleave', onDragLeave);\n        events.on(root, 'dragend', onDragEnd);\n        events.on(root, 'drop', onDrop);\n        events.on(root, 'dragover', onDragOver);\n      }\n\n      if (isDraggable) {\n        // If the target is draggable, wire up local event listeners for mouse events.\n        onMouseDown = this._onMouseDown.bind(this, dragDropTarget);\n        onDragEnd = this._onDragEnd.bind(this, dragDropTarget); // We need to add in data so that on Firefox we show the ghost element when dragging\n\n        onDragStart = function (event) {\n          var options = dragDropOptions;\n\n          if (options && options.onDragStart) {\n            options.onDragStart(options.context.data, options.context.index, _this._selection.getSelection(), event);\n          }\n\n          _this._isDragging = true;\n\n          if (event.dataTransfer) {\n            event.dataTransfer.setData('id', root.id);\n          }\n        };\n\n        events.on(root, 'dragstart', onDragStart);\n        events.on(root, 'mousedown', onMouseDown);\n        events.on(root, 'dragend', onDragEnd);\n      }\n\n      activeTarget = {\n        target: dragDropTarget,\n        dispose: function () {\n          if (_this._activeTargets[key] === activeTarget) {\n            delete _this._activeTargets[key];\n          }\n\n          if (root) {\n            for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {\n              var handler = handlers_1[_i];\n\n              _this._events.off(root, handler.eventName, handler.callback);\n            }\n\n            if (isDroppable) {\n              events.off(root, 'dragenter', onDragEnter);\n              events.off(root, 'dragleave', onDragLeave);\n              events.off(root, 'dragend', onDragEnd);\n              events.off(root, 'dragover', onDragOver);\n              events.off(root, 'drop', onDrop);\n            }\n\n            if (isDraggable) {\n              events.off(root, 'dragstart', onDragStart);\n              events.off(root, 'mousedown', onMouseDown);\n              events.off(root, 'dragend', onDragEnd);\n            }\n          }\n        }\n      };\n      this._activeTargets[key] = activeTarget;\n    }\n\n    return {\n      key: key,\n      dispose: function () {\n        if (activeTarget) {\n          activeTarget.dispose();\n        }\n      }\n    };\n  };\n\n  DragDropHelper.prototype.unsubscribe = function (root, key) {\n    var activeTarget = this._activeTargets[key];\n\n    if (activeTarget) {\n      activeTarget.dispose();\n    }\n  };\n\n  DragDropHelper.prototype._onDragEnd = function (target, event) {\n    var options = target.options;\n\n    if (options.onDragEnd) {\n      options.onDragEnd(options.context.data, event);\n    }\n  };\n  /**\n   * clear drag data when mouse up on body\n   */\n\n\n  DragDropHelper.prototype._onMouseUp = function (event) {\n    this._isDragging = false;\n\n    if (this._dragData) {\n      for (var _i = 0, _a = Object.keys(this._activeTargets); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var activeTarget = this._activeTargets[key];\n\n        if (activeTarget.target.root) {\n          this._events.off(activeTarget.target.root, 'mousemove');\n\n          this._events.off(activeTarget.target.root, 'mouseleave');\n        }\n      }\n\n      if (this._dragData.dropTarget) {\n        // raise dragleave event to let dropTarget know it need to remove dropping style\n        EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n        EventGroup.raise(this._dragData.dropTarget.root, 'drop');\n      }\n    }\n\n    this._dragData = null;\n  };\n  /**\n   * clear drag data when mouse up outside of the document\n   */\n\n\n  DragDropHelper.prototype._onDocumentMouseUp = function (event) {\n    var doc = getDocument();\n\n    if (doc && event.target === doc.documentElement) {\n      this._onMouseUp(event);\n    }\n  };\n  /**\n   * when mouse move over a new drop target while dragging some items,\n   * fire dragleave on the old target and fire dragenter to the new target\n   * The target will handle style change on dragenter and dragleave events.\n   */\n\n\n  DragDropHelper.prototype._onMouseMove = function (target, event) {\n    var // use buttons property here since ev.button in some edge case is not updating well during the move.\n    // but firefox doesn't support it, so we set the default value when it is not defined.\n    _a = event.buttons,\n        // use buttons property here since ev.button in some edge case is not updating well during the move.\n    // but firefox doesn't support it, so we set the default value when it is not defined.\n    buttons = _a === void 0 ? MOUSEMOVE_PRIMARY_BUTTON : _a;\n\n    if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onMouseUp(event);\n\n      return;\n    }\n\n    var root = target.root,\n        key = target.key;\n\n    if (this._isDragging) {\n      if (this._isDroppable(target)) {\n        // we can have nested drop targets in the DOM, like a folder inside a group. In that case, when we drag into\n        // the inner target (folder), we first set dropTarget to the inner element. But the same event is bubbled to the\n        // outer target too, and we need to prevent the outer one from taking over.\n        // So, check if the last dropTarget is not a child of the current.\n        if (this._dragData) {\n          if (this._dragData.dropTarget && this._dragData.dropTarget.key !== key && !this._isChild(root, this._dragData.dropTarget.root)) {\n            if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {\n              EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n              EventGroup.raise(root, 'dragenter');\n              this._dragData.dropTarget = target;\n            }\n          }\n        }\n      }\n    }\n  };\n  /**\n   * when mouse leave a target while dragging some items, fire dragleave to the target\n   */\n\n\n  DragDropHelper.prototype._onMouseLeave = function (target, event) {\n    if (this._isDragging) {\n      if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {\n        EventGroup.raise(target.root, 'dragleave');\n        this._dragData.dropTarget = undefined;\n      }\n    }\n  };\n  /**\n   * when mouse down on a draggable item, we start to track dragdata.\n   */\n\n\n  DragDropHelper.prototype._onMouseDown = function (target, event) {\n    if (event.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    if (this._isDraggable(target)) {\n      this._dragData = {\n        clientX: event.clientX,\n        clientY: event.clientY,\n        eventTarget: event.target,\n        dragTarget: target\n      };\n\n      for (var _i = 0, _a = Object.keys(this._activeTargets); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var activeTarget = this._activeTargets[key];\n\n        if (activeTarget.target.root) {\n          this._events.on(activeTarget.target.root, 'mousemove', this._onMouseMove.bind(this, activeTarget.target));\n\n          this._events.on(activeTarget.target.root, 'mouseleave', this._onMouseLeave.bind(this, activeTarget.target));\n        }\n      }\n    } else {\n      this._dragData = null;\n    }\n  };\n  /**\n   * determine whether the child target is a descendant of the parent\n   */\n\n\n  DragDropHelper.prototype._isChild = function (parentElement, childElement) {\n    while (childElement && childElement.parentElement) {\n      if (childElement.parentElement === parentElement) {\n        return true;\n      }\n\n      childElement = childElement.parentElement;\n    }\n\n    return false;\n  };\n\n  DragDropHelper.prototype._isDraggable = function (target) {\n    var options = target.options;\n    return !!(options.canDrag && options.canDrag(options.context.data));\n  };\n\n  DragDropHelper.prototype._isDroppable = function (target) {\n    // TODO: take the drag item into consideration to prevent dragging an item into the same group\n    var options = target.options;\n    var dragContext = this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : undefined;\n    return !!(options.canDrop && options.canDrop(options.context, dragContext));\n  };\n\n  return DragDropHelper;\n}();\n\nexport { DragDropHelper };","map":{"version":3,"mappings":"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","names":["EventGroup","getDocument","MOUSEDOWN_PRIMARY_BUTTON","MOUSEMOVE_PRIMARY_BUTTON","params","_selection","selection","_dragEnterCounts","_activeTargets","_lastId","_initialized","DragDropHelper","_events","dispose","root","events","dragDropOptions","doc","on","body","_onMouseUp","bind","_onDocumentMouseUp","handlers","onDragStart","onDragLeave","onDragEnter","onDragEnd","onDrop","onDragOver","onMouseDown","isDraggable","isDroppable","activeTarget","context","updateDropState_1","dragDropTarget","options","key","_isDraggable","_isDroppable","eventMap","_i","event_1","handler","callback","eventName","push","event","isHandled","_this","preventDefault","data","_onMouseDown","_onDragEnd","index","getSelection","_isDragging","dataTransfer","setData","id","target","off","_dragData","keys","dropTarget","raise","documentElement","_a","buttons","_isChild","undefined","button","clientX","clientY","eventTarget","dragTarget","_onMouseMove","_onMouseLeave","parentElement","childElement","canDrag","dragContext","canDrop"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\utilities\\src\\utilities\\dragdrop\\DragDropHelper.tsx"],"sourcesContent":["import { EventGroup, getDocument } from '../../Utilities';\nimport { IDragDropHelper, IDragDropTarget, IDragDropOptions, IDragDropEvent, IDragDropContext } from './interfaces';\nimport { ISelection } from '../../utilities/selection/interfaces';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nexport interface IDragDropHelperParams {\n  selection: ISelection;\n  minimumPixelsForDrag?: number;\n}\n\nexport class DragDropHelper implements IDragDropHelper {\n  private _dragEnterCounts: { [key: string]: number };\n  private _isDragging: boolean;\n  private _dragData: {\n    eventTarget: EventTarget | null;\n    clientX: number;\n    clientY: number;\n    dataTransfer?: DataTransfer;\n    dropTarget?: IDragDropTarget;\n    dragTarget?: IDragDropTarget;\n  } | null;\n  private _selection: ISelection;\n  private _activeTargets: {\n    [key: string]: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n  };\n  private _events: EventGroup;\n  private _lastId: number;\n  private _initialized: boolean;\n\n  constructor(params: IDragDropHelperParams) {\n    this._selection = params.selection;\n    this._dragEnterCounts = {};\n    this._activeTargets = {};\n    this._lastId = 0;\n    // To make this class cheap to create, which allows simplifying some logic elsewhere,\n    // only initialize the event group and global event handlers as needed.\n    this._initialized = false;\n  }\n\n  public dispose(): void {\n    if (this._events) {\n      this._events.dispose();\n    }\n  }\n\n  public subscribe(\n    root: HTMLElement,\n    events: EventGroup,\n    dragDropOptions: IDragDropOptions,\n  ): {\n    key: string;\n    dispose(): void;\n  } {\n    if (!this._initialized) {\n      this._events = new EventGroup(this);\n\n      const doc = getDocument();\n\n      // clear drag data when mouse up, use capture event to ensure it will be run\n      if (doc) {\n        this._events.on(doc.body, 'mouseup', this._onMouseUp.bind(this), true);\n        this._events.on(doc, 'mouseup', this._onDocumentMouseUp.bind(this), true);\n      }\n\n      this._initialized = true;\n    }\n\n    const { key = `${++this._lastId}` } = dragDropOptions;\n\n    const handlers: {\n      callback: (context: IDragDropContext, event?: any) => void;\n      eventName: string;\n    }[] = [];\n\n    let onDragStart: (event: DragEvent) => void;\n    let onDragLeave: (event: DragEvent) => void;\n    let onDragEnter: (event: DragEvent) => void;\n    let onDragEnd: (event: DragEvent) => void;\n    let onDrop: (event: DragEvent) => void;\n    let onDragOver: (event: DragEvent) => void;\n    let onMouseDown: (event: MouseEvent) => void;\n\n    let isDraggable: boolean;\n    let isDroppable: boolean;\n\n    let activeTarget: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n\n    if (dragDropOptions && root) {\n      const { eventMap, context, updateDropState } = dragDropOptions;\n\n      const dragDropTarget: IDragDropTarget = {\n        root: root,\n        options: dragDropOptions,\n        key: key,\n      };\n\n      isDraggable = this._isDraggable(dragDropTarget);\n      isDroppable = this._isDroppable(dragDropTarget);\n\n      if (isDraggable || isDroppable) {\n        if (eventMap) {\n          for (const event of eventMap) {\n            const handler = {\n              callback: event.callback.bind(null, context),\n              eventName: event.eventName,\n            };\n\n            handlers.push(handler);\n\n            this._events.on(root, handler.eventName, handler.callback);\n          }\n        }\n      }\n\n      if (isDroppable) {\n        // If the target is droppable, wire up global event listeners to track drop-related events.\n        onDragLeave = (event: DragEvent) => {\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]--;\n            if (this._dragEnterCounts[key] === 0) {\n              updateDropState(false /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnter = (event: DragEvent) => {\n          event.preventDefault(); // needed for IE\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]++;\n            if (this._dragEnterCounts[key] === 1) {\n              updateDropState(true /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnd = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n        };\n\n        onDrop = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n\n          if (dragDropOptions.onDrop) {\n            dragDropOptions.onDrop(dragDropOptions.context.data, event);\n          }\n        };\n\n        onDragOver = (event: DragEvent) => {\n          event.preventDefault();\n          if (dragDropOptions.onDragOver) {\n            dragDropOptions.onDragOver(dragDropOptions.context.data, event);\n          }\n        };\n\n        this._dragEnterCounts[key] = 0;\n\n        // dragenter and dragleave will be fired when hover to the child element\n        // but we only want to change state when enter or leave the current element\n        // use the count to ensure it.\n        events.on(root, 'dragenter', onDragEnter);\n        events.on(root, 'dragleave', onDragLeave);\n        events.on(root, 'dragend', onDragEnd);\n        events.on(root, 'drop', onDrop);\n        events.on(root, 'dragover', onDragOver);\n      }\n\n      if (isDraggable) {\n        // If the target is draggable, wire up local event listeners for mouse events.\n        onMouseDown = this._onMouseDown.bind(this, dragDropTarget);\n        onDragEnd = this._onDragEnd.bind(this, dragDropTarget);\n\n        // We need to add in data so that on Firefox we show the ghost element when dragging\n        onDragStart = (event: DragEvent) => {\n          const options = dragDropOptions;\n          if (options && options.onDragStart) {\n            options.onDragStart(options.context.data, options.context.index, this._selection.getSelection(), event);\n          }\n          this._isDragging = true;\n          if (event.dataTransfer) {\n            event.dataTransfer.setData('id', root.id);\n          }\n        };\n\n        events.on(root, 'dragstart', onDragStart);\n        events.on(root, 'mousedown', onMouseDown);\n        events.on(root, 'dragend', onDragEnd);\n      }\n\n      activeTarget = {\n        target: dragDropTarget,\n        dispose: () => {\n          if (this._activeTargets[key] === activeTarget) {\n            delete this._activeTargets[key];\n          }\n\n          if (root) {\n            for (const handler of handlers) {\n              this._events.off(root, handler.eventName, handler.callback);\n            }\n\n            if (isDroppable) {\n              events.off(root, 'dragenter', onDragEnter);\n              events.off(root, 'dragleave', onDragLeave);\n              events.off(root, 'dragend', onDragEnd);\n              events.off(root, 'dragover', onDragOver);\n              events.off(root, 'drop', onDrop);\n            }\n\n            if (isDraggable) {\n              events.off(root, 'dragstart', onDragStart);\n              events.off(root, 'mousedown', onMouseDown);\n              events.off(root, 'dragend', onDragEnd);\n            }\n          }\n        },\n      };\n\n      this._activeTargets[key] = activeTarget;\n    }\n\n    return {\n      key: key,\n      dispose: () => {\n        if (activeTarget) {\n          activeTarget.dispose();\n        }\n      },\n    };\n  }\n\n  public unsubscribe(root: HTMLElement, key: string): void {\n    const activeTarget = this._activeTargets[key];\n\n    if (activeTarget) {\n      activeTarget.dispose();\n    }\n  }\n\n  private _onDragEnd(target: IDragDropTarget, event: DragEvent): void {\n    const { options } = target;\n    if (options.onDragEnd) {\n      options.onDragEnd(options.context.data, event);\n    }\n  }\n\n  /**\n   * clear drag data when mouse up on body\n   */\n  private _onMouseUp(event: MouseEvent): void {\n    this._isDragging = false;\n    if (this._dragData) {\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n\n        if (activeTarget.target.root) {\n          this._events.off(activeTarget.target.root, 'mousemove');\n          this._events.off(activeTarget.target.root, 'mouseleave');\n        }\n      }\n\n      if (this._dragData.dropTarget) {\n        // raise dragleave event to let dropTarget know it need to remove dropping style\n        EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n        EventGroup.raise(this._dragData.dropTarget.root, 'drop');\n      }\n    }\n    this._dragData = null;\n  }\n\n  /**\n   * clear drag data when mouse up outside of the document\n   */\n  private _onDocumentMouseUp(event: MouseEvent): void {\n    const doc = getDocument();\n\n    if (doc && event.target === doc.documentElement) {\n      this._onMouseUp(event);\n    }\n  }\n\n  /**\n   * when mouse move over a new drop target while dragging some items,\n   * fire dragleave on the old target and fire dragenter to the new target\n   * The target will handle style change on dragenter and dragleave events.\n   */\n  private _onMouseMove(target: IDragDropTarget, event: MouseEvent): void {\n    const {\n      // use buttons property here since ev.button in some edge case is not updating well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = MOUSEMOVE_PRIMARY_BUTTON,\n    } = event;\n\n    if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onMouseUp(event);\n      return;\n    }\n\n    const { root, key } = target;\n    if (this._isDragging) {\n      if (this._isDroppable(target)) {\n        // we can have nested drop targets in the DOM, like a folder inside a group. In that case, when we drag into\n        // the inner target (folder), we first set dropTarget to the inner element. But the same event is bubbled to the\n        // outer target too, and we need to prevent the outer one from taking over.\n        // So, check if the last dropTarget is not a child of the current.\n\n        if (this._dragData) {\n          if (\n            this._dragData.dropTarget &&\n            this._dragData.dropTarget.key !== key &&\n            !this._isChild(root, this._dragData.dropTarget.root)\n          ) {\n            if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {\n              EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n              EventGroup.raise(root, 'dragenter');\n              this._dragData.dropTarget = target;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * when mouse leave a target while dragging some items, fire dragleave to the target\n   */\n  private _onMouseLeave(target: IDragDropTarget, event: MouseEvent): void {\n    if (this._isDragging) {\n      if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {\n        EventGroup.raise(target.root, 'dragleave');\n        this._dragData.dropTarget = undefined;\n      }\n    }\n  }\n\n  /**\n   * when mouse down on a draggable item, we start to track dragdata.\n   */\n  private _onMouseDown(target: IDragDropTarget, event: MouseEvent): void {\n    if (event.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    if (this._isDraggable(target)) {\n      this._dragData = {\n        clientX: event.clientX,\n        clientY: event.clientY,\n        eventTarget: event.target,\n        dragTarget: target,\n      };\n\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n        if (activeTarget.target.root) {\n          this._events.on(activeTarget.target.root, 'mousemove', this._onMouseMove.bind(this, activeTarget.target));\n          this._events.on(activeTarget.target.root, 'mouseleave', this._onMouseLeave.bind(this, activeTarget.target));\n        }\n      }\n    } else {\n      this._dragData = null;\n    }\n  }\n\n  /**\n   * determine whether the child target is a descendant of the parent\n   */\n  private _isChild(parentElement: HTMLElement, childElement: HTMLElement): boolean {\n    while (childElement && childElement.parentElement) {\n      if (childElement.parentElement === parentElement) {\n        return true;\n      }\n      childElement = childElement.parentElement;\n    }\n    return false;\n  }\n\n  private _isDraggable(target: IDragDropTarget): boolean {\n    const { options } = target;\n    return !!(options.canDrag && options.canDrag(options.context.data));\n  }\n\n  private _isDroppable(target: IDragDropTarget): boolean {\n    // TODO: take the drag item into consideration to prevent dragging an item into the same group\n    const { options } = target;\n    const dragContext =\n      this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : undefined;\n    return !!(options.canDrop && options.canDrop(options.context, dragContext));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}