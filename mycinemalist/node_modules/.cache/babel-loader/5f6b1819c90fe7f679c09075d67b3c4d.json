{"ast":null,"code":"import { createMemoizer } from '../memoize';\n\nfunction createComposedRenderFunction(outer) {\n  var outerMemoizer = createMemoizer(function (inner) {\n    var innerMemoizer = createMemoizer(function (defaultRender) {\n      return function (innerProps) {\n        return inner(innerProps, defaultRender);\n      };\n    });\n    return function (outerProps, defaultRender) {\n      return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);\n    };\n  });\n  return outerMemoizer;\n}\n\nvar memoizer = createMemoizer(createComposedRenderFunction);\n/**\n * Composes two 'render functions' to produce a final render function that renders\n * the outer function, passing the inner function as 'default render'. The inner function\n * is then passed the original 'default render' prop.\n * @public\n */\n\nexport function composeRenderFunction(outer, inner) {\n  return memoizer(outer)(inner);\n}","map":{"version":3,"mappings":"AACA,SAASA,cAAT,QAA+B,YAA/B;;AAMA,SAASC,4BAAT,CACEC,KADF,EACgC;AAE9B,MAAMC,aAAa,GAAGH,cAAc,CAAC,UAACI,KAAD,EAA+B;AAClE,QAAMC,aAAa,GAAGL,cAAc,CAAC,UAACM,aAAD,EAAuC;AAC1E,aAAO,UAACC,UAAD,EAAoB;AACzB,eAAOH,KAAK,CAACG,UAAD,EAAaD,aAAb,CAAZ;AACD,OAFD;AAGD,KAJmC,CAApC;AAMA,WAAO,UAACE,UAAD,EAAsBF,aAAtB,EAA6D;AAClE,aAAOJ,KAAK,CAACM,UAAD,EAAaF,aAAa,GAAGD,aAAa,CAACC,aAAD,CAAhB,GAAkCF,KAA5D,CAAZ;AACD,KAFD;AAGD,GAVmC,CAApC;AAYA,SAAOD,aAAP;AACD;;AAED,IAAMM,QAAQ,GAAGT,cAAc,CAA0BC,4BAA1B,CAA/B;AAEA;;;;;;;AAMA,OAAM,SAAUS,qBAAV,CACJR,KADI,EAEJE,KAFI,EAE0B;AAE9B,SAAOK,QAAQ,CAACP,KAAD,CAAR,CAAgBE,KAAhB,CAAP;AACD","names":["createMemoizer","createComposedRenderFunction","outer","outerMemoizer","inner","innerMemoizer","defaultRender","innerProps","outerProps","memoizer","composeRenderFunction"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\lib\\src\\renderFunction\\composeRenderFunction.tsx"],"sourcesContent":["import { IRenderFunction } from '../IRenderFunction';\nimport { createMemoizer } from '../memoize';\n\ninterface IRenderFunctionComposer {\n  <TProps>(outer: IRenderFunction<TProps>): (inner: IRenderFunction<TProps>) => IRenderFunction<TProps>;\n}\n\nfunction createComposedRenderFunction<TProps>(\n  outer: IRenderFunction<TProps>,\n): (inner: IRenderFunction<TProps>) => IRenderFunction<TProps> {\n  const outerMemoizer = createMemoizer((inner: IRenderFunction<TProps>) => {\n    const innerMemoizer = createMemoizer((defaultRender: IRenderFunction<TProps>) => {\n      return (innerProps?: TProps) => {\n        return inner(innerProps, defaultRender);\n      };\n    });\n\n    return (outerProps?: TProps, defaultRender?: IRenderFunction<TProps>) => {\n      return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);\n    };\n  });\n\n  return outerMemoizer;\n}\n\nconst memoizer = createMemoizer<IRenderFunctionComposer>(createComposedRenderFunction);\n\n/**\n * Composes two 'render functions' to produce a final render function that renders\n * the outer function, passing the inner function as 'default render'. The inner function\n * is then passed the original 'default render' prop.\n * @public\n */\nexport function composeRenderFunction<TProps>(\n  outer: IRenderFunction<TProps>,\n  inner: IRenderFunction<TProps>,\n): IRenderFunction<TProps> {\n  return memoizer(outer)(inner);\n}\n"]},"metadata":{},"sourceType":"module"}