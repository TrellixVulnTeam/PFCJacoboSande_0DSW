{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { GlobalSettings } from '../GlobalSettings';\nvar CustomizationsGlobalKey = 'customizations';\nvar NO_CUSTOMIZATIONS = {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false\n};\n\nvar _allSettings = GlobalSettings.getValue(CustomizationsGlobalKey, {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false\n});\n\nvar _events = [];\n\nvar Customizations =\n/** @class */\nfunction () {\n  function Customizations() {}\n\n  Customizations.reset = function () {\n    _allSettings.settings = {};\n    _allSettings.scopedSettings = {};\n  };\n  /** Apply global Customization settings.\n   * @example Customizations.applySettings(\\{ theme: \\{...\\} \\});\n   */\n\n\n  Customizations.applySettings = function (settings) {\n    _allSettings.settings = __assign(__assign({}, _allSettings.settings), settings);\n\n    Customizations._raiseChange();\n  };\n  /** Apply Customizations to a particular named scope, like a component.\n   * @example Customizations.applyScopedSettings('Nav', \\{ styles: () =\\> \\{\\} \\});\n   */\n\n\n  Customizations.applyScopedSettings = function (scopeName, settings) {\n    _allSettings.scopedSettings[scopeName] = __assign(__assign({}, _allSettings.scopedSettings[scopeName]), settings);\n\n    Customizations._raiseChange();\n  };\n\n  Customizations.getSettings = function (properties, scopeName, localSettings) {\n    if (localSettings === void 0) {\n      localSettings = NO_CUSTOMIZATIONS;\n    }\n\n    var settings = {};\n    var localScopedSettings = scopeName && localSettings.scopedSettings[scopeName] || {};\n    var globalScopedSettings = scopeName && _allSettings.scopedSettings[scopeName] || {};\n\n    for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n      var property = properties_1[_i];\n      settings[property] = localScopedSettings[property] || localSettings.settings[property] || globalScopedSettings[property] || _allSettings.settings[property];\n    }\n\n    return settings;\n  };\n  /** Used to run some code that sets Customizations without triggering an update until the end.\n   * Useful for applying Customizations that don't affect anything currently rendered, or for\n   * applying many customizations at once.\n   * @param suppressUpdate - Do not raise the change event at the end, preventing all updates\n   */\n\n\n  Customizations.applyBatchedUpdates = function (code, suppressUpdate) {\n    Customizations._suppressUpdates = true;\n\n    try {\n      code();\n    } catch (_a) {\n      /* do nothing */\n    }\n\n    Customizations._suppressUpdates = false;\n\n    if (!suppressUpdate) {\n      Customizations._raiseChange();\n    }\n  };\n\n  Customizations.observe = function (onChange) {\n    _events.push(onChange);\n  };\n\n  Customizations.unobserve = function (onChange) {\n    _events = _events.filter(function (cb) {\n      return cb !== onChange;\n    });\n  };\n\n  Customizations._raiseChange = function () {\n    if (!Customizations._suppressUpdates) {\n      _events.forEach(function (cb) {\n        return cb();\n      });\n    }\n  };\n\n  return Customizations;\n}();\n\nexport { Customizations };","map":{"version":3,"mappings":";AAAA,SAASA,cAAT,QAA+B,mBAA/B;AAsBA,IAAMC,uBAAuB,GAAG,gBAAhC;AACA,IAAMC,iBAAiB,GAAG;AAAEC,UAAQ,EAAE,EAAZ;AAAgBC,gBAAc,EAAE,EAAhC;AAAoCC,qBAAmB,EAAE;AAAzD,CAA1B;;AAEA,IAAIC,YAAY,GAAGN,cAAc,CAACO,QAAf,CAAyCN,uBAAzC,EAAkE;AACnFE,UAAQ,EAAE,EADyE;AAEnFC,gBAAc,EAAE,EAFmE;AAGnFC,qBAAmB,EAAE;AAH8D,CAAlE,CAAnB;;AAMA,IAAIG,OAAO,GAAmB,EAA9B;;AAEA;AAAA;AAAA;AAAA,6BA4EC;;AAzEeC,yBAAd;AACEH,gBAAY,CAACH,QAAb,GAAwB,EAAxB;AACAG,gBAAY,CAACF,cAAb,GAA8B,EAA9B;AACD,GAHa;AAKd;;;;;AAGcK,iCAAd,UAA4BN,QAA5B,EAA+C;AAC7CG,gBAAY,CAACH,QAAb,GAAqBO,sBAAQJ,YAAY,CAACH,QAArB,GAAkCA,QAAlC,CAArB;;AACAM,kBAAc,CAACE,YAAf;AACD,GAHa;AAKd;;;;;AAGcF,uCAAd,UAAkCG,SAAlC,EAAqDT,QAArD,EAAwE;AACtEG,gBAAY,CAACF,cAAb,CAA4BQ,SAA5B,IAAsCF,sBAAQJ,YAAY,CAACF,cAAb,CAA4BQ,SAA5B,CAAR,GAAmDT,QAAnD,CAAtC;;AACAM,kBAAc,CAACE,YAAf;AACD,GAHa;;AAKAF,+BAAd,UACEI,UADF,EAEED,SAFF,EAGEE,aAHF,EAGoD;AAAlD;AAAAA;AAAkD;;AAGlD,QAAMX,QAAQ,GAAc,EAA5B;AACA,QAAMY,mBAAmB,GAAIH,SAAS,IAAIE,aAAa,CAACV,cAAd,CAA6BQ,SAA7B,CAAd,IAA0D,EAAtF;AACA,QAAMI,oBAAoB,GAAIJ,SAAS,IAAIN,YAAY,CAACF,cAAb,CAA4BQ,SAA5B,CAAd,IAAyD,EAAtF;;AAEA,SAAqB,qCAArB,EAAqBK,wBAArB,EAAqBA,IAArB,EAAiC;AAA5B,UAAIC,QAAQ,mBAAZ;AACHf,cAAQ,CAACe,QAAD,CAAR,GACEH,mBAAmB,CAACG,QAAD,CAAnB,IACAJ,aAAa,CAACX,QAAd,CAAuBe,QAAvB,CADA,IAEAF,oBAAoB,CAACE,QAAD,CAFpB,IAGAZ,YAAY,CAACH,QAAb,CAAsBe,QAAtB,CAJF;AAKD;;AAED,WAAOf,QAAP;AACD,GAnBa;AAqBd;;;;;;;AAKcM,uCAAd,UAAkCU,IAAlC,EAAoDC,cAApD,EAA4E;AAC1EX,kBAAc,CAACY,gBAAf,GAAkC,IAAlC;;AACA,QAAI;AACFF,UAAI;AACL,KAFD,CAEE,WAAM;AACN;AACD;;AACDV,kBAAc,CAACY,gBAAf,GAAkC,KAAlC;;AACA,QAAI,CAACD,cAAL,EAAqB;AACnBX,oBAAc,CAACE,YAAf;AACD;AACF,GAXa;;AAaAF,2BAAd,UAAsBa,QAAtB,EAA0C;AACxCd,WAAO,CAACe,IAAR,CAAaD,QAAb;AACD,GAFa;;AAIAb,6BAAd,UAAwBa,QAAxB,EAA4C;AAC1Cd,WAAO,GAAGA,OAAO,CAACgB,MAAR,CAAe,UAACC,EAAD,EAAe;AAAK,eAAE,KAAKH,QAAP;AAAe,KAAlD,CAAV;AACD,GAFa;;AAICb,gCAAf;AACE,QAAI,CAACA,cAAc,CAACY,gBAApB,EAAsC;AACpCb,aAAO,CAACkB,OAAR,CAAgB,UAACD,EAAD,EAAe;AAAK,iBAAE,EAAF;AAAI,OAAxC;AACD;AACF,GAJc;;AAKjB;AAAC,CA5ED","names":["GlobalSettings","CustomizationsGlobalKey","NO_CUSTOMIZATIONS","settings","scopedSettings","inCustomizerContext","_allSettings","getValue","_events","Customizations","__assign","_raiseChange","scopeName","properties","localSettings","localScopedSettings","globalScopedSettings","_i","property","code","suppressUpdate","_suppressUpdates","onChange","push","filter","cb","forEach"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\lib\\src\\customizations\\Customizations.ts"],"sourcesContent":["import { GlobalSettings } from '../GlobalSettings';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ISettings = { [key: string]: any };\nexport type ISettingsFunction = (settings: ISettings) => ISettings;\n\n/**\n * @deprecated Use ISettings.\n */\nexport type Settings = ISettings;\n\n/**\n * @deprecated Use ISettingsFunction.\n */\nexport type SettingsFunction = ISettingsFunction;\n\nexport interface ICustomizations {\n  settings: ISettings;\n  scopedSettings: { [key: string]: ISettings };\n  inCustomizerContext?: boolean;\n}\n\nconst CustomizationsGlobalKey = 'customizations';\nconst NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };\n\nlet _allSettings = GlobalSettings.getValue<ICustomizations>(CustomizationsGlobalKey, {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false,\n});\n\nlet _events: (() => void)[] = [];\n\nexport class Customizations {\n  private static _suppressUpdates: boolean;\n\n  public static reset(): void {\n    _allSettings.settings = {};\n    _allSettings.scopedSettings = {};\n  }\n\n  /** Apply global Customization settings.\n   * @example Customizations.applySettings(\\{ theme: \\{...\\} \\});\n   */\n  public static applySettings(settings: ISettings): void {\n    _allSettings.settings = { ..._allSettings.settings, ...settings };\n    Customizations._raiseChange();\n  }\n\n  /** Apply Customizations to a particular named scope, like a component.\n   * @example Customizations.applyScopedSettings('Nav', \\{ styles: () =\\> \\{\\} \\});\n   */\n  public static applyScopedSettings(scopeName: string, settings: ISettings): void {\n    _allSettings.scopedSettings[scopeName] = { ..._allSettings.scopedSettings[scopeName], ...settings };\n    Customizations._raiseChange();\n  }\n\n  public static getSettings(\n    properties: string[],\n    scopeName?: string,\n    localSettings: ICustomizations = NO_CUSTOMIZATIONS,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any {\n    const settings: ISettings = {};\n    const localScopedSettings = (scopeName && localSettings.scopedSettings[scopeName]) || {};\n    const globalScopedSettings = (scopeName && _allSettings.scopedSettings[scopeName]) || {};\n\n    for (let property of properties) {\n      settings[property] =\n        localScopedSettings[property] ||\n        localSettings.settings[property] ||\n        globalScopedSettings[property] ||\n        _allSettings.settings[property];\n    }\n\n    return settings;\n  }\n\n  /** Used to run some code that sets Customizations without triggering an update until the end.\n   * Useful for applying Customizations that don't affect anything currently rendered, or for\n   * applying many customizations at once.\n   * @param suppressUpdate - Do not raise the change event at the end, preventing all updates\n   */\n  public static applyBatchedUpdates(code: () => void, suppressUpdate?: boolean): void {\n    Customizations._suppressUpdates = true;\n    try {\n      code();\n    } catch {\n      /* do nothing */\n    }\n    Customizations._suppressUpdates = false;\n    if (!suppressUpdate) {\n      Customizations._raiseChange();\n    }\n  }\n\n  public static observe(onChange: () => void): void {\n    _events.push(onChange);\n  }\n\n  public static unobserve(onChange: () => void): void {\n    _events = _events.filter((cb: () => void) => cb !== onChange);\n  }\n\n  private static _raiseChange(): void {\n    if (!Customizations._suppressUpdates) {\n      _events.forEach((cb: () => void) => cb());\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}