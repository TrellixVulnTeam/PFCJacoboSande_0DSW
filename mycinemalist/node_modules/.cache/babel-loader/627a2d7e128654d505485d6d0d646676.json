{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, divProperties, getNativeProps } from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nvar getClassNames = classNamesFunction();\n\nvar TooltipBase =\n/** @class */\nfunction (_super) {\n  __extends(TooltipBase, _super);\n\n  function TooltipBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onRenderContent = function (props) {\n      return React.createElement(\"p\", {\n        className: _this._classNames.subText\n      }, props.content);\n    };\n\n    return _this;\n  }\n\n  TooltipBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        calloutProps = _a.calloutProps,\n        directionalHint = _a.directionalHint,\n        directionalHintForRTL = _a.directionalHintForRTL,\n        styles = _a.styles,\n        id = _a.id,\n        maxWidth = _a.maxWidth,\n        _b = _a.onRenderContent,\n        onRenderContent = _b === void 0 ? this._onRenderContent : _b,\n        targetElement = _a.targetElement,\n        theme = _a.theme;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className || calloutProps && calloutProps.className,\n      beakWidth: calloutProps && calloutProps.beakWidth,\n      gapSpace: calloutProps && calloutProps.gapSpace,\n      maxWidth: maxWidth\n    });\n    return React.createElement(Callout, __assign({\n      target: targetElement,\n      directionalHint: directionalHint,\n      directionalHintForRTL: directionalHintForRTL\n    }, calloutProps, getNativeProps(this.props, divProperties, ['id']), {\n      className: this._classNames.root\n    }), React.createElement(\"div\", {\n      className: this._classNames.content,\n      id: id,\n      role: \"tooltip\",\n      onMouseEnter: this.props.onMouseEnter,\n      onMouseLeave: this.props.onMouseLeave\n    }, onRenderContent(this.props, this._onRenderContent)));\n  }; // Specify default props values\n\n\n  TooltipBase.defaultProps = {\n    directionalHint: DirectionalHint.topCenter,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false\n    }\n  };\n  return TooltipBase;\n}(React.Component);\n\nexport { TooltipBase };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,EAA6BC,aAA7B,EAA4CC,cAA5C,QAAkE,iBAAlE;AAGA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,eAAT,QAAgC,8BAAhC;AAEA,IAAMC,aAAa,GAAGL,kBAAkB,EAAxC;;AAEA;AAAA;AAAA;AAAiCM;;AAAjC;AAAA;;AA4DUC,6BAAmB,UAACC,KAAD,EAAqB;AAC9C,aAAOT;AAAGU,iBAAS,EAAEF,KAAI,CAACG,WAAL,CAAiBC;AAA/B,SAAyCH,KAAK,CAACI,OAA/C,CAAP;AACD,KAFO;;;AAGT;;AA/CQC,iCAAP;AACQ;AAAA,QACJJ,wBADI;AAAA,QAEJK,8BAFI;AAAA,QAGJC,oCAHI;AAAA,QAIJC,gDAJI;AAAA,QAKJC,kBALI;AAAA,QAMJC,UANI;AAAA,QAOJC,sBAPI;AAAA,QAQJC,uBARI;AAAA,QAQJC,4DARI;AAAA,QASJC,gCATI;AAAA,QAUJC,gBAVI;AAaN,SAAKb,WAAL,GAAmBL,aAAa,CAACY,MAAD,EAAU;AACxCM,WAAK,EAAEA,KADiC;AAExCd,eAAS,EAAEA,SAAS,IAAKK,YAAY,IAAIA,YAAY,CAACL,SAFd;AAGxCe,eAAS,EAAEV,YAAY,IAAIA,YAAY,CAACU,SAHA;AAIxCC,cAAQ,EAAEX,YAAY,IAAIA,YAAY,CAACW,QAJC;AAKxCN,cAAQ,EAAEA;AAL8B,KAAV,CAAhC;AAQA,WACEpB,oBAACI,OAAD,EAAQuB;AACNC,YAAM,EAAEL,aADF;AAENP,qBAAe,EAAEA,eAFX;AAGNC,2BAAqB,EAAEA;AAHjB,OAIFF,YAJE,EAKFZ,cAAc,CAAC,KAAKM,KAAN,EAAaP,aAAb,EAA4B,CAAC,IAAD,CAA5B,CALZ,EAK+C;AACrDQ,eAAS,EAAE,KAAKC,WAAL,CAAiBkB;AADyB,KAL/C,CAAR,EAQE7B;AACEU,eAAS,EAAE,KAAKC,WAAL,CAAiBE,OAD9B;AAEEM,QAAE,EAAEA,EAFN;AAGEW,UAAI,EAAC,SAHP;AAIEC,kBAAY,EAAE,KAAKtB,KAAL,CAAWsB,YAJ3B;AAKEC,kBAAY,EAAE,KAAKvB,KAAL,CAAWuB;AAL3B,OAOGV,eAAe,CAAC,KAAKb,KAAN,EAAa,KAAKwB,gBAAlB,CAPlB,CARF,CADF;AAoBD,GA1CM,CAhBT,CACE;;;AACcnB,6BAAuC;AACnDE,mBAAe,EAAEX,eAAe,CAAC6B,SADkB;AAEnDd,YAAQ,EAAE,OAFyC;AAGnDL,gBAAY,EAAE;AACZoB,mBAAa,EAAE,IADH;AAEZV,eAAS,EAAE,EAFC;AAGZC,cAAQ,EAAE,CAHE;AAIZU,qBAAe,EAAE,IAJL;AAKZC,gBAAU,EAAE;AALA;AAHqC,GAAvC;AA6DhB;AAAC,CA/DD,CAAiCrC,KAAK,CAACsC,SAAvC;;SAAaxB","names":["React","classNamesFunction","divProperties","getNativeProps","Callout","DirectionalHint","getClassNames","__extends","_this","props","className","_classNames","subText","content","TooltipBase","calloutProps","directionalHint","directionalHintForRTL","styles","id","maxWidth","_b","onRenderContent","targetElement","theme","beakWidth","gapSpace","__assign","target","root","role","onMouseEnter","onMouseLeave","_onRenderContent","topCenter","isBeakVisible","setInitialFocus","doNotLayer","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Tooltip\\Tooltip.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, divProperties, getNativeProps } from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { ITooltipProps, ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\n\nconst getClassNames = classNamesFunction<ITooltipStyleProps, ITooltipStyles>();\n\nexport class TooltipBase extends React.Component<ITooltipProps, any> {\n  // Specify default props values\n  public static defaultProps: Partial<ITooltipProps> = {\n    directionalHint: DirectionalHint.topCenter,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false,\n    },\n  };\n\n  private _classNames: IProcessedStyleSet<ITooltipStyles>;\n\n  public render(): JSX.Element {\n    const {\n      className,\n      calloutProps,\n      directionalHint,\n      directionalHintForRTL,\n      styles,\n      id,\n      maxWidth,\n      onRenderContent = this._onRenderContent,\n      targetElement,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: className || (calloutProps && calloutProps.className),\n      beakWidth: calloutProps && calloutProps.beakWidth,\n      gapSpace: calloutProps && calloutProps.gapSpace,\n      maxWidth: maxWidth!,\n    });\n\n    return (\n      <Callout\n        target={targetElement}\n        directionalHint={directionalHint}\n        directionalHintForRTL={directionalHintForRTL}\n        {...calloutProps}\n        {...getNativeProps(this.props, divProperties, ['id'])} // omitting ID due to it being used in the div below\n        className={this._classNames.root}\n      >\n        <div\n          className={this._classNames.content}\n          id={id}\n          role=\"tooltip\"\n          onMouseEnter={this.props.onMouseEnter}\n          onMouseLeave={this.props.onMouseLeave}\n        >\n          {onRenderContent(this.props, this._onRenderContent)}\n        </div>\n      </Callout>\n    );\n  }\n\n  private _onRenderContent = (props: ITooltipProps): JSX.Element => {\n    return <p className={this._classNames.subText}>{props.content}</p>;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}