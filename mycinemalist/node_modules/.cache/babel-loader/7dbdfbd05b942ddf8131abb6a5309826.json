{"ast":null,"code":"import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, getRTL, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nvar getClassNames = classNamesFunction();\nvar OVERFLOW_KEY = 'overflow';\n\nvar nullFunction = function () {\n  return null;\n};\n\nvar nonActionableItemProps = {\n  styles: function (props) {\n    var theme = props.theme;\n    return {\n      root: {\n        selectors: {\n          '&.is-disabled': {\n            color: theme.semanticColors.bodyText\n          }\n        }\n      }\n    };\n  }\n};\n/**\n * {@docCategory Breadcrumb}\n */\n\nvar BreadcrumbBase =\n/** @class */\nfunction (_super) {\n  __extends(BreadcrumbBase, _super);\n\n  function BreadcrumbBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusZone = React.createRef();\n    /**\n     * Remove the first rendered item past the overlow point and put it and the end the overflow set.\n     */\n\n    _this._onReduceData = function (data) {\n      var renderedItems = data.renderedItems,\n          renderedOverflowItems = data.renderedOverflowItems;\n      var overflowIndex = data.props.overflowIndex;\n      var movedItem = renderedItems[overflowIndex];\n\n      if (!movedItem) {\n        return undefined;\n      }\n\n      renderedItems = __spreadArrays(renderedItems);\n      renderedItems.splice(overflowIndex, 1);\n      renderedOverflowItems = __spreadArrays(renderedOverflowItems, [movedItem]);\n      return __assign(__assign({}, data), {\n        renderedItems: renderedItems,\n        renderedOverflowItems: renderedOverflowItems\n      });\n    };\n    /**\n     * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\n     * point.\n     */\n\n\n    _this._onGrowData = function (data) {\n      var renderedItems = data.renderedItems,\n          renderedOverflowItems = data.renderedOverflowItems;\n      var _a = data.props,\n          overflowIndex = _a.overflowIndex,\n          maxDisplayedItems = _a.maxDisplayedItems;\n      renderedOverflowItems = __spreadArrays(renderedOverflowItems);\n      var movedItem = renderedOverflowItems.pop();\n\n      if (!movedItem || renderedItems.length >= maxDisplayedItems) {\n        return undefined;\n      }\n\n      renderedItems = __spreadArrays(renderedItems);\n      renderedItems.splice(overflowIndex, 0, movedItem);\n      return __assign(__assign({}, data), {\n        renderedItems: renderedItems,\n        renderedOverflowItems: renderedOverflowItems\n      });\n    };\n\n    _this._onRenderBreadcrumb = function (data) {\n      var _a = data.props,\n          ariaLabel = _a.ariaLabel,\n          _b = _a.dividerAs,\n          DividerType = _b === void 0 ? Icon : _b,\n          _c = _a.onRenderItem,\n          onRenderItem = _c === void 0 ? _this._onRenderItem : _c,\n          overflowAriaLabel = _a.overflowAriaLabel,\n          overflowIndex = _a.overflowIndex,\n          onRenderOverflowIcon = _a.onRenderOverflowIcon,\n          overflowButtonAs = _a.overflowButtonAs;\n      var renderedOverflowItems = data.renderedOverflowItems,\n          renderedItems = data.renderedItems;\n      var contextualItems = renderedOverflowItems.map(function (item) {\n        var isActionable = !!(item.onClick || item.href);\n        return {\n          text: item.text,\n          name: item.text,\n          key: item.key,\n          onClick: item.onClick ? _this._onBreadcrumbClicked.bind(_this, item) : null,\n          href: item.href,\n          disabled: !isActionable,\n          itemProps: isActionable ? undefined : nonActionableItemProps\n        };\n      }); // Find index of last rendered item so the divider icon\n      // knows not to render on that item\n\n      var lastItemIndex = renderedItems.length - 1;\n      var hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n      var itemElements = renderedItems.map(function (item, index) {\n        return React.createElement(\"li\", {\n          className: _this._classNames.listItem,\n          key: item.key || String(index)\n        }, onRenderItem(item, _this._onRenderItem), (index !== lastItemIndex || hasOverflowItems && index === overflowIndex - 1) && React.createElement(DividerType, {\n          className: _this._classNames.chevron,\n          iconName: getRTL(_this.props.theme) ? 'ChevronLeft' : 'ChevronRight',\n          item: item\n        }));\n      });\n\n      if (hasOverflowItems) {\n        var iconProps = !onRenderOverflowIcon ? {\n          iconName: 'More'\n        } : {};\n        var onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n        var OverflowButton = overflowButtonAs ? overflowButtonAs : IconButton;\n        itemElements.splice(overflowIndex, 0, React.createElement(\"li\", {\n          className: _this._classNames.overflow,\n          key: OVERFLOW_KEY\n        }, React.createElement(OverflowButton, {\n          className: _this._classNames.overflowButton,\n          iconProps: iconProps,\n          role: \"button\",\n          \"aria-haspopup\": \"true\",\n          ariaLabel: overflowAriaLabel,\n          onRenderMenuIcon: onRenderMenuIcon,\n          menuProps: {\n            items: contextualItems,\n            directionalHint: DirectionalHint.bottomLeftEdge\n          }\n        }), overflowIndex !== lastItemIndex + 1 && React.createElement(DividerType, {\n          className: _this._classNames.chevron,\n          iconName: getRTL(_this.props.theme) ? 'ChevronLeft' : 'ChevronRight',\n          item: renderedOverflowItems[renderedOverflowItems.length - 1]\n        })));\n      }\n\n      var nativeProps = getNativeProps(_this.props, htmlElementProperties, ['className']);\n      return React.createElement(\"div\", __assign({\n        className: _this._classNames.root,\n        role: \"navigation\",\n        \"aria-label\": ariaLabel\n      }, nativeProps), React.createElement(FocusZone, __assign({\n        componentRef: _this._focusZone,\n        direction: FocusZoneDirection.horizontal\n      }, _this.props.focusZoneProps), React.createElement(\"ol\", {\n        className: _this._classNames.list\n      }, itemElements)));\n    };\n\n    _this._onRenderItem = function (item) {\n      if (item.onClick || item.href) {\n        return React.createElement(Link, {\n          as: item.as,\n          className: _this._classNames.itemLink,\n          href: item.href,\n          \"aria-current\": item.isCurrentItem ? 'page' : undefined,\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick: _this._onBreadcrumbClicked.bind(_this, item),\n          role: item.role\n        }, React.createElement(TooltipHost, __assign({\n          content: item.text,\n          overflowMode: TooltipOverflowMode.Parent\n        }, _this.props.tooltipHostProps), item.text));\n      } else {\n        var Tag = item.as || 'span';\n        return React.createElement(Tag, {\n          className: _this._classNames.item\n        }, React.createElement(TooltipHost, __assign({\n          content: item.text,\n          overflowMode: TooltipOverflowMode.Parent\n        }, _this.props.tooltipHostProps), item.text));\n      }\n    };\n\n    _this._onBreadcrumbClicked = function (item, ev) {\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n\n    initializeComponentRef(_this);\n\n    _this._validateProps(props);\n\n    return _this;\n  }\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n\n\n  BreadcrumbBase.prototype.focus = function () {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  };\n\n  BreadcrumbBase.prototype.render = function () {\n    this._validateProps(this.props);\n\n    var _a = this.props,\n        _b = _a.onReduceData,\n        onReduceData = _b === void 0 ? this._onReduceData : _b,\n        _c = _a.onGrowData,\n        onGrowData = _c === void 0 ? this._onGrowData : _c,\n        overflowIndex = _a.overflowIndex,\n        maxDisplayedItems = _a.maxDisplayedItems,\n        items = _a.items,\n        className = _a.className,\n        theme = _a.theme,\n        styles = _a.styles;\n\n    var renderedItems = __spreadArrays(items);\n\n    var renderedOverflowItems = renderedItems.splice(overflowIndex, renderedItems.length - maxDisplayedItems);\n    var breadcrumbData = {\n      props: this.props,\n      renderedItems: renderedItems,\n      renderedOverflowItems: renderedOverflowItems\n    };\n    this._classNames = getClassNames(styles, {\n      className: className,\n      theme: theme\n    });\n    return React.createElement(ResizeGroup, {\n      onRenderData: this._onRenderBreadcrumb,\n      onReduceData: onReduceData,\n      onGrowData: onGrowData,\n      data: breadcrumbData\n    });\n  };\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n\n\n  BreadcrumbBase.prototype._validateProps = function (props) {\n    var maxDisplayedItems = props.maxDisplayedItems,\n        overflowIndex = props.overflowIndex,\n        items = props.items;\n\n    if (overflowIndex < 0 || maxDisplayedItems > 1 && overflowIndex > maxDisplayedItems - 1 || items.length > 0 && overflowIndex > items.length - 1) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  };\n\n  BreadcrumbBase.defaultProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0\n  };\n  return BreadcrumbBase;\n}(React.Component);\n\nexport { BreadcrumbBase };","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","getRTL","classNamesFunction","getNativeProps","htmlElementProperties","FocusZone","FocusZoneDirection","Link","Icon","IconButton","DirectionalHint","ResizeGroup","TooltipHost","TooltipOverflowMode","getClassNames","OVERFLOW_KEY","nullFunction","nonActionableItemProps","styles","root","selectors","color","theme","semanticColors","bodyText","__extends","props","_super","_this","createRef","data","renderedOverflowItems","movedItem","renderedItems","overflowIndex","undefined","splice","maxDisplayedItems","pop","length","ariaLabel","_b","DividerType","_c","onRenderItem","overflowAriaLabel","onRenderOverflowIcon","overflowButtonAs","contextualItems","map","item","isActionable","onClick","href","text","name","key","_onBreadcrumbClicked","bind","disabled","itemProps","lastItemIndex","hasOverflowItems","itemElements","index","className","_classNames","listItem","String","_onRenderItem","chevron","iconName","iconProps","onRenderMenuIcon","OverflowButton","overflow","overflowButton","role","menuProps","items","directionalHint","bottomLeftEdge","nativeProps","__assign","componentRef","_focusZone","direction","horizontal","focusZoneProps","list","as","itemLink","isCurrentItem","content","overflowMode","Parent","tooltipHostProps","Tag","ev","_validateProps","BreadcrumbBase","current","focus","onReduceData","onGrowData","breadcrumbData","onRenderData","_onRenderBreadcrumb","Error","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Breadcrumb\\Breadcrumb.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  initializeComponentRef,\n  getRTL,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n} from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nimport { IContextualMenuItem, IContextualMenuItemProps } from '../../ContextualMenu';\nimport {\n  IBreadcrumbProps,\n  IBreadcrumbItem,\n  IDividerAsProps,\n  IBreadcrumbData,\n  IBreadcrumbStyleProps,\n  IBreadcrumbStyles,\n} from './Breadcrumb.types';\n\n/** @deprecated Use IBreadcrumbData */\nexport type IBreadCrumbData = IBreadcrumbData;\n\nconst getClassNames = classNamesFunction<IBreadcrumbStyleProps, IBreadcrumbStyles>();\n\nconst OVERFLOW_KEY = 'overflow';\nconst nullFunction = (): null => null;\n\nconst nonActionableItemProps: Partial<IContextualMenuItemProps> = {\n  styles: props => {\n    const { theme } = props;\n    return {\n      root: {\n        selectors: {\n          '&.is-disabled': {\n            color: theme.semanticColors.bodyText,\n          },\n        },\n      },\n    };\n  },\n};\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport class BreadcrumbBase extends React.Component<IBreadcrumbProps, any> {\n  public static defaultProps: IBreadcrumbProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0,\n  };\n\n  private _classNames: IProcessedStyleSet<IBreadcrumbStyles>;\n  private _focusZone = React.createRef<FocusZone>();\n\n  constructor(props: IBreadcrumbProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._validateProps(props);\n  }\n\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  public focus(): void {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    this._validateProps(this.props);\n\n    const {\n      onReduceData = this._onReduceData,\n      onGrowData = this._onGrowData,\n      overflowIndex,\n      maxDisplayedItems,\n      items,\n      className,\n      theme,\n      styles,\n    } = this.props;\n    const renderedItems = [...items];\n    const renderedOverflowItems = renderedItems.splice(overflowIndex!, renderedItems.length - maxDisplayedItems!);\n    const breadcrumbData: IBreadcrumbData = {\n      props: this.props,\n      renderedItems,\n      renderedOverflowItems,\n    };\n\n    this._classNames = getClassNames(styles, {\n      className,\n      theme: theme!,\n    });\n\n    return (\n      <ResizeGroup\n        onRenderData={this._onRenderBreadcrumb}\n        onReduceData={onReduceData}\n        onGrowData={onGrowData}\n        data={breadcrumbData}\n      />\n    );\n  }\n\n  /**\n   * Remove the first rendered item past the overlow point and put it and the end the overflow set.\n   */\n  private _onReduceData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex } = data.props;\n\n    const movedItem = renderedItems[overflowIndex!];\n\n    if (!movedItem) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 1);\n\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  /**\n   * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\n   * point.\n   */\n  private _onGrowData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex, maxDisplayedItems } = data.props;\n\n    renderedOverflowItems = [...renderedOverflowItems];\n    const movedItem = renderedOverflowItems.pop();\n\n    if (!movedItem || renderedItems.length >= maxDisplayedItems!) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 0, movedItem);\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  private _onRenderBreadcrumb = (data: IBreadcrumbData) => {\n    const {\n      ariaLabel,\n      dividerAs: DividerType = Icon as React.ElementType<IDividerAsProps>,\n      onRenderItem = this._onRenderItem,\n      overflowAriaLabel,\n      overflowIndex,\n      onRenderOverflowIcon,\n      overflowButtonAs,\n    } = data.props;\n    const { renderedOverflowItems, renderedItems } = data;\n\n    const contextualItems = renderedOverflowItems.map(\n      (item): IContextualMenuItem => {\n        const isActionable = !!(item.onClick || item.href);\n        return {\n          text: item.text,\n          name: item.text,\n          key: item.key,\n          onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\n          href: item.href,\n          disabled: !isActionable,\n          itemProps: isActionable ? undefined : nonActionableItemProps,\n        };\n      },\n    );\n\n    // Find index of last rendered item so the divider icon\n    // knows not to render on that item\n    const lastItemIndex = renderedItems.length - 1;\n    const hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n\n    const itemElements: JSX.Element[] = renderedItems.map((item, index) => (\n      <li className={this._classNames.listItem} key={item.key || String(index)}>\n        {onRenderItem(item, this._onRenderItem)}\n        {(index !== lastItemIndex || (hasOverflowItems && index === overflowIndex! - 1)) && (\n          <DividerType\n            className={this._classNames.chevron}\n            iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n            item={item}\n          />\n        )}\n      </li>\n    ));\n\n    if (hasOverflowItems) {\n      const iconProps = !onRenderOverflowIcon ? { iconName: 'More' } : {};\n      const onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n      const OverflowButton = overflowButtonAs ? overflowButtonAs : IconButton;\n\n      itemElements.splice(\n        overflowIndex!,\n        0,\n        <li className={this._classNames.overflow} key={OVERFLOW_KEY}>\n          <OverflowButton\n            className={this._classNames.overflowButton}\n            iconProps={iconProps}\n            role=\"button\"\n            aria-haspopup=\"true\"\n            ariaLabel={overflowAriaLabel}\n            onRenderMenuIcon={onRenderMenuIcon}\n            menuProps={{\n              items: contextualItems,\n              directionalHint: DirectionalHint.bottomLeftEdge,\n            }}\n          />\n          {overflowIndex !== lastItemIndex + 1 && (\n            <DividerType\n              className={this._classNames.chevron}\n              iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n              item={renderedOverflowItems[renderedOverflowItems.length - 1]}\n            />\n          )}\n        </li>,\n      );\n    }\n\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, [\n      'className',\n    ]);\n\n    return (\n      <div className={this._classNames.root} role=\"navigation\" aria-label={ariaLabel} {...nativeProps}>\n        <FocusZone\n          componentRef={this._focusZone}\n          direction={FocusZoneDirection.horizontal}\n          {...this.props.focusZoneProps}\n        >\n          <ol className={this._classNames.list}>{itemElements}</ol>\n        </FocusZone>\n      </div>\n    );\n  };\n\n  private _onRenderItem = (item: IBreadcrumbItem) => {\n    if (item.onClick || item.href) {\n      return (\n        <Link\n          as={item.as}\n          className={this._classNames.itemLink}\n          href={item.href}\n          aria-current={item.isCurrentItem ? 'page' : undefined}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={this._onBreadcrumbClicked.bind(this, item)}\n          role={item.role}\n        >\n          <TooltipHost content={item.text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {item.text}\n          </TooltipHost>\n        </Link>\n      );\n    } else {\n      const Tag = item.as || 'span';\n      return (\n        <Tag className={this._classNames.item}>\n          <TooltipHost content={item.text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {item.text}\n          </TooltipHost>\n        </Tag>\n      );\n    }\n  };\n\n  private _onBreadcrumbClicked = (item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) => {\n    if (item.onClick) {\n      item.onClick(ev, item);\n    }\n  };\n\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n  private _validateProps(props: IBreadcrumbProps): void {\n    const { maxDisplayedItems, overflowIndex, items } = props;\n    if (\n      overflowIndex! < 0 ||\n      (maxDisplayedItems! > 1 && overflowIndex! > maxDisplayedItems! - 1) ||\n      (items.length > 0 && overflowIndex! > items.length - 1)\n    ) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}