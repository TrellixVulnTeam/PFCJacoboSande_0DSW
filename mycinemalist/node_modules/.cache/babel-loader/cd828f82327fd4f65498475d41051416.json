{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, getNativeProps, inputProperties, isIE11, Async, initializeComponentRef } from '../../Utilities';\nvar SELECTION_FORWARD = 'forward';\nvar SELECTION_BACKWARD = 'backward';\n/**\n * {@docCategory Autofill}\n */\n\nvar Autofill =\n/** @class */\nfunction (_super) {\n  __extends(Autofill, _super);\n\n  function Autofill(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._inputElement = React.createRef();\n    _this._autoFillEnabled = true;\n    _this._isComposing = false; // Composition events are used when the character/text requires several keystrokes to be completed.\n    // Some examples of this are mobile text input and langauges like Japanese or Arabic.\n    // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n\n    _this._onCompositionStart = function (ev) {\n      _this._isComposing = true;\n      _this._autoFillEnabled = false;\n    }; // Composition events are used when the character/text requires several keystrokes to be completed.\n    // Some examples of this are mobile text input and languages like Japanese or Arabic.\n    // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n\n\n    _this._onCompositionUpdate = function () {\n      if (isIE11()) {\n        _this._updateValue(_this._getCurrentInputValue(), true);\n      }\n    }; // Composition events are used when the character/text requires several keystrokes to be completed.\n    // Some examples of this are mobile text input and langauges like Japanese or Arabic.\n    // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n\n\n    _this._onCompositionEnd = function (ev) {\n      var inputValue = _this._getCurrentInputValue();\n\n      _this._tryEnableAutofill(inputValue, _this.value, false, true);\n\n      _this._isComposing = false; // Due to timing, this needs to be async, otherwise no text will be selected.\n\n      _this._async.setTimeout(function () {\n        // it's technically possible that the value of _isComposing is reset during this timeout,\n        // so explicitly trigger this with composing=true here, since it is supposed to be the\n        // update for composition end\n        _this._updateValue(_this._getCurrentInputValue(), false);\n      }, 0);\n    };\n\n    _this._onClick = function () {\n      if (_this._value && _this._value !== '' && _this._autoFillEnabled) {\n        _this._autoFillEnabled = false;\n      }\n    };\n\n    _this._onKeyDown = function (ev) {\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(ev);\n      } // If the event is actively being composed, then don't alert autofill.\n      // Right now typing does not have isComposing, once that has been fixed any should be removed.\n\n\n      if (!ev.nativeEvent.isComposing) {\n        switch (ev.which) {\n          case KeyCodes.backspace:\n            _this._autoFillEnabled = false;\n            break;\n\n          case KeyCodes.left:\n          case KeyCodes.right:\n            if (_this._autoFillEnabled) {\n              _this._value = _this.state.displayValue;\n              _this._autoFillEnabled = false;\n            }\n\n            break;\n\n          default:\n            if (!_this._autoFillEnabled) {\n              if (_this.props.enableAutofillOnKeyPress.indexOf(ev.which) !== -1) {\n                _this._autoFillEnabled = true;\n              }\n            }\n\n            break;\n        }\n      }\n    };\n\n    _this._onInputChanged = function (ev) {\n      var value = _this._getCurrentInputValue(ev);\n\n      if (!_this._isComposing) {\n        _this._tryEnableAutofill(value, _this._value, ev.nativeEvent.isComposing);\n      } // If it is not IE11 and currently composing, update the value\n\n\n      if (!(isIE11() && _this._isComposing)) {\n        var nativeEventComposing = ev.nativeEvent.isComposing;\n        var isComposing = nativeEventComposing === undefined ? _this._isComposing : nativeEventComposing;\n\n        _this._updateValue(value, isComposing);\n      }\n    };\n\n    _this._onChanged = function () {\n      // Swallow this event, we don't care about it\n      // We must provide it because React PropTypes marks it as required, but onInput serves the correct purpose\n      return;\n    };\n    /**\n     * Updates the current input value as well as getting a new display value.\n     * @param newValue - The new value from the input\n     */\n\n\n    _this._updateValue = function (newValue, composing) {\n      // Only proceed if the value is nonempty and is different from the old value\n      // This is to work around the fact that, in IE 11, inputs with a placeholder fire an onInput event on focus\n      if (!newValue && newValue === _this._value) {\n        return;\n      }\n\n      _this._value = _this.props.onInputChange ? _this.props.onInputChange(newValue, composing) : newValue;\n\n      _this.setState({\n        displayValue: _this._getDisplayValue(_this._value, _this.props.suggestedDisplayValue)\n      }, function () {\n        return _this._notifyInputChange(_this._value, composing);\n      });\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._value = props.defaultVisibleValue || '';\n    _this.state = {\n      displayValue: props.defaultVisibleValue || ''\n    };\n    return _this;\n  }\n\n  Object.defineProperty(Autofill.prototype, \"cursorLocation\", {\n    get: function () {\n      if (this._inputElement.current) {\n        var inputElement = this._inputElement.current;\n\n        if (inputElement.selectionDirection !== SELECTION_FORWARD) {\n          return inputElement.selectionEnd;\n        } else {\n          return inputElement.selectionStart;\n        }\n      } else {\n        return -1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Autofill.prototype, \"isValueSelected\", {\n    get: function () {\n      return Boolean(this.inputElement && this.inputElement.selectionStart !== this.inputElement.selectionEnd);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Autofill.prototype, \"value\", {\n    get: function () {\n      return this._value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Autofill.prototype, \"selectionStart\", {\n    get: function () {\n      return this._inputElement.current ? this._inputElement.current.selectionStart : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Autofill.prototype, \"selectionEnd\", {\n    get: function () {\n      return this._inputElement.current ? this._inputElement.current.selectionEnd : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Autofill.prototype, \"inputElement\", {\n    get: function () {\n      return this._inputElement.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Autofill.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n    if (this.props.updateValueInWillReceiveProps) {\n      var updatedInputValue = this.props.updateValueInWillReceiveProps(); // Don't update if we have a null value or the value isn't changing\n      // the value should still update if an empty string is passed in\n\n      if (updatedInputValue !== null && updatedInputValue !== this._value) {\n        this._value = updatedInputValue;\n      }\n    }\n\n    var newDisplayValue = this._getDisplayValue(this._value, nextProps.suggestedDisplayValue);\n\n    if (typeof newDisplayValue === 'string') {\n      this.setState({\n        displayValue: newDisplayValue\n      });\n    }\n  };\n\n  Autofill.prototype.componentDidUpdate = function () {\n    var value = this._value;\n    var _a = this.props,\n        suggestedDisplayValue = _a.suggestedDisplayValue,\n        shouldSelectFullInputValueInComponentDidUpdate = _a.shouldSelectFullInputValueInComponentDidUpdate,\n        preventValueSelection = _a.preventValueSelection;\n    var differenceIndex = 0;\n\n    if (preventValueSelection) {\n      return;\n    }\n\n    if (this._autoFillEnabled && value && suggestedDisplayValue && this._doesTextStartWith(suggestedDisplayValue, value)) {\n      var shouldSelectFullRange = false;\n\n      if (shouldSelectFullInputValueInComponentDidUpdate) {\n        shouldSelectFullRange = shouldSelectFullInputValueInComponentDidUpdate();\n      }\n\n      if (shouldSelectFullRange && this._inputElement.current) {\n        this._inputElement.current.setSelectionRange(0, suggestedDisplayValue.length, SELECTION_BACKWARD);\n      } else {\n        while (differenceIndex < value.length && value[differenceIndex].toLocaleLowerCase() === suggestedDisplayValue[differenceIndex].toLocaleLowerCase()) {\n          differenceIndex++;\n        }\n\n        if (differenceIndex > 0 && this._inputElement.current) {\n          this._inputElement.current.setSelectionRange(differenceIndex, suggestedDisplayValue.length, SELECTION_BACKWARD);\n        }\n      }\n    }\n  };\n\n  Autofill.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n\n  Autofill.prototype.render = function () {\n    var displayValue = this.state.displayValue;\n    var nativeProps = getNativeProps(this.props, inputProperties);\n    return React.createElement(\"input\", __assign({\n      autoCapitalize: \"off\",\n      autoComplete: \"off\",\n      \"aria-autocomplete\": 'both'\n    }, nativeProps, {\n      ref: this._inputElement,\n      value: displayValue,\n      onCompositionStart: this._onCompositionStart,\n      onCompositionUpdate: this._onCompositionUpdate,\n      onCompositionEnd: this._onCompositionEnd,\n      // TODO (Fabric 8?) - switch to calling only onChange. See notes in TextField._onInputChange.\n      onChange: this._onChanged,\n      onInput: this._onInputChanged,\n      onKeyDown: this._onKeyDown,\n      onClick: this.props.onClick ? this.props.onClick : this._onClick,\n      \"data-lpignore\": true\n    }));\n  };\n\n  Autofill.prototype.focus = function () {\n    this._inputElement.current && this._inputElement.current.focus();\n  };\n\n  Autofill.prototype.clear = function () {\n    this._autoFillEnabled = true;\n\n    this._updateValue('', false);\n\n    this._inputElement.current && this._inputElement.current.setSelectionRange(0, 0);\n  };\n\n  Autofill.prototype._getCurrentInputValue = function (ev) {\n    if (ev && ev.target && ev.target.value) {\n      return ev.target.value;\n    } else if (this.inputElement && this.inputElement.value) {\n      return this.inputElement.value;\n    } else {\n      return '';\n    }\n  };\n  /**\n   * Attempts to enable autofill. Whether or not autofill is enabled depends on the input value,\n   * whether or not any text is selected, and only if the new input value is longer than the old input value.\n   * Autofill should never be set to true if the value is composing. Once compositionEnd is called, then\n   * it should be completed.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent for more information on composition.\n   * @param newValue - new input value\n   * @param oldValue - old input value\n   * @param isComposing - if true then the text is actively being composed and it has not completed.\n   * @param isComposed - if the text is a composed text value.\n   */\n\n\n  Autofill.prototype._tryEnableAutofill = function (newValue, oldValue, isComposing, isComposed) {\n    if (!isComposing && newValue && this._inputElement.current && this._inputElement.current.selectionStart === newValue.length && !this._autoFillEnabled && (newValue.length > oldValue.length || isComposed)) {\n      this._autoFillEnabled = true;\n    }\n  };\n\n  Autofill.prototype._notifyInputChange = function (newValue, composing) {\n    if (this.props.onInputValueChange) {\n      this.props.onInputValueChange(newValue, composing);\n    }\n  };\n  /**\n   * Returns a string that should be used as the display value.\n   * It evaluates this based on whether or not the suggested value starts with the input value\n   * and whether or not autofill is enabled.\n   * @param inputValue - the value that the input currently has.\n   * @param suggestedDisplayValue - the possible full value\n   */\n\n\n  Autofill.prototype._getDisplayValue = function (inputValue, suggestedDisplayValue) {\n    var displayValue = inputValue;\n\n    if (suggestedDisplayValue && inputValue && this._doesTextStartWith(suggestedDisplayValue, displayValue) && this._autoFillEnabled) {\n      displayValue = suggestedDisplayValue;\n    }\n\n    return displayValue;\n  };\n\n  Autofill.prototype._doesTextStartWith = function (text, startWith) {\n    if (!text || !startWith) {\n      return false;\n    }\n\n    return text.toLocaleLowerCase().indexOf(startWith.toLocaleLowerCase()) === 0;\n  };\n\n  Autofill.defaultProps = {\n    enableAutofillOnKeyPress: [KeyCodes.down, KeyCodes.up]\n  };\n  return Autofill;\n}(React.Component);\n\nexport { Autofill };\n/**\n *  @deprecated do not use.\n * {@docCategory Autofill}\n */\n\nvar BaseAutoFill =\n/** @class */\nfunction (_super) {\n  __extends(BaseAutoFill, _super);\n\n  function BaseAutoFill() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return BaseAutoFill;\n}(Autofill);\n\nexport { BaseAutoFill };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,eAAnC,EAAoDC,MAApD,EAA4DC,KAA5D,EAAmEC,sBAAnE,QAAiG,iBAAjG;AAMA,IAAMC,iBAAiB,GAAG,SAA1B;AACA,IAAMC,kBAAkB,GAAG,UAA3B;AAEA;;;;AAGA;AAAA;AAAA;AAA8BC;;AAW5B,oBAAYC,KAAZ,EAAiC;AAAjC,gBACEC,kBAAMD,KAAN,KAAY,IADd;;AANQE,0BAAgBZ,KAAK,CAACa,SAAN,EAAhB;AACAD,6BAAmB,IAAnB;AAEAA,yBAAwB,KAAxB,CAGyB,CA8IjC;AACA;AACA;;AACQA,gCAAsB,UAACE,EAAD,EAA6C;AACzEF,WAAI,CAACG,YAAL,GAAoB,IAApB;AACAH,WAAI,CAACI,gBAAL,GAAwB,KAAxB;AACD,KAHO,CAjJyB,CAsJjC;AACA;AACA;;;AACQJ,iCAAuB;AAC7B,UAAIR,MAAM,EAAV,EAAc;AACZQ,aAAI,CAACK,YAAL,CAAkBL,KAAI,CAACM,qBAAL,EAAlB,EAAgD,IAAhD;AACD;AACF,KAJO,CAzJyB,CA+JjC;AACA;AACA;;;AACQN,8BAAoB,UAACE,EAAD,EAA6C;AACvE,UAAMK,UAAU,GAAGP,KAAI,CAACM,qBAAL,EAAnB;;AACAN,WAAI,CAACQ,kBAAL,CAAwBD,UAAxB,EAAoCP,KAAI,CAACS,KAAzC,EAAgD,KAAhD,EAAuD,IAAvD;;AACAT,WAAI,CAACG,YAAL,GAAoB,KAApB,CAHuE,CAIvE;;AACAH,WAAI,CAACU,MAAL,CAAYC,UAAZ,CAAuB;AACrB;AACA;AACA;AACAX,aAAI,CAACK,YAAL,CAAkBL,KAAI,CAACM,qBAAL,EAAlB,EAAgD,KAAhD;AACD,OALD,EAKG,CALH;AAMD,KAXO;;AAaAN,qBAAW;AACjB,UAAIA,KAAI,CAACY,MAAL,IAAeZ,KAAI,CAACY,MAAL,KAAgB,EAA/B,IAAqCZ,KAAI,CAACI,gBAA9C,EAAgE;AAC9DJ,aAAI,CAACI,gBAAL,GAAwB,KAAxB;AACD;AACF,KAJO;;AAMAJ,uBAAa,UAACE,EAAD,EAA0C;AAC7D,UAAIF,KAAI,CAACF,KAAL,CAAWe,SAAf,EAA0B;AACxBb,aAAI,CAACF,KAAL,CAAWe,SAAX,CAAqBX,EAArB;AACD,OAH4D,CAK7D;AACA;;;AACA,UAAI,CAAEA,EAAE,CAACY,WAAH,CAAuBC,WAA7B,EAA0C;AACxC,gBAAQb,EAAE,CAACc,KAAX;AACE,eAAK3B,QAAQ,CAAC4B,SAAd;AACEjB,iBAAI,CAACI,gBAAL,GAAwB,KAAxB;AACA;;AACF,eAAKf,QAAQ,CAAC6B,IAAd;AACA,eAAK7B,QAAQ,CAAC8B,KAAd;AACE,gBAAInB,KAAI,CAACI,gBAAT,EAA2B;AACzBJ,mBAAI,CAACY,MAAL,GAAcZ,KAAI,CAACoB,KAAL,CAAWC,YAAzB;AACArB,mBAAI,CAACI,gBAAL,GAAwB,KAAxB;AACD;;AACD;;AACF;AACE,gBAAI,CAACJ,KAAI,CAACI,gBAAV,EAA4B;AAC1B,kBAAIJ,KAAI,CAACF,KAAL,CAAWwB,wBAAX,CAAqCC,OAArC,CAA6CrB,EAAE,CAACc,KAAhD,MAA2D,CAAC,CAAhE,EAAmE;AACjEhB,qBAAI,CAACI,gBAAL,GAAwB,IAAxB;AACD;AACF;;AACD;AAjBJ;AAmBD;AACF,KA5BO;;AA8BAJ,4BAAkB,UAACE,EAAD,EAAiC;AACzD,UAAMO,KAAK,GAAWT,KAAI,CAACM,qBAAL,CAA2BJ,EAA3B,CAAtB;;AAEA,UAAI,CAACF,KAAI,CAACG,YAAV,EAAwB;AACtBH,aAAI,CAACQ,kBAAL,CAAwBC,KAAxB,EAA+BT,KAAI,CAACY,MAApC,EAA6CV,EAAE,CAACY,WAAH,CAAuBC,WAApE;AACD,OALwD,CAOzD;;;AACA,UAAI,EAAEvB,MAAM,MAAMQ,KAAI,CAACG,YAAnB,CAAJ,EAAsC;AACpC,YAAMqB,oBAAoB,GAAItB,EAAE,CAACY,WAAH,CAAuBC,WAArD;AACA,YAAMA,WAAW,GAAGS,oBAAoB,KAAKC,SAAzB,GAAqCzB,KAAI,CAACG,YAA1C,GAAyDqB,oBAA7E;;AACAxB,aAAI,CAACK,YAAL,CAAkBI,KAAlB,EAAyBM,WAAzB;AACD;AACF,KAbO;;AAeAf,uBAAa;AACnB;AACA;AACA;AACD,KAJO;AA8CR;;;;;;AAIQA,yBAAe,UAAC0B,QAAD,EAAmBC,SAAnB,EAAqC;AAC1D;AACA;AACA,UAAI,CAACD,QAAD,IAAaA,QAAQ,KAAK1B,KAAI,CAACY,MAAnC,EAA2C;AACzC;AACD;;AACDZ,WAAI,CAACY,MAAL,GAAcZ,KAAI,CAACF,KAAL,CAAW8B,aAAX,GAA2B5B,KAAI,CAACF,KAAL,CAAW8B,aAAX,CAAyBF,QAAzB,EAAmCC,SAAnC,CAA3B,GAA2ED,QAAzF;;AACA1B,WAAI,CAAC6B,QAAL,CACE;AACER,oBAAY,EAAErB,KAAI,CAAC8B,gBAAL,CAAsB9B,KAAI,CAACY,MAA3B,EAAmCZ,KAAI,CAACF,KAAL,CAAWiC,qBAA9C;AADhB,OADF,EAIE;AAAM,oBAAI,CAACC,kBAAL,CAAwBhC,KAAI,CAACY,MAA7B,EAAqCe,SAArC;AAA+C,OAJvD;AAMD,KAbO;;AAjRNjC,0BAAsB,CAACM,KAAD,CAAtB;AACAA,SAAI,CAACU,MAAL,GAAc,IAAIjB,KAAJ,CAAUO,KAAV,CAAd;AAEAA,SAAI,CAACY,MAAL,GAAcd,KAAK,CAACmC,mBAAN,IAA6B,EAA3C;AACAjC,SAAI,CAACoB,KAAL,GAAa;AACXC,kBAAY,EAAEvB,KAAK,CAACmC,mBAAN,IAA6B;AADhC,KAAb;;AAGD;;AAEDC,wBAAWC,kBAAX,EAAW,gBAAX,EAAyB;SAAzB;AACE,UAAI,KAAKC,aAAL,CAAmBC,OAAvB,EAAgC;AAC9B,YAAMC,YAAY,GAAG,KAAKF,aAAL,CAAmBC,OAAxC;;AACA,YAAIC,YAAY,CAACC,kBAAb,KAAoC5C,iBAAxC,EAA2D;AACzD,iBAAO2C,YAAY,CAACE,YAApB;AACD,SAFD,MAEO;AACL,iBAAOF,YAAY,CAACG,cAApB;AACD;AACF,OAPD,MAOO;AACL,eAAO,CAAC,CAAR;AACD;AACF,KAXwB;oBAAA;;AAAA,GAAzB;AAaAP,wBAAWC,kBAAX,EAAW,iBAAX,EAA0B;SAA1B;AACE,aAAOO,OAAO,CAAC,KAAKJ,YAAL,IAAqB,KAAKA,YAAL,CAAkBG,cAAlB,KAAqC,KAAKH,YAAL,CAAkBE,YAA7E,CAAd;AACD,KAFyB;oBAAA;;AAAA,GAA1B;AAIAN,wBAAWC,kBAAX,EAAW,OAAX,EAAgB;SAAhB;AACE,aAAO,KAAKvB,MAAZ;AACD,KAFe;oBAAA;;AAAA,GAAhB;AAIAsB,wBAAWC,kBAAX,EAAW,gBAAX,EAAyB;SAAzB;AACE,aAAO,KAAKC,aAAL,CAAmBC,OAAnB,GAA6B,KAAKD,aAAL,CAAmBC,OAAnB,CAA2BI,cAAxD,GAAyE,CAAC,CAAjF;AACD,KAFwB;oBAAA;;AAAA,GAAzB;AAIAP,wBAAWC,kBAAX,EAAW,cAAX,EAAuB;SAAvB;AACE,aAAO,KAAKC,aAAL,CAAmBC,OAAnB,GAA6B,KAAKD,aAAL,CAAmBC,OAAnB,CAA2BG,YAAxD,GAAuE,CAAC,CAA/E;AACD,KAFsB;oBAAA;;AAAA,GAAvB;AAIAN,wBAAWC,kBAAX,EAAW,cAAX,EAAuB;SAAvB;AACE,aAAO,KAAKC,aAAL,CAAmBC,OAA1B;AACD,KAFsB;oBAAA;;AAAA,GAAvB;;AAIOF,wDAAP,UAAwCQ,SAAxC,EAAiE;AAC/D,QAAI,KAAK7C,KAAL,CAAW8C,6BAAf,EAA8C;AAC5C,UAAMC,iBAAiB,GAAG,KAAK/C,KAAL,CAAW8C,6BAAX,EAA1B,CAD4C,CAE5C;AACA;;AACA,UAAIC,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAKjC,MAA7D,EAAqE;AACnE,aAAKA,MAAL,GAAciC,iBAAd;AACD;AACF;;AAED,QAAMC,eAAe,GAAG,KAAKhB,gBAAL,CAAsB,KAAKlB,MAA3B,EAAmC+B,SAAS,CAACZ,qBAA7C,CAAxB;;AAEA,QAAI,OAAOe,eAAP,KAA2B,QAA/B,EAAyC;AACvC,WAAKjB,QAAL,CAAc;AAAER,oBAAY,EAAEyB;AAAhB,OAAd;AACD;AACF,GAfM;;AAiBAX,0CAAP;AACE,QAAM1B,KAAK,GAAG,KAAKG,MAAnB;AACM;AAAA,QAAEmB,gDAAF;AAAA,QAAyBgB,kGAAzB;AAAA,QAAyEC,gDAAzE;AACN,QAAIC,eAAe,GAAG,CAAtB;;AAEA,QAAID,qBAAJ,EAA2B;AACzB;AACD;;AAED,QACE,KAAK5C,gBAAL,IACAK,KADA,IAEAsB,qBAFA,IAGA,KAAKmB,kBAAL,CAAwBnB,qBAAxB,EAA+CtB,KAA/C,CAJF,EAKE;AACA,UAAI0C,qBAAqB,GAAG,KAA5B;;AAEA,UAAIJ,8CAAJ,EAAoD;AAClDI,6BAAqB,GAAGJ,8CAA8C,EAAtE;AACD;;AAED,UAAII,qBAAqB,IAAI,KAAKf,aAAL,CAAmBC,OAAhD,EAAyD;AACvD,aAAKD,aAAL,CAAmBC,OAAnB,CAA2Be,iBAA3B,CAA6C,CAA7C,EAAgDrB,qBAAqB,CAACsB,MAAtE,EAA8EzD,kBAA9E;AACD,OAFD,MAEO;AACL,eACEqD,eAAe,GAAGxC,KAAK,CAAC4C,MAAxB,IACA5C,KAAK,CAACwC,eAAD,CAAL,CAAuBK,iBAAvB,OAA+CvB,qBAAqB,CAACkB,eAAD,CAArB,CAAuCK,iBAAvC,EAFjD,EAGE;AACAL,yBAAe;AAChB;;AACD,YAAIA,eAAe,GAAG,CAAlB,IAAuB,KAAKb,aAAL,CAAmBC,OAA9C,EAAuD;AACrD,eAAKD,aAAL,CAAmBC,OAAnB,CAA2Be,iBAA3B,CACEH,eADF,EAEElB,qBAAqB,CAACsB,MAFxB,EAGEzD,kBAHF;AAKD;AACF;AACF;AACF,GAvCM;;AAyCAuC,4CAAP;AACE,SAAKzB,MAAL,CAAY6C,OAAZ;AACD,GAFM;;AAIApB,8BAAP;AACU;AAER,QAAMqB,WAAW,GAAGlE,cAAc,CAA8C,KAAKQ,KAAnD,EAA0DP,eAA1D,CAAlC;AACA,WACEH;AACEqE,oBAAc,EAAC,KADjB;AAEEC,kBAAY,EAAC,KAFf;AAEoB,2BACC;AAHrB,OAIMF,WAJN,EAIiB;AACfG,SAAG,EAAE,KAAKvB,aADK;AAEf3B,WAAK,EAAEY,YAFQ;AAGfuC,wBAAkB,EAAE,KAAKC,mBAHV;AAIfC,yBAAmB,EAAE,KAAKC,oBAJX;AAKfC,sBAAgB,EAAE,KAAKC,iBALR;AAMf;AACAC,cAAQ,EAAE,KAAKC,UAPA;AAQfC,aAAO,EAAE,KAAKC,eARC;AASfxD,eAAS,EAAE,KAAKyD,UATD;AAUfC,aAAO,EAAE,KAAKzE,KAAL,CAAWyE,OAAX,GAAqB,KAAKzE,KAAL,CAAWyE,OAAhC,GAA0C,KAAKC,QAVzC;AAUiD,uBACjD;AAXA,KAJjB,EADF;AAmBD,GAvBM;;AAyBArC,6BAAP;AACE,SAAKC,aAAL,CAAmBC,OAAnB,IAA8B,KAAKD,aAAL,CAAmBC,OAAnB,CAA2BoC,KAA3B,EAA9B;AACD,GAFM;;AAIAtC,6BAAP;AACE,SAAK/B,gBAAL,GAAwB,IAAxB;;AACA,SAAKC,YAAL,CAAkB,EAAlB,EAAsB,KAAtB;;AACA,SAAK+B,aAAL,CAAmBC,OAAnB,IAA8B,KAAKD,aAAL,CAAmBC,OAAnB,CAA2Be,iBAA3B,CAA6C,CAA7C,EAAgD,CAAhD,CAA9B;AACD,GAJM;;AAgGCjB,6CAAR,UAA8BjC,EAA9B,EAA+D;AAC7D,QAAIA,EAAE,IAAIA,EAAE,CAACwE,MAAT,IAAoBxE,EAAE,CAACwE,MAAH,CAAkBjE,KAA1C,EAAiD;AAC/C,aAAQP,EAAE,CAACwE,MAAH,CAAkBjE,KAA1B;AACD,KAFD,MAEO,IAAI,KAAK6B,YAAL,IAAqB,KAAKA,YAAL,CAAkB7B,KAA3C,EAAkD;AACvD,aAAO,KAAK6B,YAAL,CAAkB7B,KAAzB;AACD,KAFM,MAEA;AACL,aAAO,EAAP;AACD;AACF,GARO;AAUR;;;;;;;;;;;;;AAWQ0B,0CAAR,UAA2BT,QAA3B,EAA6CiD,QAA7C,EAA+D5D,WAA/D,EAAsF6D,UAAtF,EAA0G;AACxG,QACE,CAAC7D,WAAD,IACAW,QADA,IAEA,KAAKU,aAAL,CAAmBC,OAFnB,IAGA,KAAKD,aAAL,CAAmBC,OAAnB,CAA2BI,cAA3B,KAA8Cf,QAAQ,CAAC2B,MAHvD,IAIA,CAAC,KAAKjD,gBAJN,KAKCsB,QAAQ,CAAC2B,MAAT,GAAkBsB,QAAQ,CAACtB,MAA3B,IAAqCuB,UALtC,CADF,EAOE;AACA,WAAKxE,gBAAL,GAAwB,IAAxB;AACD;AACF,GAXO;;AAaA+B,0CAAR,UAA2BT,QAA3B,EAA6CC,SAA7C,EAA+D;AAC7D,QAAI,KAAK7B,KAAL,CAAW+E,kBAAf,EAAmC;AACjC,WAAK/E,KAAL,CAAW+E,kBAAX,CAA8BnD,QAA9B,EAAwCC,SAAxC;AACD;AACF,GAJO;AAyBR;;;;;;;;;AAOQQ,wCAAR,UAAyB5B,UAAzB,EAA6CwB,qBAA7C,EAA2E;AACzE,QAAIV,YAAY,GAAGd,UAAnB;;AACA,QACEwB,qBAAqB,IACrBxB,UADA,IAEA,KAAK2C,kBAAL,CAAwBnB,qBAAxB,EAA+CV,YAA/C,CAFA,IAGA,KAAKjB,gBAJP,EAKE;AACAiB,kBAAY,GAAGU,qBAAf;AACD;;AACD,WAAOV,YAAP;AACD,GAXO;;AAaAc,0CAAR,UAA2B2C,IAA3B,EAAyCC,SAAzC,EAA0D;AACxD,QAAI,CAACD,IAAD,IAAS,CAACC,SAAd,EAAyB;AACvB,aAAO,KAAP;AACD;;AACD,WAAOD,IAAI,CAACxB,iBAAL,GAAyB/B,OAAzB,CAAiCwD,SAAS,CAACzB,iBAAV,EAAjC,MAAoE,CAA3E;AACD,GALO;;AAjUMnB,0BAAe;AAC3Bb,4BAAwB,EAAE,CAACjC,QAAQ,CAAC2F,IAAV,EAAgB3F,QAAQ,CAAC4F,EAAzB;AADC,GAAf;AAuUhB;AAAC,CAxUD,CAA8B7F,KAAK,CAAC8F,SAApC;;SAAa/C;AA0Ub;;;;;AAIA;AAAA;AAAA;AAAkCtC;;AAAlC;;AAA6C;;AAAD;AAAC,CAA7C,CAAkCsC,QAAlC","names":["React","KeyCodes","getNativeProps","inputProperties","isIE11","Async","initializeComponentRef","SELECTION_FORWARD","SELECTION_BACKWARD","__extends","props","_super","_this","createRef","ev","_isComposing","_autoFillEnabled","_updateValue","_getCurrentInputValue","inputValue","_tryEnableAutofill","value","_async","setTimeout","_value","onKeyDown","nativeEvent","isComposing","which","backspace","left","right","state","displayValue","enableAutofillOnKeyPress","indexOf","nativeEventComposing","undefined","newValue","composing","onInputChange","setState","_getDisplayValue","suggestedDisplayValue","_notifyInputChange","defaultVisibleValue","Object","Autofill","_inputElement","current","inputElement","selectionDirection","selectionEnd","selectionStart","Boolean","nextProps","updateValueInWillReceiveProps","updatedInputValue","newDisplayValue","shouldSelectFullInputValueInComponentDidUpdate","preventValueSelection","differenceIndex","_doesTextStartWith","shouldSelectFullRange","setSelectionRange","length","toLocaleLowerCase","dispose","nativeProps","autoCapitalize","autoComplete","ref","onCompositionStart","_onCompositionStart","onCompositionUpdate","_onCompositionUpdate","onCompositionEnd","_onCompositionEnd","onChange","_onChanged","onInput","_onInputChanged","_onKeyDown","onClick","_onClick","focus","target","oldValue","isComposed","onInputValueChange","text","startWith","down","up","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Autofill\\Autofill.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IAutofillProps, IAutofill } from './Autofill.types';\nimport { KeyCodes, getNativeProps, inputProperties, isIE11, Async, initializeComponentRef } from '../../Utilities';\n\nexport interface IAutofillState {\n  displayValue?: string;\n}\n\nconst SELECTION_FORWARD = 'forward';\nconst SELECTION_BACKWARD = 'backward';\n\n/**\n * {@docCategory Autofill}\n */\nexport class Autofill extends React.Component<IAutofillProps, IAutofillState> implements IAutofill {\n  public static defaultProps = {\n    enableAutofillOnKeyPress: [KeyCodes.down, KeyCodes.up] as KeyCodes[],\n  };\n\n  private _inputElement = React.createRef<HTMLInputElement>();\n  private _autoFillEnabled = true;\n  private _value: string;\n  private _isComposing: boolean = false;\n  private _async: Async;\n\n  constructor(props: IAutofillProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._value = props.defaultVisibleValue || '';\n    this.state = {\n      displayValue: props.defaultVisibleValue || '',\n    };\n  }\n\n  public get cursorLocation(): number | null {\n    if (this._inputElement.current) {\n      const inputElement = this._inputElement.current;\n      if (inputElement.selectionDirection !== SELECTION_FORWARD) {\n        return inputElement.selectionEnd;\n      } else {\n        return inputElement.selectionStart;\n      }\n    } else {\n      return -1;\n    }\n  }\n\n  public get isValueSelected(): boolean {\n    return Boolean(this.inputElement && this.inputElement.selectionStart !== this.inputElement.selectionEnd);\n  }\n\n  public get value(): string {\n    return this._value;\n  }\n\n  public get selectionStart(): number | null {\n    return this._inputElement.current ? this._inputElement.current.selectionStart : -1;\n  }\n\n  public get selectionEnd(): number | null {\n    return this._inputElement.current ? this._inputElement.current.selectionEnd : -1;\n  }\n\n  public get inputElement(): HTMLInputElement | null {\n    return this._inputElement.current;\n  }\n\n  public UNSAFE_componentWillReceiveProps(nextProps: IAutofillProps): void {\n    if (this.props.updateValueInWillReceiveProps) {\n      const updatedInputValue = this.props.updateValueInWillReceiveProps();\n      // Don't update if we have a null value or the value isn't changing\n      // the value should still update if an empty string is passed in\n      if (updatedInputValue !== null && updatedInputValue !== this._value) {\n        this._value = updatedInputValue;\n      }\n    }\n\n    const newDisplayValue = this._getDisplayValue(this._value, nextProps.suggestedDisplayValue);\n\n    if (typeof newDisplayValue === 'string') {\n      this.setState({ displayValue: newDisplayValue });\n    }\n  }\n\n  public componentDidUpdate() {\n    const value = this._value;\n    const { suggestedDisplayValue, shouldSelectFullInputValueInComponentDidUpdate, preventValueSelection } = this.props;\n    let differenceIndex = 0;\n\n    if (preventValueSelection) {\n      return;\n    }\n\n    if (\n      this._autoFillEnabled &&\n      value &&\n      suggestedDisplayValue &&\n      this._doesTextStartWith(suggestedDisplayValue, value)\n    ) {\n      let shouldSelectFullRange = false;\n\n      if (shouldSelectFullInputValueInComponentDidUpdate) {\n        shouldSelectFullRange = shouldSelectFullInputValueInComponentDidUpdate();\n      }\n\n      if (shouldSelectFullRange && this._inputElement.current) {\n        this._inputElement.current.setSelectionRange(0, suggestedDisplayValue.length, SELECTION_BACKWARD);\n      } else {\n        while (\n          differenceIndex < value.length &&\n          value[differenceIndex].toLocaleLowerCase() === suggestedDisplayValue[differenceIndex].toLocaleLowerCase()\n        ) {\n          differenceIndex++;\n        }\n        if (differenceIndex > 0 && this._inputElement.current) {\n          this._inputElement.current.setSelectionRange(\n            differenceIndex,\n            suggestedDisplayValue.length,\n            SELECTION_BACKWARD,\n          );\n        }\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { displayValue } = this.state;\n\n    const nativeProps = getNativeProps<React.InputHTMLAttributes<HTMLInputElement>>(this.props, inputProperties);\n    return (\n      <input\n        autoCapitalize=\"off\"\n        autoComplete=\"off\"\n        aria-autocomplete={'both'}\n        {...nativeProps}\n        ref={this._inputElement}\n        value={displayValue}\n        onCompositionStart={this._onCompositionStart}\n        onCompositionUpdate={this._onCompositionUpdate}\n        onCompositionEnd={this._onCompositionEnd}\n        // TODO (Fabric 8?) - switch to calling only onChange. See notes in TextField._onInputChange.\n        onChange={this._onChanged}\n        onInput={this._onInputChanged}\n        onKeyDown={this._onKeyDown}\n        onClick={this.props.onClick ? this.props.onClick : this._onClick}\n        data-lpignore={true}\n      />\n    );\n  }\n\n  public focus() {\n    this._inputElement.current && this._inputElement.current.focus();\n  }\n\n  public clear() {\n    this._autoFillEnabled = true;\n    this._updateValue('', false);\n    this._inputElement.current && this._inputElement.current.setSelectionRange(0, 0);\n  }\n\n  // Composition events are used when the character/text requires several keystrokes to be completed.\n  // Some examples of this are mobile text input and langauges like Japanese or Arabic.\n  // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n  private _onCompositionStart = (ev: React.CompositionEvent<HTMLInputElement>) => {\n    this._isComposing = true;\n    this._autoFillEnabled = false;\n  };\n\n  // Composition events are used when the character/text requires several keystrokes to be completed.\n  // Some examples of this are mobile text input and languages like Japanese or Arabic.\n  // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n  private _onCompositionUpdate = () => {\n    if (isIE11()) {\n      this._updateValue(this._getCurrentInputValue(), true);\n    }\n  };\n\n  // Composition events are used when the character/text requires several keystrokes to be completed.\n  // Some examples of this are mobile text input and langauges like Japanese or Arabic.\n  // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n  private _onCompositionEnd = (ev: React.CompositionEvent<HTMLInputElement>) => {\n    const inputValue = this._getCurrentInputValue();\n    this._tryEnableAutofill(inputValue, this.value, false, true);\n    this._isComposing = false;\n    // Due to timing, this needs to be async, otherwise no text will be selected.\n    this._async.setTimeout(() => {\n      // it's technically possible that the value of _isComposing is reset during this timeout,\n      // so explicitly trigger this with composing=true here, since it is supposed to be the\n      // update for composition end\n      this._updateValue(this._getCurrentInputValue(), false);\n    }, 0);\n  };\n\n  private _onClick = () => {\n    if (this._value && this._value !== '' && this._autoFillEnabled) {\n      this._autoFillEnabled = false;\n    }\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    // If the event is actively being composed, then don't alert autofill.\n    // Right now typing does not have isComposing, once that has been fixed any should be removed.\n    if (!(ev.nativeEvent as any).isComposing) {\n      switch (ev.which) {\n        case KeyCodes.backspace:\n          this._autoFillEnabled = false;\n          break;\n        case KeyCodes.left:\n        case KeyCodes.right:\n          if (this._autoFillEnabled) {\n            this._value = this.state.displayValue!;\n            this._autoFillEnabled = false;\n          }\n          break;\n        default:\n          if (!this._autoFillEnabled) {\n            if (this.props.enableAutofillOnKeyPress!.indexOf(ev.which) !== -1) {\n              this._autoFillEnabled = true;\n            }\n          }\n          break;\n      }\n    }\n  };\n\n  private _onInputChanged = (ev: React.FormEvent<HTMLElement>) => {\n    const value: string = this._getCurrentInputValue(ev);\n\n    if (!this._isComposing) {\n      this._tryEnableAutofill(value, this._value, (ev.nativeEvent as any).isComposing);\n    }\n\n    // If it is not IE11 and currently composing, update the value\n    if (!(isIE11() && this._isComposing)) {\n      const nativeEventComposing = (ev.nativeEvent as any).isComposing;\n      const isComposing = nativeEventComposing === undefined ? this._isComposing : nativeEventComposing;\n      this._updateValue(value, isComposing);\n    }\n  };\n\n  private _onChanged = (): void => {\n    // Swallow this event, we don't care about it\n    // We must provide it because React PropTypes marks it as required, but onInput serves the correct purpose\n    return;\n  };\n\n  private _getCurrentInputValue(ev?: React.FormEvent<HTMLElement>): string {\n    if (ev && ev.target && (ev.target as any).value) {\n      return (ev.target as any).value;\n    } else if (this.inputElement && this.inputElement.value) {\n      return this.inputElement.value;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Attempts to enable autofill. Whether or not autofill is enabled depends on the input value,\n   * whether or not any text is selected, and only if the new input value is longer than the old input value.\n   * Autofill should never be set to true if the value is composing. Once compositionEnd is called, then\n   * it should be completed.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent for more information on composition.\n   * @param newValue - new input value\n   * @param oldValue - old input value\n   * @param isComposing - if true then the text is actively being composed and it has not completed.\n   * @param isComposed - if the text is a composed text value.\n   */\n  private _tryEnableAutofill(newValue: string, oldValue: string, isComposing?: boolean, isComposed?: boolean): void {\n    if (\n      !isComposing &&\n      newValue &&\n      this._inputElement.current &&\n      this._inputElement.current.selectionStart === newValue.length &&\n      !this._autoFillEnabled &&\n      (newValue.length > oldValue.length || isComposed)\n    ) {\n      this._autoFillEnabled = true;\n    }\n  }\n\n  private _notifyInputChange(newValue: string, composing: boolean): void {\n    if (this.props.onInputValueChange) {\n      this.props.onInputValueChange(newValue, composing);\n    }\n  }\n\n  /**\n   * Updates the current input value as well as getting a new display value.\n   * @param newValue - The new value from the input\n   */\n  private _updateValue = (newValue: string, composing: boolean) => {\n    // Only proceed if the value is nonempty and is different from the old value\n    // This is to work around the fact that, in IE 11, inputs with a placeholder fire an onInput event on focus\n    if (!newValue && newValue === this._value) {\n      return;\n    }\n    this._value = this.props.onInputChange ? this.props.onInputChange(newValue, composing) : newValue;\n    this.setState(\n      {\n        displayValue: this._getDisplayValue(this._value, this.props.suggestedDisplayValue),\n      },\n      () => this._notifyInputChange(this._value, composing),\n    );\n  };\n\n  /**\n   * Returns a string that should be used as the display value.\n   * It evaluates this based on whether or not the suggested value starts with the input value\n   * and whether or not autofill is enabled.\n   * @param inputValue - the value that the input currently has.\n   * @param suggestedDisplayValue - the possible full value\n   */\n  private _getDisplayValue(inputValue: string, suggestedDisplayValue?: string): string {\n    let displayValue = inputValue;\n    if (\n      suggestedDisplayValue &&\n      inputValue &&\n      this._doesTextStartWith(suggestedDisplayValue, displayValue) &&\n      this._autoFillEnabled\n    ) {\n      displayValue = suggestedDisplayValue;\n    }\n    return displayValue;\n  }\n\n  private _doesTextStartWith(text: string, startWith: string): boolean {\n    if (!text || !startWith) {\n      return false;\n    }\n    return text.toLocaleLowerCase().indexOf(startWith.toLocaleLowerCase()) === 0;\n  }\n}\n\n/**\n *  @deprecated do not use.\n * {@docCategory Autofill}\n */\nexport class BaseAutoFill extends Autofill {}\n"]},"metadata":{},"sourceType":"module"}