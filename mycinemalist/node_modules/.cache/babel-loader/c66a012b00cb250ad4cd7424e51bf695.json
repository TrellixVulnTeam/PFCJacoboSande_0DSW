{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, KeyCodes, classNamesFunction, css, styled } from '../../../Utilities';\nimport { CommandButton } from '../../../Button';\nimport { Spinner } from '../../../Spinner';\nimport { Announced } from '../../../Announced';\nimport { SuggestionActionType } from './Suggestions.types';\nimport { SuggestionsItem } from './SuggestionsItem';\nimport { getStyles as suggestionsItemStyles } from './SuggestionsItem.styles';\nimport * as stylesImport from './Suggestions.scss';\nvar legacyStyles = stylesImport;\nvar getClassNames = classNamesFunction();\nvar StyledSuggestionsItem = styled(SuggestionsItem, suggestionsItemStyles, undefined, {\n  scope: 'SuggestionItem'\n});\n/**\n * {@docCategory Pickers}\n */\n\nvar Suggestions =\n/** @class */\nfunction (_super) {\n  __extends(Suggestions, _super);\n\n  function Suggestions(suggestionsProps) {\n    var _this = _super.call(this, suggestionsProps) || this;\n\n    _this._forceResolveButton = React.createRef();\n    _this._searchForMoreButton = React.createRef();\n    _this._selectedElement = React.createRef();\n    /**\n     * Returns true if the event was handled, false otherwise\n     */\n\n    _this.tryHandleKeyDown = function (keyCode, currentSuggestionIndex) {\n      var isEventHandled = false;\n      var newSelectedActionType = null;\n      var currentSelectedAction = _this.state.selectedActionType;\n      var suggestionLength = _this.props.suggestions.length;\n\n      if (keyCode === KeyCodes.down) {\n        switch (currentSelectedAction) {\n          case SuggestionActionType.forceResolve:\n            if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = SuggestionActionType.none;\n            } else if (_this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            } else {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n\n            break;\n\n          case SuggestionActionType.searchMore:\n            if (_this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            } else if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = SuggestionActionType.none;\n            } else {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            }\n\n            break;\n\n          case SuggestionActionType.none:\n            if (currentSuggestionIndex === -1 && _this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n\n            break;\n        }\n      } else if (keyCode === KeyCodes.up) {\n        switch (currentSelectedAction) {\n          case SuggestionActionType.forceResolve:\n            if (_this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            } else if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = SuggestionActionType.none;\n            }\n\n            break;\n\n          case SuggestionActionType.searchMore:\n            if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n\n              newSelectedActionType = SuggestionActionType.none;\n            } else if (_this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n\n            break;\n\n          case SuggestionActionType.none:\n            if (currentSuggestionIndex === -1 && _this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            }\n\n            break;\n        }\n      }\n\n      if (newSelectedActionType !== null) {\n        _this.setState({\n          selectedActionType: newSelectedActionType\n        });\n\n        isEventHandled = true;\n      }\n\n      return isEventHandled;\n    };\n\n    _this._getAlertText = function () {\n      var _a = _this.props,\n          isLoading = _a.isLoading,\n          isSearching = _a.isSearching,\n          suggestions = _a.suggestions,\n          suggestionsAvailableAlertText = _a.suggestionsAvailableAlertText,\n          noResultsFoundText = _a.noResultsFoundText;\n\n      if (!isLoading && !isSearching) {\n        if (suggestions.length > 0) {\n          return suggestionsAvailableAlertText || '';\n        }\n\n        if (noResultsFoundText) {\n          return noResultsFoundText;\n        }\n      }\n\n      return '';\n    };\n\n    _this._getMoreResults = function () {\n      if (_this.props.onGetMoreResults) {\n        _this.props.onGetMoreResults();\n      }\n    };\n\n    _this._forceResolve = function () {\n      if (_this.props.createGenericItem) {\n        _this.props.createGenericItem();\n      }\n    };\n\n    _this._shouldShowForceResolve = function () {\n      return _this.props.showForceResolve ? _this.props.showForceResolve() : false;\n    };\n\n    _this._onClickTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        _this.props.onSuggestionClick(ev, item, index);\n      };\n    };\n\n    _this._refocusOnSuggestions = function (keyCode) {\n      if (typeof _this.props.refocusSuggestions === 'function') {\n        _this.props.refocusSuggestions(keyCode);\n      }\n    };\n\n    _this._onRemoveTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        var onSuggestionRemove = _this.props.onSuggestionRemove;\n        onSuggestionRemove(ev, item, index);\n        ev.stopPropagation();\n      };\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      selectedActionType: SuggestionActionType.none\n    };\n    return _this;\n  }\n\n  Suggestions.prototype.componentDidMount = function () {\n    this.scrollSelected();\n    this.activeSelectedElement = this._selectedElement ? this._selectedElement.current : null;\n  };\n\n  Suggestions.prototype.componentDidUpdate = function () {\n    // Only scroll to selected element if the selected element has changed. Otherwise do nothing.\n    // This prevents some odd behavior where scrolling the active element out of view and clicking on a selected element\n    // will trigger a focus event and not give the clicked element the click.\n    if (this._selectedElement.current && this.activeSelectedElement !== this._selectedElement.current) {\n      this.scrollSelected();\n      this.activeSelectedElement = this._selectedElement.current;\n    }\n  };\n\n  Suggestions.prototype.render = function () {\n    var _a, _b;\n\n    var _this = this;\n\n    var _c = this.props,\n        forceResolveText = _c.forceResolveText,\n        mostRecentlyUsedHeaderText = _c.mostRecentlyUsedHeaderText,\n        searchForMoreText = _c.searchForMoreText,\n        className = _c.className,\n        moreSuggestionsAvailable = _c.moreSuggestionsAvailable,\n        noResultsFoundText = _c.noResultsFoundText,\n        suggestions = _c.suggestions,\n        isLoading = _c.isLoading,\n        isSearching = _c.isSearching,\n        loadingText = _c.loadingText,\n        onRenderNoResultFound = _c.onRenderNoResultFound,\n        searchingText = _c.searchingText,\n        isMostRecentlyUsedVisible = _c.isMostRecentlyUsedVisible,\n        resultsMaximumNumber = _c.resultsMaximumNumber,\n        resultsFooterFull = _c.resultsFooterFull,\n        resultsFooter = _c.resultsFooter,\n        _d = _c.isResultsFooterVisible,\n        isResultsFooterVisible = _d === void 0 ? true : _d,\n        suggestionsHeaderText = _c.suggestionsHeaderText,\n        suggestionsClassName = _c.suggestionsClassName,\n        theme = _c.theme,\n        styles = _c.styles,\n        suggestionsListId = _c.suggestionsListId; // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from Suggestions class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in BasePicker when the typed Suggestions class is ready to be rendered. If the check\n    // passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n\n    this._classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      suggestionsClassName: suggestionsClassName,\n      forceResolveButtonSelected: this.state.selectedActionType === SuggestionActionType.forceResolve,\n      searchForMoreButtonSelected: this.state.selectedActionType === SuggestionActionType.searchMore\n    }) : {\n      root: css('ms-Suggestions', className, legacyStyles.root),\n      title: css('ms-Suggestions-title', legacyStyles.suggestionsTitle),\n      searchForMoreButton: css('ms-SearchMore-button', legacyStyles.actionButton, (_a = {}, _a['is-selected ' + legacyStyles.buttonSelected] = this.state.selectedActionType === SuggestionActionType.searchMore, _a)),\n      forceResolveButton: css('ms-forceResolve-button', legacyStyles.actionButton, (_b = {}, _b['is-selected ' + legacyStyles.buttonSelected] = this.state.selectedActionType === SuggestionActionType.forceResolve, _b)),\n      suggestionsAvailable: css('ms-Suggestions-suggestionsAvailable', legacyStyles.suggestionsAvailable),\n      suggestionsContainer: css('ms-Suggestions-container', legacyStyles.suggestionsContainer, suggestionsClassName),\n      noSuggestions: css('ms-Suggestions-none', legacyStyles.suggestionsNone)\n    };\n    var spinnerStyles = this._classNames.subComponentStyles ? this._classNames.subComponentStyles.spinner : undefined; // TODO: cleanup after refactor of pickers to composition pattern and remove SASS support.\n\n    var spinnerClassNameOrStyles = styles ? {\n      styles: spinnerStyles\n    } : {\n      className: css('ms-Suggestions-spinner', legacyStyles.suggestionsSpinner)\n    };\n\n    var noResults = function noResults() {\n      return noResultsFoundText ? React.createElement(\"div\", {\n        className: _this._classNames.noSuggestions\n      }, noResultsFoundText) : null;\n    }; // MostRecently Used text should supercede the header text if it's there and available.\n\n\n    var headerText = suggestionsHeaderText;\n\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n\n    var footerTitle = undefined;\n\n    if (isResultsFooterVisible) {\n      footerTitle = suggestions.length >= resultsMaximumNumber ? resultsFooterFull : resultsFooter;\n    }\n\n    var hasNoSuggestions = (!suggestions || !suggestions.length) && !isLoading;\n    var divProps = hasNoSuggestions || isLoading ? {\n      role: 'dialog',\n      id: suggestionsListId\n    } : {};\n    var forceResolveId = this.state.selectedActionType === SuggestionActionType.forceResolve ? 'sug-selectedAction' : undefined;\n    var searchForMoreId = this.state.selectedActionType === SuggestionActionType.searchMore ? 'sug-selectedAction' : undefined;\n    return React.createElement(\"div\", __assign({\n      className: this._classNames.root\n    }, divProps), React.createElement(Announced, {\n      message: this._getAlertText(),\n      \"aria-live\": \"polite\"\n    }), headerText ? React.createElement(\"div\", {\n      className: this._classNames.title\n    }, headerText) : null, forceResolveText && this._shouldShowForceResolve() && React.createElement(CommandButton, {\n      componentRef: this._forceResolveButton,\n      className: this._classNames.forceResolveButton,\n      id: forceResolveId,\n      onClick: this._forceResolve,\n      \"data-automationid\": 'sug-forceResolve'\n    }, forceResolveText), isLoading && React.createElement(Spinner, __assign({}, spinnerClassNameOrStyles, {\n      label: loadingText\n    })), hasNoSuggestions ? onRenderNoResultFound ? onRenderNoResultFound(undefined, noResults) : noResults() : this._renderSuggestions(), searchForMoreText && moreSuggestionsAvailable && React.createElement(CommandButton, {\n      componentRef: this._searchForMoreButton,\n      className: this._classNames.searchForMoreButton,\n      iconProps: {\n        iconName: 'Search'\n      },\n      id: searchForMoreId,\n      onClick: this._getMoreResults,\n      \"data-automationid\": 'sug-searchForMore'\n    }, searchForMoreText), isSearching ? React.createElement(Spinner, __assign({}, spinnerClassNameOrStyles, {\n      label: searchingText\n    })) : null, footerTitle && !moreSuggestionsAvailable && !isMostRecentlyUsedVisible && !isSearching ? React.createElement(\"div\", {\n      className: this._classNames.title\n    }, footerTitle(this.props)) : null);\n  };\n\n  Suggestions.prototype.hasSuggestedAction = function () {\n    return !!this._searchForMoreButton.current || !!this._forceResolveButton.current;\n  };\n\n  Suggestions.prototype.hasSuggestedActionSelected = function () {\n    return this.state.selectedActionType !== SuggestionActionType.none;\n  };\n\n  Suggestions.prototype.executeSelectedAction = function () {\n    switch (this.state.selectedActionType) {\n      case SuggestionActionType.forceResolve:\n        this._forceResolve();\n\n        break;\n\n      case SuggestionActionType.searchMore:\n        this._getMoreResults();\n\n        break;\n    }\n  };\n\n  Suggestions.prototype.focusAboveSuggestions = function () {\n    if (this._forceResolveButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.forceResolve\n      });\n    } else if (this._searchForMoreButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.searchMore\n      });\n    }\n  };\n\n  Suggestions.prototype.focusBelowSuggestions = function () {\n    if (this._searchForMoreButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.searchMore\n      });\n    } else if (this._forceResolveButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.forceResolve\n      });\n    }\n  };\n\n  Suggestions.prototype.focusSearchForMoreButton = function () {\n    if (this._searchForMoreButton.current) {\n      this._searchForMoreButton.current.focus();\n    }\n  }; // TODO get the element to scroll into view properly regardless of direction.\n\n\n  Suggestions.prototype.scrollSelected = function () {\n    if (this._selectedElement.current && this._selectedElement.current.scrollIntoView !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  };\n\n  Suggestions.prototype._renderSuggestions = function () {\n    var _this = this;\n\n    var _a = this.props,\n        onRenderSuggestion = _a.onRenderSuggestion,\n        removeSuggestionAriaLabel = _a.removeSuggestionAriaLabel,\n        suggestionsItemClassName = _a.suggestionsItemClassName,\n        resultsMaximumNumber = _a.resultsMaximumNumber,\n        showRemoveButtons = _a.showRemoveButtons,\n        suggestionsContainerAriaLabel = _a.suggestionsContainerAriaLabel,\n        suggestionsListId = _a.suggestionsListId;\n    var suggestions = this.props.suggestions;\n    var StyledTypedSuggestionsItem = StyledSuggestionsItem;\n    var selectedIndex = -1;\n    suggestions.some(function (element, index) {\n      if (element.selected) {\n        selectedIndex = index;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (resultsMaximumNumber) {\n      suggestions = selectedIndex >= resultsMaximumNumber ? suggestions.slice(selectedIndex - resultsMaximumNumber + 1, selectedIndex + 1) : suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: this._classNames.suggestionsContainer,\n      id: suggestionsListId,\n      role: \"listbox\",\n      \"aria-label\": suggestionsContainerAriaLabel\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(\"div\", {\n        ref: suggestion.selected ? _this._selectedElement : undefined,\n        key: suggestion.item.key ? suggestion.item.key : index\n      }, React.createElement(StyledTypedSuggestionsItem, {\n        suggestionModel: suggestion,\n        RenderSuggestion: onRenderSuggestion,\n        onClick: _this._onClickTypedSuggestionsItem(suggestion.item, index),\n        className: suggestionsItemClassName,\n        showRemoveButton: showRemoveButtons,\n        removeButtonAriaLabel: removeSuggestionAriaLabel,\n        onRemoveItem: _this._onRemoveTypedSuggestionsItem(suggestion.item, index),\n        id: 'sug-' + index\n      }));\n    }));\n  };\n\n  return Suggestions;\n}(React.Component);\n\nexport { Suggestions };","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","KeyCodes","classNamesFunction","css","styled","CommandButton","Spinner","Announced","SuggestionActionType","SuggestionsItem","getStyles","suggestionsItemStyles","stylesImport","legacyStyles","getClassNames","StyledSuggestionsItem","undefined","scope","__extends","suggestionsProps","_super","_this","createRef","keyCode","currentSuggestionIndex","isEventHandled","newSelectedActionType","currentSelectedAction","state","selectedActionType","suggestionLength","props","suggestions","length","down","forceResolve","_refocusOnSuggestions","none","_searchForMoreButton","current","searchMore","_forceResolveButton","up","setState","isLoading","isSearching","suggestionsAvailableAlertText","noResultsFoundText","onGetMoreResults","createGenericItem","showForceResolve","item","index","ev","onSuggestionClick","refocusSuggestions","onSuggestionRemove","stopPropagation","Suggestions","scrollSelected","activeSelectedElement","_selectedElement","forceResolveText","mostRecentlyUsedHeaderText","searchForMoreText","className","moreSuggestionsAvailable","loadingText","onRenderNoResultFound","searchingText","isMostRecentlyUsedVisible","resultsMaximumNumber","resultsFooterFull","resultsFooter","_d","isResultsFooterVisible","suggestionsHeaderText","suggestionsClassName","theme","styles","suggestionsListId","_classNames","forceResolveButtonSelected","searchForMoreButtonSelected","root","title","suggestionsTitle","searchForMoreButton","actionButton","_a","buttonSelected","forceResolveButton","_b","suggestionsAvailable","suggestionsContainer","noSuggestions","suggestionsNone","spinnerStyles","subComponentStyles","spinner","spinnerClassNameOrStyles","suggestionsSpinner","noResults","headerText","footerTitle","hasNoSuggestions","divProps","role","id","forceResolveId","searchForMoreId","message","_getAlertText","_shouldShowForceResolve","componentRef","onClick","_forceResolve","__assign","label","_renderSuggestions","iconProps","iconName","_getMoreResults","focus","scrollIntoView","onRenderSuggestion","removeSuggestionAriaLabel","suggestionsItemClassName","showRemoveButtons","suggestionsContainerAriaLabel","StyledTypedSuggestionsItem","selectedIndex","some","element","selected","slice","map","suggestion","ref","key","suggestionModel","RenderSuggestion","_onClickTypedSuggestionsItem","showRemoveButton","removeButtonAriaLabel","onRemoveItem","_onRemoveTypedSuggestionsItem","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\pickers\\src\\components\\pickers\\Suggestions\\Suggestions.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  KeyCodes,\n  classNamesFunction,\n  IStyleFunctionOrObject,\n  css,\n  styled,\n} from '../../../Utilities';\nimport { IProcessedStyleSet } from '../../../Styling';\nimport { CommandButton, IButton } from '../../../Button';\nimport { Spinner, ISpinnerStyleProps, ISpinnerStyles } from '../../../Spinner';\nimport { Announced } from '../../../Announced';\nimport {\n  ISuggestionsProps,\n  SuggestionActionType,\n  ISuggestionsStyleProps,\n  ISuggestionsStyles,\n} from './Suggestions.types';\nimport { SuggestionsItem } from './SuggestionsItem';\nimport { getStyles as suggestionsItemStyles } from './SuggestionsItem.styles';\nimport { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\n\nimport * as stylesImport from './Suggestions.scss';\nconst legacyStyles: any = stylesImport;\n\nconst getClassNames = classNamesFunction<ISuggestionsStyleProps, ISuggestionsStyles>();\n\nexport interface ISuggestionsState {\n  selectedActionType: SuggestionActionType;\n}\n\nconst StyledSuggestionsItem = styled<ISuggestionItemProps<any>, ISuggestionsItemStyleProps, ISuggestionsItemStyles>(\n  SuggestionsItem,\n  suggestionsItemStyles,\n  undefined,\n  { scope: 'SuggestionItem' },\n);\n\n/**\n * {@docCategory Pickers}\n */\nexport class Suggestions<T> extends React.Component<ISuggestionsProps<T>, ISuggestionsState> {\n  protected _forceResolveButton = React.createRef<IButton>();\n  protected _searchForMoreButton = React.createRef<IButton>();\n  protected _selectedElement = React.createRef<HTMLDivElement>();\n  private activeSelectedElement: HTMLDivElement | null;\n  private _classNames: Partial<IProcessedStyleSet<ISuggestionsStyles>>;\n\n  constructor(suggestionsProps: ISuggestionsProps<T>) {\n    super(suggestionsProps);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      selectedActionType: SuggestionActionType.none,\n    };\n  }\n\n  public componentDidMount(): void {\n    this.scrollSelected();\n    this.activeSelectedElement = this._selectedElement ? this._selectedElement.current : null;\n  }\n\n  public componentDidUpdate(): void {\n    // Only scroll to selected element if the selected element has changed. Otherwise do nothing.\n    // This prevents some odd behavior where scrolling the active element out of view and clicking on a selected element\n    // will trigger a focus event and not give the clicked element the click.\n    if (this._selectedElement.current && this.activeSelectedElement !== this._selectedElement.current) {\n      this.scrollSelected();\n      this.activeSelectedElement = this._selectedElement.current;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      forceResolveText,\n      mostRecentlyUsedHeaderText,\n      searchForMoreText,\n      className,\n      moreSuggestionsAvailable,\n      noResultsFoundText,\n      suggestions,\n      isLoading,\n      isSearching,\n      loadingText,\n      onRenderNoResultFound,\n      searchingText,\n      isMostRecentlyUsedVisible,\n      resultsMaximumNumber,\n      resultsFooterFull,\n      resultsFooter,\n      isResultsFooterVisible = true,\n      suggestionsHeaderText,\n      suggestionsClassName,\n      theme,\n      styles,\n      suggestionsListId,\n    } = this.props;\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from Suggestions class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in BasePicker when the typed Suggestions class is ready to be rendered. If the check\n    // passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    this._classNames = styles\n      ? getClassNames(styles, {\n          theme: theme!,\n          className,\n          suggestionsClassName,\n          forceResolveButtonSelected: this.state.selectedActionType === SuggestionActionType.forceResolve,\n          searchForMoreButtonSelected: this.state.selectedActionType === SuggestionActionType.searchMore,\n        })\n      : {\n          root: css('ms-Suggestions', className, legacyStyles.root),\n          title: css('ms-Suggestions-title', legacyStyles.suggestionsTitle),\n          searchForMoreButton: css('ms-SearchMore-button', legacyStyles.actionButton, {\n            ['is-selected ' + legacyStyles.buttonSelected]:\n              this.state.selectedActionType === SuggestionActionType.searchMore,\n          }),\n          forceResolveButton: css('ms-forceResolve-button', legacyStyles.actionButton, {\n            ['is-selected ' + legacyStyles.buttonSelected]:\n              this.state.selectedActionType === SuggestionActionType.forceResolve,\n          }),\n          suggestionsAvailable: css('ms-Suggestions-suggestionsAvailable', legacyStyles.suggestionsAvailable),\n          suggestionsContainer: css(\n            'ms-Suggestions-container',\n            legacyStyles.suggestionsContainer,\n            suggestionsClassName,\n          ),\n          noSuggestions: css('ms-Suggestions-none', legacyStyles.suggestionsNone),\n        };\n\n    const spinnerStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.spinner as IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>)\n      : undefined;\n\n    // TODO: cleanup after refactor of pickers to composition pattern and remove SASS support.\n    const spinnerClassNameOrStyles = styles\n      ? { styles: spinnerStyles }\n      : { className: css('ms-Suggestions-spinner', legacyStyles.suggestionsSpinner) };\n\n    const noResults = () => {\n      return noResultsFoundText ? <div className={this._classNames.noSuggestions}>{noResultsFoundText}</div> : null;\n    };\n\n    // MostRecently Used text should supercede the header text if it's there and available.\n    let headerText: string | undefined = suggestionsHeaderText;\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n\n    let footerTitle: ((props: ISuggestionsProps<T>) => JSX.Element) | undefined = undefined;\n    if (isResultsFooterVisible) {\n      footerTitle = suggestions.length >= (resultsMaximumNumber as number) ? resultsFooterFull : resultsFooter;\n    }\n\n    const hasNoSuggestions = (!suggestions || !suggestions.length) && !isLoading;\n    const divProps: React.HtmlHTMLAttributes<HTMLDivElement> =\n      hasNoSuggestions || isLoading ? { role: 'dialog', id: suggestionsListId } : {};\n\n    const forceResolveId =\n      this.state.selectedActionType === SuggestionActionType.forceResolve ? 'sug-selectedAction' : undefined;\n    const searchForMoreId =\n      this.state.selectedActionType === SuggestionActionType.searchMore ? 'sug-selectedAction' : undefined;\n\n    return (\n      <div className={this._classNames.root} {...divProps}>\n        <Announced message={this._getAlertText()} aria-live=\"polite\" />\n\n        {headerText ? <div className={this._classNames.title}>{headerText}</div> : null}\n        {forceResolveText && this._shouldShowForceResolve() && (\n          <CommandButton\n            componentRef={this._forceResolveButton}\n            className={this._classNames.forceResolveButton}\n            id={forceResolveId}\n            onClick={this._forceResolve}\n            data-automationid={'sug-forceResolve'}\n          >\n            {forceResolveText}\n          </CommandButton>\n        )}\n        {isLoading && <Spinner {...spinnerClassNameOrStyles} label={loadingText} />}\n        {hasNoSuggestions\n          ? onRenderNoResultFound\n            ? onRenderNoResultFound(undefined, noResults)\n            : noResults()\n          : this._renderSuggestions()}\n        {searchForMoreText && moreSuggestionsAvailable && (\n          <CommandButton\n            componentRef={this._searchForMoreButton}\n            className={this._classNames.searchForMoreButton}\n            iconProps={{ iconName: 'Search' }}\n            id={searchForMoreId}\n            onClick={this._getMoreResults}\n            data-automationid={'sug-searchForMore'}\n          >\n            {searchForMoreText}\n          </CommandButton>\n        )}\n        {isSearching ? <Spinner {...spinnerClassNameOrStyles} label={searchingText} /> : null}\n        {footerTitle && !moreSuggestionsAvailable && !isMostRecentlyUsedVisible && !isSearching ? (\n          <div className={this._classNames.title}>{footerTitle(this.props)}</div>\n        ) : null}\n      </div>\n    );\n  }\n\n  /**\n   * Returns true if the event was handled, false otherwise\n   */\n  public tryHandleKeyDown = (keyCode: number, currentSuggestionIndex: number): boolean => {\n    let isEventHandled = false;\n    let newSelectedActionType = null;\n    const currentSelectedAction = this.state.selectedActionType;\n    const suggestionLength = this.props.suggestions.length;\n    if (keyCode === KeyCodes.down) {\n      switch (currentSelectedAction) {\n        case SuggestionActionType.forceResolve:\n          if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else if (this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          } else {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n        case SuggestionActionType.searchMore:\n          if (this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          } else if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          }\n          break;\n        case SuggestionActionType.none:\n          if (currentSuggestionIndex === -1 && this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n      }\n    } else if (keyCode === KeyCodes.up) {\n      switch (currentSelectedAction) {\n        case SuggestionActionType.forceResolve:\n          if (this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          } else if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          }\n          break;\n        case SuggestionActionType.searchMore:\n          if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else if (this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n        case SuggestionActionType.none:\n          if (currentSuggestionIndex === -1 && this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          }\n          break;\n      }\n    }\n\n    if (newSelectedActionType !== null) {\n      this.setState({ selectedActionType: newSelectedActionType });\n      isEventHandled = true;\n    }\n\n    return isEventHandled;\n  };\n\n  public hasSuggestedAction(): boolean {\n    return !!this._searchForMoreButton.current || !!this._forceResolveButton.current;\n  }\n\n  public hasSuggestedActionSelected(): boolean {\n    return this.state.selectedActionType !== SuggestionActionType.none;\n  }\n\n  public executeSelectedAction(): void {\n    switch (this.state.selectedActionType) {\n      case SuggestionActionType.forceResolve:\n        this._forceResolve();\n        break;\n      case SuggestionActionType.searchMore:\n        this._getMoreResults();\n        break;\n    }\n  }\n\n  public focusAboveSuggestions(): void {\n    if (this._forceResolveButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.forceResolve });\n    } else if (this._searchForMoreButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.searchMore });\n    }\n  }\n\n  public focusBelowSuggestions(): void {\n    if (this._searchForMoreButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.searchMore });\n    } else if (this._forceResolveButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.forceResolve });\n    }\n  }\n\n  public focusSearchForMoreButton(): void {\n    if (this._searchForMoreButton.current) {\n      this._searchForMoreButton.current.focus();\n    }\n  }\n\n  // TODO get the element to scroll into view properly regardless of direction.\n  public scrollSelected(): void {\n    if (this._selectedElement.current && this._selectedElement.current.scrollIntoView !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  }\n\n  private _getAlertText = () => {\n    const { isLoading, isSearching, suggestions, suggestionsAvailableAlertText, noResultsFoundText } = this.props;\n    if (!isLoading && !isSearching) {\n      if (suggestions.length > 0) {\n        return suggestionsAvailableAlertText || '';\n      }\n      if (noResultsFoundText) {\n        return noResultsFoundText;\n      }\n    }\n    return '';\n  };\n\n  private _renderSuggestions(): JSX.Element | null {\n    const {\n      onRenderSuggestion,\n      removeSuggestionAriaLabel,\n      suggestionsItemClassName,\n      resultsMaximumNumber,\n      showRemoveButtons,\n      suggestionsContainerAriaLabel,\n      suggestionsListId,\n    } = this.props;\n\n    let { suggestions } = this.props;\n\n    const StyledTypedSuggestionsItem: React.FunctionComponent<ISuggestionItemProps<T>> = StyledSuggestionsItem;\n\n    let selectedIndex = -1;\n    suggestions.some((element, index) => {\n      if (element.selected) {\n        selectedIndex = index;\n        return true;\n      }\n      return false;\n    });\n\n    if (resultsMaximumNumber) {\n      suggestions =\n        selectedIndex >= resultsMaximumNumber\n          ? suggestions.slice(selectedIndex - resultsMaximumNumber + 1, selectedIndex + 1)\n          : suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.suggestionsContainer}\n        id={suggestionsListId}\n        role=\"listbox\"\n        aria-label={suggestionsContainerAriaLabel}\n      >\n        {suggestions.map((suggestion, index) => (\n          <div\n            ref={suggestion.selected ? this._selectedElement : undefined}\n            key={(suggestion.item as any).key ? (suggestion.item as any).key : index}\n          >\n            <StyledTypedSuggestionsItem\n              suggestionModel={suggestion}\n              RenderSuggestion={onRenderSuggestion}\n              onClick={this._onClickTypedSuggestionsItem(suggestion.item, index)}\n              className={suggestionsItemClassName}\n              showRemoveButton={showRemoveButtons}\n              removeButtonAriaLabel={removeSuggestionAriaLabel}\n              onRemoveItem={this._onRemoveTypedSuggestionsItem(suggestion.item, index)}\n              id={'sug-' + index}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  private _getMoreResults = (): void => {\n    if (this.props.onGetMoreResults) {\n      this.props.onGetMoreResults();\n    }\n  };\n\n  private _forceResolve = (): void => {\n    if (this.props.createGenericItem) {\n      this.props.createGenericItem();\n    }\n  };\n\n  private _shouldShowForceResolve = (): boolean => {\n    return this.props.showForceResolve ? this.props.showForceResolve() : false;\n  };\n\n  private _onClickTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      this.props.onSuggestionClick(ev, item, index);\n    };\n  };\n\n  private _refocusOnSuggestions = (keyCode: number): void => {\n    if (typeof this.props.refocusSuggestions === 'function') {\n      this.props.refocusSuggestions(keyCode);\n    }\n  };\n\n  private _onRemoveTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      const onSuggestionRemove = this.props.onSuggestionRemove!;\n      onSuggestionRemove(ev, item, index);\n      ev.stopPropagation();\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}