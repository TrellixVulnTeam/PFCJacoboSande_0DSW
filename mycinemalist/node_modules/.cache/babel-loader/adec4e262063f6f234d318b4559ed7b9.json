{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nvar getClassNames = classNamesFunction();\n\nvar GroupHeaderBase =\n/** @class */\nfunction (_super) {\n  __extends(GroupHeaderBase, _super);\n\n  function GroupHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._toggleCollapse = function () {\n      var _a = _this.props,\n          group = _a.group,\n          onToggleCollapse = _a.onToggleCollapse,\n          isGroupLoading = _a.isGroupLoading;\n      var isCollapsed = _this.state.isCollapsed;\n      var newCollapsed = !isCollapsed;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);\n\n      _this.setState({\n        isCollapsed: newCollapsed,\n        isLoadingVisible: newLoadingVisible\n      });\n\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n    };\n\n    _this._onKeyUp = function (ev) {\n      var _a = _this.props,\n          group = _a.group,\n          onGroupHeaderKeyUp = _a.onGroupHeaderKeyUp;\n\n      if (onGroupHeaderKeyUp) {\n        onGroupHeaderKeyUp(ev, group);\n      }\n\n      if (!ev.defaultPrevented) {\n        var shouldOpen = _this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, _this.props.theme);\n        var shouldClose = !_this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, _this.props.theme);\n\n        if (shouldClose || shouldOpen) {\n          _this._toggleCollapse();\n\n          ev.stopPropagation();\n          ev.preventDefault();\n        }\n      }\n    };\n\n    _this._onToggleClick = function (ev) {\n      _this._toggleCollapse();\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n\n    _this._onToggleSelectGroupClick = function (ev) {\n      var _a = _this.props,\n          onToggleSelectGroup = _a.onToggleSelectGroup,\n          group = _a.group;\n\n      if (onToggleSelectGroup) {\n        onToggleSelectGroup(group);\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._onHeaderClick = function () {\n      var _a = _this.props,\n          group = _a.group,\n          onGroupHeaderClick = _a.onGroupHeaderClick,\n          onToggleSelectGroup = _a.onToggleSelectGroup;\n\n      if (onGroupHeaderClick) {\n        onGroupHeaderClick(group);\n      } else if (onToggleSelectGroup) {\n        onToggleSelectGroup(group);\n      }\n    };\n\n    _this._onRenderTitle = function (props) {\n      var group = props.group,\n          ariaColSpan = props.ariaColSpan;\n\n      if (!group) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        className: _this._classNames.title,\n        role: \"gridcell\",\n        \"aria-colspan\": ariaColSpan\n      }, React.createElement(\"span\", null, group.name), React.createElement(\"span\", {\n        className: _this._classNames.headerCount\n      }, \"(\", group.count, group.hasMoreData && '+', \")\"));\n    };\n\n    _this.state = {\n      isCollapsed: _this.props.group && _this.props.group.isCollapsed,\n      isLoadingVisible: false\n    };\n    return _this;\n  }\n\n  GroupHeaderBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    if (nextProps.group) {\n      var newCollapsed = nextProps.group.isCollapsed;\n      var isGroupLoading = nextProps.isGroupLoading;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n      return __assign(__assign({}, previousState), {\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false\n      });\n    }\n\n    return previousState;\n  };\n\n  GroupHeaderBase.prototype.render = function () {\n    var _a = this.props,\n        group = _a.group,\n        _b = _a.groupLevel,\n        groupLevel = _b === void 0 ? 0 : _b,\n        viewport = _a.viewport,\n        selectionMode = _a.selectionMode,\n        loadingText = _a.loadingText,\n        // eslint-disable-next-line deprecation/deprecation\n    _c = _a.isSelected,\n        // eslint-disable-next-line deprecation/deprecation\n    isSelected = _c === void 0 ? false : _c,\n        _d = _a.selected,\n        selected = _d === void 0 ? false : _d,\n        indentWidth = _a.indentWidth,\n        _e = _a.onRenderTitle,\n        onRenderTitle = _e === void 0 ? this._onRenderTitle : _e,\n        onRenderGroupHeaderCheckbox = _a.onRenderGroupHeaderCheckbox,\n        _f = _a.isCollapsedGroupSelectVisible,\n        isCollapsedGroupSelectVisible = _f === void 0 ? true : _f,\n        expandButtonProps = _a.expandButtonProps,\n        expandButtonIcon = _a.expandButtonIcon,\n        selectAllButtonProps = _a.selectAllButtonProps,\n        theme = _a.theme,\n        styles = _a.styles,\n        className = _a.className,\n        compact = _a.compact,\n        ariaPosInSet = _a.ariaPosInSet,\n        ariaSetSize = _a.ariaSetSize,\n        useFastIcons = _a.useFastIcons;\n    var defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n    var onRenderCheckbox = onRenderGroupHeaderCheckbox ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender) : defaultCheckboxRender;\n    var _g = this.state,\n        isCollapsed = _g.isCollapsed,\n        isLoadingVisible = _g.isLoadingVisible;\n    var canSelectGroup = selectionMode === SelectionMode.multiple;\n    var isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    var currentlySelected = selected || isSelected;\n    var isRTL = getRTL(theme);\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      selected: currentlySelected,\n      isCollapsed: isCollapsed,\n      compact: compact\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      style: viewport ? {\n        minWidth: viewport.width\n      } : {},\n      onClick: this._onHeaderClick,\n      role: \"row\",\n      \"aria-setsize\": ariaSetSize,\n      \"aria-posinset\": ariaPosInSet,\n      \"data-is-focusable\": true,\n      onKeyUp: this._onKeyUp,\n      \"aria-label\": group.ariaLabel || group.name,\n      \"aria-expanded\": !this.state.isCollapsed,\n      \"aria-level\": groupLevel + 1\n    }, React.createElement(\"div\", {\n      className: this._classNames.groupHeaderContainer,\n      role: \"presentation\"\n    }, isSelectionCheckVisible ? React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      type: \"button\",\n      className: this._classNames.check,\n      role: \"checkbox\",\n      \"aria-checked\": currentlySelected,\n      \"data-selection-toggle\": true,\n      onClick: this._onToggleSelectGroupClick\n    }, selectAllButtonProps), onRenderCheckbox({\n      checked: currentlySelected,\n      theme: theme\n    }, onRenderCheckbox))) : selectionMode !== SelectionMode.none && React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      count: 1\n    }), React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      count: groupLevel\n    }), React.createElement(\"div\", {\n      className: this._classNames.dropIcon,\n      role: \"presentation\"\n    }, React.createElement(Icon, {\n      iconName: \"Tag\"\n    })), React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      type: \"button\",\n      className: this._classNames.expand,\n      onClick: this._onToggleClick,\n      \"aria-expanded\": !this.state.isCollapsed\n    }, expandButtonProps), React.createElement(Icon, {\n      className: this._classNames.expandIsCollapsed,\n      iconName: expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')\n    }))), onRenderTitle(this.props, this._onRenderTitle), isLoadingVisible && React.createElement(Spinner, {\n      label: loadingText\n    })));\n  };\n\n  GroupHeaderBase.prototype._defaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(Check, {\n      checked: checkboxProps.checked\n    });\n  };\n\n  GroupHeaderBase.prototype._fastDefaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(FastCheck, {\n      theme: checkboxProps.theme,\n      checked: checkboxProps.checked\n    });\n  };\n\n  GroupHeaderBase.defaultProps = {\n    expandButtonProps: {\n      'aria-label': 'expand collapse group'\n    }\n  };\n  return GroupHeaderBase;\n}(React.Component);\n\nexport { GroupHeaderBase };\nvar FastCheck = React.memo(function (props) {\n  return React.createElement(Check, {\n    theme: props.theme,\n    checked: props.checked,\n    className: props.className,\n    useFastIcons: true\n  });\n});","map":{"version":3,"mappings":"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","names":["React","composeRenderFunction","classNamesFunction","getRTL","getRTLSafeKeyCode","KeyCodes","SelectionMode","Check","Icon","GroupSpacer","Spinner","getClassNames","__extends","props","_super","_this","group","onToggleCollapse","isGroupLoading","newCollapsed","isCollapsed","newLoadingVisible","setState","isLoadingVisible","ev","onGroupHeaderKeyUp","defaultPrevented","shouldOpen","state","which","right","theme","shouldClose","left","_toggleCollapse","stopPropagation","preventDefault","onToggleSelectGroup","onGroupHeaderClick","ariaColSpan","className","_classNames","title","role","name","headerCount","count","hasMoreData","GroupHeaderBase","nextProps","previousState","_b","groupLevel","viewport","selectionMode","loadingText","_c","isSelected","_d","selected","indentWidth","_e","onRenderTitle","onRenderGroupHeaderCheckbox","_f","isCollapsedGroupSelectVisible","expandButtonProps","expandButtonIcon","selectAllButtonProps","styles","compact","ariaPosInSet","ariaSetSize","useFastIcons","defaultCheckboxRender","_fastDefaultCheckboxRender","_defaultCheckboxRender","onRenderCheckbox","canSelectGroup","multiple","isSelectionCheckVisible","currentlySelected","isRTL","root","style","minWidth","width","onClick","_onHeaderClick","onKeyUp","_onKeyUp","ariaLabel","groupHeaderContainer","type","check","_onToggleSelectGroupClick","checked","none","dropIcon","iconName","expand","_onToggleClick","expandIsCollapsed","_onRenderTitle","label","checkboxProps","FastCheck","Component","memo"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\GroupedList\\GroupHeader.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet, ITheme } from '../../Styling';\nimport { composeRenderFunction, classNamesFunction, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaPosInSet,\n      ariaSetSize,\n      useFastIcons,\n    } = this.props;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        role=\"row\"\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel || group.name}\n        aria-expanded={!this.state.isCollapsed}\n        aria-level={groupLevel + 1}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                aria-checked={currentlySelected}\n                data-selection-toggle={true}\n                onClick={this._onToggleSelectGroupClick}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={indentWidth} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group!);\n    }\n\n    if (!ev.defaultPrevented) {\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group, ariaColSpan } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title} role=\"gridcell\" aria-colspan={ariaColSpan}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n"]},"metadata":{},"sourceType":"module"}