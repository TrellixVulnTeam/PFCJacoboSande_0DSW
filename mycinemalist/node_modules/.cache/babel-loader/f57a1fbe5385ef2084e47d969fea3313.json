{"ast":null,"code":"import * as React from 'react';\n/**\n * Context for providing the window.\n */\n\nexport var WindowContext = React.createContext({\n  window: typeof window === 'object' ? window : undefined\n});\n/**\n * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.\n */\n\nexport var useWindow = function () {\n  return React.useContext(WindowContext).window;\n};\n/**\n * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.\n */\n\nexport var useDocument = function () {\n  var _a;\n\n  return (_a = React.useContext(WindowContext).window) === null || _a === void 0 ? void 0 : _a.document;\n};\n/**\n * Component to provide the window object contextually. This is useful when rendering content to an element\n * contained within a child window or iframe element, where event handlers and styling must be projected\n * to an alternative window or document.\n */\n\nexport var WindowProvider = function (props) {\n  return React.createElement(WindowContext.Provider, {\n    value: props\n  }, props.children);\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAYA;;;;AAGA,OAAO,IAAMC,aAAa,GAAGD,KAAK,CAACE,aAAN,CAAyC;EACpEC,MAAM,EAAE,OAAOA,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCC;AADsB,CAAzC,CAAtB;AAIP;;;;AAGA,OAAO,IAAMC,SAAS,GAAG;EAA0B,YAAK,CAACC,UAAN,CAAiBL,aAAjB,EAAgCE,MAAhC;AAAsC,CAAlF;AAEP;;;;AAGA,OAAO,IAAMI,WAAW,GAAG;EAAA;;EAAA,aAA4BP,KAAK,CAACM,UAAN,CAAiBL,aAAjB,EAAgCE,MAA5D,MAAkE,IAAlE,IAAkEK,aAAlE,GAAkE,MAAlE,GAAkEA,GAAEC,QAApE;AAA4E,CAAhG;AAEP;;;;;;AAKA,OAAO,IAAMC,cAAc,GAAiD,iBAAK;EAC/E,OAAOV,oBAACC,aAAa,CAACU,QAAf,EAAuB;IAACC,KAAK,EAAEC;EAAR,CAAvB,EAAuCA,KAAK,CAACC,QAA7C,CAAP;AACD,CAFM","names":["React","WindowContext","createContext","window","undefined","useWindow","useContext","useDocument","_a","document","WindowProvider","Provider","value","props","children"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@fluentui\\react-window-provider\\src\\WindowProvider.tsx"],"sourcesContent":["import * as React from 'react';\n\n/**\n * Props for the WindowProvider component.\n */\nexport type WindowProviderProps = {\n  /**\n   * Provide the active window.\n   */\n  window: Window | undefined;\n};\n\n/**\n * Context for providing the window.\n */\nexport const WindowContext = React.createContext<WindowProviderProps>({\n  window: typeof window === 'object' ? window : undefined,\n});\n\n/**\n * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useWindow = (): Window | undefined => React.useContext(WindowContext).window;\n\n/**\n * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useDocument = (): Document | undefined => React.useContext(WindowContext).window?.document;\n\n/**\n * Component to provide the window object contextually. This is useful when rendering content to an element\n * contained within a child window or iframe element, where event handlers and styling must be projected\n * to an alternative window or document.\n */\nexport const WindowProvider: React.FunctionComponent<WindowProviderProps> = props => {\n  return <WindowContext.Provider value={props}>{props.children}</WindowContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}