{"ast":null,"code":"import { getWindow } from './dom/getWindow';\n/**\n * Storing global state in local module variables has issues when more than one copy\n * if the module gets loaded on the page (due to a bundling error or simply by consuming\n * a prebundled script.)\n *\n * This file contains helpers to deal with the getting and setting local state, and allows\n * callers to get called back when it mutates.\n */\n\nvar GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';\nvar CALLBACK_STATE_PROP_NAME = '__callbacks__';\nvar _counter = 0;\n/**\n * Global settings helper, which stores settings in the global (window) namespace.\n * If window is not provided, it will store settings in module scope. Provides a\n * way to observe changes as well when their values change.\n *\n * @public\n * {@docCategory GlobalSettings}\n */\n\nvar GlobalSettings =\n/** @class */\nfunction () {\n  function GlobalSettings() {}\n\n  GlobalSettings.getValue = function (key, defaultValue) {\n    var globalSettings = _getGlobalSettings();\n\n    if (globalSettings[key] === undefined) {\n      globalSettings[key] = typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n    }\n\n    return globalSettings[key];\n  };\n\n  GlobalSettings.setValue = function (key, value) {\n    var globalSettings = _getGlobalSettings();\n\n    var callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];\n    var oldValue = globalSettings[key];\n\n    if (value !== oldValue) {\n      globalSettings[key] = value;\n      var changeDescription = {\n        oldValue: oldValue,\n        value: value,\n        key: key\n      };\n\n      for (var id in callbacks) {\n        if (callbacks.hasOwnProperty(id)) {\n          callbacks[id](changeDescription);\n        }\n      }\n    }\n\n    return value;\n  };\n\n  GlobalSettings.addChangeListener = function (cb) {\n    // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.\n    // (It's faster to delete a key than it is to look up the index of an object and splice an array.)\n    var id = cb.__id__;\n\n    var callbacks = _getCallbacks();\n\n    if (!id) {\n      id = cb.__id__ = String(_counter++);\n    }\n\n    callbacks[id] = cb;\n  };\n\n  GlobalSettings.removeChangeListener = function (cb) {\n    var callbacks = _getCallbacks();\n\n    delete callbacks[cb.__id__];\n  };\n\n  return GlobalSettings;\n}();\n\nexport { GlobalSettings }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction _getGlobalSettings() {\n  var _a;\n\n  var win = getWindow(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var globalObj = win || {};\n\n  if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {\n    globalObj[GLOBAL_SETTINGS_PROP_NAME] = (_a = {}, _a[CALLBACK_STATE_PROP_NAME] = {}, _a);\n  }\n\n  return globalObj[GLOBAL_SETTINGS_PROP_NAME];\n}\n\nfunction _getCallbacks() {\n  var globalSettings = _getGlobalSettings();\n\n  return globalSettings[CALLBACK_STATE_PROP_NAME];\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AAEA;;;;;;;;;AASA,IAAMC,yBAAyB,GAAG,oBAAlC;AACA,IAAMC,wBAAwB,GAAG,eAAjC;AAEA,IAAIC,QAAQ,GAAG,CAAf;AA2BA;;;;;;;;;AAQA;AAAA;AAAA;EAAA,2BAoDC;;EAnDeC,0BAAd,UAA0BC,GAA1B,EAAuCC,YAAvC,EAAmE;IACjE,IAAMC,cAAc,GAAGC,kBAAkB,EAAzC;;IAEA,IAAID,cAAc,CAACF,GAAD,CAAd,KAAwBI,SAA5B,EAAuC;MACrCF,cAAc,CAACF,GAAD,CAAd,GAAsB,OAAOC,YAAP,KAAwB,UAAxB,GAAsCA,YAAyB,EAA/D,GAAoEA,YAA1F;IACD;;IAED,OAAOC,cAAc,CAACF,GAAD,CAArB;EACD,CARa;;EAUAD,0BAAd,UAA0BC,GAA1B,EAAuCK,KAAvC,EAA+C;IAC7C,IAAMH,cAAc,GAAGC,kBAAkB,EAAzC;;IACA,IAAMG,SAAS,GAAGJ,cAAc,CAACL,wBAAD,CAAhC;IACA,IAAIU,QAAQ,GAAGL,cAAc,CAACF,GAAD,CAA7B;;IAEA,IAAIK,KAAK,KAAKE,QAAd,EAAwB;MACtBL,cAAc,CAACF,GAAD,CAAd,GAAsBK,KAAtB;MAEA,IAAIG,iBAAiB,GAAG;QACtBD,QAAQ,UADc;QAEtBF,KAAK,OAFiB;QAGtBL,GAAG;MAHmB,CAAxB;;MAMA,KAAK,IAAIS,EAAT,IAAeH,SAAf,EAA0B;QACxB,IAAIA,SAAS,CAACI,cAAV,CAAyBD,EAAzB,CAAJ,EAAkC;UAChCH,SAAS,CAACG,EAAD,CAAT,CAAcD,iBAAd;QACD;MACF;IACF;;IAED,OAAOH,KAAP;EACD,CAtBa;;EAwBAN,mCAAd,UAAgCY,EAAhC,EAAwD;IACtD;IACA;IACA,IAAIF,EAAE,GAAGE,EAAE,CAACC,MAAZ;;IACA,IAAMN,SAAS,GAAGO,aAAa,EAA/B;;IAEA,IAAI,CAACJ,EAAL,EAAS;MACPA,EAAE,GAAGE,EAAE,CAACC,MAAH,GAAYE,MAAM,CAAChB,QAAQ,EAAT,CAAvB;IACD;;IAEDQ,SAAS,CAACG,EAAD,CAAT,GAAgBE,EAAhB;EACD,CAXa;;EAaAZ,sCAAd,UAAmCY,EAAnC,EAA2D;IACzD,IAAML,SAAS,GAAGO,aAAa,EAA/B;;IACA,OAAOP,SAAS,CAACK,EAAE,CAACC,MAAJ,CAAhB;EACD,CAHa;;EAIhB;AAAC,CApDD;;2BAsDA;;AACA,SAAST,kBAAT,GAA2B;;;EACzB,IAAMY,GAAG,GAAGpB,SAAS,EAArB,CADyB,CAEzB;;EACA,IAAMqB,SAAS,GAA2BD,GAAG,IAAI,EAAjD;;EAEA,IAAI,CAACC,SAAS,CAACpB,yBAAD,CAAd,EAA2C;IACzCoB,SAAS,CAACpB,yBAAD,CAAT,IAAoCqB,SAClCA,GAACpB,wBAAD,IAA4B,EADM,IAApC;EAGD;;EAED,OAAOmB,SAAS,CAACpB,yBAAD,CAAhB;AACD;;AAED,SAASiB,aAAT,GAAsB;EACpB,IAAMX,cAAc,GAAGC,kBAAkB,EAAzC;;EACA,OAAOD,cAAc,CAACL,wBAAD,CAArB;AACD","names":["getWindow","GLOBAL_SETTINGS_PROP_NAME","CALLBACK_STATE_PROP_NAME","_counter","GlobalSettings","key","defaultValue","globalSettings","_getGlobalSettings","undefined","value","callbacks","oldValue","changeDescription","id","hasOwnProperty","cb","__id__","_getCallbacks","String","win","globalObj","_a"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\utilities\\src\\GlobalSettings.ts"],"sourcesContent":["import { getWindow } from './dom/getWindow';\n\n/**\n * Storing global state in local module variables has issues when more than one copy\n * if the module gets loaded on the page (due to a bundling error or simply by consuming\n * a prebundled script.)\n *\n * This file contains helpers to deal with the getting and setting local state, and allows\n * callers to get called back when it mutates.\n */\n\nconst GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';\nconst CALLBACK_STATE_PROP_NAME = '__callbacks__';\n\nlet _counter = 0;\n\n/**\n * Change description used for change callbacks in GlobalSettings.\n *\n * @public\n * {@docCategory IChangeDescription}\n */\nexport interface IChangeDescription {\n  key: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  oldValue: any;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any;\n}\n\n/**\n * Change event callback.\n *\n * @public\n * {@docCategory IChangeEventCallback}\n */\nexport interface IChangeEventCallback {\n  __id__?: string;\n  (changeDescription?: IChangeDescription): void;\n}\n\n/**\n * Global settings helper, which stores settings in the global (window) namespace.\n * If window is not provided, it will store settings in module scope. Provides a\n * way to observe changes as well when their values change.\n *\n * @public\n * {@docCategory GlobalSettings}\n */\nexport class GlobalSettings {\n  public static getValue<T>(key: string, defaultValue?: T | (() => T)): T {\n    const globalSettings = _getGlobalSettings();\n\n    if (globalSettings[key] === undefined) {\n      globalSettings[key] = typeof defaultValue === 'function' ? (defaultValue as Function)() : defaultValue;\n    }\n\n    return globalSettings[key];\n  }\n\n  public static setValue<T>(key: string, value: T): T {\n    const globalSettings = _getGlobalSettings();\n    const callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];\n    let oldValue = globalSettings[key];\n\n    if (value !== oldValue) {\n      globalSettings[key] = value;\n\n      let changeDescription = {\n        oldValue,\n        value,\n        key,\n      };\n\n      for (let id in callbacks) {\n        if (callbacks.hasOwnProperty(id)) {\n          callbacks[id](changeDescription);\n        }\n      }\n    }\n\n    return value;\n  }\n\n  public static addChangeListener(cb: IChangeEventCallback): void {\n    // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.\n    // (It's faster to delete a key than it is to look up the index of an object and splice an array.)\n    let id = cb.__id__;\n    const callbacks = _getCallbacks();\n\n    if (!id) {\n      id = cb.__id__ = String(_counter++);\n    }\n\n    callbacks[id] = cb;\n  }\n\n  public static removeChangeListener(cb: IChangeEventCallback): void {\n    const callbacks = _getCallbacks();\n    delete callbacks[cb.__id__ as string];\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _getGlobalSettings(): { [key: string]: any } {\n  const win = getWindow();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const globalObj: { [key: string]: any } = win || {};\n\n  if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {\n    globalObj[GLOBAL_SETTINGS_PROP_NAME] = {\n      [CALLBACK_STATE_PROP_NAME]: {},\n    };\n  }\n\n  return globalObj[GLOBAL_SETTINGS_PROP_NAME];\n}\n\nfunction _getCallbacks(): { [key: string]: () => void } {\n  const globalSettings = _getGlobalSettings();\n  return globalSettings[CALLBACK_STATE_PROP_NAME];\n}\n"]},"metadata":{},"sourceType":"module"}