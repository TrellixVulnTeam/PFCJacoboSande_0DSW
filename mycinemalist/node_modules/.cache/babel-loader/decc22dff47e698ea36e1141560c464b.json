{"ast":null,"code":"import { getFocusStyle, hiddenContentStyle, HighContrastSelector, getGlobalClassNames } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-RatingStar-root',\n  rootIsSmall: 'ms-RatingStar-root--small',\n  rootIsLarge: 'ms-RatingStar-root--large',\n  ratingStar: 'ms-RatingStar-container',\n  ratingStarBack: 'ms-RatingStar-back',\n  ratingStarFront: 'ms-RatingStar-front',\n  ratingButton: 'ms-Rating-button',\n  ratingStarIsSmall: 'ms-Rating--small',\n  ratingStartIsLarge: 'ms-Rating--large',\n  labelText: 'ms-Rating-labelText',\n  ratingFocusZone: 'ms-Rating-focuszone'\n};\n\nfunction _getColorWithHighContrast(color, highContrastColor) {\n  var _a;\n\n  return {\n    color: color,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: highContrastColor\n    }, _a)\n  };\n}\n\nexport function getStyles(props) {\n  var disabled = props.disabled,\n      readOnly = props.readOnly,\n      theme = props.theme;\n  var semanticColors = theme.semanticColors,\n      palette = theme.palette;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var ratingSmallIconSize = 16;\n  var ratingLargeIconSize = 20;\n  var ratingVerticalPadding = 8;\n  var ratingHorizontalPadding = 2;\n  var ratingStarUncheckedColor = palette.neutralSecondary;\n  var ratingStarUncheckedHoverColor = palette.themePrimary;\n  var ratingStarUncheckedHoverSelectedColor = palette.themeDark;\n  var ratingStarCheckedColor = palette.neutralPrimary;\n  var ratingStarDisabledColor = semanticColors.disabledBodySubtext;\n  return {\n    root: [classNames.root, theme.fonts.medium, !disabled && !readOnly && {\n      selectors: {\n        // This is part 1 of highlighting all stars up to the one the user is hovering over\n        '&:hover': {\n          selectors: {\n            '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight')\n          }\n        }\n      }\n    }],\n    rootIsSmall: [classNames.rootIsSmall, {\n      height: ratingSmallIconSize + ratingVerticalPadding * 2 + 'px'\n    }],\n    rootIsLarge: [classNames.rootIsLarge, {\n      height: ratingLargeIconSize + ratingVerticalPadding * 2 + 'px'\n    }],\n    ratingStar: [classNames.ratingStar, {\n      display: 'inline-block',\n      position: 'relative',\n      height: 'inherit'\n    }],\n    ratingStarBack: [classNames.ratingStarBack, {\n      // TODO: Use a proper semantic color for this\n      color: ratingStarUncheckedColor,\n      width: '100%'\n    }, disabled && _getColorWithHighContrast(ratingStarDisabledColor, 'GrayText')],\n    ratingStarFront: [classNames.ratingStarFront, {\n      position: 'absolute',\n      height: '100 %',\n      left: '0',\n      top: '0',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      overflow: 'hidden'\n    }, _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight')],\n    ratingButton: [getFocusStyle(theme), classNames.ratingButton, {\n      backgroundColor: 'transparent',\n      padding: ratingVerticalPadding + \"px \" + ratingHorizontalPadding + \"px\",\n      boxSizing: 'content-box',\n      margin: '0px',\n      border: 'none',\n      cursor: 'pointer',\n      selectors: {\n        '&:disabled': {\n          cursor: 'default'\n        },\n        '&[disabled]': {\n          cursor: 'default'\n        }\n      }\n    }, !disabled && !readOnly && {\n      selectors: {\n        // This is part 2 of highlighting all stars up to the one the user is hovering over\n        '&:hover ~ .ms-Rating-button': {\n          selectors: {\n            '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText'),\n            '.ms-RatingStar-front': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText')\n          }\n        },\n        '&:hover': {\n          selectors: {\n            '.ms-RatingStar-back': {\n              color: ratingStarUncheckedHoverColor\n            },\n            '.ms-RatingStar-front': {\n              color: ratingStarUncheckedHoverSelectedColor\n            }\n          }\n        }\n      }\n    }, disabled && {\n      cursor: 'default'\n    }],\n    ratingStarIsSmall: [classNames.ratingStarIsSmall, {\n      fontSize: ratingSmallIconSize + 'px',\n      lineHeight: ratingSmallIconSize + 'px',\n      height: ratingSmallIconSize + 'px'\n    }],\n    ratingStarIsLarge: [classNames.ratingStartIsLarge, {\n      fontSize: ratingLargeIconSize + 'px',\n      lineHeight: ratingLargeIconSize + 'px',\n      height: ratingLargeIconSize + 'px'\n    }],\n    labelText: [classNames.labelText, hiddenContentStyle],\n    ratingFocusZone: [getFocusStyle(theme), classNames.ratingFocusZone, {\n      display: 'inline-block'\n    }]\n  };\n}","map":{"version":3,"mappings":"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","names":["getFocusStyle","hiddenContentStyle","HighContrastSelector","getGlobalClassNames","GlobalClassNames","root","rootIsSmall","rootIsLarge","ratingStar","ratingStarBack","ratingStarFront","ratingButton","ratingStarIsSmall","ratingStartIsLarge","labelText","ratingFocusZone","_getColorWithHighContrast","color","highContrastColor","selectors","_a","getStyles","props","readOnly","theme","palette","classNames","ratingSmallIconSize","ratingLargeIconSize","ratingVerticalPadding","ratingHorizontalPadding","ratingStarUncheckedColor","neutralSecondary","ratingStarUncheckedHoverColor","themePrimary","ratingStarUncheckedHoverSelectedColor","themeDark","ratingStarCheckedColor","neutralPrimary","ratingStarDisabledColor","semanticColors","disabledBodySubtext","fonts","medium","disabled","height","display","position","width","left","top","textAlign","verticalAlign","overflow","backgroundColor","padding","boxSizing","margin","border","cursor","fontSize","lineHeight","ratingStarIsLarge"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Rating\\Rating.styles.ts"],"sourcesContent":["import { getFocusStyle, hiddenContentStyle, HighContrastSelector, getGlobalClassNames } from '../../Styling';\nimport { IRatingStyleProps, IRatingStyles } from './Rating.types';\n\nconst GlobalClassNames = {\n  root: 'ms-RatingStar-root',\n  rootIsSmall: 'ms-RatingStar-root--small',\n  rootIsLarge: 'ms-RatingStar-root--large',\n  ratingStar: 'ms-RatingStar-container',\n  ratingStarBack: 'ms-RatingStar-back',\n  ratingStarFront: 'ms-RatingStar-front',\n  ratingButton: 'ms-Rating-button',\n  ratingStarIsSmall: 'ms-Rating--small',\n  ratingStartIsLarge: 'ms-Rating--large',\n  labelText: 'ms-Rating-labelText',\n  ratingFocusZone: 'ms-Rating-focuszone',\n};\n\nfunction _getColorWithHighContrast(color: string, highContrastColor: string) {\n  return {\n    color: color,\n    selectors: {\n      [HighContrastSelector]: {\n        color: highContrastColor,\n      },\n    },\n  };\n}\n\nexport function getStyles(props: IRatingStyleProps): IRatingStyles {\n  const { disabled, readOnly, theme } = props;\n\n  const { semanticColors, palette } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const ratingSmallIconSize = 16;\n  const ratingLargeIconSize = 20;\n  const ratingVerticalPadding = 8;\n  const ratingHorizontalPadding = 2;\n\n  const ratingStarUncheckedColor = palette.neutralSecondary;\n  const ratingStarUncheckedHoverColor = palette.themePrimary;\n  const ratingStarUncheckedHoverSelectedColor = palette.themeDark;\n  const ratingStarCheckedColor = palette.neutralPrimary;\n  const ratingStarDisabledColor = semanticColors.disabledBodySubtext;\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      !disabled &&\n        !readOnly && {\n          selectors: {\n            // This is part 1 of highlighting all stars up to the one the user is hovering over\n            '&:hover': {\n              selectors: {\n                '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight'),\n              },\n            },\n          },\n        },\n    ],\n    rootIsSmall: [\n      classNames.rootIsSmall,\n      {\n        height: ratingSmallIconSize + ratingVerticalPadding * 2 + 'px',\n      },\n    ],\n    rootIsLarge: [\n      classNames.rootIsLarge,\n      {\n        height: ratingLargeIconSize + ratingVerticalPadding * 2 + 'px',\n      },\n    ],\n    ratingStar: [\n      classNames.ratingStar,\n      {\n        display: 'inline-block',\n        position: 'relative',\n        height: 'inherit',\n      },\n    ],\n    ratingStarBack: [\n      classNames.ratingStarBack,\n      {\n        // TODO: Use a proper semantic color for this\n        color: ratingStarUncheckedColor,\n        width: '100%',\n      },\n      disabled && _getColorWithHighContrast(ratingStarDisabledColor, 'GrayText'),\n    ],\n    ratingStarFront: [\n      classNames.ratingStarFront,\n      {\n        position: 'absolute',\n        height: '100 %',\n        left: '0',\n        top: '0',\n        textAlign: 'center',\n        verticalAlign: 'middle',\n        overflow: 'hidden',\n      },\n      _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight'),\n    ],\n    ratingButton: [\n      getFocusStyle(theme),\n      classNames.ratingButton,\n      {\n        backgroundColor: 'transparent',\n        padding: `${ratingVerticalPadding}px ${ratingHorizontalPadding}px`,\n        boxSizing: 'content-box',\n        margin: '0px',\n        border: 'none',\n        cursor: 'pointer',\n        selectors: {\n          '&:disabled': {\n            cursor: 'default',\n          },\n          '&[disabled]': {\n            cursor: 'default',\n          },\n        },\n      },\n      !disabled &&\n        !readOnly && {\n          selectors: {\n            // This is part 2 of highlighting all stars up to the one the user is hovering over\n            '&:hover ~ .ms-Rating-button': {\n              selectors: {\n                '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText'),\n                '.ms-RatingStar-front': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText'),\n              },\n            },\n            '&:hover': {\n              selectors: {\n                '.ms-RatingStar-back': {\n                  color: ratingStarUncheckedHoverColor,\n                },\n                '.ms-RatingStar-front': {\n                  color: ratingStarUncheckedHoverSelectedColor,\n                },\n              },\n            },\n          },\n        },\n      disabled && {\n        cursor: 'default',\n      },\n    ],\n    ratingStarIsSmall: [\n      classNames.ratingStarIsSmall,\n      {\n        fontSize: ratingSmallIconSize + 'px',\n        lineHeight: ratingSmallIconSize + 'px',\n        height: ratingSmallIconSize + 'px',\n      },\n    ],\n    ratingStarIsLarge: [\n      classNames.ratingStartIsLarge,\n      {\n        fontSize: ratingLargeIconSize + 'px',\n        lineHeight: ratingLargeIconSize + 'px',\n        height: ratingLargeIconSize + 'px',\n      },\n    ],\n    labelText: [classNames.labelText, hiddenContentStyle],\n    ratingFocusZone: [\n      getFocusStyle(theme),\n      classNames.ratingFocusZone,\n      {\n        display: 'inline-block',\n      },\n    ],\n  };\n}\n"]},"metadata":{},"sourceType":"module"}