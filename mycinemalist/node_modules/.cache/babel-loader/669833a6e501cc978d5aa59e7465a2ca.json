{"ast":null,"code":"/**\n * asAsync - a HOC for async loading components.\n *\n * Usage:\n *\n * const AsyncDialog = asAsync({\n *   load: () => import('Dialog').then(result => result.default),\n * });\n *\n * React.render(domElement, <AsyncDialog asyncPlaceholder={ () => <Spinner/> } { ...dialogProps } />);\n *\n * Note the `asyncPlaceholder` prop will be respected when rendering the async component and it hasn't\n * been loaded yet.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\n/**\n * If possible, use a WeakMap to maintain a cache of loaded components.\n * This can be used to synchronously render components that have already been loaded,\n * rather than having to wait for at least one async tick.\n */\n\nvar _syncModuleCache = typeof WeakMap !== 'undefined' ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\nnew WeakMap() : undefined;\n/**\n * Produces a component which internally loads the target component before first mount.\n * The component passes all props through to the loaded component.\n *\n * This overload accepts a module with a default export for the component.\n */\n\n\nexport function asAsync(options) {\n  var Async =\n  /** @class */\n  function (_super) {\n    __extends(Async, _super);\n\n    function Async() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.state = {\n        Component: _syncModuleCache ? _syncModuleCache.get(options.load) : undefined\n      };\n      return _this;\n    }\n\n    Async.prototype.render = function () {\n      // Typescript issue: the rest can't be pulled without the any cast, as TypeScript fails with rest on generics.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var _a = this.props,\n          forwardedRef = _a.forwardedRef,\n          Placeholder = _a.asyncPlaceholder,\n          rest = __rest(_a, [\"forwardedRef\", \"asyncPlaceholder\"]);\n\n      var Component = this.state.Component;\n      return Component ? React.createElement(Component, __assign(__assign({}, rest), {\n        ref: forwardedRef\n      })) : Placeholder ? React.createElement(Placeholder, null) : null;\n    };\n\n    Async.prototype.componentDidMount = function () {\n      var _this = this;\n\n      var Component = this.state.Component;\n\n      if (!Component) {\n        options.load().then(function (LoadedComponent) {\n          if (LoadedComponent) {\n            // Cache component for future reference.\n            _syncModuleCache && _syncModuleCache.set(options.load, LoadedComponent); // Set state.\n\n            _this.setState({\n              Component: LoadedComponent\n            }, options.onLoad);\n          }\n        }).catch(options.onError);\n      }\n    };\n\n    return Async;\n  }(React.Component);\n\n  return React.forwardRef(function (props, ref) {\n    return React.createElement(Async, __assign({}, props, {\n      forwardedRef: ref\n    }));\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAmBA;;;;;;AAKA,IAAMC,gBAAgB,GACpB,OAAOC,OAAP,KAAmB,WAAnB,GACI;AACA,IAAIA,OAAJ,EAFJ,GAGIC,SAJN;AAMA;;;;;;;;AAMA,OAAM,SAAUC,OAAV,CAA0BC,OAA1B,EAA0D;EAC9D;EAAA;EAAA;IAAoBC;;IAApB;MAAA;;MAOSC,cAAQ;QACbC,SAAS,EAAEP,gBAAgB,GAAIA,gBAAgB,CAACQ,GAAjB,CAAqBJ,OAAO,CAACK,IAA7B,CAAJ,GAAuEP;MADrF,CAAR;;IAuCR;;IAnCQQ,yBAAP;MACE;MACA;MACA,IAAMC,eAAN;MAAA,IAAQC,8BAAR;MAAA,IAAsBC,iCAAtB;MAAA,IAAqDC,uDAArD;;MACQ;MACR,OAAOP,SAAS,GACdR,KAAK,CAACgB,aAAN,CAAoBR,SAApB,EAA6BS,sBAAOF,IAAP,GAAW;QAAEG,GAAG,EAAEL;MAAP,CAAX,CAA7B,CADc,GAEZC,WAAW,GACbd,oBAACc,WAAD,EAAY,IAAZ,CADa,GAEX,IAJJ;IAKD,CAVM;;IAYAH,oCAAP;MAAA;;MACQ;;MAEN,IAAI,CAACH,SAAL,EAAgB;QACdH,OAAO,CACJK,IADH,GAEGS,IAFH,CAEQ,UAACC,eAAD,EAA2C;UAC/C,IAAIA,eAAJ,EAAqB;YACnB;YACAnB,gBAAgB,IAAIA,gBAAgB,CAACoB,GAAjB,CAAqBhB,OAAO,CAACK,IAA7B,EAAmCU,eAAnC,CAApB,CAFmB,CAInB;;YACAb,KAAI,CAACe,QAAL,CACE;cACEd,SAAS,EAAEY;YADb,CADF,EAIEf,OAAO,CAACkB,MAJV;UAMD;QACF,CAfH,EAgBGC,KAhBH,CAgBSnB,OAAO,CAACoB,OAhBjB;MAiBD;IACF,CAtBM;;IAuBT;EAAC,CA9CD,CAAoBzB,KAAK,CAACQ,SAA1B;;EAgDA,OAAOR,KAAK,CAAC0B,UAAN,CACL,UAACC,KAAD,EAAQT,GAAR,EAAW;IAAK,2BAACP,KAAD,EAAMM,aAAKU,KAAL,EAAU;MAAEd,YAAY,EAAEK;IAAhB,CAAV,CAAN;EAAuC,CADlD,CAAP;AAGD","names":["React","_syncModuleCache","WeakMap","undefined","asAsync","options","__extends","_this","Component","get","load","Async","_a","forwardedRef","Placeholder","rest","createElement","__assign","ref","then","LoadedComponent","set","setState","onLoad","catch","onError","forwardRef","props"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\utilities\\src\\asAsync.tsx"],"sourcesContent":["/**\n * asAsync - a HOC for async loading components.\n *\n * Usage:\n *\n * const AsyncDialog = asAsync({\n *   load: () => import('Dialog').then(result => result.default),\n * });\n *\n * React.render(domElement, <AsyncDialog asyncPlaceholder={ () => <Spinner/> } { ...dialogProps } />);\n *\n * Note the `asyncPlaceholder` prop will be respected when rendering the async component and it hasn't\n * been loaded yet.\n */\n\nimport * as React from 'react';\n\nexport interface IAsAsyncOptions<TProps> {\n  /**\n   * Callback which returns a promise resolving an object which exports the component.\n   */\n  load: () => Promise<React.ElementType<TProps>>;\n\n  /**\n   * Callback executed when async loading is complete.\n   */\n  onLoad?: () => void;\n\n  /**\n   * Callback when async loading fails.\n   */\n  onError?: (error: Error) => void;\n}\n\n/**\n * If possible, use a WeakMap to maintain a cache of loaded components.\n * This can be used to synchronously render components that have already been loaded,\n * rather than having to wait for at least one async tick.\n */\nconst _syncModuleCache =\n  typeof WeakMap !== 'undefined'\n    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      new WeakMap<() => Promise<React.ElementType<any>>, React.ElementType<any> | undefined>()\n    : undefined;\n\n/**\n * Produces a component which internally loads the target component before first mount.\n * The component passes all props through to the loaded component.\n *\n * This overload accepts a module with a default export for the component.\n */\nexport function asAsync<TProps>(options: IAsAsyncOptions<TProps>) {\n  class Async extends React.Component<\n    TProps & {\n      asyncPlaceholder?: React.ElementType;\n      forwardedRef: React.Ref<React.ElementType<TProps>>;\n    },\n    { Component?: React.ElementType<TProps> }\n  > {\n    public state = {\n      Component: _syncModuleCache ? (_syncModuleCache.get(options.load) as React.ElementType<TProps>) : undefined,\n    };\n\n    public render(): JSX.Element | null {\n      // Typescript issue: the rest can't be pulled without the any cast, as TypeScript fails with rest on generics.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const { forwardedRef, asyncPlaceholder: Placeholder, ...rest } = this.props as any;\n      const { Component } = this.state;\n      return Component ? (\n        React.createElement(Component, { ...rest, ref: forwardedRef })\n      ) : Placeholder ? (\n        <Placeholder />\n      ) : null;\n    }\n\n    public componentDidMount(): void {\n      let { Component } = this.state;\n\n      if (!Component) {\n        options\n          .load()\n          .then((LoadedComponent: React.ElementType<TProps>) => {\n            if (LoadedComponent) {\n              // Cache component for future reference.\n              _syncModuleCache && _syncModuleCache.set(options.load, LoadedComponent);\n\n              // Set state.\n              this.setState(\n                {\n                  Component: LoadedComponent,\n                },\n                options.onLoad,\n              );\n            }\n          })\n          .catch(options.onError);\n      }\n    }\n  }\n\n  return React.forwardRef<React.ElementType<TProps>, TProps & { asyncPlaceholder?: React.ElementType }>(\n    (props, ref) => <Async {...props} forwardedRef={ref} />,\n  );\n}\n"]},"metadata":{},"sourceType":"module"}