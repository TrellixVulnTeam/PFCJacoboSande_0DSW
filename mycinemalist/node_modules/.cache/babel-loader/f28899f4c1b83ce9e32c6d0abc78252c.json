{"ast":null,"code":"import * as React from 'react';\nimport { useConst } from './useConst';\n/**\n *  Returns a wrapper function for `setInterval` which automatically handles disposal.\n */\n\nexport var useSetInterval = function useSetInterval() {\n  var intervalIds = useConst({});\n  React.useEffect(function () {\n    return function () {\n      for (var _i = 0, _a = Object.keys(intervalIds); _i < _a.length; _i++) {\n        var id = _a[_i]; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        clearInterval(id);\n      }\n    };\n  }, // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n  [intervalIds]);\n  return useConst({\n    setInterval: function (_setInterval) {\n      function setInterval(_x, _x2) {\n        return _setInterval.apply(this, arguments);\n      }\n\n      setInterval.toString = function () {\n        return _setInterval.toString();\n      };\n\n      return setInterval;\n    }(function (func, duration) {\n      var id = setInterval(func, duration);\n      intervalIds[id] = 1;\n      return id;\n    }),\n    clearInterval: function (_clearInterval) {\n      function clearInterval(_x3) {\n        return _clearInterval.apply(this, arguments);\n      }\n\n      clearInterval.toString = function () {\n        return _clearInterval.toString();\n      };\n\n      return clearInterval;\n    }(function (id) {\n      delete intervalIds[id];\n      clearInterval(id);\n    })\n  });\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAOA;;;;AAGA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAC5B,MAAMC,WAAW,GAAGF,QAAQ,CAAyB,EAAzB,CAA5B;AAEAD,OAAK,CAACI,SAAN,CACE;AAAM;AACJ,WAAiB,uBAAM,CAACC,IAAP,CAAYF,WAAZ,CAAjB,EAAiBG,cAAjB,EAAiBA,IAAjB,EAA2C;AAAtC,YAAMC,EAAE,SAAR,CAAsC,CACzC;;AACAC,qBAAa,CAACD,EAAD,CAAb;AACD;AACF,KALK;AAKL,GANH,EAOE;AACA,GAACJ,WAAD,CARF;AAWA,SAAOF,QAAQ,CAAC;AACdQ,eAAW;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MAAE,UAACC,IAAD,EAAmBC,QAAnB,EAAmC;AAC9C,UAAMJ,EAAE,GAAIE,WAAW,CAACC,IAAD,EAAOC,QAAP,CAAvB;AAEAR,iBAAW,CAACI,EAAD,CAAX,GAAkB,CAAlB;AAEA,aAAOA,EAAP;AACD,KANU,CADG;AASdC,iBAAa;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MAAE,UAACD,EAAD,EAAW;AACxB,aAAOJ,WAAW,CAACI,EAAD,CAAlB;AACAC,mBAAa,CAACD,EAAD,CAAb;AACD,KAHY;AATC,GAAD,CAAf;AAcD,CA5BM","names":["React","useConst","useSetInterval","intervalIds","useEffect","keys","_i","id","clearInterval","setInterval","func","duration"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\react-hooks\\src\\useSetInterval.ts"],"sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type UseSetIntervalReturnType = {\n  setInterval: (callback: () => void, duration: number) => number;\n  clearInterval: (id: number) => void;\n};\n\n/**\n *  Returns a wrapper function for `setInterval` which automatically handles disposal.\n */\nexport const useSetInterval = (): UseSetIntervalReturnType => {\n  const intervalIds = useConst<Record<number, number>>({});\n\n  React.useEffect(\n    () => () => {\n      for (const id of Object.keys(intervalIds)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        clearInterval(id as any);\n      }\n    },\n    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n    [intervalIds],\n  );\n\n  return useConst({\n    setInterval: (func: () => void, duration: number): number => {\n      const id = (setInterval(func, duration) as unknown) as number;\n\n      intervalIds[id] = 1;\n\n      return id;\n    },\n\n    clearInterval: (id: number): void => {\n      delete intervalIds[id];\n      clearInterval(id);\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}