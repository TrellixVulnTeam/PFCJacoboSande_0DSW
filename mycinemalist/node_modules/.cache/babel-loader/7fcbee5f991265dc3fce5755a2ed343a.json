{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { Stylesheet } from './Stylesheet';\nimport { kebabRules } from './transforms/kebabRules';\nimport { prefixRules } from './transforms/prefixRules';\nimport { provideUnits } from './transforms/provideUnits';\nimport { rtlifyRules } from './transforms/rtlifyRules';\nvar DISPLAY_NAME = 'displayName';\n\nfunction getDisplayName(rules) {\n  var rootStyle = rules && rules['&'];\n  return rootStyle ? rootStyle.displayName : undefined;\n}\n\nvar globalSelectorRegExp = /\\:global\\((.+?)\\)/g;\n/**\n * Finds comma separated selectors in a :global() e.g. \":global(.class1, .class2, .class3)\"\n * and wraps them each in their own global \":global(.class1), :global(.class2), :global(.class3)\"\n *\n * @param selectorWithGlobals The selector to process\n * @returns The updated selector\n */\n\nfunction expandCommaSeparatedGlobals(selectorWithGlobals) {\n  // We the selector does not have a :global() we can shortcut\n  if (!globalSelectorRegExp.test(selectorWithGlobals)) {\n    return selectorWithGlobals;\n  }\n\n  var replacementInfo = [];\n  var findGlobal = /\\:global\\((.+?)\\)/g;\n  var match = null; // Create a result list for global selectors so we can replace them.\n\n  while (match = findGlobal.exec(selectorWithGlobals)) {\n    // Only if the found selector is a comma separated list we'll process it.\n    if (match[1].indexOf(',') > -1) {\n      replacementInfo.push([match.index, match.index + match[0].length, // Wrap each of the found selectors in :global()\n      match[1].split(',').map(function (v) {\n        return \":global(\" + v.trim() + \")\";\n      }).join(', ')]);\n    }\n  } // Replace the found selectors with their wrapped variants in reverse order\n\n\n  return replacementInfo.reverse().reduce(function (selector, _a) {\n    var matchIndex = _a[0],\n        matchEndIndex = _a[1],\n        replacement = _a[2];\n    var prefix = selector.slice(0, matchIndex);\n    var suffix = selector.slice(matchEndIndex);\n    return prefix + replacement + suffix;\n  }, selectorWithGlobals);\n}\n\nfunction expandSelector(newSelector, currentSelector) {\n  if (newSelector.indexOf(':global(') >= 0) {\n    return newSelector.replace(globalSelectorRegExp, '$1');\n  } else if (newSelector.indexOf(':') === 0) {\n    return currentSelector + newSelector;\n  } else if (newSelector.indexOf('&') < 0) {\n    return currentSelector + ' ' + newSelector;\n  }\n\n  return newSelector;\n}\n\nfunction extractSelector(currentSelector, rules, selector, value) {\n  if (rules === void 0) {\n    rules = {\n      __order: []\n    };\n  }\n\n  if (selector.indexOf('@') === 0) {\n    selector = selector + '{' + currentSelector;\n    extractRules([value], rules, selector);\n  } else if (selector.indexOf(',') > -1) {\n    expandCommaSeparatedGlobals(selector).split(',').map(function (s) {\n      return s.trim();\n    }).forEach(function (separatedSelector) {\n      return extractRules([value], rules, expandSelector(separatedSelector, currentSelector));\n    });\n  } else {\n    extractRules([value], rules, expandSelector(selector, currentSelector));\n  }\n}\n\nfunction extractRules(args, rules, currentSelector) {\n  if (rules === void 0) {\n    rules = {\n      __order: []\n    };\n  }\n\n  if (currentSelector === void 0) {\n    currentSelector = '&';\n  }\n\n  var stylesheet = Stylesheet.getInstance();\n  var currentRules = rules[currentSelector];\n\n  if (!currentRules) {\n    currentRules = {};\n    rules[currentSelector] = currentRules;\n\n    rules.__order.push(currentSelector);\n  }\n\n  for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {\n    var arg = args_1[_i]; // If the arg is a string, we need to look up the class map and merge.\n\n    if (typeof arg === 'string') {\n      var expandedRules = stylesheet.argsFromClassName(arg);\n\n      if (expandedRules) {\n        extractRules(expandedRules, rules, currentSelector);\n      } // Else if the arg is an array, we need to recurse in.\n\n    } else if (Array.isArray(arg)) {\n      extractRules(arg, rules, currentSelector);\n    } else {\n      for (var prop in arg) {\n        if (arg.hasOwnProperty(prop)) {\n          var propValue = arg[prop];\n\n          if (prop === 'selectors') {\n            // every child is a selector.\n            var selectors = arg.selectors;\n\n            for (var newSelector in selectors) {\n              if (selectors.hasOwnProperty(newSelector)) {\n                extractSelector(currentSelector, rules, newSelector, selectors[newSelector]);\n              }\n            }\n          } else if (typeof propValue === 'object') {\n            // prop is a selector.\n            if (propValue !== null) {\n              extractSelector(currentSelector, rules, prop, propValue);\n            }\n          } else {\n            if (propValue !== undefined) {\n              // Else, add the rule to the currentSelector.\n              if (prop === 'margin' || prop === 'padding') {\n                expandQuads(currentRules, prop, propValue);\n              } else {\n                currentRules[prop] = propValue;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return rules;\n}\n\nfunction expandQuads(currentRules, name, value) {\n  var parts = typeof value === 'string' ? value.split(' ') : [value];\n  currentRules[name + 'Top'] = parts[0];\n  currentRules[name + 'Right'] = parts[1] || parts[0];\n  currentRules[name + 'Bottom'] = parts[2] || parts[0];\n  currentRules[name + 'Left'] = parts[3] || parts[1] || parts[0];\n}\n\nfunction getKeyForRules(options, rules) {\n  var serialized = [options.rtl ? 'rtl' : 'ltr'];\n  var hasProps = false;\n\n  for (var _i = 0, _a = rules.__order; _i < _a.length; _i++) {\n    var selector = _a[_i];\n    serialized.push(selector);\n    var rulesForSelector = rules[selector];\n\n    for (var propName in rulesForSelector) {\n      if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== undefined) {\n        hasProps = true;\n        serialized.push(propName, rulesForSelector[propName]);\n      }\n    }\n  }\n\n  return hasProps ? serialized.join('') : undefined;\n}\n\nfunction repeatString(target, count) {\n  if (count <= 0) {\n    return '';\n  }\n\n  if (count === 1) {\n    return target;\n  }\n\n  return target + repeatString(target, count - 1);\n}\n\nexport function serializeRuleEntries(options, ruleEntries) {\n  if (!ruleEntries) {\n    return '';\n  }\n\n  var allEntries = [];\n\n  for (var entry in ruleEntries) {\n    if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== undefined) {\n      allEntries.push(entry, ruleEntries[entry]);\n    }\n  } // Apply transforms.\n\n\n  for (var i = 0; i < allEntries.length; i += 2) {\n    kebabRules(allEntries, i);\n    provideUnits(allEntries, i);\n    rtlifyRules(options, allEntries, i);\n    prefixRules(allEntries, i);\n  } // Apply punctuation.\n\n\n  for (var i = 1; i < allEntries.length; i += 4) {\n    allEntries.splice(i, 1, ':', allEntries[i], ';');\n  }\n\n  return allEntries.join('');\n}\nexport function styleToRegistration(options) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  var rules = extractRules(args);\n  var key = getKeyForRules(options, rules);\n\n  if (key) {\n    var stylesheet = Stylesheet.getInstance();\n    var registration = {\n      className: stylesheet.classNameFromKey(key),\n      key: key,\n      args: args\n    };\n\n    if (!registration.className) {\n      registration.className = stylesheet.getClassName(getDisplayName(rules));\n      var rulesToInsert = [];\n\n      for (var _a = 0, _b = rules.__order; _a < _b.length; _a++) {\n        var selector = _b[_a];\n        rulesToInsert.push(selector, serializeRuleEntries(options, rules[selector]));\n      }\n\n      registration.rulesToInsert = rulesToInsert;\n    }\n\n    return registration;\n  }\n\n  return undefined;\n}\n/**\n * Insert style to stylesheet.\n * @param registration Style registration.\n * @param specificityMultiplier Number of times classname selector is repeated in the css rule.\n * This is to increase css specificity in case it's needed. Default to 1.\n */\n\nexport function applyRegistration(registration, specificityMultiplier) {\n  if (specificityMultiplier === void 0) {\n    specificityMultiplier = 1;\n  }\n\n  var stylesheet = Stylesheet.getInstance();\n  var className = registration.className,\n      key = registration.key,\n      args = registration.args,\n      rulesToInsert = registration.rulesToInsert;\n\n  if (rulesToInsert) {\n    // rulesToInsert is an ordered array of selector/rule pairs.\n    for (var i = 0; i < rulesToInsert.length; i += 2) {\n      var rules = rulesToInsert[i + 1];\n\n      if (rules) {\n        var selector = rulesToInsert[i];\n        selector = selector.replace(/&/g, repeatString(\".\" + registration.className, specificityMultiplier)); // Insert. Note if a media query, we must close the query with a final bracket.\n\n        var processedRule = selector + \"{\" + rules + \"}\" + (selector.indexOf('@') === 0 ? '}' : '');\n        stylesheet.insertRule(processedRule);\n      }\n    }\n\n    stylesheet.cacheClassName(className, key, args, rulesToInsert);\n  }\n}\nexport function styleToClassName(options) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  var registration = styleToRegistration.apply(void 0, __spreadArrays([options], args));\n\n  if (registration) {\n    applyRegistration(registration, options.specificityMultiplier);\n    return registration.className;\n  }\n\n  return '';\n}","map":{"version":3,"mappings":"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","names":["Stylesheet","kebabRules","prefixRules","provideUnits","rtlifyRules","DISPLAY_NAME","getDisplayName","rules","rootStyle","displayName","undefined","globalSelectorRegExp","expandCommaSeparatedGlobals","selectorWithGlobals","test","replacementInfo","findGlobal","match","exec","indexOf","push","index","length","split","map","v","trim","join","reverse","reduce","selector","_a","matchIndex","matchEndIndex","replacement","prefix","slice","suffix","expandSelector","newSelector","currentSelector","replace","extractSelector","value","__order","extractRules","s","forEach","separatedSelector","args","stylesheet","getInstance","currentRules","_i","arg","expandedRules","argsFromClassName","Array","isArray","prop","hasOwnProperty","propValue","selectors","expandQuads","name","parts","getKeyForRules","options","serialized","rtl","hasProps","rulesForSelector","propName","repeatString","target","count","serializeRuleEntries","ruleEntries","allEntries","entry","i","splice","styleToRegistration","key","registration","className","classNameFromKey","getClassName","rulesToInsert","applyRegistration","specificityMultiplier","processedRule","insertRule","cacheClassName","styleToClassName","__spreadArrays"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\merge-styles\\src\\styleToClassName.ts"],"sourcesContent":["import { IStyle } from './IStyle';\nimport { IRawStyle } from './IRawStyle';\n\nimport { Stylesheet } from './Stylesheet';\nimport { kebabRules } from './transforms/kebabRules';\nimport { prefixRules } from './transforms/prefixRules';\nimport { provideUnits } from './transforms/provideUnits';\nimport { rtlifyRules } from './transforms/rtlifyRules';\nimport { IStyleOptions } from './IStyleOptions';\n\nconst DISPLAY_NAME = 'displayName';\n\ntype IDictionary = { [key: string]: any };\n\ninterface IRuleSet {\n  __order: string[];\n  [key: string]: IDictionary;\n}\n\nfunction getDisplayName(rules?: { [key: string]: IRawStyle }): string | undefined {\n  const rootStyle: IStyle = rules && rules['&'];\n\n  return rootStyle ? (rootStyle as IRawStyle).displayName : undefined;\n}\n\nconst globalSelectorRegExp = /\\:global\\((.+?)\\)/g;\n\ntype ReplacementInfo = [number, number, string];\n\n/**\n * Finds comma separated selectors in a :global() e.g. \":global(.class1, .class2, .class3)\"\n * and wraps them each in their own global \":global(.class1), :global(.class2), :global(.class3)\"\n *\n * @param selectorWithGlobals The selector to process\n * @returns The updated selector\n */\nfunction expandCommaSeparatedGlobals(selectorWithGlobals: string): string {\n  // We the selector does not have a :global() we can shortcut\n  if (!globalSelectorRegExp.test(selectorWithGlobals)) {\n    return selectorWithGlobals;\n  }\n\n  const replacementInfo: ReplacementInfo[] = [];\n\n  const findGlobal = /\\:global\\((.+?)\\)/g;\n  let match = null;\n  // Create a result list for global selectors so we can replace them.\n  while ((match = findGlobal.exec(selectorWithGlobals))) {\n    // Only if the found selector is a comma separated list we'll process it.\n    if (match[1].indexOf(',') > -1) {\n      replacementInfo.push([\n        match.index,\n        match.index + match[0].length,\n        // Wrap each of the found selectors in :global()\n        match[1]\n          .split(',')\n          .map((v: string) => `:global(${v.trim()})`)\n          .join(', '),\n      ]);\n    }\n  }\n\n  // Replace the found selectors with their wrapped variants in reverse order\n  return replacementInfo\n    .reverse()\n    .reduce((selector: string, [matchIndex, matchEndIndex, replacement]: ReplacementInfo) => {\n      const prefix = selector.slice(0, matchIndex);\n      const suffix = selector.slice(matchEndIndex);\n\n      return prefix + replacement + suffix;\n    }, selectorWithGlobals);\n}\n\nfunction expandSelector(newSelector: string, currentSelector: string): string {\n  if (newSelector.indexOf(':global(') >= 0) {\n    return newSelector.replace(globalSelectorRegExp, '$1');\n  } else if (newSelector.indexOf(':') === 0) {\n    return currentSelector + newSelector;\n  } else if (newSelector.indexOf('&') < 0) {\n    return currentSelector + ' ' + newSelector;\n  }\n\n  return newSelector;\n}\n\nfunction extractSelector(currentSelector: string, rules: IRuleSet = { __order: [] }, selector: string, value: IStyle) {\n  if (selector.indexOf('@') === 0) {\n    selector = selector + '{' + currentSelector;\n    extractRules([value], rules, selector);\n  } else if (selector.indexOf(',') > -1) {\n    expandCommaSeparatedGlobals(selector)\n      .split(',')\n      .map((s: string) => s.trim())\n      .forEach((separatedSelector: string) =>\n        extractRules([value], rules, expandSelector(separatedSelector, currentSelector)),\n      );\n  } else {\n    extractRules([value], rules, expandSelector(selector, currentSelector));\n  }\n}\n\nfunction extractRules(args: IStyle[], rules: IRuleSet = { __order: [] }, currentSelector: string = '&'): IRuleSet {\n  const stylesheet = Stylesheet.getInstance();\n  let currentRules: IDictionary | undefined = rules[currentSelector] as IDictionary;\n\n  if (!currentRules) {\n    currentRules = {};\n    rules[currentSelector] = currentRules;\n    rules.__order.push(currentSelector);\n  }\n\n  for (const arg of args) {\n    // If the arg is a string, we need to look up the class map and merge.\n    if (typeof arg === 'string') {\n      const expandedRules = stylesheet.argsFromClassName(arg);\n\n      if (expandedRules) {\n        extractRules(expandedRules, rules, currentSelector);\n      }\n      // Else if the arg is an array, we need to recurse in.\n    } else if (Array.isArray(arg)) {\n      extractRules(arg, rules, currentSelector);\n    } else {\n      for (const prop in arg as any) {\n        if ((arg as any).hasOwnProperty(prop)) {\n          const propValue = (arg as any)[prop];\n\n          if (prop === 'selectors') {\n            // every child is a selector.\n            const selectors: { [key: string]: IStyle } = (arg as any).selectors;\n\n            for (const newSelector in selectors) {\n              if (selectors.hasOwnProperty(newSelector)) {\n                extractSelector(currentSelector, rules, newSelector, selectors[newSelector]);\n              }\n            }\n          } else if (typeof propValue === 'object') {\n            // prop is a selector.\n            if (propValue !== null) {\n              extractSelector(currentSelector, rules, prop, propValue);\n            }\n          } else {\n            if (propValue !== undefined) {\n              // Else, add the rule to the currentSelector.\n              if (prop === 'margin' || prop === 'padding') {\n                expandQuads(currentRules, prop, propValue);\n              } else {\n                (currentRules as any)[prop] = propValue;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return rules;\n}\n\nfunction expandQuads(currentRules: IDictionary, name: string, value: string): void {\n  const parts = typeof value === 'string' ? value.split(' ') : [value];\n\n  currentRules[name + 'Top'] = parts[0];\n  currentRules[name + 'Right'] = parts[1] || parts[0];\n  currentRules[name + 'Bottom'] = parts[2] || parts[0];\n  currentRules[name + 'Left'] = parts[3] || parts[1] || parts[0];\n}\n\nfunction getKeyForRules(options: IStyleOptions, rules: IRuleSet): string | undefined {\n  const serialized: string[] = [options.rtl ? 'rtl' : 'ltr'];\n  let hasProps = false;\n\n  for (const selector of rules.__order) {\n    serialized.push(selector);\n    const rulesForSelector = rules[selector];\n\n    for (const propName in rulesForSelector) {\n      if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== undefined) {\n        hasProps = true;\n        serialized.push(propName, rulesForSelector[propName]);\n      }\n    }\n  }\n\n  return hasProps ? serialized.join('') : undefined;\n}\n\nfunction repeatString(target: string, count: number): string {\n  if (count <= 0) {\n    return '';\n  }\n\n  if (count === 1) {\n    return target;\n  }\n\n  return target + repeatString(target, count - 1);\n}\n\nexport function serializeRuleEntries(options: IStyleOptions, ruleEntries: { [key: string]: string | number }): string {\n  if (!ruleEntries) {\n    return '';\n  }\n\n  const allEntries: (string | number)[] = [];\n\n  for (const entry in ruleEntries) {\n    if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== undefined) {\n      allEntries.push(entry, ruleEntries[entry]);\n    }\n  }\n\n  // Apply transforms.\n  for (let i = 0; i < allEntries.length; i += 2) {\n    kebabRules(allEntries, i);\n    provideUnits(allEntries, i);\n    rtlifyRules(options, allEntries, i);\n    prefixRules(allEntries, i);\n  }\n\n  // Apply punctuation.\n  for (let i = 1; i < allEntries.length; i += 4) {\n    allEntries.splice(i, 1, ':', allEntries[i], ';');\n  }\n\n  return allEntries.join('');\n}\n\nexport interface IRegistration {\n  className: string;\n  key: string;\n  args: IStyle[];\n  rulesToInsert: string[];\n}\n\nexport function styleToRegistration(options: IStyleOptions, ...args: IStyle[]): IRegistration | undefined {\n  const rules: IRuleSet = extractRules(args);\n  const key = getKeyForRules(options, rules);\n\n  if (key) {\n    const stylesheet = Stylesheet.getInstance();\n    const registration: Partial<IRegistration> = {\n      className: stylesheet.classNameFromKey(key),\n      key,\n      args,\n    };\n\n    if (!registration.className) {\n      registration.className = stylesheet.getClassName(getDisplayName(rules));\n      const rulesToInsert: string[] = [];\n\n      for (const selector of rules.__order) {\n        rulesToInsert.push(selector, serializeRuleEntries(options, rules[selector]));\n      }\n      registration.rulesToInsert = rulesToInsert;\n    }\n\n    return registration as IRegistration;\n  }\n\n  return undefined;\n}\n\n/**\n * Insert style to stylesheet.\n * @param registration Style registration.\n * @param specificityMultiplier Number of times classname selector is repeated in the css rule.\n * This is to increase css specificity in case it's needed. Default to 1.\n */\nexport function applyRegistration(registration: IRegistration, specificityMultiplier: number = 1): void {\n  const stylesheet = Stylesheet.getInstance();\n  const { className, key, args, rulesToInsert } = registration;\n\n  if (rulesToInsert) {\n    // rulesToInsert is an ordered array of selector/rule pairs.\n    for (let i = 0; i < rulesToInsert.length; i += 2) {\n      const rules = rulesToInsert[i + 1];\n      if (rules) {\n        let selector = rulesToInsert[i];\n        selector = selector.replace(/&/g, repeatString(`.${registration.className}`, specificityMultiplier));\n\n        // Insert. Note if a media query, we must close the query with a final bracket.\n        const processedRule = `${selector}{${rules}}${selector.indexOf('@') === 0 ? '}' : ''}`;\n        stylesheet.insertRule(processedRule);\n      }\n    }\n    stylesheet.cacheClassName(className!, key!, args!, rulesToInsert);\n  }\n}\n\nexport function styleToClassName(options: IStyleOptions, ...args: IStyle[]): string {\n  const registration = styleToRegistration(options, ...args);\n  if (registration) {\n    applyRegistration(registration, options.specificityMultiplier);\n\n    return registration.className;\n  }\n\n  return '';\n}\n"]},"metadata":{},"sourceType":"module"}