{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport { Async, DelayedRender, classNamesFunction, getId, getNativeProps, getWindow, initializeComponentRef, inputProperties, isControlled, isIE11, textAreaProperties, warn, warnControlledUsage, warnMutuallyExclusive } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_STATE_VALUE = '';\nvar COMPONENT_NAME = 'TextField';\nvar REVEAL_ICON_NAME = 'RedEye';\nvar HIDE_ICON_NAME = 'Hide';\n\nvar TextFieldBase =\n/** @class */\nfunction (_super) {\n  __extends(TextFieldBase, _super);\n\n  function TextFieldBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._textElement = React.createRef();\n\n    _this._onFocus = function (ev) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(ev);\n      }\n\n      _this.setState({\n        isFocused: true\n      }, function () {\n        if (_this.props.validateOnFocusIn) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n\n    _this._onBlur = function (ev) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n\n      _this.setState({\n        isFocused: false\n      }, function () {\n        if (_this.props.validateOnFocusOut) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n          required = props.required; // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n\n      var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : undefined;\n\n      if (label) {\n        return React.createElement(Label, {\n          required: required,\n          htmlFor: _this._id,\n          styles: labelStyles,\n          disabled: props.disabled,\n          id: _this._labelId\n        }, props.label);\n      }\n\n      return null;\n    };\n\n    _this._onRenderDescription = function (props) {\n      if (props.description) {\n        return React.createElement(\"span\", {\n          className: _this._classNames.description\n        }, props.description);\n      }\n\n      return null;\n    };\n\n    _this._onRevealButtonClick = function (event) {\n      _this.setState(function (prevState) {\n        return {\n          isRevealingPassword: !prevState.isRevealingPassword\n        };\n      });\n    };\n\n    _this._onInputChange = function (event) {\n      // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n      // which have *probably* been fixed now:\n      // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n      // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n      // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n      // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n      var element = event.target;\n      var value = element.value; // Ignore this event if the value is undefined (in case one of the IE bugs comes back)\n\n      if (value === undefined || value === _this._lastChangeValue) {\n        return;\n      }\n\n      _this._lastChangeValue = value; // This is so developers can access the event properties in asynchronous callbacks\n      // https://reactjs.org/docs/events.html#event-pooling\n\n      event.persist();\n      var isSameValue;\n\n      _this.setState(function (prevState, props) {\n        var prevValue = _getValue(props, prevState) || '';\n        isSameValue = value === prevValue; // Avoid doing unnecessary work when the value has not changed.\n\n        if (isSameValue) {\n          return null;\n        } // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n\n\n        return _this._isControlled ? null : {\n          uncontrolledValue: value\n        };\n      }, function () {\n        // If the value actually changed, call onChange (for either controlled or uncontrolled)\n        var onChange = _this.props.onChange;\n\n        if (!isSameValue && onChange) {\n          onChange(event, value);\n        }\n      });\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage'\n      });\n    }\n\n    _this._fallbackId = getId(COMPONENT_NAME);\n    _this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    _this._labelId = getId(COMPONENT_NAME + 'Label');\n\n    _this._warnControlledUsage();\n\n    var _a = props.defaultValue,\n        defaultValue = _a === void 0 ? DEFAULT_STATE_VALUE : _a;\n\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n\n    _this.state = {\n      uncontrolledValue: _this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: ''\n    };\n    _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);\n    _this._lastValidation = 0;\n    return _this;\n  }\n\n  Object.defineProperty(TextFieldBase.prototype, \"value\", {\n    /**\n     * Gets the current value of the text field.\n     */\n    get: function get() {\n      return _getValue(this.props, this.state);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TextFieldBase.prototype.componentDidMount = function () {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  };\n\n  TextFieldBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n\n  TextFieldBase.prototype.getSnapshotBeforeUpdate = function (prevProps, prevState) {\n    return {\n      selection: [this.selectionStart, this.selectionEnd]\n    };\n  };\n\n  TextFieldBase.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {\n    var props = this.props;\n    var _a = (snapshot || {}).selection,\n        selection = _a === void 0 ? [null, null] : _a;\n    var start = selection[0],\n        end = selection[1];\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    var prevValue = _getValue(prevProps, prevState);\n\n    var value = this.value;\n\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps); // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n\n\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({\n          errorMessage: ''\n        });\n      } // Adjust height if needed based on new value\n\n\n      this._adjustInputHeight(); // Reset the record of the last value seen by a change/input event\n\n\n      this._lastChangeValue = undefined; // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  };\n\n  TextFieldBase.prototype.render = function () {\n    var _a = this.props,\n        borderless = _a.borderless,\n        className = _a.className,\n        disabled = _a.disabled,\n        iconProps = _a.iconProps,\n        inputClassName = _a.inputClassName,\n        label = _a.label,\n        multiline = _a.multiline,\n        required = _a.required,\n        underlined = _a.underlined,\n        prefix = _a.prefix,\n        resizable = _a.resizable,\n        suffix = _a.suffix,\n        theme = _a.theme,\n        styles = _a.styles,\n        autoAdjustHeight = _a.autoAdjustHeight,\n        canRevealPassword = _a.canRevealPassword,\n        type = _a.type,\n        _b = _a.onRenderPrefix,\n        onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b,\n        _c = _a.onRenderSuffix,\n        onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c,\n        _d = _a.onRenderLabel,\n        onRenderLabel = _d === void 0 ? this._onRenderLabel : _d,\n        _e = _a.onRenderDescription,\n        onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;\n    var _f = this.state,\n        isFocused = _f.isFocused,\n        isRevealingPassword = _f.isRevealingPassword;\n    var errorMessage = this._errorMessage;\n\n    var hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    var classNames = this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      focused: isFocused,\n      required: required,\n      multiline: multiline,\n      hasLabel: !!label,\n      hasErrorMessage: !!errorMessage,\n      borderless: borderless,\n      resizable: resizable,\n      hasIcon: !!iconProps,\n      underlined: underlined,\n      inputClassName: inputClassName,\n      autoAdjustHeight: autoAdjustHeight,\n      hasRevealButton: hasRevealButton\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, React.createElement(\"div\", {\n      className: classNames.wrapper\n    }, onRenderLabel(this.props, this._onRenderLabel), React.createElement(\"div\", {\n      className: classNames.fieldGroup\n    }, (prefix !== undefined || this.props.onRenderPrefix) && React.createElement(\"div\", {\n      className: classNames.prefix\n    }, onRenderPrefix(this.props, this._onRenderPrefix)), multiline ? this._renderTextArea() : this._renderInput(), iconProps && React.createElement(Icon, __assign({\n      className: classNames.icon\n    }, iconProps)), hasRevealButton && // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n    React.createElement(\"button\", {\n      className: classNames.revealButton,\n      onClick: this._onRevealButtonClick,\n      type: \"button\"\n    }, React.createElement(\"span\", {\n      className: classNames.revealSpan\n    }, React.createElement(Icon, {\n      className: classNames.revealIcon,\n      iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME\n    }))), (suffix !== undefined || this.props.onRenderSuffix) && React.createElement(\"div\", {\n      className: classNames.suffix\n    }, onRenderSuffix(this.props, this._onRenderSuffix)))), this._isDescriptionAvailable && React.createElement(\"span\", {\n      id: this._descriptionId\n    }, onRenderDescription(this.props, this._onRenderDescription), errorMessage && React.createElement(\"div\", {\n      role: \"alert\"\n    }, React.createElement(DelayedRender, null, React.createElement(\"p\", {\n      className: classNames.errorMessage\n    }, React.createElement(\"span\", {\n      \"data-automation-id\": \"error-message\"\n    }, errorMessage))))));\n  };\n  /**\n   * Sets focus on the text field\n   */\n\n\n  TextFieldBase.prototype.focus = function () {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  };\n  /**\n   * Blurs the text field.\n   */\n\n\n  TextFieldBase.prototype.blur = function () {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  };\n  /**\n   * Selects the text field\n   */\n\n\n  TextFieldBase.prototype.select = function () {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  };\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n\n\n  TextFieldBase.prototype.setSelectionStart = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  };\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n\n\n  TextFieldBase.prototype.setSelectionEnd = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"selectionStart\", {\n    /**\n     * Gets the selection start of the text field\n     */\n    get: function get() {\n      return this._textElement.current ? this._textElement.current.selectionStart : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"selectionEnd\", {\n    /**\n     * Gets the selection end of the text field\n     */\n    get: function get() {\n      return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n\n  TextFieldBase.prototype.setSelectionRange = function (start, end) {\n    if (this._textElement.current) {\n      this._textElement.current.setSelectionRange(start, end);\n    }\n  };\n\n  TextFieldBase.prototype._warnControlledUsage = function (prevProps) {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly'\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\"Warning: 'value' prop on '\" + COMPONENT_NAME + \"' should not be null. Consider using an \" + 'empty string to clear the component or undefined to indicate an uncontrolled component.');\n    }\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"_id\", {\n    /** Returns `props.id` if available, or a fallback if not. */\n    get: function get() {\n      return this.props.id || this._fallbackId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"_isControlled\", {\n    get: function get() {\n      return isControlled(this.props, 'value');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TextFieldBase.prototype._onRenderPrefix = function (props) {\n    var prefix = props.prefix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, prefix);\n  };\n\n  TextFieldBase.prototype._onRenderSuffix = function (props) {\n    var suffix = props.suffix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, suffix);\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"_errorMessage\", {\n    /**\n     * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n     *\n     * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n     * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n     */\n    get: function get() {\n      var _a = this.props.errorMessage,\n          errorMessage = _a === void 0 ? this.state.errorMessage : _a;\n      return errorMessage || '';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"_isDescriptionAvailable\", {\n    /**\n     * If a custom description render function is supplied then treat description as always available.\n     * Otherwise defer to the presence of description or error message text.\n     */\n    get: function get() {\n      var props = this.props;\n      return !!(props.onRenderDescription || props.description || this._errorMessage);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TextFieldBase.prototype._renderTextArea = function () {\n    var textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\n    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return React.createElement(\"textarea\", __assign({\n      id: this._id\n    }, textAreaProps, {\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": !!this._errorMessage,\n      \"aria-label\": this.props.ariaLabel,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n\n  TextFieldBase.prototype._renderInput = function () {\n    var _a;\n\n    var inputProps = getNativeProps(this.props, inputProperties, ['defaultValue', 'type']);\n    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    var type = this.state.isRevealingPassword ? 'text' : (_a = this.props.type, _a !== null && _a !== void 0 ? _a : 'text');\n    return React.createElement(\"input\", __assign({\n      type: type,\n      id: this._id,\n      \"aria-labelledby\": ariaLabelledBy\n    }, inputProps, {\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-label\": this.props.ariaLabel,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": !!this._errorMessage,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n\n  TextFieldBase.prototype._validate = function (value) {\n    var _this = this; // In case _validate is called again while validation promise is executing\n\n\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    var onGetErrorMessage = this.props.onGetErrorMessage;\n    var result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({\n          errorMessage: result\n        });\n\n        this._notifyAfterValidate(value, result);\n      } else {\n        var currentValidation_1 = ++this._lastValidation;\n        result.then(function (errorMessage) {\n          if (currentValidation_1 === _this._lastValidation) {\n            _this.setState({\n              errorMessage: errorMessage\n            });\n          }\n\n          _this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  };\n\n  TextFieldBase.prototype._notifyAfterValidate = function (value, errorMessage) {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  };\n\n  TextFieldBase.prototype._adjustInputHeight = function () {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      var textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  };\n\n  TextFieldBase.defaultProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n    canRevealPassword: false\n  };\n  return TextFieldBase;\n}(React.Component);\n\nexport { TextFieldBase };\n/** Get the value from the given state and props (converting from number to string if needed) */\n\nfunction _getValue(props, state) {\n  var _a = props.value,\n      value = _a === void 0 ? state.uncontrolledValue : _a;\n\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n\n  return value;\n}\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\n\n\nfunction _shouldValidateAllChanges(props) {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n} // Only calculate this once across all TextFields, since will stay the same\n\n\nvar __browserNeedsRevealButton;\n\nfunction _browserNeedsRevealButton() {\n  var _a;\n\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    var win = getWindow();\n\n    if ((_a = win) === null || _a === void 0 ? void 0 : _a.navigator) {\n      // Edge, Chromium Edge\n      var isEdge = /Edg/.test(win.navigator.userAgent || '');\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n\n  return __browserNeedsRevealButton;\n}","map":{"version":3,"mappings":"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","names":["React","Label","Icon","Async","DelayedRender","classNamesFunction","getId","getNativeProps","getWindow","initializeComponentRef","inputProperties","isControlled","isIE11","textAreaProperties","warn","warnControlledUsage","warnMutuallyExclusive","getClassNames","DEFAULT_STATE_VALUE","COMPONENT_NAME","REVEAL_ICON_NAME","HIDE_ICON_NAME","__extends","props","_super","_this","createRef","ev","onFocus","setState","isFocused","validateOnFocusIn","_validate","value","onBlur","validateOnFocusOut","required","labelStyles","_classNames","subComponentStyles","label","undefined","htmlFor","_id","styles","disabled","id","_labelId","description","className","event","isRevealingPassword","prevState","element","target","_lastChangeValue","persist","isSameValue","prevValue","_getValue","_isControlled","uncontrolledValue","onChange","_async","process","env","NODE_ENV","errorMessage","_fallbackId","_descriptionId","_warnControlledUsage","defaultValue","String","state","_delayedValidate","debounce","deferredValidationTime","_lastValidation","Object","TextFieldBase","_adjustInputHeight","validateOnLoad","dispose","prevProps","selection","selectionStart","selectionEnd","snapshot","end","multiline","focus","start","setSelectionRange","_shouldValidateAllChanges","borderless","iconProps","inputClassName","underlined","prefix","resizable","suffix","theme","autoAdjustHeight","canRevealPassword","type","_b","onRenderPrefix","_c","onRenderSuffix","_d","onRenderLabel","_e","onRenderDescription","_errorMessage","hasRevealButton","_browserNeedsRevealButton","classNames","focused","hasLabel","hasErrorMessage","hasIcon","root","wrapper","_onRenderLabel","fieldGroup","_onRenderPrefix","_renderTextArea","_renderInput","__assign","icon","revealButton","onClick","_onRevealButtonClick","revealSpan","revealIcon","iconName","_onRenderSuffix","_isDescriptionAvailable","_onRenderDescription","role","_textElement","current","blur","select","componentId","componentName","oldProps","valueProp","defaultValueProp","onChangeProp","readOnlyProp","_hasWarnedNullValue","style","paddingBottom","textAreaProps","ariaLabelledBy","ref","onInput","_onInputChange","field","ariaLabel","readOnly","_onFocus","_onBlur","inputProps","_a","_latestValidateValue","onGetErrorMessage","result","_notifyAfterValidate","currentValidation_1","then","onNotifyValidationResult","textField","height","scrollHeight","Component","__browserNeedsRevealButton","win","navigator","isEdge","test","userAgent"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\TextField\\TextField.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { Label, ILabelStyleProps, ILabelStyles } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  DelayedRender,\n  IStyleFunctionOrObject,\n  classNamesFunction,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n    canRevealPassword: false,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // Reset the record of the last value seen by a change/input event\n      this._lastChangeValue = undefined;\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: !!errorMessage,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      <div className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix}>{onRenderPrefix(this.props, this._onRenderPrefix)}</div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button className={classNames.revealButton} onClick={this._onRevealButtonClick} type=\"button\">\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix}>{onRenderSuffix(this.props, this._onRenderSuffix)}</div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>\n                  <p className={classNames.errorMessage}>\n                    <span data-automation-id=\"error-message\">{errorMessage}</span>\n                  </p>\n                </DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): React.ReactElement<React.HTMLAttributes<HTMLInputElement>> {\n    const inputProps = getNativeProps<React.HTMLAttributes<HTMLInputElement>>(this.props, inputProperties, [\n      'defaultValue',\n      'type',\n    ]);\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    const type = this.state.isRevealingPassword ? 'text' : this.props.type ?? 'text';\n    return (\n      <input\n        type={type}\n        id={this._id}\n        aria-labelledby={ariaLabelledBy}\n        {...inputProps}\n        ref={this._textElement as React.RefObject<HTMLInputElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-label={this.props.ariaLabel}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if the value is undefined (in case one of the IE bugs comes back)\n    if (value === undefined || value === this._lastChangeValue) {\n      return;\n    }\n    this._lastChangeValue = value;\n\n    // This is so developers can access the event properties in asynchronous callbacks\n    // https://reactjs.org/docs/events.html#event-pooling\n    event.persist();\n\n    let isSameValue: boolean;\n    this.setState(\n      (prevState: ITextFieldState, props: ITextFieldProps) => {\n        const prevValue = _getValue(props, prevState) || '';\n        isSameValue = value === prevValue;\n        // Avoid doing unnecessary work when the value has not changed.\n        if (isSameValue) {\n          return null;\n        }\n\n        // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n        return this._isControlled ? null : { uncontrolledValue: value };\n      },\n      () => {\n        // If the value actually changed, call onChange (for either controlled or uncontrolled)\n        const { onChange } = this.props;\n        if (!isSameValue && onChange) {\n          onChange(event, value);\n        }\n      },\n    );\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n"]},"metadata":{},"sourceType":"module"}