{"ast":null,"code":"import * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\n/**\n * Hook to get Customizations settings from Customizations singleton or CustomizerContext.\n * It will trigger component state update on settings change observed.\n */\n\nexport function useCustomizationSettings(properties, scopeName) {\n  var forceUpdate = useForceUpdate();\n  var customizations = React.useContext(CustomizerContext).customizations;\n  var inCustomizerContext = customizations.inCustomizerContext;\n  React.useEffect(function () {\n    if (!inCustomizerContext) {\n      Customizations.observe(forceUpdate);\n    }\n\n    return function () {\n      if (!inCustomizerContext) {\n        Customizations.unobserve(forceUpdate);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps -- exclude forceUpdate\n  }, [inCustomizerContext]);\n  return Customizations.getSettings(properties, scopeName, customizations);\n}\n\nfunction useForceUpdate() {\n  var _a = React.useState(0),\n      setValue = _a[1];\n\n  return function () {\n    return setValue(function (value) {\n      return ++value;\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAoBC,cAApB,QAA0C,kBAA1C;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA;;;;;AAIA,OAAM,SAAUC,wBAAV,CAAmCC,UAAnC,EAAyDC,SAAzD,EAA2E;AAC/E,MAAMC,WAAW,GAAGC,cAAc,EAAlC;AACQ;AACA;AACRP,OAAK,CAACQ,SAAN,CAAgB;AACd,QAAI,CAACC,mBAAL,EAA0B;AACxBR,oBAAc,CAACS,OAAf,CAAuBJ,WAAvB;AACD;;AACD,WAAO;AACL,UAAI,CAACG,mBAAL,EAA0B;AACxBR,sBAAc,CAACU,SAAf,CAAyBL,WAAzB;AACD;AACF,KAJD,CAJc,CASd;AACD,GAVD,EAUG,CAACG,mBAAD,CAVH;AAYA,SAAOR,cAAc,CAACW,WAAf,CAA2BR,UAA3B,EAAuCC,SAAvC,EAAkDQ,cAAlD,CAAP;AACD;;AAED,SAASN,cAAT,GAAuB;AACf;AAAA,MAAGO,gBAAH;;AACN,SAAO;AAAM,mBAAQ,CAAC,iBAAK;AAAI,eAAEC,KAAF;AAAO,KAAjB,CAAR;AAA0B,GAAvC;AACD","names":["React","Customizations","CustomizerContext","useCustomizationSettings","properties","scopeName","forceUpdate","useForceUpdate","useEffect","inCustomizerContext","observe","unobserve","getSettings","customizations","setValue","value"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\lib\\src\\customizations\\useCustomizationSettings.ts"],"sourcesContent":["import * as React from 'react';\nimport { ISettings, Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\n\n/**\n * Hook to get Customizations settings from Customizations singleton or CustomizerContext.\n * It will trigger component state update on settings change observed.\n */\nexport function useCustomizationSettings(properties: string[], scopeName?: string): ISettings {\n  const forceUpdate = useForceUpdate();\n  const { customizations } = React.useContext(CustomizerContext);\n  const { inCustomizerContext } = customizations;\n  React.useEffect(() => {\n    if (!inCustomizerContext) {\n      Customizations.observe(forceUpdate);\n    }\n    return () => {\n      if (!inCustomizerContext) {\n        Customizations.unobserve(forceUpdate);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- exclude forceUpdate\n  }, [inCustomizerContext]);\n\n  return Customizations.getSettings(properties, scopeName, customizations);\n}\n\nfunction useForceUpdate() {\n  const [, setValue] = React.useState(0);\n  return () => setValue(value => ++value);\n}\n"]},"metadata":{},"sourceType":"module"}