{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Merge new and old settings, giving priority to new settings.\n * New settings is optional in which case oldSettings is returned as-is.\n * @param oldSettings - Old settings to fall back to.\n * @param newSettings - New settings that will be merged over oldSettings.\n * @returns Merged settings.\n */\n\nexport function mergeSettings(oldSettings, newSettings) {\n  if (oldSettings === void 0) {\n    oldSettings = {};\n  }\n\n  var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);\n  return mergeSettingsWith(oldSettings);\n}\nexport function mergeScopedSettings(oldSettings, newSettings) {\n  if (oldSettings === void 0) {\n    oldSettings = {};\n  }\n\n  var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);\n  return mergeSettingsWith(oldSettings);\n}\n\nfunction _isSettingsFunction(settings) {\n  return typeof settings === 'function';\n}\n\nfunction _settingsMergeWith(newSettings) {\n  return function (settings) {\n    return newSettings ? __assign(__assign({}, settings), newSettings) : settings;\n  };\n}\n\nfunction _scopedSettingsMergeWith(scopedSettingsFromProps) {\n  if (scopedSettingsFromProps === void 0) {\n    scopedSettingsFromProps = {};\n  }\n\n  return function (oldScopedSettings) {\n    var newScopedSettings = __assign({}, oldScopedSettings);\n\n    for (var scopeName in scopedSettingsFromProps) {\n      if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {\n        newScopedSettings[scopeName] = __assign(__assign({}, oldScopedSettings[scopeName]), scopedSettingsFromProps[scopeName]);\n      }\n    }\n\n    return newScopedSettings;\n  };\n}","map":{"version":3,"mappings":";AAEA;;;;;;;;AAOA,OAAM,SAAUA,aAAV,CAAwBC,WAAxB,EAAqDC,WAArD,EAAgG;EAAxE;IAAAD;EAA2B;;EACvD,IAAME,iBAAiB,GAAGC,mBAAmB,CAACF,WAAD,CAAnB,GAAmCA,WAAnC,GAAiDG,kBAAkB,CAACH,WAAD,CAA7F;EAEA,OAAOC,iBAAiB,CAACF,WAAD,CAAxB;AACD;AAED,OAAM,SAAUK,mBAAV,CACJL,WADI,EAEJC,WAFI,EAEuC;EAD3C;IAAAD;EAA2B;;EAG3B,IAAME,iBAAiB,GAAGC,mBAAmB,CAACF,WAAD,CAAnB,GAAmCA,WAAnC,GAAiDK,wBAAwB,CAACL,WAAD,CAAnG;EAEA,OAAOC,iBAAiB,CAACF,WAAD,CAAxB;AACD;;AAED,SAASG,mBAAT,CAA6BI,QAA7B,EAAqE;EACnE,OAAO,OAAOA,QAAP,KAAoB,UAA3B;AACD;;AAED,SAASH,kBAAT,CAA4BH,WAA5B,EAAgD;EAC9C,OAAO,UAACM,QAAD,EAAoB;IAAK,OAACN,WAAW,GAAEO,sBAAMD,QAAN,GAAmBN,WAAnB,CAAF,GAAqCM,QAAjD;EAA0D,CAA1F;AACD;;AAED,SAASD,wBAAT,CAAkCG,uBAAlC,EAAyE;EAAvC;IAAAA;EAAuC;;EACvE,OAAO,UAACC,iBAAD,EAA6B;IAClC,IAAMC,iBAAiB,gBAAmBD,iBAAnB,CAAvB;;IAEA,KAAK,IAAIE,SAAT,IAAsBH,uBAAtB,EAA+C;MAC7C,IAAIA,uBAAuB,CAACI,cAAxB,CAAuCD,SAAvC,CAAJ,EAAuD;QACrDD,iBAAiB,CAACC,SAAD,CAAjB,GAA4BJ,sBAAQE,iBAAiB,CAACE,SAAD,CAAzB,GAAyCH,uBAAuB,CAACG,SAAD,CAAhE,CAA5B;MACD;IACF;;IAED,OAAOD,iBAAP;EACD,CAVD;AAWD","names":["mergeSettings","oldSettings","newSettings","mergeSettingsWith","_isSettingsFunction","_settingsMergeWith","mergeScopedSettings","_scopedSettingsMergeWith","settings","__assign","scopedSettingsFromProps","oldScopedSettings","newScopedSettings","scopeName","hasOwnProperty"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\utilities\\lib\\src\\customizations\\mergeSettings.ts"],"sourcesContent":["import { ISettings, ISettingsFunction } from './Customizations';\n\n/**\n * Merge new and old settings, giving priority to new settings.\n * New settings is optional in which case oldSettings is returned as-is.\n * @param oldSettings - Old settings to fall back to.\n * @param newSettings - New settings that will be merged over oldSettings.\n * @returns Merged settings.\n */\nexport function mergeSettings(oldSettings: ISettings = {}, newSettings?: ISettings | ISettingsFunction): ISettings {\n  const mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);\n\n  return mergeSettingsWith(oldSettings);\n}\n\nexport function mergeScopedSettings(\n  oldSettings: ISettings = {},\n  newSettings?: ISettings | ISettingsFunction,\n): ISettings {\n  const mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);\n\n  return mergeSettingsWith(oldSettings);\n}\n\nfunction _isSettingsFunction(settings?: ISettings | ISettingsFunction): settings is ISettingsFunction {\n  return typeof settings === 'function';\n}\n\nfunction _settingsMergeWith(newSettings?: object): (settings: ISettings) => ISettings {\n  return (settings: ISettings) => (newSettings ? { ...settings, ...newSettings } : settings);\n}\n\nfunction _scopedSettingsMergeWith(scopedSettingsFromProps: ISettings = {}): (scopedSettings: ISettings) => ISettings {\n  return (oldScopedSettings: ISettings): ISettings => {\n    const newScopedSettings: ISettings = { ...oldScopedSettings };\n\n    for (let scopeName in scopedSettingsFromProps) {\n      if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {\n        newScopedSettings[scopeName] = { ...oldScopedSettings[scopeName], ...scopedSettingsFromProps[scopeName] };\n      }\n    }\n\n    return newScopedSettings;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}