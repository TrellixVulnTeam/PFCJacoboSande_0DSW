{"ast":null,"code":"var REACT_LIFECYCLE_EXCLUSIONS = ['setState', 'render', 'componentWillMount', 'UNSAFE_componentWillMount', 'componentDidMount', 'componentWillReceiveProps', 'UNSAFE_componentWillReceiveProps', 'shouldComponentUpdate', 'componentWillUpdate', 'getSnapshotBeforeUpdate', 'UNSAFE_componentWillUpdate', 'componentDidUpdate', 'componentWillUnmount'];\n/**\n * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.\n *\n * @public\n * @param destination - The instance of the object to hoist the methods onto.\n * @param source - The instance of the object where the methods are hoisted from.\n * @param exclusions - (Optional) What methods to exclude from being hoisted.\n * @returns An array of names of methods that were hoisted.\n */\n\nexport function hoistMethods( // eslint-disable-next-line @typescript-eslint/no-explicit-any\ndestination, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nsource, exclusions) {\n  if (exclusions === void 0) {\n    exclusions = REACT_LIFECYCLE_EXCLUSIONS;\n  }\n\n  var hoisted = [];\n\n  var _loop_1 = function (methodName) {\n    if (typeof source[methodName] === 'function' && destination[methodName] === undefined && (!exclusions || exclusions.indexOf(methodName) === -1)) {\n      hoisted.push(methodName); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      destination[methodName] = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        source[methodName].apply(source, args);\n      };\n    }\n  };\n\n  for (var methodName in source) {\n    _loop_1(methodName);\n  }\n\n  return hoisted;\n}\n/**\n * Provides a method for convenience to unhoist hoisted methods.\n *\n * @public\n * @param source - The source object upon which methods were hoisted.\n * @param methodNames - An array of method names to unhoist.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function unhoistMethods(source, methodNames) {\n  methodNames.forEach(function (methodName) {\n    return delete source[methodName];\n  });\n}","map":{"version":3,"mappings":"AAAA,IAAMA,0BAA0B,GAAG,CACjC,UADiC,EAEjC,QAFiC,EAGjC,oBAHiC,EAIjC,2BAJiC,EAKjC,mBALiC,EAMjC,2BANiC,EAOjC,kCAPiC,EAQjC,uBARiC,EASjC,qBATiC,EAUjC,yBAViC,EAWjC,4BAXiC,EAYjC,oBAZiC,EAajC,sBAbiC,CAAnC;AAgBA;;;;;;;;;;AASA,OAAM,SAAUC,YAAV,EACJ;AACAC,WAFI,EAGJ;AACAC,MAJI,EAKJC,UALI,EAK6C;EAAjD;IAAAA;EAAiD;;EAEjD,IAAIC,OAAO,GAAa,EAAxB;;0BACSC,YAAU;IACjB,IACE,OAAOH,MAAM,CAACG,UAAD,CAAb,KAA8B,UAA9B,IACAJ,WAAW,CAACI,UAAD,CAAX,KAA4BC,SAD5B,KAEC,CAACH,UAAD,IAAeA,UAAU,CAACI,OAAX,CAAmBF,UAAnB,MAAmC,CAAC,CAFpD,CADF,EAIE;MACAD,OAAO,CAACI,IAAR,CAAaH,UAAb,EADA,CAEA;;MACAJ,WAAW,CAACI,UAAD,CAAX,GAA0B;QAAS;;aAAA,yCAAc;UAAdI;;;QACjCP,MAAM,CAACG,UAAD,CAAN,CAAkBK,KAAlB,SAAsBD,IAAtB;MACD,CAFD;IAGD;;;EAXH,KAAK,IAAIJ,UAAT,IAAuBH,MAAvB,EAA6B;YAApBG;EAYR;;EAED,OAAOD,OAAP;AACD;AAED;;;;;;;AAOA;;AACA,OAAM,SAAUO,cAAV,CAAyBT,MAAzB,EAAsCU,WAAtC,EAA2D;EAC/DA,WAAW,CAACC,OAAZ,CAAoB,UAACR,UAAD,EAAmB;IAAK,cAAOH,MAAM,CAACG,UAAD,CAAb;EAAyB,CAArE;AACD","names":["REACT_LIFECYCLE_EXCLUSIONS","hoistMethods","destination","source","exclusions","hoisted","methodName","undefined","indexOf","push","args","apply","unhoistMethods","methodNames","forEach"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\utilities\\src\\hoist.ts"],"sourcesContent":["const REACT_LIFECYCLE_EXCLUSIONS = [\n  'setState',\n  'render',\n  'componentWillMount',\n  'UNSAFE_componentWillMount',\n  'componentDidMount',\n  'componentWillReceiveProps',\n  'UNSAFE_componentWillReceiveProps',\n  'shouldComponentUpdate',\n  'componentWillUpdate',\n  'getSnapshotBeforeUpdate',\n  'UNSAFE_componentWillUpdate',\n  'componentDidUpdate',\n  'componentWillUnmount',\n];\n\n/**\n * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.\n *\n * @public\n * @param destination - The instance of the object to hoist the methods onto.\n * @param source - The instance of the object where the methods are hoisted from.\n * @param exclusions - (Optional) What methods to exclude from being hoisted.\n * @returns An array of names of methods that were hoisted.\n */\nexport function hoistMethods(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  destination: any,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  source: any,\n  exclusions: string[] = REACT_LIFECYCLE_EXCLUSIONS,\n): string[] {\n  let hoisted: string[] = [];\n  for (let methodName in source) {\n    if (\n      typeof source[methodName] === 'function' &&\n      destination[methodName] === undefined &&\n      (!exclusions || exclusions.indexOf(methodName) === -1)\n    ) {\n      hoisted.push(methodName);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      destination[methodName] = function(...args: any[]): void {\n        source[methodName](...args);\n      };\n    }\n  }\n\n  return hoisted;\n}\n\n/**\n * Provides a method for convenience to unhoist hoisted methods.\n *\n * @public\n * @param source - The source object upon which methods were hoisted.\n * @param methodNames - An array of method names to unhoist.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function unhoistMethods(source: any, methodNames: string[]): void {\n  methodNames.forEach((methodName: string) => delete source[methodName]);\n}\n"]},"metadata":{},"sourceType":"module"}