{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/** @jsx withSlots */\n\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { StackItem } from './StackItem/StackItem';\n\nvar StackView = function StackView(props) {\n  var _a = props.as,\n      RootType = _a === void 0 ? 'div' : _a,\n      disableShrink = props.disableShrink,\n      wrap = props.wrap,\n      rest = __rest(props, [\"as\", \"disableShrink\", \"wrap\"]);\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding'\n  });\n  var stackChildren = React.Children.map(props.children, function (child, index) {\n    if (!child) {\n      return null;\n    }\n\n    if (_isStackItem(child)) {\n      var defaultItemProps = {\n        shrink: !disableShrink\n      };\n      return React.cloneElement(child, __assign(__assign({}, defaultItemProps), child.props));\n    }\n\n    return child;\n  });\n  var nativeProps = getNativeProps(rest, htmlElementProperties);\n  var Slots = getSlots(props, {\n    root: RootType,\n    inner: 'div'\n  });\n\n  if (wrap) {\n    return withSlots(Slots.root, __assign({}, nativeProps), withSlots(Slots.inner, null, stackChildren));\n  }\n\n  return withSlots(Slots.root, __assign({}, nativeProps), stackChildren);\n};\n\nfunction _isStackItem(item) {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return !!item && typeof item === 'object' && !!item.type && // StackItem is generated by createComponent, so we need to check its displayName instead of name\n  item.type.displayName === StackItem.displayName;\n}\n\nvar StackStatics = {\n  Item: StackItem\n};\nexport var Stack = createComponent(StackView, {\n  displayName: 'Stack',\n  styles: styles,\n  statics: StackStatics\n});\nexport default Stack;","map":{"version":3,"mappings":";AAAA;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,QAArC,QAAqD,kBAArD;AACA,SAASC,cAAT,EAAyBC,qBAAzB,EAAgDC,gBAAhD,QAAwE,iBAAxE;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,SAASC,SAAT,QAA0B,uBAA1B;;AAGA,IAAMC,SAAS,GAA4B,SAArCA,SAAqC,QAAK;AACtC;AAAA;AAAA,MAAsBC,mCAAtB;AAAA,MAAqCC,iBAArC;AAAA,MAA2CC,qDAA3C;;AAERN,kBAAgB,CAAC,OAAD,EAAUO,KAAV,EAAiB;AAC/BC,OAAG,EAAE,oBAD0B;AAE/BC,aAAS,EAAE,kBAFoB;AAG/BC,YAAQ,EAAE,iBAHqB;AAI/BC,WAAO,EAAE;AAJsB,GAAjB,CAAhB;AAOA,MAAMC,aAAa,GAAmDlB,KAAK,CAACmB,QAAN,CAAeC,GAAf,CACpEP,KAAK,CAACQ,QAD8D,EAEpE,UAACC,KAAD,EAA6CC,KAA7C,EAA0D;AACxD,QAAI,CAACD,KAAL,EAAY;AACV,aAAO,IAAP;AACD;;AAED,QAAIE,YAAY,CAACF,KAAD,CAAhB,EAAyB;AACvB,UAAMG,gBAAgB,GAAoB;AACxCC,cAAM,EAAE,CAAChB;AAD+B,OAA1C;AAIA,aAAOV,KAAK,CAAC2B,YAAN,CAAmBL,KAAnB,EAAwBM,sBAC1BH,gBAD0B,GAE1BH,KAAK,CAACT,KAFoB,CAAxB,CAAP;AAID;;AAED,WAAOS,KAAP;AACD,GAnBmE,CAAtE;AAsBA,MAAMO,WAAW,GAAGzB,cAAc,CAAuCQ,IAAvC,EAA6CP,qBAA7C,CAAlC;AAEA,MAAMyB,KAAK,GAAG3B,QAAQ,CAA2BU,KAA3B,EAAkC;AACtDkB,QAAI,EAAEC,QADgD;AAEtDC,SAAK,EAAE;AAF+C,GAAlC,CAAtB;;AAKA,MAAItB,IAAJ,EAAU;AACR,WACEV,UAAC6B,KAAK,CAACC,IAAP,EAAWH,aAAKC,WAAL,CAAX,EACE5B,UAAC6B,KAAK,CAACG,KAAP,EAAY,IAAZ,EAAcf,aAAd,CADF,CADF;AAKD;;AAED,SAAOjB,UAAC6B,KAAK,CAACC,IAAP,EAAWH,aAAKC,WAAL,CAAX,EAA8BX,aAA9B,CAAP;AACD,CAhDD;;AAkDA,SAASM,YAAT,CAAsBU,IAAtB,EAA2C;AACzC;AACA;AACA;AACA,SACE,CAAC,CAACA,IAAF,IACA,OAAOA,IAAP,KAAgB,QADhB,IAEA,CAAC,CAAEA,IAA2B,CAACC,IAF/B,IAGA;AACED,MAA2B,CAACC,IAA5B,CAAyDC,WAAzD,KAAyE5B,SAAS,CAAC4B,WALvF;AAOD;;AAED,IAAMC,YAAY,GAAG;AACnBC,MAAI,EAAE9B;AADa,CAArB;AAIA,OAAO,IAAM+B,KAAK,GAEdrC,eAAe,CAACO,SAAD,EAAY;AAC7B2B,aAAW,EAAE,OADgB;AAE7B7B,QAAM,QAFuB;AAG7BiC,SAAO,EAAEH;AAHoB,CAAZ,CAFZ;AAQP,eAAeE,KAAf","names":["React","withSlots","createComponent","getSlots","getNativeProps","htmlElementProperties","warnDeprecations","styles","StackItem","StackView","disableShrink","wrap","rest","props","gap","maxHeight","maxWidth","padding","stackChildren","Children","map","children","child","index","_isStackItem","defaultItemProps","shrink","cloneElement","__assign","nativeProps","Slots","root","RootType","inner","item","type","displayName","StackStatics","Item","Stack","statics"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Stack\\Stack.tsx"],"sourcesContent":["/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\nimport { StackItem } from './StackItem/StackItem';\nimport { IStackItemProps } from './StackItem/StackItem.types';\n\nconst StackView: IStackComponent['view'] = props => {\n  const { as: RootType = 'div', disableShrink, wrap, ...rest } = props;\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding',\n  });\n\n  const stackChildren: (React.ReactChild | null)[] | null | undefined = React.Children.map(\n    props.children,\n    (child: React.ReactElement<IStackItemProps>, index: number) => {\n      if (!child) {\n        return null;\n      }\n\n      if (_isStackItem(child)) {\n        const defaultItemProps: IStackItemProps = {\n          shrink: !disableShrink,\n        };\n\n        return React.cloneElement(child, {\n          ...defaultItemProps,\n          ...child.props,\n        });\n      }\n\n      return child;\n    },\n  );\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(rest, htmlElementProperties);\n\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\n    root: RootType,\n    inner: 'div',\n  });\n\n  if (wrap) {\n    return (\n      <Slots.root {...nativeProps}>\n        <Slots.inner>{stackChildren}</Slots.inner>\n      </Slots.root>\n    );\n  }\n\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\n};\n\nfunction _isStackItem(item: React.ReactNode): item is typeof StackItem {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // StackItem is generated by createComponent, so we need to check its displayName instead of name\n    ((item as React.ReactElement).type as React.ComponentType).displayName === StackItem.displayName\n  );\n}\n\nconst StackStatics = {\n  Item: StackItem,\n};\n\nexport const Stack: React.FunctionComponent<IStackProps> & {\n  Item: React.FunctionComponent<IStackItemProps>;\n} = createComponent(StackView, {\n  displayName: 'Stack',\n  styles,\n  statics: StackStatics,\n});\n\nexport default Stack;\n"]},"metadata":{},"sourceType":"module"}