{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List } from '../../List';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nvar getClassNames = classNamesFunction();\nvar ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.rowHeight,\n    COMPACT_ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.compactRowHeight;\n\nvar GroupedListBase =\n/** @class */\nfunction (_super) {\n  __extends(GroupedListBase, _super);\n\n  function GroupedListBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._list = React.createRef();\n\n    _this._renderGroup = function (group, groupIndex) {\n      var _a = _this.props,\n          dragDropEvents = _a.dragDropEvents,\n          dragDropHelper = _a.dragDropHelper,\n          eventsToRegister = _a.eventsToRegister,\n          groupProps = _a.groupProps,\n          items = _a.items,\n          listProps = _a.listProps,\n          onRenderCell = _a.onRenderCell,\n          selectionMode = _a.selectionMode,\n          selection = _a.selection,\n          viewport = _a.viewport,\n          onShouldVirtualize = _a.onShouldVirtualize,\n          groups = _a.groups,\n          compact = _a.compact; // override group header/footer props as needed\n\n      var dividerProps = {\n        onToggleSelectGroup: _this._onToggleSelectGroup,\n        onToggleCollapse: _this._onToggleCollapse,\n        onToggleSummarize: _this._onToggleSummarize\n      };\n\n      var headerProps = __assign(__assign({}, groupProps.headerProps), dividerProps);\n\n      var showAllProps = __assign(__assign({}, groupProps.showAllProps), dividerProps);\n\n      var footerProps = __assign(__assign({}, groupProps.footerProps), dividerProps);\n\n      var groupNestingDepth = _this._getGroupNestingDepth();\n\n      if (!groupProps.showEmptyGroups && group && group.count === 0) {\n        return null;\n      }\n\n      var finalListProps = __assign(__assign({}, listProps || {}), {\n        version: _this.state.version\n      });\n\n      return React.createElement(GroupedListSection, {\n        key: _this._getGroupKey(group, groupIndex),\n        dragDropEvents: dragDropEvents,\n        dragDropHelper: dragDropHelper,\n        eventsToRegister: eventsToRegister,\n        footerProps: footerProps,\n        getGroupItemLimit: groupProps && groupProps.getGroupItemLimit,\n        group: group,\n        groupIndex: groupIndex,\n        groupNestingDepth: groupNestingDepth,\n        groupProps: groupProps,\n        headerProps: headerProps,\n        listProps: finalListProps,\n        items: items,\n        onRenderCell: onRenderCell,\n        onRenderGroupHeader: groupProps.onRenderHeader,\n        onRenderGroupShowAll: groupProps.onRenderShowAll,\n        onRenderGroupFooter: groupProps.onRenderFooter,\n        selectionMode: selectionMode,\n        selection: selection,\n        showAllProps: showAllProps,\n        viewport: viewport,\n        onShouldVirtualize: onShouldVirtualize,\n        groupedListClassNames: _this._classNames,\n        groups: groups,\n        compact: compact\n      });\n    };\n\n    _this._getDefaultGroupItemLimit = function (group) {\n      return group.count;\n    };\n\n    _this._getGroupItemLimit = function (group) {\n      var groupProps = _this.props.groupProps;\n      var getGroupItemLimit = groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : _this._getDefaultGroupItemLimit;\n      return getGroupItemLimit(group);\n    };\n\n    _this._getGroupHeight = function (group) {\n      var rowHeight = _this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n      return rowHeight + (group.isCollapsed ? 0 : rowHeight * _this._getGroupItemLimit(group));\n    };\n\n    _this._getPageHeight = function (itemIndex) {\n      var groups = _this.state.groups;\n      var _a = _this.props.getGroupHeight,\n          getGroupHeight = _a === void 0 ? _this._getGroupHeight : _a;\n      var pageGroup = groups && groups[itemIndex];\n\n      if (pageGroup) {\n        return getGroupHeight(pageGroup, itemIndex);\n      } else {\n        return 0;\n      }\n    };\n\n    _this._onToggleCollapse = function (group) {\n      var groupProps = _this.props.groupProps;\n      var onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n      if (group) {\n        if (onToggleCollapse) {\n          onToggleCollapse(group);\n        }\n\n        group.isCollapsed = !group.isCollapsed;\n\n        _this._updateIsSomeGroupExpanded();\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this._onToggleSelectGroup = function (group) {\n      var _a = _this.props,\n          selection = _a.selection,\n          selectionMode = _a.selectionMode;\n\n      if (group && selection && selectionMode === SelectionMode.multiple) {\n        selection.toggleRangeSelected(group.startIndex, group.count);\n      }\n    };\n\n    _this._isInnerZoneKeystroke = function (ev) {\n      return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n    };\n\n    _this._onToggleSummarize = function (group) {\n      var groupProps = _this.props.groupProps;\n      var onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n      if (onToggleSummarize) {\n        onToggleSummarize(group);\n      } else {\n        if (group) {\n          group.isShowingAll = !group.isShowingAll;\n        }\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this._getPageSpecification = function (itemIndex) {\n      var groups = _this.state.groups;\n      var pageGroup = groups && groups[itemIndex];\n      return {\n        key: pageGroup && pageGroup.key\n      };\n    };\n\n    initializeComponentRef(_this);\n    _this._isSomeGroupExpanded = _this._computeIsSomeGroupExpanded(props.groups);\n    var _a = props.listProps,\n        _b = (_a === void 0 ? {} : _a).version,\n        version = _b === void 0 ? {} : _b;\n    _this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version: version\n    };\n    return _this;\n  }\n\n  GroupedListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    var groups = nextProps.groups,\n        selectionMode = nextProps.selectionMode,\n        compact = nextProps.compact,\n        items = nextProps.items,\n        listProps = nextProps.listProps;\n    var listVersion = listProps && listProps.version;\n\n    var nextState = __assign(__assign({}, previousState), {\n      selectionMode: selectionMode,\n      compact: compact,\n      groups: groups,\n      listProps: listProps\n    });\n\n    var shouldForceUpdates = false;\n    var previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (listVersion !== previousListVersion || items !== previousState.items || groups !== previousState.groups || selectionMode !== previousState.selectionMode || compact !== previousState.compact) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = __assign(__assign({}, nextState), {\n        version: {}\n      });\n    }\n\n    return nextState;\n  };\n\n  GroupedListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  };\n\n  GroupedListBase.prototype.getStartItemIndexInView = function () {\n    return this._list.current.getStartItemIndexInView() || 0;\n  };\n\n  GroupedListBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n        groupProps = _a.groupProps,\n        _b = _a.groups,\n        groups = _b === void 0 ? [] : _b;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  };\n\n  GroupedListBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        usePageCache = _a.usePageCache,\n        onShouldVirtualize = _a.onShouldVirtualize,\n        theme = _a.theme,\n        _b = _a.role,\n        role = _b === void 0 ? 'treegrid' : _b,\n        styles = _a.styles,\n        compact = _a.compact,\n        _c = _a.focusZoneProps,\n        focusZoneProps = _c === void 0 ? {} : _c,\n        _d = _a.rootListProps,\n        rootListProps = _d === void 0 ? {} : _d;\n    var _e = this.state,\n        groups = _e.groups,\n        version = _e.version;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      compact: compact\n    });\n    var _f = focusZoneProps.shouldEnterInnerZone,\n        shouldEnterInnerZone = _f === void 0 ? this._isInnerZoneKeystroke : _f;\n    return React.createElement(FocusZone, __assign({\n      direction: FocusZoneDirection.vertical,\n      \"data-automationid\": \"GroupedList\",\n      \"data-is-scrollable\": \"false\",\n      role: \"presentation\"\n    }, focusZoneProps, {\n      shouldEnterInnerZone: shouldEnterInnerZone,\n      className: css(this._classNames.root, focusZoneProps.className)\n    }), !groups ? this._renderGroup(undefined, 0) : React.createElement(List, __assign({\n      ref: this._list,\n      role: role,\n      items: groups,\n      onRenderCell: this._renderGroup,\n      getItemCountForPage: this._returnOne,\n      getPageHeight: this._getPageHeight,\n      getPageSpecification: this._getPageSpecification,\n      usePageCache: usePageCache,\n      onShouldVirtualize: onShouldVirtualize,\n      version: version\n    }, rootListProps)));\n  };\n\n  GroupedListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n\n    this._forceListUpdates();\n  };\n\n  GroupedListBase.prototype.toggleCollapseAll = function (allCollapsed) {\n    var _a = this.state.groups,\n        groups = _a === void 0 ? [] : _a;\n    var groupProps = this.props.groupProps;\n    var onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  };\n\n  GroupedListBase.prototype._setGroupsCollapsedState = function (groups, isCollapsed) {\n    for (var groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  };\n\n  GroupedListBase.prototype._returnOne = function () {\n    return 1;\n  };\n\n  GroupedListBase.prototype._getGroupKey = function (group, index) {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  };\n\n  GroupedListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.state.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  };\n\n  GroupedListBase.prototype._forceListUpdates = function (groups) {\n    this.setState({\n      version: {}\n    });\n  };\n\n  GroupedListBase.prototype._computeIsSomeGroupExpanded = function (groups) {\n    var _this = this;\n\n    return !!(groups && groups.some(function (group) {\n      return group.children ? _this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed;\n    }));\n  };\n\n  GroupedListBase.prototype._updateIsSomeGroupExpanded = function () {\n    var groups = this.state.groups;\n    var onGroupExpandStateChanged = this.props.onGroupExpandStateChanged;\n\n    var newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  };\n\n  GroupedListBase.defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false\n  };\n  return GroupedListBase;\n}(React.Component);\n\nexport { GroupedListBase };","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","classNamesFunction","KeyCodes","getRTLSafeKeyCode","css","GroupedListSection","List","SelectionMode","DEFAULT_ROW_HEIGHTS","FocusZone","FocusZoneDirection","getClassNames","COMPACT_ROW_HEIGHT","__extends","props","_super","_this","createRef","group","groupIndex","dragDropEvents","dragDropHelper","eventsToRegister","groupProps","items","listProps","onRenderCell","selectionMode","selection","viewport","onShouldVirtualize","groups","compact","dividerProps","onToggleSelectGroup","_onToggleSelectGroup","onToggleCollapse","_onToggleCollapse","onToggleSummarize","_onToggleSummarize","headerProps","showAllProps","footerProps","groupNestingDepth","_getGroupNestingDepth","showEmptyGroups","count","finalListProps","version","state","key","_getGroupKey","getGroupItemLimit","onRenderGroupHeader","onRenderHeader","onRenderGroupShowAll","onRenderShowAll","onRenderGroupFooter","onRenderFooter","groupedListClassNames","_classNames","_getDefaultGroupItemLimit","rowHeight","ROW_HEIGHT","isCollapsed","_getGroupItemLimit","itemIndex","pageGroup","getGroupHeight","_updateIsSomeGroupExpanded","forceUpdate","multiple","toggleRangeSelected","startIndex","ev","which","right","isShowingAll","_isSomeGroupExpanded","_computeIsSomeGroupExpanded","_b","GroupedListBase","nextProps","previousState","listVersion","nextState","shouldForceUpdates","previousListVersion","index","measureItem","scrollToMode","_list","current","scrollToIndex","getStartItemIndexInView","isAllGroupsCollapsed","_setGroupsCollapsedState","className","usePageCache","theme","role","styles","_c","focusZoneProps","_d","rootListProps","__assign","direction","vertical","shouldEnterInnerZone","root","_renderGroup","undefined","ref","getItemCountForPage","_returnOne","getPageHeight","_getPageHeight","getPageSpecification","_getPageSpecification","call","_forceListUpdates","allCollapsed","onToggleCollapseAll","length","String","level","groupsInLevel","children","setState","some","newIsSomeGroupExpanded","onGroupExpandStateChanged","isHeaderVisible","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\GroupedList\\GroupedList.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode, IListProps } from '../../List';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { IGroupHeaderProps } from './GroupHeader';\nimport { IGroupShowAllProps } from './GroupShowAll.styles';\nimport { IGroupFooterProps } from './GroupFooter.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  selectionMode?: IGroupedListProps['selectionMode'];\n  compact?: IGroupedListProps['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListProps['items'];\n  listProps?: IGroupedListProps['listProps'];\n  version: {};\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListProps,\n    previousState: IGroupedListState,\n  ): IGroupedListState {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const listVersion = listProps && listProps.version;\n\n    let nextState = {\n      ...previousState,\n      selectionMode,\n      compact,\n      groups,\n      listProps,\n    };\n\n    let shouldForceUpdates = false;\n\n    const previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (\n      listVersion !== previousListVersion ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    const { listProps: { version = {} } = {} } = props;\n\n    this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      usePageCache,\n      onShouldVirtualize,\n      theme,\n      role = 'treegrid',\n      styles,\n      compact,\n      focusZoneProps = {},\n      rootListProps = {},\n    } = this.props;\n    const { groups, version } = this.state;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact: compact,\n    });\n\n    const { shouldEnterInnerZone = this._isInnerZoneKeystroke } = focusZoneProps;\n\n    return (\n      <FocusZone\n        direction={FocusZoneDirection.vertical}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n        {...focusZoneProps}\n        shouldEnterInnerZone={shouldEnterInnerZone}\n        className={css(this._classNames.root, focusZoneProps.className)}\n      >\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role={role}\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            {...rootListProps}\n          />\n        )}\n      </FocusZone>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    const finalListProps: IListProps = {\n      ...(listProps || {}),\n      version: this.state.version,\n    };\n\n    return (\n      <GroupedListSection\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={finalListProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    this.setState({\n      version: {},\n    });\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}