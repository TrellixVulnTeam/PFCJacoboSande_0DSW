{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, warnDeprecations, getId, KeyCodes, classNamesFunction, getNativeProps, inputProperties } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'SearchBox';\n\nvar SearchBoxBase =\n/** @class */\nfunction (_super) {\n  __extends(SearchBoxBase, _super);\n\n  function SearchBoxBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._rootElement = React.createRef();\n    _this._inputElement = React.createRef();\n\n    _this._onClickFocus = function () {\n      var inputElement = _this._inputElement.current;\n\n      if (inputElement) {\n        _this.focus();\n\n        inputElement.selectionStart = inputElement.selectionEnd = 0;\n      }\n    };\n\n    _this._onFocusCapture = function (ev) {\n      _this.setState({\n        hasFocus: true\n      });\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(ev);\n      }\n    };\n\n    _this._onClearClick = function (ev) {\n      var clearButtonProps = _this.props.clearButtonProps;\n\n      if (clearButtonProps && clearButtonProps.onClick) {\n        clearButtonProps.onClick(ev);\n      }\n\n      if (!ev.defaultPrevented) {\n        _this._onClear(ev);\n      }\n    };\n\n    _this._onKeyDown = function (ev) {\n      switch (ev.which) {\n        case KeyCodes.escape:\n          _this.props.onEscape && _this.props.onEscape(ev); // Only call onClear if the search box has a value to clear. Otherwise, allow the Esc key\n          // to propagate from the empty search box to a parent element such as a dialog, etc.\n\n          if (_this.state.value && !ev.defaultPrevented) {\n            _this._onClear(ev);\n          }\n\n          break;\n\n        case KeyCodes.enter:\n          if (_this.props.onSearch) {\n            _this.props.onSearch(_this.state.value);\n\n            ev.preventDefault();\n            ev.stopPropagation();\n          }\n\n          break;\n\n        default:\n          _this.props.onKeyDown && _this.props.onKeyDown(ev);\n\n          if (ev.defaultPrevented) {\n            ev.stopPropagation();\n          }\n\n          break;\n      }\n    };\n\n    _this._onBlur = function (ev) {\n      _this.setState({\n        hasFocus: false\n      });\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n    };\n\n    _this._onInputChange = function (ev) {\n      var value = ev.target.value;\n\n      if (value === _this._latestValue) {\n        return;\n      }\n\n      _this._latestValue = value;\n\n      _this.setState({\n        value: value\n      });\n\n      _this._callOnChange(ev, value);\n    };\n\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      labelText: 'placeholder',\n      defaultValue: 'value'\n    });\n    _this._latestValue = props.value || '';\n    _this._fallbackId = getId(COMPONENT_NAME);\n    _this.state = {\n      value: _this._latestValue,\n      hasFocus: false\n    };\n    return _this;\n  }\n\n  SearchBoxBase.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    if (newProps.value !== undefined) {\n      this._latestValue = newProps.value; // If the user passes in null, substitute an empty string\n      // (passing null is not allowed per typings, but users might do it anyway)\n\n      this.setState({\n        value: newProps.value || ''\n      });\n    }\n  };\n\n  SearchBoxBase.prototype.render = function () {\n    var _a = this.props,\n        ariaLabel = _a.ariaLabel,\n        placeholder = _a.placeholder,\n        className = _a.className,\n        disabled = _a.disabled,\n        underlined = _a.underlined,\n        styles = _a.styles,\n        // eslint-disable-next-line deprecation/deprecation\n    labelText = _a.labelText,\n        theme = _a.theme,\n        clearButtonProps = _a.clearButtonProps,\n        disableAnimation = _a.disableAnimation,\n        iconProps = _a.iconProps,\n        role = _a.role,\n        _b = _a.id,\n        id = _b === void 0 ? this._fallbackId : _b;\n    var _c = this.state,\n        value = _c.value,\n        hasFocus = _c.hasFocus;\n    var placeholderValue = placeholder !== undefined ? placeholder : labelText;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      underlined: underlined,\n      hasFocus: hasFocus,\n      disabled: disabled,\n      hasInput: value.length > 0,\n      disableAnimation: disableAnimation\n    });\n    var nativeProps = getNativeProps(this.props, inputProperties, ['className', 'placeholder', 'onFocus', 'onBlur', 'value', 'role']);\n    return React.createElement(\"div\", {\n      role: role,\n      ref: this._rootElement,\n      className: classNames.root,\n      onFocusCapture: this._onFocusCapture\n    }, React.createElement(\"div\", {\n      className: classNames.iconContainer,\n      onClick: this._onClickFocus,\n      \"aria-hidden\": true\n    }, React.createElement(Icon, __assign({\n      iconName: \"Search\"\n    }, iconProps, {\n      className: classNames.icon\n    }))), React.createElement(\"input\", __assign({}, nativeProps, {\n      id: id,\n      className: classNames.field,\n      placeholder: placeholderValue,\n      onChange: this._onInputChange,\n      onInput: this._onInputChange,\n      onBlur: this._onBlur,\n      onKeyDown: this._onKeyDown,\n      value: value,\n      disabled: disabled,\n      role: \"searchbox\",\n      \"aria-label\": ariaLabel,\n      ref: this._inputElement\n    })), value.length > 0 && React.createElement(\"div\", {\n      className: classNames.clearButton\n    }, React.createElement(IconButton, __assign({\n      onBlur: this._onBlur,\n      styles: {\n        root: {\n          height: 'auto'\n        },\n        icon: {\n          fontSize: '12px'\n        }\n      },\n      iconProps: {\n        iconName: 'Clear'\n      }\n    }, clearButtonProps, {\n      onClick: this._onClearClick\n    }))));\n  };\n  /**\n   * Sets focus to the search box input field\n   */\n\n\n  SearchBoxBase.prototype.focus = function () {\n    if (this._inputElement.current) {\n      this._inputElement.current.focus();\n    }\n  };\n  /**\n   * Returns whether or not the SearchBox has focus\n   */\n\n\n  SearchBoxBase.prototype.hasFocus = function () {\n    return !!this.state.hasFocus;\n  };\n\n  SearchBoxBase.prototype._onClear = function (ev) {\n    this.props.onClear && this.props.onClear(ev);\n\n    if (!ev.defaultPrevented) {\n      this._latestValue = '';\n      this.setState({\n        value: ''\n      });\n\n      this._callOnChange(undefined, '');\n\n      ev.stopPropagation();\n      ev.preventDefault();\n      this.focus();\n    }\n  };\n\n  SearchBoxBase.prototype._callOnChange = function (ev, newValue) {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n        onChange = _a.onChange,\n        onChanged = _a.onChanged; // Call @deprecated method.\n\n    if (onChanged) {\n      onChanged(newValue);\n    }\n\n    if (onChange) {\n      onChange(ev, newValue);\n    }\n  };\n\n  SearchBoxBase.defaultProps = {\n    disableAnimation: false,\n    clearButtonProps: {\n      ariaLabel: 'Clear text'\n    }\n  };\n  return SearchBoxBase;\n}(React.Component);\n\nexport { SearchBoxBase };","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","warnDeprecations","getId","KeyCodes","classNamesFunction","getNativeProps","inputProperties","IconButton","Icon","getClassNames","COMPONENT_NAME","__extends","props","_super","_this","createRef","inputElement","_inputElement","current","focus","selectionStart","selectionEnd","ev","setState","hasFocus","onFocus","clearButtonProps","onClick","defaultPrevented","_onClear","which","escape","onEscape","state","value","enter","onSearch","preventDefault","stopPropagation","onKeyDown","onBlur","target","_latestValue","_callOnChange","labelText","defaultValue","_fallbackId","SearchBoxBase","newProps","undefined","ariaLabel","placeholder","className","disabled","underlined","styles","theme","disableAnimation","iconProps","role","_b","id","placeholderValue","classNames","hasInput","length","nativeProps","ref","_rootElement","root","onFocusCapture","_onFocusCapture","iconContainer","_onClickFocus","__assign","iconName","icon","field","onChange","_onInputChange","onInput","_onBlur","_onKeyDown","clearButton","height","fontSize","_onClearClick","onClear","newValue","onChanged","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\SearchBox\\SearchBox.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ISearchBoxProps, ISearchBoxStyleProps, ISearchBoxStyles } from './SearchBox.types';\nimport {\n  initializeComponentRef,\n  warnDeprecations,\n  getId,\n  KeyCodes,\n  classNamesFunction,\n  getNativeProps,\n  inputProperties,\n} from '../../Utilities';\n\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\n\nconst getClassNames = classNamesFunction<ISearchBoxStyleProps, ISearchBoxStyles>();\nconst COMPONENT_NAME = 'SearchBox';\n\nexport interface ISearchBoxState {\n  value?: string;\n  hasFocus?: boolean;\n}\n\nexport class SearchBoxBase extends React.Component<ISearchBoxProps, ISearchBoxState> {\n  public static defaultProps: Pick<ISearchBoxProps, 'disableAnimation' | 'clearButtonProps'> = {\n    disableAnimation: false,\n    clearButtonProps: { ariaLabel: 'Clear text' },\n  };\n\n  private _rootElement = React.createRef<HTMLDivElement>();\n  private _inputElement = React.createRef<HTMLInputElement>();\n  private _latestValue: string;\n  private _fallbackId: string;\n\n  public constructor(props: ISearchBoxProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      labelText: 'placeholder',\n      defaultValue: 'value',\n    });\n\n    this._latestValue = props.value || '';\n    this._fallbackId = getId(COMPONENT_NAME);\n\n    this.state = {\n      value: this._latestValue,\n      hasFocus: false,\n    };\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: ISearchBoxProps): void {\n    if (newProps.value !== undefined) {\n      this._latestValue = newProps.value;\n      // If the user passes in null, substitute an empty string\n      // (passing null is not allowed per typings, but users might do it anyway)\n      this.setState({\n        value: newProps.value || '',\n      });\n    }\n  }\n\n  public render() {\n    const {\n      ariaLabel,\n      placeholder,\n      className,\n      disabled,\n      underlined,\n      styles,\n      // eslint-disable-next-line deprecation/deprecation\n      labelText,\n      theme,\n      clearButtonProps,\n      disableAnimation,\n      iconProps,\n      role,\n      id = this._fallbackId,\n    } = this.props;\n    const { value, hasFocus } = this.state;\n    const placeholderValue = placeholder !== undefined ? placeholder : labelText;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      underlined,\n      hasFocus,\n      disabled,\n      hasInput: value!.length > 0,\n      disableAnimation,\n    });\n\n    const nativeProps = getNativeProps<React.InputHTMLAttributes<HTMLInputElement>>(this.props, inputProperties, [\n      'className',\n      'placeholder',\n      'onFocus',\n      'onBlur',\n      'value',\n      'role',\n    ]);\n\n    return (\n      <div role={role} ref={this._rootElement} className={classNames.root} onFocusCapture={this._onFocusCapture}>\n        <div className={classNames.iconContainer} onClick={this._onClickFocus} aria-hidden={true}>\n          <Icon iconName=\"Search\" {...iconProps} className={classNames.icon} />\n        </div>\n        <input\n          {...nativeProps}\n          id={id}\n          className={classNames.field}\n          placeholder={placeholderValue}\n          onChange={this._onInputChange}\n          onInput={this._onInputChange}\n          onBlur={this._onBlur}\n          onKeyDown={this._onKeyDown}\n          value={value}\n          disabled={disabled}\n          role=\"searchbox\"\n          aria-label={ariaLabel}\n          ref={this._inputElement}\n        />\n        {value!.length > 0 && (\n          <div className={classNames.clearButton}>\n            <IconButton\n              onBlur={this._onBlur}\n              styles={{ root: { height: 'auto' }, icon: { fontSize: '12px' } }}\n              iconProps={{ iconName: 'Clear' }}\n              {...clearButtonProps}\n              onClick={this._onClearClick}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus to the search box input field\n   */\n  public focus() {\n    if (this._inputElement.current) {\n      this._inputElement.current.focus();\n    }\n  }\n\n  /**\n   * Returns whether or not the SearchBox has focus\n   */\n  public hasFocus(): boolean {\n    return !!this.state.hasFocus;\n  }\n\n  private _onClear(ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement> | React.KeyboardEvent<HTMLElement>) {\n    this.props.onClear && this.props.onClear(ev);\n    if (!ev.defaultPrevented) {\n      this._latestValue = '';\n      this.setState({\n        value: '',\n      });\n      this._callOnChange(undefined, '');\n      ev.stopPropagation();\n      ev.preventDefault();\n\n      this.focus();\n    }\n  }\n\n  private _onClickFocus = () => {\n    const inputElement = this._inputElement.current;\n    if (inputElement) {\n      this.focus();\n      inputElement.selectionStart = inputElement.selectionEnd = 0;\n    }\n  };\n\n  private _onFocusCapture = (ev: React.FocusEvent<HTMLElement>) => {\n    this.setState({\n      hasFocus: true,\n    });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(ev as React.FocusEvent<HTMLInputElement>);\n    }\n  };\n\n  private _onClearClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    const { clearButtonProps } = this.props;\n\n    if (clearButtonProps && clearButtonProps.onClick) {\n      clearButtonProps.onClick(ev);\n    }\n\n    if (!ev.defaultPrevented) {\n      this._onClear(ev);\n    }\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    switch (ev.which) {\n      case KeyCodes.escape:\n        this.props.onEscape && this.props.onEscape(ev);\n        // Only call onClear if the search box has a value to clear. Otherwise, allow the Esc key\n        // to propagate from the empty search box to a parent element such as a dialog, etc.\n        if (this.state.value && !ev.defaultPrevented) {\n          this._onClear(ev);\n        }\n        break;\n\n      case KeyCodes.enter:\n        if (this.props.onSearch) {\n          this.props.onSearch(this.state.value);\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n        break;\n\n      default:\n        this.props.onKeyDown && this.props.onKeyDown(ev);\n        if (ev.defaultPrevented) {\n          ev.stopPropagation();\n        }\n        break;\n    }\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement>): void => {\n    this.setState({\n      hasFocus: false,\n    });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n  };\n\n  private _onInputChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    const value = ev.target.value;\n\n    if (value === this._latestValue) {\n      return;\n    }\n    this._latestValue = value;\n\n    this.setState({ value });\n    this._callOnChange(ev, value);\n  };\n\n  private _callOnChange(ev?: React.ChangeEvent<HTMLInputElement>, newValue?: string): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const { onChange, onChanged } = this.props;\n\n    // Call @deprecated method.\n    if (onChanged) {\n      onChanged(newValue);\n    }\n\n    if (onChange) {\n      onChange(ev, newValue);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}