{"ast":null,"code":"import { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/dateValues';\nimport TimeConstants from '../dateValues/timeConstants';\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */\n\nexport function addDays(date, days) {\n  var result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */\n\nexport function addWeeks(date, weeks) {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */\n\nexport function addMonths(date, months) {\n  var result = new Date(date.getTime());\n  var newMonth = result.getMonth() + months;\n  result.setMonth(newMonth); // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n\n  if (result.getMonth() !== (newMonth % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\n    result = addDays(result, -result.getDate());\n  }\n\n  return result;\n}\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */\n\nexport function addYears(date, years) {\n  var result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years); // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n\n  if (result.getMonth() !== (date.getMonth() % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\n    result = addDays(result, -result.getDate());\n  }\n\n  return result;\n}\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */\n\nexport function getMonthStart(date) {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */\n\nexport function getMonthEnd(date) {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */\n\nexport function getYearStart(date) {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */\n\nexport function getYearEnd(date) {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */\n\nexport function setMonth(date, month) {\n  return addMonths(date, month - date.getMonth());\n}\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\n\nexport function compareDates(date1, date2) {\n  if (!date1 && !date2) {\n    return true;\n  } else if (!date1 || !date2) {\n    return false;\n  } else {\n    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n  }\n}\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\n\nexport function compareDatePart(date1, date2) {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */\n\nexport function getDateRangeArray(date, dateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView) {\n  if (daysToSelectInDayView === void 0) {\n    daysToSelectInDayView = 1;\n  }\n\n  var datesArray = new Array();\n  var startDate;\n  var endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, daysToSelectInDayView);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      throw new Error('Unexpected object: ' + dateRangeType);\n  } // Populate the dates array with the dates in range\n\n\n  var nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */\n\nexport function isInDateRangeArray(date, dateRange) {\n  for (var _i = 0, dateRange_1 = dateRange; _i < dateRange_1.length; _i++) {\n    var dateInRange = dateRange_1[_i];\n\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */\n\nexport function getWeekNumbersInMonth(weeksInMonth, firstDayOfWeek, firstWeekOfYear, navigatedDate) {\n  var selectedYear = navigatedDate.getFullYear();\n  var selectedMonth = navigatedDate.getMonth();\n  var dayOfMonth = 1;\n  var fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  var endOfFirstWeek = dayOfMonth + (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) - adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  var endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n  var weeksArray = [];\n\n  for (var i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n\n  return weeksArray;\n}\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */\n\nexport function getWeekNumber(date, firstDayOfWeek, firstWeekOfYear) {\n  // First four-day week of the year - minumum days count\n  var fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\n\nexport function getStartDateOfWeek(date, firstDayOfWeek) {\n  var daysOffset = firstDayOfWeek - date.getDay();\n\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n\n  return addDays(date, daysOffset);\n}\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\n\nexport function getEndDateOfWeek(date, firstDayOfWeek) {\n  var lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n  var daysOffset = lastDayOfWeek - date.getDay();\n\n  if (daysOffset < 0) {\n    // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n    daysOffset += TimeConstants.DaysInOneWeek;\n  }\n\n  return addDays(date, daysOffset);\n}\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */\n\nfunction getDatePart(date) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n/**\n * Helper function to assist in date comparisons\n */\n\n\nexport function getDatePartHashValue(date) {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */\n\nfunction getWeekOfYearFullDays(date, firstDayOfWeek, numberOfFullDays) {\n  var dayOfYear = getDayOfYear(date) - 1;\n  var num = date.getDay() - dayOfYear % TimeConstants.DaysInOneWeek;\n  var lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  var daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n  var num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  var num3 = dayOfYear - num2;\n\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */\n\n\nfunction getFirstDayWeekOfYear(date, firstDayOfWeek) {\n  var num = getDayOfYear(date) - 1;\n  var num2 = date.getDay() - num % TimeConstants.DaysInOneWeek;\n  var num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns adjusted week day number when firstDayOfWeek is other than Sunday\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */\n\n\nfunction adjustWeekDay(firstDayOfWeek, dateWeekDay) {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek ? dateWeekDay + TimeConstants.DaysInOneWeek : dateWeekDay;\n}\n/**\n * Returns the day number for a date in a year\n * The number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */\n\n\nfunction getDayOfYear(date) {\n  var month = date.getMonth();\n  var year = date.getFullYear();\n  var daysUntilDate = 0;\n\n  for (var i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n  return daysUntilDate;\n}\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */\n\n\nfunction daysInMonth(month, year) {\n  return new Date(year, month, 0).getDate();\n}","map":{"version":3,"mappings":"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","names":["DayOfWeek","MonthOfYear","FirstWeekOfYear","DateRangeType","TimeConstants","addDays","date","days","result","Date","getTime","setDate","getDate","addWeeks","weeks","DaysInOneWeek","addMonths","months","newMonth","getMonth","setMonth","MonthInOneYear","addYears","years","setFullYear","getFullYear","getMonthStart","getMonthEnd","getYearStart","getYearEnd","month","compareDates","date1","date2","compareDatePart","getDatePartHashValue","getDateRangeArray","dateRangeType","firstDayOfWeek","workWeekDays","daysToSelectInDayView","datesArray","Array","startDate","endDate","Monday","Tuesday","Wednesday","Thursday","Friday","Math","max","Day","getDatePart","Week","WorkWeek","getStartDateOfWeek","Month","Error","nextDate","push","indexOf","getDay","isInDateRangeArray","dateRange","_i","dateInRange","getWeekNumbersInMonth","weeksInMonth","firstWeekOfYear","navigatedDate","selectedYear","selectedMonth","dayOfMonth","fistDayOfMonth","endOfFirstWeek","adjustWeekDay","endOfWeekRange","weeksArray","i","getWeekNumber","fourDayWeek","FirstFullWeek","getWeekOfYearFullDays","FirstFourDayWeek","getFirstDayWeekOfYear","daysOffset","getEndDateOfWeek","lastDayOfWeek","numberOfFullDays","dayOfYear","getDayOfYear","num","lastDayOfPrevYear","December","daysInYear","num2","num3","floor","dateWeekDay","Sunday","year","daysUntilDate","daysInMonth"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@fluentui\\date-time-utilities\\lib\\src\\dateMath\\dateMath.ts"],"sourcesContent":["import { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/dateValues';\nimport TimeConstants from '../dateValues/timeConstants';\n\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */\nexport function addDays(date: Date, days: number): Date {\n  const result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */\nexport function addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */\nexport function addMonths(date: Date, months: number): Date {\n  let result = new Date(date.getTime());\n  const newMonth = result.getMonth() + months;\n  result.setMonth(newMonth);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((newMonth % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */\nexport function addYears(date: Date, years: number): Date {\n  let result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((date.getMonth() % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */\nexport function getMonthStart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */\nexport function getMonthEnd(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */\nexport function getYearStart(date: Date): Date {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */\nexport function getYearEnd(date: Date): Date {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */\nexport function setMonth(date: Date, month: number): Date {\n  return addMonths(date, month - date.getMonth());\n}\n\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\nexport function compareDates(date1: Date, date2: Date): boolean {\n  if (!date1 && !date2) {\n    return true;\n  } else if (!date1 || !date2) {\n    return false;\n  } else {\n    return (\n      date1.getFullYear() === date2.getFullYear() &&\n      date1.getMonth() === date2.getMonth() &&\n      date1.getDate() === date2.getDate()\n    );\n  }\n}\n\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\nexport function compareDatePart(date1: Date, date2: Date): Number {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */\nexport function getDateRangeArray(\n  date: Date,\n  dateRangeType: DateRangeType,\n  firstDayOfWeek: DayOfWeek,\n  workWeekDays?: DayOfWeek[],\n  daysToSelectInDayView: number = 1,\n): Date[] {\n  const datesArray = new Array<Date>();\n  let startDate: Date;\n  let endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, daysToSelectInDayView);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      throw new Error('Unexpected object: ' + dateRangeType);\n  }\n\n  // Populate the dates array with the dates in range\n  let nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */\nexport function isInDateRangeArray(date: Date, dateRange: Date[]): boolean {\n  for (const dateInRange of dateRange) {\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */\nexport function getWeekNumbersInMonth(\n  weeksInMonth: number,\n  firstDayOfWeek: DayOfWeek,\n  firstWeekOfYear: FirstWeekOfYear,\n  navigatedDate: Date,\n): number[] {\n  const selectedYear = navigatedDate.getFullYear();\n  const selectedMonth = navigatedDate.getMonth();\n  let dayOfMonth = 1;\n  const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  const endOfFirstWeek =\n    dayOfMonth +\n    (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) -\n    adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n\n  const weeksArray = [];\n  for (let i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n  return weeksArray;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */\nexport function getWeekNumber(date: Date, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear): number {\n  // First four-day week of the year - minumum days count\n  const fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  let daysOffset = firstDayOfWeek - date.getDay();\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getEndDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  const lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n  let daysOffset = lastDayOfWeek - date.getDay();\n  if (daysOffset < 0) {\n    // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n    daysOffset += TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */\nfunction getDatePart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n/**\n * Helper function to assist in date comparisons\n */\nexport function getDatePartHashValue(date: Date): number {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */\nfunction getWeekOfYearFullDays(date: Date, firstDayOfWeek: DayOfWeek, numberOfFullDays: number): number {\n  const dayOfYear = getDayOfYear(date) - 1;\n  let num = date.getDay() - (dayOfYear % TimeConstants.DaysInOneWeek);\n\n  const lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n\n  let num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  let num3 = dayOfYear - num2;\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */\nfunction getFirstDayWeekOfYear(date: Date, firstDayOfWeek: number): number {\n  const num = getDayOfYear(date) - 1;\n  const num2 = date.getDay() - (num % TimeConstants.DaysInOneWeek);\n  const num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns adjusted week day number when firstDayOfWeek is other than Sunday\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */\nfunction adjustWeekDay(firstDayOfWeek: DayOfWeek, dateWeekDay: DayOfWeek): number {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek\n    ? dateWeekDay + TimeConstants.DaysInOneWeek\n    : dateWeekDay;\n}\n\n/**\n * Returns the day number for a date in a year\n * The number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */\nfunction getDayOfYear(date: Date): number {\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  let daysUntilDate = 0;\n\n  for (let i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n\n  return daysUntilDate;\n}\n\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */\nfunction daysInMonth(month: number, year: number): number {\n  return new Date(year, month, 0).getDate();\n}\n"]},"metadata":{},"sourceType":"module"}