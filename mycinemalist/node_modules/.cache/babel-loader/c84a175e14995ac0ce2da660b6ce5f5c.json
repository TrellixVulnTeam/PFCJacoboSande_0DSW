{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { DropdownMenuItemType } from '../Dropdown.types';\n/**\n * A utility class to cache size and position in cache.\n *\n * Dropdown options has non-selectable display types. It is therefore not cheap to determine\n * the total number of actual selectable options as well as the position an option is in the\n * list of options - O(n) cost for each lookup.\n *\n * Given that we potentially have to make this determination on every single render pass, this\n * cache should provide a little bit of relief.\n */\n\nvar DropdownSizePosCache =\n/** @class */\nfunction () {\n  function DropdownSizePosCache() {\n    this._size = 0;\n  }\n  /**\n   * Invalidates the cache and recalculate the size of selectable options.\n   */\n\n\n  DropdownSizePosCache.prototype.updateOptions = function (options) {\n    var displayOnlyOptionsCache = [];\n    var size = 0;\n\n    for (var i = 0; i < options.length; i++) {\n      if (options[i].itemType === DropdownMenuItemType.Divider || options[i].itemType === DropdownMenuItemType.Header) {\n        displayOnlyOptionsCache.push(i);\n      } else if (!options[i].hidden) {\n        size++;\n      }\n    }\n\n    this._size = size;\n    this._displayOnlyOptionsCache = displayOnlyOptionsCache;\n    this._cachedOptions = __spreadArrays(options);\n  };\n\n  Object.defineProperty(DropdownSizePosCache.prototype, \"optionSetSize\", {\n    /**\n     * The size of all the selectable options.\n     */\n    get: function get() {\n      return this._size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DropdownSizePosCache.prototype, \"cachedOptions\", {\n    /**\n     * The chached options array.\n     */\n    get: function get() {\n      return this._cachedOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns the position of this option element relative to the full set of selectable option elements.\n   * Note: the first selectable element is position 1 in the set.\n   * @param index The raw index of the option element.\n   */\n\n  DropdownSizePosCache.prototype.positionInSet = function (index) {\n    if (index === undefined) {\n      return undefined;\n    } // we could possibly memoize this too but this should be good enough, most of the time (the expectation is that\n    // when you have a lot of options, the selectable options will heavily dominate over the non-selectable options.\n\n\n    var offset = 0;\n\n    while (index > this._displayOnlyOptionsCache[offset]) {\n      offset++;\n    }\n\n    if (this._displayOnlyOptionsCache[offset] === index) {\n      throw new Error(\"Unexpected: Option at index \" + index + \" is not a selectable element.\");\n    }\n\n    return index - offset + 1;\n  };\n\n  return DropdownSizePosCache;\n}();\n\nexport { DropdownSizePosCache };","map":{"version":3,"mappings":";AAAA,SAA0BA,oBAA1B,QAAsD,mBAAtD;AAEA;;;;;;;;;;;AAUA;AAAA;AAAA;EAAA;IAGU,aAAQ,CAAR;EA0DT;EAxDC;;;;;EAGOC,+CAAP,UAAqBC,OAArB,EAA+C;IAC7C,IAAMC,uBAAuB,GAAG,EAAhC;IACA,IAAIC,IAAI,GAAG,CAAX;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;MACvC,IAAIH,OAAO,CAACG,CAAD,CAAP,CAAWE,QAAX,KAAwBP,oBAAoB,CAACQ,OAA7C,IAAwDN,OAAO,CAACG,CAAD,CAAP,CAAWE,QAAX,KAAwBP,oBAAoB,CAACS,MAAzG,EAAiH;QAC/GN,uBAAuB,CAACO,IAAxB,CAA6BL,CAA7B;MACD,CAFD,MAEO,IAAI,CAACH,OAAO,CAACG,CAAD,CAAP,CAAWM,MAAhB,EAAwB;QAC7BP,IAAI;MACL;IACF;;IAED,KAAKQ,KAAL,GAAaR,IAAb;IACA,KAAKS,wBAAL,GAAgCV,uBAAhC;IACA,KAAKW,cAAL,GAAmBC,eAAOb,OAAP,CAAnB;EACD,CAdM;;EAmBPc,sBAAWf,8BAAX,EAAW,eAAX,EAAwB;IAHxB;;;SAGA;MACE,OAAO,KAAKW,KAAZ;IACD,CAFuB;oBAAA;;EAAA,CAAxB;EAOAI,sBAAWf,8BAAX,EAAW,eAAX,EAAwB;IAHxB;;;SAGA;MACE,OAAO,KAAKa,cAAZ;IACD,CAFuB;oBAAA;;EAAA,CAAxB;EAIA;;;;;;EAKOb,+CAAP,UAAqBgB,KAArB,EAA8C;IAC5C,IAAIA,KAAK,KAAKC,SAAd,EAAyB;MACvB,OAAOA,SAAP;IACD,CAH2C,CAK5C;IACA;;;IACA,IAAIC,MAAM,GAAG,CAAb;;IACA,OAAOF,KAAK,GAAG,KAAKJ,wBAAL,CAA8BM,MAA9B,CAAf,EAAsD;MACpDA,MAAM;IACP;;IAED,IAAI,KAAKN,wBAAL,CAA8BM,MAA9B,MAA0CF,KAA9C,EAAqD;MACnD,MAAM,IAAIG,KAAJ,CAAU,iCAA+BH,KAA/B,GAAoC,+BAA9C,CAAN;IACD;;IAED,OAAOA,KAAK,GAAGE,MAAR,GAAiB,CAAxB;EACD,CAjBM;;EAkBT;AAAC,CA7DD","names":["DropdownMenuItemType","DropdownSizePosCache","options","displayOnlyOptionsCache","size","i","length","itemType","Divider","Header","push","hidden","_size","_displayOnlyOptionsCache","_cachedOptions","__spreadArrays","Object","index","undefined","offset","Error"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\Dropdown\\src\\components\\Dropdown\\utilities\\DropdownSizePosCache.ts"],"sourcesContent":["import { IDropdownOption, DropdownMenuItemType } from '../Dropdown.types';\n\n/**\n * A utility class to cache size and position in cache.\n *\n * Dropdown options has non-selectable display types. It is therefore not cheap to determine\n * the total number of actual selectable options as well as the position an option is in the\n * list of options - O(n) cost for each lookup.\n *\n * Given that we potentially have to make this determination on every single render pass, this\n * cache should provide a little bit of relief.\n */\nexport class DropdownSizePosCache {\n  private _cachedOptions: IDropdownOption[];\n  private _displayOnlyOptionsCache: number[];\n  private _size = 0;\n\n  /**\n   * Invalidates the cache and recalculate the size of selectable options.\n   */\n  public updateOptions(options: IDropdownOption[]) {\n    const displayOnlyOptionsCache = [];\n    let size = 0;\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].itemType === DropdownMenuItemType.Divider || options[i].itemType === DropdownMenuItemType.Header) {\n        displayOnlyOptionsCache.push(i);\n      } else if (!options[i].hidden) {\n        size++;\n      }\n    }\n\n    this._size = size;\n    this._displayOnlyOptionsCache = displayOnlyOptionsCache;\n    this._cachedOptions = [...options];\n  }\n\n  /**\n   * The size of all the selectable options.\n   */\n  public get optionSetSize(): number {\n    return this._size;\n  }\n\n  /**\n   * The chached options array.\n   */\n  public get cachedOptions(): IDropdownOption[] {\n    return this._cachedOptions;\n  }\n\n  /**\n   * Returns the position of this option element relative to the full set of selectable option elements.\n   * Note: the first selectable element is position 1 in the set.\n   * @param index The raw index of the option element.\n   */\n  public positionInSet(index: number | undefined): number | undefined {\n    if (index === undefined) {\n      return undefined;\n    }\n\n    // we could possibly memoize this too but this should be good enough, most of the time (the expectation is that\n    // when you have a lot of options, the selectable options will heavily dominate over the non-selectable options.\n    let offset = 0;\n    while (index > this._displayOnlyOptionsCache[offset]) {\n      offset++;\n    }\n\n    if (this._displayOnlyOptionsCache[offset] === index) {\n      throw new Error(`Unexpected: Option at index ${index} is not a selectable element.`);\n    }\n\n    return index - offset + 1;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}