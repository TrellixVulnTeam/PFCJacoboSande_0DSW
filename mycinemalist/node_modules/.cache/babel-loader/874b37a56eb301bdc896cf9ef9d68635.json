{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { DelayedRender, getId, classNamesFunction, getNativeProps, htmlElementProperties, css, initializeComponentRef } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nvar getClassNames = classNamesFunction();\n\nvar MessageBarBase =\n/** @class */\nfunction (_super) {\n  __extends(MessageBarBase, _super);\n\n  function MessageBarBase(props) {\n    var _a;\n\n    var _this = _super.call(this, props) || this;\n\n    _this.ICON_MAP = (_a = {}, _a[MessageBarType.info] = 'Info', _a[MessageBarType.warning] = 'Info', _a[MessageBarType.error] = 'ErrorBadge', _a[MessageBarType.blocked] = 'Blocked2', _a[MessageBarType.severeWarning] = 'Warning', _a[MessageBarType.success] = 'Completed', _a);\n\n    _this._getRegionProps = function () {\n      var hasActions = !!_this._getActionsDiv() || !!_this._getDismissDiv();\n      var regionProps = {\n        'aria-describedby': _this.state.labelId,\n        role: 'region'\n      };\n      return hasActions ? regionProps : {};\n    };\n\n    _this._onClick = function (ev) {\n      _this.setState({\n        expandSingleLine: !_this.state.expandSingleLine\n      });\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      labelId: getId('MessageBar'),\n      // eslint-disable-next-line react/no-unused-state\n      showContent: false,\n      expandSingleLine: false\n    };\n    return _this;\n  }\n\n  MessageBarBase.prototype.render = function () {\n    var isMultiline = this.props.isMultiline;\n    this._classNames = this._getClassNames();\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\n  };\n\n  MessageBarBase.prototype._getActionsDiv = function () {\n    if (this.props.actions) {\n      return React.createElement(\"div\", {\n        className: this._classNames.actions\n      }, this.props.actions);\n    }\n\n    return null;\n  };\n\n  MessageBarBase.prototype._getDismissDiv = function () {\n    var _a = this.props,\n        onDismiss = _a.onDismiss,\n        dismissIconProps = _a.dismissIconProps;\n\n    if (onDismiss) {\n      return React.createElement(IconButton, {\n        disabled: false,\n        className: this._classNames.dismissal,\n        onClick: onDismiss,\n        iconProps: dismissIconProps ? dismissIconProps : {\n          iconName: 'Clear'\n        },\n        title: this.props.dismissButtonAriaLabel,\n        ariaLabel: this.props.dismissButtonAriaLabel\n      });\n    }\n\n    return null;\n  };\n\n  MessageBarBase.prototype._getDismissSingleLine = function () {\n    if (this.props.onDismiss) {\n      return React.createElement(\"div\", {\n        className: this._classNames.dismissSingleLine\n      }, this._getDismissDiv());\n    }\n\n    return null;\n  };\n\n  MessageBarBase.prototype._getExpandSingleLine = function () {\n    if (!this.props.actions && this.props.truncated) {\n      return React.createElement(\"div\", {\n        className: this._classNames.expandSingleLine\n      }, React.createElement(IconButton, {\n        disabled: false,\n        className: this._classNames.expand,\n        onClick: this._onClick,\n        iconProps: {\n          iconName: this.state.expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown'\n        },\n        ariaLabel: this.props.overflowButtonAriaLabel,\n        \"aria-expanded\": this.state.expandSingleLine\n      }));\n    }\n\n    return null;\n  };\n\n  MessageBarBase.prototype._getIconSpan = function () {\n    var messageBarIconProps = this.props.messageBarIconProps;\n    return React.createElement(\"div\", {\n      className: this._classNames.iconContainer,\n      \"aria-hidden\": true\n    }, messageBarIconProps ? React.createElement(Icon, __assign({}, messageBarIconProps, {\n      className: css(this._classNames.icon, messageBarIconProps.className)\n    })) : React.createElement(Icon, {\n      iconName: this.ICON_MAP[this.props.messageBarType],\n      className: this._classNames.icon\n    }));\n  };\n\n  MessageBarBase.prototype._renderMultiLine = function () {\n    return React.createElement(\"div\", __assign({\n      className: this._classNames.root\n    }, this._getRegionProps()), React.createElement(\"div\", {\n      className: this._classNames.content\n    }, this._getIconSpan(), this._renderInnerText(), this._getDismissDiv()), this._getActionsDiv());\n  };\n\n  MessageBarBase.prototype._renderSingleLine = function () {\n    return React.createElement(\"div\", __assign({\n      className: this._classNames.root\n    }, this._getRegionProps()), React.createElement(\"div\", {\n      className: this._classNames.content\n    }, this._getIconSpan(), this._renderInnerText(), this._getExpandSingleLine(), this._getActionsDiv(), this._getDismissSingleLine()));\n  };\n\n  MessageBarBase.prototype._renderInnerText = function () {\n    var nativeProps = getNativeProps(this.props, htmlElementProperties, ['className']);\n    return React.createElement(\"div\", {\n      className: this._classNames.text,\n      id: this.state.labelId,\n      role: \"status\",\n      \"aria-live\": this._getAnnouncementPriority()\n    }, React.createElement(\"span\", __assign({\n      className: this._classNames.innerText\n    }, nativeProps), React.createElement(DelayedRender, null, React.createElement(\"span\", null, this.props.children))));\n  };\n\n  MessageBarBase.prototype._getClassNames = function () {\n    var _a = this.props,\n        theme = _a.theme,\n        className = _a.className,\n        messageBarType = _a.messageBarType,\n        onDismiss = _a.onDismiss,\n        actions = _a.actions,\n        truncated = _a.truncated,\n        isMultiline = _a.isMultiline;\n    var expandSingleLine = this.state.expandSingleLine;\n    return getClassNames(this.props.styles, {\n      theme: theme,\n      messageBarType: messageBarType || MessageBarType.info,\n      onDismiss: onDismiss !== undefined,\n      actions: actions !== undefined,\n      truncated: truncated,\n      isMultiline: isMultiline,\n      expandSingleLine: expandSingleLine,\n      className: className\n    });\n  };\n\n  MessageBarBase.prototype._getAnnouncementPriority = function () {\n    switch (this.props.messageBarType) {\n      case MessageBarType.blocked:\n      case MessageBarType.error:\n      case MessageBarType.severeWarning:\n        return 'assertive';\n    }\n\n    return 'polite';\n  };\n\n  MessageBarBase.defaultProps = {\n    messageBarType: MessageBarType.info,\n    onDismiss: undefined,\n    isMultiline: true\n  };\n  return MessageBarBase;\n}(React.Component);\n\nexport { MessageBarBase };","map":{"version":3,"mappings":"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","names":["React","DelayedRender","getId","classNamesFunction","getNativeProps","htmlElementProperties","css","initializeComponentRef","IconButton","Icon","MessageBarType","getClassNames","__extends","props","_super","_this","_a","info","warning","error","blocked","severeWarning","success","hasActions","_getActionsDiv","_getDismissDiv","regionProps","state","labelId","role","ev","setState","expandSingleLine","showContent","MessageBarBase","_classNames","_getClassNames","isMultiline","_renderMultiLine","_renderSingleLine","actions","className","onDismiss","dismissIconProps","disabled","dismissal","onClick","iconProps","iconName","title","dismissButtonAriaLabel","ariaLabel","dismissSingleLine","truncated","expand","_onClick","overflowButtonAriaLabel","iconContainer","messageBarIconProps","__assign","icon","ICON_MAP","messageBarType","root","_getRegionProps","content","_getIconSpan","_renderInnerText","_getExpandSingleLine","_getDismissSingleLine","nativeProps","text","id","_getAnnouncementPriority","innerText","children","theme","styles","undefined","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\MessageBar\\MessageBar.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  DelayedRender,\n  getId,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n  css,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles, MessageBarType } from './MessageBar.types';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nexport interface IMessageBarState {\n  labelId?: string;\n  showContent?: boolean;\n  expandSingleLine?: boolean;\n}\n\nexport class MessageBarBase extends React.Component<IMessageBarProps, IMessageBarState> {\n  public static defaultProps: IMessageBarProps = {\n    messageBarType: MessageBarType.info,\n    onDismiss: undefined,\n    isMultiline: true,\n  };\n\n  private ICON_MAP = {\n    [MessageBarType.info]: 'Info',\n    [MessageBarType.warning]: 'Info',\n    [MessageBarType.error]: 'ErrorBadge',\n    [MessageBarType.blocked]: 'Blocked2',\n    [MessageBarType.severeWarning]: 'Warning',\n    [MessageBarType.success]: 'Completed',\n  };\n\n  private _classNames: { [key in keyof IMessageBarStyles]: string };\n\n  constructor(props: IMessageBarProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this.state = {\n      labelId: getId('MessageBar'),\n      // eslint-disable-next-line react/no-unused-state\n      showContent: false,\n      expandSingleLine: false,\n    };\n  }\n\n  public render(): JSX.Element {\n    const { isMultiline } = this.props;\n\n    this._classNames = this._getClassNames();\n\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\n  }\n\n  private _getActionsDiv(): JSX.Element | null {\n    if (this.props.actions) {\n      return <div className={this._classNames.actions}>{this.props.actions}</div>;\n    }\n    return null;\n  }\n\n  private _getDismissDiv(): JSX.Element | null {\n    const { onDismiss, dismissIconProps } = this.props;\n    if (onDismiss) {\n      return (\n        <IconButton\n          disabled={false}\n          className={this._classNames.dismissal}\n          onClick={onDismiss}\n          iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n          title={this.props.dismissButtonAriaLabel}\n          ariaLabel={this.props.dismissButtonAriaLabel}\n        />\n      );\n    }\n    return null;\n  }\n\n  private _getDismissSingleLine(): JSX.Element | null {\n    if (this.props.onDismiss) {\n      return <div className={this._classNames.dismissSingleLine}>{this._getDismissDiv()}</div>;\n    }\n    return null;\n  }\n\n  private _getExpandSingleLine(): JSX.Element | null {\n    if (!this.props.actions && this.props.truncated) {\n      return (\n        <div className={this._classNames.expandSingleLine}>\n          <IconButton\n            disabled={false}\n            className={this._classNames.expand}\n            onClick={this._onClick}\n            iconProps={{ iconName: this.state.expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' }}\n            ariaLabel={this.props.overflowButtonAriaLabel}\n            aria-expanded={this.state.expandSingleLine}\n          />\n        </div>\n      );\n    }\n    return null;\n  }\n\n  private _getIconSpan(): JSX.Element {\n    const { messageBarIconProps } = this.props;\n    return (\n      <div className={this._classNames.iconContainer} aria-hidden>\n        {messageBarIconProps ? (\n          <Icon {...messageBarIconProps} className={css(this._classNames.icon, messageBarIconProps.className)} />\n        ) : (\n          <Icon iconName={this.ICON_MAP[this.props.messageBarType!]} className={this._classNames.icon} />\n        )}\n      </div>\n    );\n  }\n\n  private _renderMultiLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    return (\n      <div className={this._classNames.root} {...this._getRegionProps()}>\n        <div className={this._classNames.content}>\n          {this._getIconSpan()}\n          {this._renderInnerText()}\n          {this._getDismissDiv()}\n        </div>\n        {this._getActionsDiv()}\n      </div>\n    );\n  }\n\n  private _renderSingleLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    return (\n      <div className={this._classNames.root} {...this._getRegionProps()}>\n        <div className={this._classNames.content}>\n          {this._getIconSpan()}\n          {this._renderInnerText()}\n          {this._getExpandSingleLine()}\n          {this._getActionsDiv()}\n          {this._getDismissSingleLine()}\n        </div>\n      </div>\n    );\n  }\n\n  private _renderInnerText(): JSX.Element {\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(this.props, htmlElementProperties, [\n      'className',\n    ]);\n\n    return (\n      <div\n        className={this._classNames.text}\n        id={this.state.labelId}\n        role=\"status\"\n        aria-live={this._getAnnouncementPriority()}\n      >\n        <span className={this._classNames.innerText} {...nativeProps}>\n          <DelayedRender>\n            <span>{this.props.children}</span>\n          </DelayedRender>\n        </span>\n      </div>\n    );\n  }\n\n  private _getRegionProps = () => {\n    const hasActions = !!this._getActionsDiv() || !!this._getDismissDiv();\n    const regionProps = {\n      'aria-describedby': this.state.labelId,\n      role: 'region',\n    };\n\n    return hasActions ? regionProps : {};\n  };\n\n  private _getClassNames(): { [key in keyof IMessageBarStyles]: string } {\n    const { theme, className, messageBarType, onDismiss, actions, truncated, isMultiline } = this.props;\n    const { expandSingleLine } = this.state;\n\n    return getClassNames(this.props.styles!, {\n      theme: theme!,\n      messageBarType: messageBarType || MessageBarType.info,\n      onDismiss: onDismiss !== undefined,\n      actions: actions !== undefined,\n      truncated: truncated,\n      isMultiline: isMultiline,\n      expandSingleLine: expandSingleLine,\n      className,\n    });\n  }\n\n  private _getAnnouncementPriority(): 'assertive' | 'polite' {\n    switch (this.props.messageBarType) {\n      case MessageBarType.blocked:\n      case MessageBarType.error:\n      case MessageBarType.severeWarning:\n        return 'assertive';\n    }\n    return 'polite';\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    this.setState({ expandSingleLine: !this.state.expandSingleLine });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}