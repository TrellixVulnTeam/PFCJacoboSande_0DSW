{"ast":null,"code":"import { DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, DATAKTP_ARIA_TARGET } from '../../utilities/keytips/index';\nimport { useKeytipData } from './useKeytipData';\n/**\n * Hook that creates a ref which is used for passing to Keytip target element.\n * The ref will handle setting the attributes needed for Keytip to work.\n */\n\nexport function useKeytipRef(options) {\n  var _a = useKeytipData(options),\n      keytipId = _a.keytipId,\n      ariaDescribedBy = _a.ariaDescribedBy;\n\n  var contentRef = function contentRef(contentElement) {\n    if (!contentElement) {\n      return;\n    }\n\n    var targetElement = findFirstElement(contentElement, DATAKTP_TARGET) || contentElement;\n    var executeElement = findFirstElement(contentElement, DATAKTP_EXECUTE_TARGET) || targetElement;\n    var ariaElement = findFirstElement(contentElement, DATAKTP_ARIA_TARGET) || executeElement;\n    setAttribute(targetElement, DATAKTP_TARGET, keytipId);\n    setAttribute(executeElement, DATAKTP_EXECUTE_TARGET, keytipId);\n    setAttribute(ariaElement, 'aria-describedby', ariaDescribedBy, true);\n  };\n\n  return contentRef;\n}\nexport function setAttribute(element, attributeName, attributeValue, append) {\n  if (append === void 0) {\n    append = false;\n  }\n\n  if (element && attributeValue) {\n    var value = attributeValue;\n\n    if (append) {\n      var currentValue = element.getAttribute(attributeName);\n\n      if (currentValue && currentValue.indexOf(attributeValue) === -1) {\n        value = currentValue + \" \" + attributeValue;\n      }\n    }\n\n    element.setAttribute(attributeName, value);\n  }\n}\n\nfunction findFirstElement(rootElement, dataAttribute) {\n  return rootElement.querySelector(\"[\" + dataAttribute + \"]\");\n}","map":{"version":3,"mappings":"AAEA,SAASA,cAAT,EAAyBC,sBAAzB,EAAiDC,mBAAjD,QAA4E,+BAA5E;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA;;;;;AAIA,OAAM,SAAUC,YAAV,CACJC,OADI,EACsB;EAEpB;EAAA,IAAEC,sBAAF;EAAA,IAAYC,oCAAZ;;EAEN,IAAMC,UAAU,GAAwB,SAAlCA,UAAkC,CAACC,cAAD,EAAgC;IACtE,IAAI,CAACA,cAAL,EAAqB;MACnB;IACD;;IAED,IAAMC,aAAa,GAAGC,gBAAgB,CAACF,cAAD,EAAiBT,cAAjB,CAAhB,IAAoDS,cAA1E;IACA,IAAMG,cAAc,GAAGD,gBAAgB,CAACF,cAAD,EAAiBR,sBAAjB,CAAhB,IAA4DS,aAAnF;IACA,IAAMG,WAAW,GAAGF,gBAAgB,CAACF,cAAD,EAAiBP,mBAAjB,CAAhB,IAAyDU,cAA7E;IAEAE,YAAY,CAACJ,aAAD,EAAgBV,cAAhB,EAAgCM,QAAhC,CAAZ;IACAQ,YAAY,CAACF,cAAD,EAAiBX,sBAAjB,EAAyCK,QAAzC,CAAZ;IACAQ,YAAY,CAACD,WAAD,EAAc,kBAAd,EAAkCN,eAAlC,EAAmD,IAAnD,CAAZ;EACD,CAZD;;EAcA,OAAOC,UAAP;AACD;AAED,OAAM,SAAUM,YAAV,CACJC,OADI,EAEJC,aAFI,EAGJC,cAHI,EAIJC,MAJI,EAImB;EAAvB;IAAAA;EAAuB;;EAEvB,IAAIH,OAAO,IAAIE,cAAf,EAA+B;IAC7B,IAAIE,KAAK,GAAGF,cAAZ;;IACA,IAAIC,MAAJ,EAAY;MACV,IAAME,YAAY,GAAGL,OAAO,CAACM,YAAR,CAAqBL,aAArB,CAArB;;MACA,IAAII,YAAY,IAAIA,YAAY,CAACE,OAAb,CAAqBL,cAArB,MAAyC,CAAC,CAA9D,EAAiE;QAC/DE,KAAK,GAAMC,YAAY,MAAZ,GAAgBH,cAA3B;MACD;IACF;;IAEDF,OAAO,CAACD,YAAR,CAAqBE,aAArB,EAAoCG,KAApC;EACD;AACF;;AAED,SAASR,gBAAT,CAA0BY,WAA1B,EAAoDC,aAApD,EAAyE;EACvE,OAAOD,WAAW,CAACE,aAAZ,CAA0B,MAAID,aAAJ,GAAiB,GAA3C,CAAP;AACD","names":["DATAKTP_TARGET","DATAKTP_EXECUTE_TARGET","DATAKTP_ARIA_TARGET","useKeytipData","useKeytipRef","options","keytipId","ariaDescribedBy","contentRef","contentElement","targetElement","findFirstElement","executeElement","ariaElement","setAttribute","element","attributeName","attributeValue","append","value","currentValue","getAttribute","indexOf","rootElement","dataAttribute","querySelector"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\KeytipData\\useKeytipRef.ts"],"sourcesContent":["import * as React from 'react';\nimport { KeytipDataOptions } from './KeytipData.types';\nimport { DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, DATAKTP_ARIA_TARGET } from '../../utilities/keytips/index';\nimport { useKeytipData } from './useKeytipData';\n\n/**\n * Hook that creates a ref which is used for passing to Keytip target element.\n * The ref will handle setting the attributes needed for Keytip to work.\n */\nexport function useKeytipRef<TElement extends HTMLElement = HTMLElement>(\n  options: KeytipDataOptions,\n): React.Ref<TElement> {\n  const { keytipId, ariaDescribedBy } = useKeytipData(options);\n\n  const contentRef: React.Ref<TElement> = (contentElement: TElement | null): void => {\n    if (!contentElement) {\n      return;\n    }\n\n    const targetElement = findFirstElement(contentElement, DATAKTP_TARGET) || contentElement;\n    const executeElement = findFirstElement(contentElement, DATAKTP_EXECUTE_TARGET) || targetElement;\n    const ariaElement = findFirstElement(contentElement, DATAKTP_ARIA_TARGET) || executeElement;\n\n    setAttribute(targetElement, DATAKTP_TARGET, keytipId);\n    setAttribute(executeElement, DATAKTP_EXECUTE_TARGET, keytipId);\n    setAttribute(ariaElement, 'aria-describedby', ariaDescribedBy, true);\n  };\n\n  return contentRef;\n}\n\nexport function setAttribute(\n  element: HTMLElement | null,\n  attributeName: string,\n  attributeValue: string | undefined,\n  append: boolean = false,\n): void {\n  if (element && attributeValue) {\n    let value = attributeValue;\n    if (append) {\n      const currentValue = element.getAttribute(attributeName);\n      if (currentValue && currentValue.indexOf(attributeValue) === -1) {\n        value = `${currentValue} ${attributeValue}`;\n      }\n    }\n\n    element.setAttribute(attributeName, value);\n  }\n}\n\nfunction findFirstElement(rootElement: HTMLElement, dataAttribute: string): HTMLElement | null {\n  return rootElement.querySelector(`[${dataAttribute}]`);\n}\n"]},"metadata":{},"sourceType":"module"}