{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { HighContrastSelector, ScreenWidthMaxMedium, ScreenWidthMaxSmall, ScreenWidthMinMedium, getFocusStyle, getScreenSelector, getGlobalClassNames, FontWeights } from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nvar GlobalClassNames = {\n  root: 'ms-Breadcrumb',\n  list: 'ms-Breadcrumb-list',\n  listItem: 'ms-Breadcrumb-listItem',\n  chevron: 'ms-Breadcrumb-chevron',\n  overflow: 'ms-Breadcrumb-overflow',\n  overflowButton: 'ms-Breadcrumb-overflowButton',\n  itemLink: 'ms-Breadcrumb-itemLink',\n  item: 'ms-Breadcrumb-item'\n};\nvar SingleLineTextStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden'\n};\nvar overflowButtonFontSize = 16;\nvar chevronSmallFontSize = 8;\nvar itemLineHeight = 36;\nvar itemFontSize = 18;\nvar MinimumScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\nvar MediumScreenSelector = getScreenSelector(ScreenWidthMinMedium, ScreenWidthMaxMedium);\nexport var getStyles = function (props) {\n  var _a, _b, _c, _d;\n\n  var className = props.className,\n      theme = props.theme;\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      fonts = theme.fonts;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme); // Tokens\n\n  var itemBackgroundHoveredColor = semanticColors.menuItemBackgroundHovered;\n  var itemBackgroundPressedColor = semanticColors.menuItemBackgroundPressed;\n  var itemTextColor = palette.neutralSecondary;\n  var itemTextFontWeight = FontWeights.regular;\n  var itemTextHoveredOrPressedColor = palette.neutralPrimary;\n  var itemLastChildTextColor = palette.neutralPrimary;\n  var itemLastChildTextFontWeight = FontWeights.semibold;\n  var chevronButtonColor = palette.neutralSecondary;\n  var overflowButtonColor = palette.neutralSecondary;\n  var lastChildItemStyles = {\n    fontWeight: itemLastChildTextFontWeight,\n    color: itemLastChildTextColor\n  };\n  var itemStateSelectors = {\n    ':hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundHoveredColor,\n      cursor: 'pointer',\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        color: 'Highlight'\n      }, _a)\n    },\n    ':active': {\n      backgroundColor: itemBackgroundPressedColor,\n      color: itemTextHoveredOrPressedColor\n    },\n    '&:active:hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundPressedColor\n    },\n    '&:active, &:hover, &:active:hover': {\n      textDecoration: 'none'\n    }\n  };\n  var commonItemStyles = {\n    color: itemTextColor,\n    padding: '0 8px',\n    lineHeight: itemLineHeight,\n    fontSize: itemFontSize,\n    fontWeight: itemTextFontWeight\n  };\n  return {\n    root: [classNames.root, fonts.medium, {\n      margin: '11px 0 1px'\n    }, className],\n    list: [classNames.list, {\n      whiteSpace: 'nowrap',\n      padding: 0,\n      margin: 0,\n      display: 'flex',\n      alignItems: 'stretch'\n    }],\n    listItem: [classNames.listItem, {\n      listStyleType: 'none',\n      margin: '0',\n      padding: '0',\n      display: 'flex',\n      position: 'relative',\n      alignItems: 'center',\n      selectors: {\n        '&:last-child .ms-Breadcrumb-itemLink': lastChildItemStyles,\n        '&:last-child .ms-Breadcrumb-item': lastChildItemStyles\n      }\n    }],\n    chevron: [classNames.chevron, {\n      color: chevronButtonColor,\n      fontSize: fonts.small.fontSize,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        color: 'WindowText',\n        MsHighContrastAdjust: 'none'\n      }, _b[MediumScreenSelector] = {\n        fontSize: chevronSmallFontSize\n      }, _b[MinimumScreenSelector] = {\n        fontSize: chevronSmallFontSize\n      }, _b)\n    }],\n    overflow: [classNames.overflow, {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center'\n    }],\n    overflowButton: [classNames.overflowButton, getFocusStyle(theme), SingleLineTextStyle, {\n      fontSize: overflowButtonFontSize,\n      color: overflowButtonColor,\n      height: '100%',\n      cursor: 'pointer',\n      selectors: __assign(__assign({}, itemStateSelectors), (_c = {}, _c[MinimumScreenSelector] = {\n        padding: '4px 6px'\n      }, _c[MediumScreenSelector] = {\n        fontSize: fonts.mediumPlus.fontSize\n      }, _c))\n    }],\n    itemLink: [classNames.itemLink, getFocusStyle(theme), SingleLineTextStyle, __assign(__assign({}, commonItemStyles), {\n      selectors: __assign((_d = {\n        ':focus': {\n          color: palette.neutralDark\n        }\n      }, _d[\".\" + IsFocusVisibleClassName + \" &:focus\"] = {\n        outline: \"none\"\n      }, _d), itemStateSelectors)\n    })],\n    item: [classNames.item, __assign(__assign({}, commonItemStyles), {\n      selectors: {\n        ':hover': {\n          cursor: 'default'\n        }\n      }\n    })]\n  };\n};","map":{"version":3,"mappings":"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","names":["HighContrastSelector","ScreenWidthMaxMedium","ScreenWidthMaxSmall","ScreenWidthMinMedium","getFocusStyle","getScreenSelector","getGlobalClassNames","FontWeights","IsFocusVisibleClassName","GlobalClassNames","root","list","listItem","chevron","overflow","overflowButton","itemLink","item","SingleLineTextStyle","whiteSpace","textOverflow","overflowButtonFontSize","chevronSmallFontSize","itemLineHeight","itemFontSize","MinimumScreenSelector","MediumScreenSelector","getStyles","props","theme","semanticColors","fonts","classNames","itemBackgroundHoveredColor","menuItemBackgroundHovered","itemBackgroundPressedColor","menuItemBackgroundPressed","itemTextColor","palette","neutralSecondary","itemTextFontWeight","regular","itemTextHoveredOrPressedColor","neutralPrimary","itemLastChildTextColor","itemLastChildTextFontWeight","semibold","chevronButtonColor","overflowButtonColor","lastChildItemStyles","fontWeight","color","itemStateSelectors","backgroundColor","cursor","selectors","_a","textDecoration","commonItemStyles","padding","lineHeight","fontSize","medium","margin","className","display","alignItems","listStyleType","position","small","_b","MsHighContrastAdjust","height","_c","mediumPlus","neutralDark","_d","outline"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Breadcrumb\\Breadcrumb.styles.ts"],"sourcesContent":["import {\n  HighContrastSelector,\n  IRawStyle,\n  ScreenWidthMaxMedium,\n  ScreenWidthMaxSmall,\n  ScreenWidthMinMedium,\n  getFocusStyle,\n  getScreenSelector,\n  getGlobalClassNames,\n  FontWeights,\n} from '../../Styling';\nimport { IBreadcrumbStyleProps, IBreadcrumbStyles } from './Breadcrumb.types';\nimport { IsFocusVisibleClassName } from '../../Utilities';\n\nconst GlobalClassNames = {\n  root: 'ms-Breadcrumb',\n  list: 'ms-Breadcrumb-list',\n  listItem: 'ms-Breadcrumb-listItem',\n  chevron: 'ms-Breadcrumb-chevron',\n  overflow: 'ms-Breadcrumb-overflow',\n  overflowButton: 'ms-Breadcrumb-overflowButton',\n  itemLink: 'ms-Breadcrumb-itemLink',\n  item: 'ms-Breadcrumb-item',\n};\n\nconst SingleLineTextStyle: IRawStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n};\n\nconst overflowButtonFontSize = 16;\nconst chevronSmallFontSize = 8;\nconst itemLineHeight = 36;\nconst itemFontSize = 18;\n\nconst MinimumScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\nconst MediumScreenSelector = getScreenSelector(ScreenWidthMinMedium, ScreenWidthMaxMedium);\n\nexport const getStyles = (props: IBreadcrumbStyleProps): IBreadcrumbStyles => {\n  const { className, theme } = props;\n  const { palette, semanticColors, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // Tokens\n  const itemBackgroundHoveredColor = semanticColors.menuItemBackgroundHovered;\n  const itemBackgroundPressedColor = semanticColors.menuItemBackgroundPressed;\n  const itemTextColor = palette.neutralSecondary;\n  const itemTextFontWeight = FontWeights.regular;\n  const itemTextHoveredOrPressedColor = palette.neutralPrimary;\n  const itemLastChildTextColor = palette.neutralPrimary;\n  const itemLastChildTextFontWeight = FontWeights.semibold;\n  const chevronButtonColor = palette.neutralSecondary;\n  const overflowButtonColor = palette.neutralSecondary;\n\n  const lastChildItemStyles: IRawStyle = {\n    fontWeight: itemLastChildTextFontWeight,\n    color: itemLastChildTextColor,\n  };\n\n  const itemStateSelectors = {\n    ':hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundHoveredColor,\n      cursor: 'pointer',\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Highlight',\n        },\n      },\n    },\n    ':active': {\n      backgroundColor: itemBackgroundPressedColor,\n      color: itemTextHoveredOrPressedColor,\n    },\n    '&:active:hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundPressedColor,\n    },\n    '&:active, &:hover, &:active:hover': {\n      textDecoration: 'none',\n    },\n  };\n\n  const commonItemStyles: IRawStyle = {\n    color: itemTextColor,\n    padding: '0 8px',\n    lineHeight: itemLineHeight,\n    fontSize: itemFontSize,\n    fontWeight: itemTextFontWeight,\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        margin: '11px 0 1px',\n      },\n      className,\n    ],\n\n    list: [\n      classNames.list,\n      {\n        whiteSpace: 'nowrap',\n        padding: 0,\n        margin: 0,\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n\n    listItem: [\n      classNames.listItem,\n      {\n        listStyleType: 'none',\n        margin: '0',\n        padding: '0',\n        display: 'flex',\n        position: 'relative',\n        alignItems: 'center',\n        selectors: {\n          '&:last-child .ms-Breadcrumb-itemLink': lastChildItemStyles,\n          '&:last-child .ms-Breadcrumb-item': lastChildItemStyles,\n        },\n      },\n    ],\n\n    chevron: [\n      classNames.chevron,\n      {\n        color: chevronButtonColor,\n        fontSize: fonts.small.fontSize,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'WindowText',\n            MsHighContrastAdjust: 'none',\n          },\n          [MediumScreenSelector]: {\n            fontSize: chevronSmallFontSize,\n          },\n          [MinimumScreenSelector]: {\n            fontSize: chevronSmallFontSize,\n          },\n        },\n      },\n    ],\n\n    overflow: [\n      classNames.overflow,\n      {\n        position: 'relative',\n        display: 'flex',\n        alignItems: 'center',\n      },\n    ],\n\n    overflowButton: [\n      classNames.overflowButton,\n      getFocusStyle(theme),\n      SingleLineTextStyle,\n      {\n        fontSize: overflowButtonFontSize,\n        color: overflowButtonColor,\n        height: '100%',\n        cursor: 'pointer',\n        selectors: {\n          ...itemStateSelectors,\n          [MinimumScreenSelector]: {\n            padding: '4px 6px',\n          },\n          [MediumScreenSelector]: {\n            fontSize: fonts.mediumPlus.fontSize,\n          },\n        },\n      },\n    ],\n\n    itemLink: [\n      classNames.itemLink,\n      getFocusStyle(theme),\n      SingleLineTextStyle,\n      {\n        ...commonItemStyles,\n        selectors: {\n          ':focus': {\n            color: palette.neutralDark,\n          },\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            outline: `none`,\n          },\n          ...itemStateSelectors,\n        },\n      },\n    ],\n\n    item: [\n      classNames.item,\n      {\n        ...commonItemStyles,\n        selectors: {\n          ':hover': {\n            cursor: 'default',\n          },\n        },\n      },\n    ],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}