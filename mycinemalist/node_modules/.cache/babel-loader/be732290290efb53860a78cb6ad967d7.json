{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nvar getClassNames = classNamesFunction(); // if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\n\nvar ZERO_THRESHOLD = 0.01;\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\n\nvar ProgressIndicatorBase =\n/** @class */\nfunction (_super) {\n  __extends(ProgressIndicatorBase, _super);\n\n  function ProgressIndicatorBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onRenderProgress = function (props) {\n      var _a = _this.props,\n          ariaValueText = _a.ariaValueText,\n          barHeight = _a.barHeight,\n          className = _a.className,\n          styles = _a.styles,\n          theme = _a.theme;\n      var percentComplete = typeof _this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, _this.props.percentComplete * 100)) : undefined;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        className: className,\n        barHeight: barHeight,\n        indeterminate: percentComplete === undefined ? true : false\n      });\n      var progressBarStyles = {\n        width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n        transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined\n      };\n      var ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n      var ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n      var ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete) : undefined;\n      return React.createElement(\"div\", {\n        className: classNames.itemProgress\n      }, React.createElement(\"div\", {\n        className: classNames.progressTrack\n      }), React.createElement(\"div\", {\n        className: classNames.progressBar,\n        style: progressBarStyles,\n        role: \"progressbar\",\n        \"aria-valuemin\": ariaValueMin,\n        \"aria-valuemax\": ariaValueMax,\n        \"aria-valuenow\": ariaValueNow,\n        \"aria-valuetext\": ariaValueText\n      }));\n    };\n\n    return _this;\n  }\n\n  ProgressIndicatorBase.prototype.render = function () {\n    var _a = this.props,\n        barHeight = _a.barHeight,\n        className = _a.className,\n        // eslint-disable-next-line deprecation/deprecation\n    _b = _a.label,\n        // eslint-disable-next-line deprecation/deprecation\n    label = _b === void 0 ? this.props.title : _b,\n        // Fall back to deprecated value.\n    description = _a.description,\n        styles = _a.styles,\n        theme = _a.theme,\n        progressHidden = _a.progressHidden,\n        _c = _a.onRenderProgress,\n        onRenderProgress = _c === void 0 ? this._onRenderProgress : _c;\n    var percentComplete = typeof this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, this.props.percentComplete * 100)) : undefined;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      barHeight: barHeight,\n      indeterminate: percentComplete === undefined ? true : false\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, label ? React.createElement(\"div\", {\n      className: classNames.itemName\n    }, label) : null, !progressHidden ? onRenderProgress(__assign(__assign({}, this.props), {\n      percentComplete: percentComplete\n    }), this._onRenderProgress) : null, description ? React.createElement(\"div\", {\n      className: classNames.itemDescription\n    }, description) : null);\n  };\n\n  ProgressIndicatorBase.defaultProps = {\n    label: '',\n    description: '',\n    width: 180\n  };\n  return ProgressIndicatorBase;\n}(React.Component);\n\nexport { ProgressIndicatorBase };","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","getClassNames","ZERO_THRESHOLD","__extends","_this","props","ariaValueText","barHeight","className","styles","theme","percentComplete","Math","min","max","undefined","classNames","indeterminate","progressBarStyles","width","transition","ariaValueMin","ariaValueMax","ariaValueNow","floor","itemProgress","progressTrack","progressBar","style","role","ProgressIndicatorBase","_b","label","description","progressHidden","_c","onRenderProgress","root","itemName","_onRenderProgress","itemDescription","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\ProgressIndicator\\ProgressIndicator.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport {\n  IProgressIndicatorProps,\n  IProgressIndicatorStyleProps,\n  IProgressIndicatorStyles,\n} from './ProgressIndicator.types';\n\nconst getClassNames = classNamesFunction<IProgressIndicatorStyleProps, IProgressIndicatorStyles>();\n\n// if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\nconst ZERO_THRESHOLD = 0.01;\n\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\nexport class ProgressIndicatorBase extends React.Component<IProgressIndicatorProps, {}> {\n  public static defaultProps = {\n    label: '',\n    description: '',\n    width: 180,\n  };\n\n  public render() {\n    const {\n      barHeight,\n      className,\n      // eslint-disable-next-line deprecation/deprecation\n      label = this.props.title, // Fall back to deprecated value.\n      description,\n      styles,\n      theme,\n      progressHidden,\n      onRenderProgress = this._onRenderProgress,\n    } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    return (\n      <div className={classNames.root}>\n        {label ? <div className={classNames.itemName}>{label}</div> : null}\n        {!progressHidden\n          ? onRenderProgress(\n              {\n                ...(this.props as IProgressIndicatorProps),\n                percentComplete: percentComplete,\n              },\n              this._onRenderProgress,\n            )\n          : null}\n        {description ? <div className={classNames.itemDescription}>{description}</div> : null}\n      </div>\n    );\n  }\n\n  private _onRenderProgress = (props: IProgressIndicatorProps): JSX.Element => {\n    const { ariaValueText, barHeight, className, styles, theme } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    const progressBarStyles = {\n      width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n      transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined,\n    };\n\n    const ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n    const ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n    const ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete!) : undefined;\n\n    return (\n      <div className={classNames.itemProgress}>\n        <div className={classNames.progressTrack} />\n        <div\n          className={classNames.progressBar}\n          style={progressBarStyles}\n          role=\"progressbar\"\n          aria-valuemin={ariaValueMin}\n          aria-valuemax={ariaValueMax}\n          aria-valuenow={ariaValueNow}\n          aria-valuetext={ariaValueText}\n        />\n      </div>\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}