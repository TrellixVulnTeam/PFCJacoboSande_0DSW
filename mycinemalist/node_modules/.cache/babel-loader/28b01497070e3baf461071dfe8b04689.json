{"ast":null,"code":"var _a, _b, _c;\n\nimport { __assign } from \"tslib\";\nimport { HighContrastSelector, ScreenWidthMaxSmall, getScreenSelector, getGlobalClassNames, getFocusStyle, IconFontSizes } from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nvar GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine'\n};\nvar backgroundColor = (_a = {}, _a[MessageBarType.error] = 'errorBackground', _a[MessageBarType.blocked] = 'errorBackground', _a[MessageBarType.success] = 'successBackground', _a[MessageBarType.warning] = 'warningBackground', _a[MessageBarType.severeWarning] = 'severeWarningBackground', _a[MessageBarType.info] = 'infoBackground', _a);\nvar highContrastBackgroundColor = (_b = {}, _b[MessageBarType.error] = 'rgba(255, 0, 0, 0.3)', _b[MessageBarType.blocked] = 'rgba(255, 0, 0, 0.3)', _b[MessageBarType.success] = 'rgba(48, 241, 73, 0.3)', _b[MessageBarType.warning] = 'rgba(255, 254, 57, 0.3)', _b[MessageBarType.severeWarning] = 'rgba(255, 0, 0, 0.3)', _b[MessageBarType.info] = 'Window', _b);\nvar iconColor = (_c = {}, _c[MessageBarType.error] = 'errorIcon', _c[MessageBarType.blocked] = 'errorIcon', _c[MessageBarType.success] = 'successIcon', _c[MessageBarType.warning] = 'warningIcon', _c[MessageBarType.severeWarning] = 'severeWarningIcon', _c[MessageBarType.info] = 'infoIcon', _c);\nexport var getStyles = function getStyles(props) {\n  var _a, _b, _c, _d, _e;\n\n  var theme = props.theme,\n      className = props.className,\n      onDismiss = props.onDismiss,\n      truncated = props.truncated,\n      isMultiline = props.isMultiline,\n      expandSingleLine = props.expandSingleLine,\n      _f = props.messageBarType,\n      messageBarType = _f === void 0 ? MessageBarType.info : _f;\n  var semanticColors = theme.semanticColors,\n      fonts = theme.fonts;\n  var SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var dismissalAndExpandIconStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      MsHighContrastAdjust: 'none',\n      color: 'WindowText'\n    }, _a)\n  };\n  var dismissalAndExpandStyle = [getFocusStyle(theme, {\n    inset: 1,\n    highContrastStyle: {\n      outlineOffset: '-6px',\n      outline: '1px solid Highlight'\n    },\n    borderColor: 'transparent'\n  }), {\n    flexShrink: 0,\n    width: 32,\n    height: 32,\n    padding: '8px 12px',\n    selectors: {\n      '& .ms-Button-icon': dismissalAndExpandIconStyle,\n      ':hover': {\n        backgroundColor: 'transparent'\n      },\n      ':active': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }];\n  return {\n    root: [classNames.root, fonts.medium, messageBarType === MessageBarType.error && classNames.error, messageBarType === MessageBarType.blocked && classNames.blocked, messageBarType === MessageBarType.severeWarning && classNames.severeWarning, messageBarType === MessageBarType.success && classNames.success, messageBarType === MessageBarType.warning && classNames.warning, isMultiline ? classNames.multiline : classNames.singleline, !isMultiline && onDismiss && classNames.dismissalSingleLine, !isMultiline && truncated && classNames.expandingSingleLine, {\n      background: semanticColors[backgroundColor[messageBarType]],\n      color: semanticColors.messageText,\n      minHeight: 32,\n      width: '100%',\n      display: 'flex',\n      wordBreak: 'break-word',\n      selectors: (_b = {\n        '.ms-Link': {\n          color: semanticColors.messageLink,\n          selectors: {\n            ':hover': {\n              color: semanticColors.messageLinkHovered\n            }\n          }\n        }\n      }, _b[HighContrastSelector] = {\n        MsHighContrastAdjust: 'none',\n        background: highContrastBackgroundColor[messageBarType],\n        border: '1px solid WindowText',\n        color: 'WindowText'\n      }, _b)\n    }, isMultiline && {\n      flexDirection: 'column'\n    }, className],\n    content: [classNames.content, {\n      display: 'flex',\n      width: '100%',\n      lineHeight: 'normal'\n    }],\n    iconContainer: [classNames.iconContainer, {\n      fontSize: IconFontSizes.medium,\n      minWidth: 16,\n      minHeight: 16,\n      display: 'flex',\n      flexShrink: 0,\n      margin: '8px 0 8px 12px'\n    }],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        MsHighContrastAdjust: 'none',\n        color: 'WindowText'\n      }, _c)\n    },\n    text: [classNames.text, __assign(__assign({\n      minWidth: 0,\n      display: 'flex',\n      flexGrow: 1,\n      margin: 8\n    }, fonts.small), {\n      selectors: (_d = {}, _d[HighContrastSelector] = {\n        MsHighContrastAdjust: 'none'\n      }, _d)\n    }), !onDismiss && {\n      marginRight: 12\n    }],\n    innerText: [classNames.innerText, {\n      lineHeight: 16,\n      selectors: {\n        '& span a': {\n          paddingLeft: 4\n        }\n      }\n    }, truncated && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }, !isMultiline && {\n      // In high contrast this causes the top and bottom of links' focus outline to be clipped\n      // (not sure of a good way around that while still maintaining text clipping)\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    }, !isMultiline && !truncated && {\n      selectors: (_e = {}, _e[SmallScreenSelector] = {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap'\n      }, _e)\n    }, expandSingleLine && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [isMultiline ? classNames.actions : classNames.actionsSingleline, {\n      display: 'flex',\n      flexGrow: 0,\n      flexShrink: 0,\n      flexBasis: 'auto',\n      flexDirection: 'row-reverse',\n      alignItems: 'center',\n      margin: '0 12px 0 8px',\n      selectors: {\n        '& button:nth-child(n+2)': {\n          marginLeft: 8\n        }\n      }\n    }, isMultiline && {\n      marginBottom: 8\n    }, onDismiss && !isMultiline && {\n      marginRight: 0\n    }]\n  };\n};","map":{"version":3,"mappings":";;;AAAA,SAGEA,oBAHF,EAIEC,mBAJF,EAKEC,iBALF,EAMEC,mBANF,EAOEC,aAPF,EAQEC,aARF,QASO,eATP;AAUA,SAAmDC,cAAnD,QAAyE,oBAAzE;AAEA,IAAMC,gBAAgB,GAAG;EACvBC,IAAI,EAAE,eADiB;EAEvBC,KAAK,EAAE,sBAFgB;EAGvBC,OAAO,EAAE,wBAHc;EAIvBC,aAAa,EAAE,8BAJQ;EAKvBC,OAAO,EAAE,wBALc;EAMvBC,OAAO,EAAE,wBANc;EAOvBC,SAAS,EAAE,yBAPY;EAQvBC,UAAU,EAAE,0BARW;EASvBC,mBAAmB,EAAE,mCATE;EAUvBC,mBAAmB,EAAE,mCAVE;EAWvBC,OAAO,EAAE,uBAXc;EAYvBC,aAAa,EAAE,oBAZQ;EAavBC,IAAI,EAAE,oBAbiB;EAcvBC,SAAS,EAAE,yBAdY;EAevBC,iBAAiB,EAAE,iCAfI;EAgBvBC,gBAAgB,EAAE,gCAhBK;EAiBvBC,SAAS,EAAE,yBAjBY;EAkBvBC,MAAM,EAAE,sBAlBe;EAmBvBC,OAAO,EAAE,uBAnBc;EAoBvBC,iBAAiB,EAAE;AApBI,CAAzB;AAuBA,IAAMC,eAAe,aACnBC,GAACvB,cAAc,CAACG,KAAhB,IAAwB,iBADL,EAEnBoB,GAACvB,cAAc,CAACI,OAAhB,IAA0B,iBAFP,EAGnBmB,GAACvB,cAAc,CAACM,OAAhB,IAA0B,mBAHP,EAInBiB,GAACvB,cAAc,CAACO,OAAhB,IAA0B,mBAJP,EAKnBgB,GAACvB,cAAc,CAACK,aAAhB,IAAgC,yBALb,EAMnBkB,GAACvB,cAAc,CAACwB,IAAhB,IAAuB,gBANJ,KAArB;AASA,IAAMC,2BAA2B,aAC/BC,GAAC1B,cAAc,CAACG,KAAhB,IAAwB,sBADO,EAE/BuB,GAAC1B,cAAc,CAACI,OAAhB,IAA0B,sBAFK,EAG/BsB,GAAC1B,cAAc,CAACM,OAAhB,IAA0B,wBAHK,EAI/BoB,GAAC1B,cAAc,CAACO,OAAhB,IAA0B,yBAJK,EAK/BmB,GAAC1B,cAAc,CAACK,aAAhB,IAAgC,sBALD,EAM/BqB,GAAC1B,cAAc,CAACwB,IAAhB,IAAuB,QANQ,KAAjC;AASA,IAAMG,SAAS,aACbC,GAAC5B,cAAc,CAACG,KAAhB,IAAwB,WADX,EAEbyB,GAAC5B,cAAc,CAACI,OAAhB,IAA0B,WAFb,EAGbwB,GAAC5B,cAAc,CAACM,OAAhB,IAA0B,aAHb,EAIbsB,GAAC5B,cAAc,CAACO,OAAhB,IAA0B,aAJb,EAKbqB,GAAC5B,cAAc,CAACK,aAAhB,IAAgC,mBALnB,EAMbuB,GAAC5B,cAAc,CAACwB,IAAhB,IAAuB,UANV,KAAf;AASA,OAAO,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAA6B;;;EAElD;EAAA,IACAC,2BADA;EAAA,IAEAC,2BAFA;EAAA,IAGAC,2BAHA;EAAA,IAIAC,+BAJA;EAAA,IAKAjB,yCALA;EAAA,IAMAkB,yBANA;EAAA,IAMAC,yDANA;EAQM;EAAA,IAAgBC,mBAAhB;EAER,IAAMC,mBAAmB,GAAG1C,iBAAiB,CAAC,CAAD,EAAID,mBAAJ,CAA7C;EAEA,IAAM4C,UAAU,GAAG1C,mBAAmB,CAACI,gBAAD,EAAmBuC,KAAnB,CAAtC;EAEA,IAAMC,2BAA2B,GAAW;IAC1CC,QAAQ,EAAE3C,aAAa,CAAC4C,MADkB;IAE1CC,MAAM,EAAE,EAFkC;IAG1CC,UAAU,EAAE,MAH8B;IAI1CC,KAAK,EAAEC,cAAc,CAACC,WAJoB;IAK1CC,SAAS,YACP1B,GAAC7B,oBAAD,IAAwB;MACtBwD,oBAAoB,EAAE,MADA;MAEtBJ,KAAK,EAAE;IAFe,CADjB;EALiC,CAA5C;EAaA,IAAMK,uBAAuB,GAAW,CACtCrD,aAAa,CAAC0C,KAAD,EAAQ;IACnBY,KAAK,EAAE,CADY;IAEnBC,iBAAiB,EAAE;MACjBC,aAAa,EAAE,MADE;MAEjBC,OAAO,EAAE;IAFQ,CAFA;IAMnBC,WAAW,EAAE;EANM,CAAR,CADyB,EAStC;IACEC,UAAU,EAAE,CADd;IAEEC,KAAK,EAAE,EAFT;IAGEd,MAAM,EAAE,EAHV;IAIEe,OAAO,EAAE,UAJX;IAKEV,SAAS,EAAE;MACT,qBAAqBR,2BADZ;MAET,UAAU;QACRnB,eAAe,EAAE;MADT,CAFD;MAKT,WAAW;QACTA,eAAe,EAAE;MADR;IALF;EALb,CATsC,CAAxC;EA0BA,OAAO;IACLpB,IAAI,EAAE,CACJqC,UAAU,CAACrC,IADP,EAEJmC,KAAK,CAACuB,MAFF,EAGJxB,cAAc,KAAKpC,cAAc,CAACG,KAAlC,IAA2CoC,UAAU,CAACpC,KAHlD,EAIJiC,cAAc,KAAKpC,cAAc,CAACI,OAAlC,IAA6CmC,UAAU,CAACnC,OAJpD,EAKJgC,cAAc,KAAKpC,cAAc,CAACK,aAAlC,IAAmDkC,UAAU,CAAClC,aAL1D,EAMJ+B,cAAc,KAAKpC,cAAc,CAACM,OAAlC,IAA6CiC,UAAU,CAACjC,OANpD,EAOJ8B,cAAc,KAAKpC,cAAc,CAACO,OAAlC,IAA6CgC,UAAU,CAAChC,OAPpD,EAQJ2B,WAAW,GAAGK,UAAU,CAAC/B,SAAd,GAA0B+B,UAAU,CAAC9B,UAR5C,EASJ,CAACyB,WAAD,IAAgBF,SAAhB,IAA6BO,UAAU,CAAC7B,mBATpC,EAUJ,CAACwB,WAAD,IAAgBD,SAAhB,IAA6BM,UAAU,CAAC5B,mBAVpC,EAWJ;MACEkD,UAAU,EAAEd,cAAc,CAACzB,eAAe,CAACc,cAAD,CAAhB,CAD5B;MAEEU,KAAK,EAAEC,cAAc,CAACC,WAFxB;MAGEc,SAAS,EAAE,EAHb;MAIEJ,KAAK,EAAE,MAJT;MAKEK,OAAO,EAAE,MALX;MAMEC,SAAS,EAAE,YANb;MAOEf,SAAS;QACP,YAAY;UACVH,KAAK,EAAEC,cAAc,CAACkB,WADZ;UAEVhB,SAAS,EAAE;YACT,UAAU;cACRH,KAAK,EAAEC,cAAc,CAACmB;YADd;UADD;QAFD;MADL,GASPxC,GAAChC,oBAAD,IAAwB;QACtBwD,oBAAoB,EAAE,MADA;QAEtBW,UAAU,EAAEpC,2BAA2B,CAACW,cAAD,CAFjB;QAGtB+B,MAAM,EAAE,sBAHc;QAItBrB,KAAK,EAAE;MAJe,CATjB;IAPX,CAXI,EAmCJZ,WAAW,IAAI;MACbkC,aAAa,EAAE;IADF,CAnCX,EAsCJrC,SAtCI,CADD;IAyCLnB,OAAO,EAAE,CACP2B,UAAU,CAAC3B,OADJ,EAEP;MACEmD,OAAO,EAAE,MADX;MAEEL,KAAK,EAAE,MAFT;MAGEb,UAAU,EAAE;IAHd,CAFO,CAzCJ;IAiDLhC,aAAa,EAAE,CACb0B,UAAU,CAAC1B,aADE,EAEb;MACE6B,QAAQ,EAAE3C,aAAa,CAAC6D,MAD1B;MAEES,QAAQ,EAAE,EAFZ;MAGEP,SAAS,EAAE,EAHb;MAIEC,OAAO,EAAE,MAJX;MAKEN,UAAU,EAAE,CALd;MAMEa,MAAM,EAAE;IANV,CAFa,CAjDV;IA4DLC,IAAI,EAAE;MACJzB,KAAK,EAAEC,cAAc,CAACpB,SAAS,CAACS,cAAD,CAAV,CADjB;MAEJa,SAAS,YACPrB,GAAClC,oBAAD,IAAwB;QACtBwD,oBAAoB,EAAE,MADA;QAEtBJ,KAAK,EAAE;MAFe,CADjB;IAFL,CA5DD;IAqELhC,IAAI,EAAE,CACJyB,UAAU,CAACzB,IADP;MAGFuD,QAAQ,EAAE;MACVN,OAAO,EAAE;MACTS,QAAQ,EAAE;MACVF,MAAM,EAAE;OACLjC,KAAK,CAACoC,QAAK;MACdxB,SAAS,YACPyB,GAAChF,oBAAD,IAAwB;QACtBwD,oBAAoB,EAAE;MADA,CADjB;IADK,EAPZ,EAcJ,CAAClB,SAAD,IAAc;MACZ2C,WAAW,EAAE;IADD,CAdV,CArED;IAuFL5D,SAAS,EAAE,CACTwB,UAAU,CAACxB,SADF,EAET;MACE8B,UAAU,EAAE,EADd;MAEEI,SAAS,EAAE;QACT,YAAY;UACV2B,WAAW,EAAE;QADH;MADH;IAFb,CAFS,EAUT3C,SAAS,IAAI;MACX4C,QAAQ,EAAE,SADC;MAEXC,UAAU,EAAE;IAFD,CAVJ,EAcT,CAAC5C,WAAD,IAAgB;MACd;MACA;MACA2C,QAAQ,EAAE,QAHI;MAIdE,YAAY,EAAE,UAJA;MAKdD,UAAU,EAAE;IALE,CAdP,EAqBT,CAAC5C,WAAD,IACE,CAACD,SADH,IACgB;MACZgB,SAAS,YACP+B,GAAC1C,mBAAD,IAAuB;QACrBuC,QAAQ,EAAE,SADW;QAErBC,UAAU,EAAE;MAFS,CADhB;IADG,CAtBP,EA8BT7D,gBAAgB,IAAI;MAClB4D,QAAQ,EAAE,SADQ;MAElBC,UAAU,EAAE;IAFM,CA9BX,CAvFN;IA0HL9D,iBAAiB,EAAEuB,UAAU,CAACvB,iBA1HzB;IA2HLC,gBAAgB,EAAEsB,UAAU,CAACtB,gBA3HxB;IA4HLC,SAAS,EAAE,CAACqB,UAAU,CAACrB,SAAZ,EAAuBiC,uBAAvB,CA5HN;IA6HLhC,MAAM,EAAE,CAACoB,UAAU,CAACpB,MAAZ,EAAoBgC,uBAApB,CA7HH;IA8HL/B,OAAO,EAAE,CACPc,WAAW,GAAGK,UAAU,CAACnB,OAAd,GAAwBmB,UAAU,CAAClB,iBADvC,EAEP;MACE0C,OAAO,EAAE,MADX;MAEES,QAAQ,EAAE,CAFZ;MAGEf,UAAU,EAAE,CAHd;MAIEwB,SAAS,EAAE,MAJb;MAKEb,aAAa,EAAE,aALjB;MAMEc,UAAU,EAAE,QANd;MAOEZ,MAAM,EAAE,cAPV;MAQErB,SAAS,EAAE;QACT,2BAA2B;UACzBkC,UAAU,EAAE;QADa;MADlB;IARb,CAFO,EAgBPjD,WAAW,IAAI;MACbkD,YAAY,EAAE;IADD,CAhBR,EAmBPpD,SAAS,IACP,CAACE,WADH,IACkB;MACdyC,WAAW,EAAE;IADC,CApBX;EA9HJ,CAAP;AAuJD,CA9MM","names":["HighContrastSelector","ScreenWidthMaxSmall","getScreenSelector","getGlobalClassNames","getFocusStyle","IconFontSizes","MessageBarType","GlobalClassNames","root","error","blocked","severeWarning","success","warning","multiline","singleline","dismissalSingleLine","expandingSingleLine","content","iconContainer","text","innerText","dismissSingleLine","expandSingleLine","dismissal","expand","actions","actionsSingleline","backgroundColor","_a","info","highContrastBackgroundColor","_b","iconColor","_c","getStyles","props","className","onDismiss","truncated","isMultiline","_f","messageBarType","fonts","SmallScreenSelector","classNames","theme","dismissalAndExpandIconStyle","fontSize","xSmall","height","lineHeight","color","semanticColors","messageText","selectors","MsHighContrastAdjust","dismissalAndExpandStyle","inset","highContrastStyle","outlineOffset","outline","borderColor","flexShrink","width","padding","medium","background","minHeight","display","wordBreak","messageLink","messageLinkHovered","border","flexDirection","minWidth","margin","icon","flexGrow","small","_d","marginRight","paddingLeft","overflow","whiteSpace","textOverflow","_e","flexBasis","alignItems","marginLeft","marginBottom"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\MessageBar\\MessageBar.styles.ts"],"sourcesContent":["import {\n  IStyle,\n  ISemanticColors,\n  HighContrastSelector,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n} from '../../Styling';\nimport { IMessageBarStyleProps, IMessageBarStyles, MessageBarType } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst highContrastBackgroundColor: { [key: string]: string } = {\n  [MessageBarType.error]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.blocked]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.success]: 'rgba(48, 241, 73, 0.3)',\n  [MessageBarType.warning]: 'rgba(255, 254, 57, 0.3)',\n  [MessageBarType.severeWarning]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.info]: 'Window',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        MsHighContrastAdjust: 'none',\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            MsHighContrastAdjust: 'none',\n            background: highContrastBackgroundColor[messageBarType],\n            border: '1px solid WindowText',\n            color: 'WindowText',\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          MsHighContrastAdjust: 'none',\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        selectors: {\n          [HighContrastSelector]: {\n            MsHighContrastAdjust: 'none',\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}