{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { KTP_SEPARATOR, KTP_PREFIX, DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, KTP_LAYER_ID } from './KeytipConstants';\nimport { addElementAtIndex } from '../../Utilities';\n/**\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\n * keySequences should not include the initial keytip 'start' sequence.\n *\n * @param keySequences - Full path of IKeySequences for one keytip.\n * @returns String to use for the keytip ID.\n */\n\nexport function sequencesToID(keySequences) {\n  return keySequences.reduce(function (prevValue, keySequence) {\n    return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);\n  }, KTP_PREFIX);\n}\n/**\n * Merges an overflow sequence with a key sequence.\n *\n * @param keySequences - Full sequence for one keytip.\n * @param overflowKeySequences - Full overflow keytip sequence.\n * @returns Sequence that will be used by the keytip when in the overflow.\n */\n\nexport function mergeOverflows(keySequences, overflowKeySequences) {\n  var overflowSequenceLen = overflowKeySequences.length;\n\n  var overflowSequence = __spreadArrays(overflowKeySequences).pop();\n\n  var newKeySequences = __spreadArrays(keySequences);\n\n  return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence);\n}\n/**\n * Constructs the data-ktp-target attribute selector from a full key sequence.\n *\n * @param keySequences - Full string[] for a Keytip.\n * @returns String selector to use to query for the keytip target.\n */\n\nexport function ktpTargetFromSequences(keySequences) {\n  return '[' + DATAKTP_TARGET + '=\"' + sequencesToID(keySequences) + '\"]';\n}\n/**\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\n *\n * @param keytipId - ID of the Keytip.\n * @returns String selector to use to query for the keytip execute target.\n */\n\nexport function ktpTargetFromId(keytipId) {\n  return '[' + DATAKTP_EXECUTE_TARGET + '=\"' + keytipId + '\"]';\n}\n/**\n * Gets the aria-describedby value to put on the component with this keytip.\n *\n * @param keySequences - KeySequences of the keytip.\n * @returns The aria-describedby value to set on the component with this keytip.\n */\n\nexport function getAriaDescribedBy(keySequences) {\n  var describedby = ' ' + KTP_LAYER_ID;\n\n  if (!keySequences.length) {\n    // Return just the layer ID\n    return describedby;\n  }\n\n  return describedby + ' ' + sequencesToID(keySequences);\n}","map":{"version":3,"mappings":";AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,cAApC,EAAoDC,sBAApD,EAA4EC,YAA5E,QAAgG,mBAAhG;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AAEA;;;;;;;;AAOA,OAAM,SAAUC,aAAV,CAAwBC,YAAxB,EAA8C;AAClD,SAAOA,YAAY,CAACC,MAAb,CAAoB,UAACC,SAAD,EAAoBC,WAApB,EAAuC;AAChE,WAAOD,SAAS,GAAGT,aAAZ,GAA4BU,WAAW,CAACC,KAAZ,CAAkB,EAAlB,EAAsBC,IAAtB,CAA2BZ,aAA3B,CAAnC;AACD,GAFM,EAEJC,UAFI,CAAP;AAGD;AAED;;;;;;;;AAOA,OAAM,SAAUY,cAAV,CAAyBN,YAAzB,EAAiDO,oBAAjD,EAA+E;AACnF,MAAMC,mBAAmB,GAAGD,oBAAoB,CAACE,MAAjD;;AACA,MAAMC,gBAAgB,GAAGC,eAAIJ,oBAAJ,EAA0BK,GAA1B,EAAzB;;AACA,MAAMC,eAAe,kBAAOb,YAAP,CAArB;;AACA,SAAOF,iBAAiB,CAACe,eAAD,EAAkBL,mBAAmB,GAAG,CAAxC,EAA2CE,gBAA3C,CAAxB;AACD;AAED;;;;;;;AAMA,OAAM,SAAUI,sBAAV,CAAiCd,YAAjC,EAAuD;AAC3D,SAAO,MAAML,cAAN,GAAuB,IAAvB,GAA8BI,aAAa,CAACC,YAAD,CAA3C,GAA4D,IAAnE;AACD;AAED;;;;;;;AAMA,OAAM,SAAUe,eAAV,CAA0BC,QAA1B,EAA0C;AAC9C,SAAO,MAAMpB,sBAAN,GAA+B,IAA/B,GAAsCoB,QAAtC,GAAiD,IAAxD;AACD;AAED;;;;;;;AAMA,OAAM,SAAUC,kBAAV,CAA6BjB,YAA7B,EAAmD;AACvD,MAAMkB,WAAW,GAAG,MAAMrB,YAA1B;;AACA,MAAI,CAACG,YAAY,CAACS,MAAlB,EAA0B;AACxB;AACA,WAAOS,WAAP;AACD;;AAED,SAAOA,WAAW,GAAG,GAAd,GAAoBnB,aAAa,CAACC,YAAD,CAAxC;AACD","names":["KTP_SEPARATOR","KTP_PREFIX","DATAKTP_TARGET","DATAKTP_EXECUTE_TARGET","KTP_LAYER_ID","addElementAtIndex","sequencesToID","keySequences","reduce","prevValue","keySequence","split","join","mergeOverflows","overflowKeySequences","overflowSequenceLen","length","overflowSequence","__spreadArrays","pop","newKeySequences","ktpTargetFromSequences","ktpTargetFromId","keytipId","getAriaDescribedBy","describedby"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\utilities\\src\\utilities\\keytips\\KeytipUtils.ts"],"sourcesContent":["import { KTP_SEPARATOR, KTP_PREFIX, DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, KTP_LAYER_ID } from './KeytipConstants';\nimport { addElementAtIndex } from '../../Utilities';\n\n/**\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\n * keySequences should not include the initial keytip 'start' sequence.\n *\n * @param keySequences - Full path of IKeySequences for one keytip.\n * @returns String to use for the keytip ID.\n */\nexport function sequencesToID(keySequences: string[]): string {\n  return keySequences.reduce((prevValue: string, keySequence: string): string => {\n    return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);\n  }, KTP_PREFIX);\n}\n\n/**\n * Merges an overflow sequence with a key sequence.\n *\n * @param keySequences - Full sequence for one keytip.\n * @param overflowKeySequences - Full overflow keytip sequence.\n * @returns Sequence that will be used by the keytip when in the overflow.\n */\nexport function mergeOverflows(keySequences: string[], overflowKeySequences: string[]): string[] {\n  const overflowSequenceLen = overflowKeySequences.length;\n  const overflowSequence = [...overflowKeySequences].pop();\n  const newKeySequences = [...keySequences];\n  return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence!);\n}\n\n/**\n * Constructs the data-ktp-target attribute selector from a full key sequence.\n *\n * @param keySequences - Full string[] for a Keytip.\n * @returns String selector to use to query for the keytip target.\n */\nexport function ktpTargetFromSequences(keySequences: string[]): string {\n  return '[' + DATAKTP_TARGET + '=\"' + sequencesToID(keySequences) + '\"]';\n}\n\n/**\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\n *\n * @param keytipId - ID of the Keytip.\n * @returns String selector to use to query for the keytip execute target.\n */\nexport function ktpTargetFromId(keytipId: string): string {\n  return '[' + DATAKTP_EXECUTE_TARGET + '=\"' + keytipId + '\"]';\n}\n\n/**\n * Gets the aria-describedby value to put on the component with this keytip.\n *\n * @param keySequences - KeySequences of the keytip.\n * @returns The aria-describedby value to set on the component with this keytip.\n */\nexport function getAriaDescribedBy(keySequences: string[]): string {\n  const describedby = ' ' + KTP_LAYER_ID;\n  if (!keySequences.length) {\n    // Return just the layer ID\n    return describedby;\n  }\n\n  return describedby + ' ' + sequencesToID(keySequences);\n}\n"]},"metadata":{},"sourceType":"module"}