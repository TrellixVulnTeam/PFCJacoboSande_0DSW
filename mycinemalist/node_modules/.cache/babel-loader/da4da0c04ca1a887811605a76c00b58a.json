{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, warnDeprecations, warn } from '../../Utilities';\nimport { TextField } from '../../TextField';\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\nimport { ColorSlider } from './ColorSlider/ColorSlider';\nimport { MAX_COLOR_ALPHA, MAX_COLOR_RGB, MAX_HEX_LENGTH, MAX_RGBA_LENGTH, MIN_HEX_LENGTH, MIN_RGBA_LENGTH, HEX_REGEX, RGBA_REGEX } from '../../utilities/color/consts';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { getColorFromRGBA } from '../../utilities/color/getColorFromRGBA';\nimport { clamp } from '../../utilities/color/clamp';\nimport { updateA } from '../../utilities/color/updateA';\nimport { updateT } from '../../utilities/color/updateT';\nimport { updateH } from '../../utilities/color/updateH';\nimport { correctRGB } from '../../utilities/color/correctRGB';\nimport { correctHex } from '../../utilities/color/correctHex';\nimport { ColorRectangleBase } from './ColorRectangle/ColorRectangle.base';\nvar getClassNames = classNamesFunction();\nvar allColorComponents = ['hex', 'r', 'g', 'b', 'a', 't'];\n/**\n * {@docCategory ColorPicker}\n */\n\nvar ColorPickerBase =\n/** @class */\nfunction (_super) {\n  __extends(ColorPickerBase, _super);\n\n  function ColorPickerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onSVChanged = function (ev, color) {\n      _this._updateColor(ev, color);\n    };\n\n    _this._onHChanged = function (ev, h) {\n      _this._updateColor(ev, updateH(_this.state.color, h));\n    };\n    /** Callback for when the alpha/transparency slider changes */\n\n\n    _this._onATChanged = function (ev, value) {\n      var updater = _this.props.alphaType === 'transparency' ? updateT : updateA;\n\n      _this._updateColor(ev, updater(_this.state.color, Math.round(value)));\n    };\n\n    _this._onBlur = function (event) {\n      var _a;\n\n      var _b = _this.state,\n          color = _b.color,\n          editingColor = _b.editingColor;\n\n      if (!editingColor) {\n        return;\n      } // If there was an intermediate incorrect value (such as too large or empty), correct it.\n\n\n      var value = editingColor.value,\n          component = editingColor.component;\n      var isHex = component === 'hex';\n      var isAlpha = component === 'a';\n      var isTransparency = component === 't';\n      var minLength = isHex ? MIN_HEX_LENGTH : MIN_RGBA_LENGTH;\n\n      if (value.length >= minLength && (isHex || !isNaN(Number(value)))) {\n        // Real value. Clamp to appropriate length (hex) or range (rgba).\n        var newColor = void 0;\n\n        if (isHex) {\n          newColor = getColorFromString('#' + correctHex(value));\n        } else if (isAlpha || isTransparency) {\n          var updater = isAlpha ? updateA : updateT;\n          newColor = updater(color, clamp(Number(value), MAX_COLOR_ALPHA));\n        } else {\n          newColor = getColorFromRGBA(correctRGB(__assign(__assign({}, color), (_a = {}, _a[component] = Number(value), _a))));\n        } // Update state and call onChange\n\n\n        _this._updateColor(event, newColor);\n      } else {\n        // Intermediate value was an empty string or too short (hex only).\n        // Just clear the intermediate state and revert to the previous value.\n        _this.setState({\n          editingColor: undefined\n        });\n      }\n    };\n\n    initializeComponentRef(_this);\n    var strings = props.strings; // always defined since it's in defaultProps\n\n    warnDeprecations('ColorPicker', props, {\n      hexLabel: 'strings.hex',\n      redLabel: 'strings.red',\n      greenLabel: 'strings.green',\n      blueLabel: 'strings.blue',\n      alphaLabel: 'strings.alpha',\n      alphaSliderHidden: 'alphaType'\n    }); // eslint-disable-next-line deprecation/deprecation\n\n    if (strings.hue) {\n      // warnDeprecations can't handle nested deprecated props\n      warn(\"ColorPicker property 'strings.hue' was used but has been deprecated. Use 'strings.hueAriaLabel' instead.\");\n    }\n\n    _this.state = {\n      color: _getColorFromProps(props) || getColorFromString('#ffffff')\n    };\n    _this._textChangeHandlers = {};\n\n    for (var _i = 0, allColorComponents_1 = allColorComponents; _i < allColorComponents_1.length; _i++) {\n      var component = allColorComponents_1[_i];\n      _this._textChangeHandlers[component] = _this._onTextChange.bind(_this, component);\n    }\n\n    var defaultStrings = ColorPickerBase.defaultProps.strings;\n    _this._textLabels = {\n      /* eslint-disable deprecation/deprecation */\n      r: props.redLabel || strings.red || defaultStrings.red,\n      g: props.greenLabel || strings.green || defaultStrings.green,\n      b: props.blueLabel || strings.blue || defaultStrings.blue,\n      a: props.alphaLabel || strings.alpha || defaultStrings.alpha,\n      hex: props.hexLabel || strings.hex || defaultStrings.hex,\n      t: strings.transparency || defaultStrings.transparency\n    };\n    _this._strings = __assign(__assign(__assign({}, defaultStrings), {\n      // these aria labels default to the visible labels\n      alphaAriaLabel: _this._textLabels.a,\n      transparencyAriaLabel: _this._textLabels.t\n    }), strings);\n    return _this;\n  }\n\n  Object.defineProperty(ColorPickerBase.prototype, \"color\", {\n    get: function get() {\n      return this.state.color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ColorPickerBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // if props changed (as opposed to a state update), update the color\n    if (prevProps !== this.props) {\n      var color = _getColorFromProps(this.props);\n\n      if (color) {\n        this._updateColor(undefined, color);\n      }\n    }\n  };\n\n  ColorPickerBase.prototype.render = function () {\n    var _this = this;\n\n    var props = this.props;\n    var strings = this._strings;\n    var textLabels = this._textLabels;\n    var theme = props.theme,\n        className = props.className,\n        styles = props.styles,\n        alphaType = props.alphaType,\n        // eslint-disable-next-line deprecation/deprecation\n    _a = props.alphaSliderHidden,\n        // eslint-disable-next-line deprecation/deprecation\n    alphaSliderHidden = _a === void 0 ? alphaType === 'none' : _a;\n    var color = this.state.color;\n    var useTransparency = alphaType === 'transparency';\n    var colorComponents = ['hex', 'r', 'g', 'b', useTransparency ? 't' : 'a'];\n    var atValue = useTransparency ? color.t : color.a;\n    var atLabel = useTransparency ? textLabels.t : textLabels.a;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      alphaType: alphaType\n    });\n    var selectedColorAriaParts = [textLabels.r, color.r, textLabels.g, color.g, textLabels.b, color.b];\n\n    if (!alphaSliderHidden && typeof atValue === 'number') {\n      selectedColorAriaParts.push(atLabel, atValue + \"%\");\n    }\n\n    var ariaLabel = strings.rootAriaLabelFormat.replace('{0}', selectedColorAriaParts.join(' '));\n    return React.createElement(\"div\", {\n      className: classNames.root,\n      role: \"group\",\n      \"aria-label\": ariaLabel\n    }, React.createElement(\"div\", {\n      className: classNames.panel\n    }, React.createElement(ColorRectangle, {\n      color: color,\n      onChange: this._onSVChanged,\n      ariaLabel: strings.svAriaLabel,\n      ariaDescription: strings.svAriaDescription,\n      ariaValueFormat: strings.svAriaValueFormat,\n      className: classNames.colorRectangle\n    }), React.createElement(\"div\", {\n      className: classNames.flexContainer\n    }, React.createElement(\"div\", {\n      className: classNames.flexSlider\n    }, React.createElement(ColorSlider, {\n      className: \"is-hue\",\n      type: \"hue\",\n      // eslint-disable-next-line deprecation/deprecation\n      ariaLabel: strings.hue || strings.hueAriaLabel,\n      value: color.h,\n      onChange: this._onHChanged\n    }), !alphaSliderHidden && React.createElement(ColorSlider, {\n      className: \"is-alpha\",\n      type: alphaType,\n      ariaLabel: useTransparency ? strings.transparencyAriaLabel : strings.alphaAriaLabel,\n      overlayColor: color.hex,\n      value: atValue,\n      onChange: this._onATChanged\n    })), props.showPreview && React.createElement(\"div\", {\n      className: classNames.flexPreviewBox\n    }, React.createElement(\"div\", {\n      className: classNames.colorSquare + ' is-preview',\n      style: {\n        backgroundColor: color.str\n      }\n    }))), React.createElement(\"table\", {\n      className: classNames.table,\n      role: \"group\",\n      cellPadding: \"0\",\n      cellSpacing: \"0\"\n    }, React.createElement(\"thead\", null, React.createElement(\"tr\", {\n      className: classNames.tableHeader\n    }, React.createElement(\"td\", {\n      className: classNames.tableHexCell\n    }, textLabels.hex), React.createElement(\"td\", null, textLabels.r), React.createElement(\"td\", null, textLabels.g), React.createElement(\"td\", null, textLabels.b), !alphaSliderHidden && React.createElement(\"td\", {\n      className: classNames.tableAlphaCell\n    }, atLabel))), React.createElement(\"tbody\", null, React.createElement(\"tr\", null, colorComponents.map(function (comp) {\n      if ((comp === 'a' || comp === 't') && alphaSliderHidden) {\n        return null;\n      }\n\n      return React.createElement(\"td\", {\n        key: comp\n      }, React.createElement(TextField, {\n        className: classNames.input,\n        onChange: _this._textChangeHandlers[comp],\n        onBlur: _this._onBlur,\n        value: _this._getDisplayValue(comp),\n        spellCheck: false,\n        ariaLabel: textLabels[comp],\n        \"aria-live\": comp !== 'hex' ? 'assertive' : undefined,\n        autoComplete: \"off\"\n      }));\n    }))))));\n  };\n\n  ColorPickerBase.prototype._getDisplayValue = function (component) {\n    var _a = this.state,\n        color = _a.color,\n        editingColor = _a.editingColor;\n\n    if (editingColor && editingColor.component === component) {\n      return editingColor.value;\n    }\n\n    if (component === 'hex') {\n      return color[component] || '';\n    } else if (typeof color[component] === 'number' && !isNaN(color[component])) {\n      return String(color[component]);\n    }\n\n    return '';\n  };\n\n  ColorPickerBase.prototype._onTextChange = function (component, event, newValue) {\n    var _a;\n\n    var color = this.state.color;\n    var isHex = component === 'hex';\n    var isAlpha = component === 'a';\n    var isTransparency = component === 't';\n    newValue = (newValue || '').substr(0, isHex ? MAX_HEX_LENGTH : MAX_RGBA_LENGTH); // Ignore what the user typed if it contains invalid characters\n\n    var validCharsRegex = isHex ? HEX_REGEX : RGBA_REGEX;\n\n    if (!validCharsRegex.test(newValue)) {\n      return;\n    } // Determine if the entry is valid (different methods for hex, alpha, and RGB)\n\n\n    var isValid;\n\n    if (newValue === '') {\n      // Empty string is obviously not valid\n      isValid = false;\n    } else if (isHex) {\n      // Technically hex values of length 3 are also valid, but committing the value here would\n      // cause it to be automatically converted to a value of length 6, which may not be what the\n      // user wanted if they're not finished typing. (Values of length 3 will be committed on blur.)\n      isValid = newValue.length === MAX_HEX_LENGTH;\n    } else if (isAlpha || isTransparency) {\n      isValid = Number(newValue) <= MAX_COLOR_ALPHA;\n    } else {\n      isValid = Number(newValue) <= MAX_COLOR_RGB;\n    }\n\n    if (!isValid) {\n      // If the new value is an empty string or other invalid value, save that to display.\n      // (if the user still hasn't entered anything on blur, the last value is restored)\n      this.setState({\n        editingColor: {\n          component: component,\n          value: newValue\n        }\n      });\n    } else if (String(color[component]) === newValue) {\n      // If the new value is the same as the current value, mostly ignore it.\n      // Exception is that if the user was previously editing the value (but hadn't yet entered\n      // a new valid value), we should clear the intermediate value.\n      if (this.state.editingColor) {\n        this.setState({\n          editingColor: undefined\n        });\n      }\n    } else {\n      // Should be a valid color. Update the value.\n      var newColor = isHex ? getColorFromString('#' + newValue) : isTransparency ? updateT(color, Number(newValue)) : getColorFromRGBA(__assign(__assign({}, color), (_a = {}, _a[component] = Number(newValue), _a)));\n\n      this._updateColor(event, newColor);\n    }\n  };\n  /**\n   * Update the displayed color and call change handlers if appropriate.\n   * @param ev - Event if call was triggered by an event (undefined if triggered by props change)\n   * @param newColor - Updated color\n   */\n\n\n  ColorPickerBase.prototype._updateColor = function (ev, newColor) {\n    if (!newColor) {\n      return;\n    }\n\n    var _a = this.state,\n        color = _a.color,\n        editingColor = _a.editingColor; // For black or white, the hue can change without changing the string.\n\n    var isDifferentColor = newColor.h !== color.h || newColor.str !== color.str;\n\n    if (isDifferentColor || editingColor) {\n      // If ev is undefined, it's an update from props (which should be unconditionally respected\n      // and not call onChange).\n      if (ev && this.props.onChange) {\n        this.props.onChange(ev, newColor);\n\n        if (ev.defaultPrevented) {\n          return;\n        }\n      }\n\n      this.setState({\n        color: newColor,\n        editingColor: undefined\n      });\n    }\n  };\n\n  ColorPickerBase.defaultProps = {\n    alphaType: 'alpha',\n    strings: {\n      rootAriaLabelFormat: 'Color picker, {0} selected.',\n      hex: 'Hex',\n      red: 'Red',\n      green: 'Green',\n      blue: 'Blue',\n      alpha: 'Alpha',\n      transparency: 'Transparency',\n      hueAriaLabel: 'Hue',\n      svAriaLabel: ColorRectangleBase.defaultProps.ariaLabel,\n      svAriaValueFormat: ColorRectangleBase.defaultProps.ariaValueFormat,\n      svAriaDescription: ColorRectangleBase.defaultProps.ariaDescription\n    }\n  };\n  return ColorPickerBase;\n}(React.Component);\n\nexport { ColorPickerBase };\n\nfunction _getColorFromProps(props) {\n  var color = props.color;\n  return typeof color === 'string' ? getColorFromString(color) : color;\n}","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","initializeComponentRef","warnDeprecations","warn","TextField","ColorRectangle","ColorSlider","MAX_COLOR_ALPHA","MAX_COLOR_RGB","MAX_HEX_LENGTH","MAX_RGBA_LENGTH","MIN_HEX_LENGTH","MIN_RGBA_LENGTH","HEX_REGEX","RGBA_REGEX","getColorFromString","getColorFromRGBA","clamp","updateA","updateT","updateH","correctRGB","correctHex","ColorRectangleBase","getClassNames","allColorComponents","__extends","props","_super","_this","ev","color","_updateColor","h","state","value","updater","alphaType","Math","round","event","editingColor","component","isHex","isAlpha","isTransparency","minLength","length","isNaN","Number","newColor","__assign","_a","setState","undefined","strings","hexLabel","redLabel","greenLabel","blueLabel","alphaLabel","alphaSliderHidden","hue","_getColorFromProps","_textChangeHandlers","_i","_onTextChange","bind","defaultStrings","ColorPickerBase","defaultProps","_textLabels","r","red","g","green","b","blue","a","alpha","hex","t","transparency","_strings","alphaAriaLabel","transparencyAriaLabel","Object","prevProps","prevState","textLabels","className","styles","useTransparency","colorComponents","atValue","atLabel","classNames","theme","selectedColorAriaParts","push","ariaLabel","rootAriaLabelFormat","replace","join","root","role","panel","onChange","_onSVChanged","svAriaLabel","ariaDescription","svAriaDescription","ariaValueFormat","svAriaValueFormat","colorRectangle","flexContainer","flexSlider","type","hueAriaLabel","_onHChanged","overlayColor","_onATChanged","showPreview","flexPreviewBox","colorSquare","style","backgroundColor","str","table","cellPadding","cellSpacing","tableHeader","tableHexCell","tableAlphaCell","map","comp","key","input","onBlur","_onBlur","_getDisplayValue","spellCheck","autoComplete","String","newValue","substr","validCharsRegex","test","isValid","isDifferentColor","defaultPrevented","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\ColorPicker\\ColorPicker.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, warnDeprecations, warn } from '../../Utilities';\nimport {\n  IColorPickerProps,\n  IColorPickerStyleProps,\n  IColorPickerStyles,\n  IColorPicker,\n  IColorPickerStrings,\n} from './ColorPicker.types';\nimport { TextField } from '../../TextField';\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\nimport { ColorSlider } from './ColorSlider/ColorSlider';\nimport {\n  MAX_COLOR_ALPHA,\n  MAX_COLOR_RGB,\n  MAX_HEX_LENGTH,\n  MAX_RGBA_LENGTH,\n  MIN_HEX_LENGTH,\n  MIN_RGBA_LENGTH,\n  HEX_REGEX,\n  RGBA_REGEX,\n} from '../../utilities/color/consts';\n// These imports are separated to help with bundling\nimport { IColor, IRGB } from '../../utilities/color/interfaces';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { getColorFromRGBA } from '../../utilities/color/getColorFromRGBA';\nimport { clamp } from '../../utilities/color/clamp';\nimport { updateA } from '../../utilities/color/updateA';\nimport { updateT } from '../../utilities/color/updateT';\nimport { updateH } from '../../utilities/color/updateH';\nimport { correctRGB } from '../../utilities/color/correctRGB';\nimport { correctHex } from '../../utilities/color/correctHex';\nimport { ColorRectangleBase } from './ColorRectangle/ColorRectangle.base';\n\ntype ColorComponent = keyof Pick<IColor, 'r' | 'g' | 'b' | 'a' | 't' | 'hex'>;\n\nexport interface IColorPickerState {\n  /** Most recently selected color */\n  color: IColor;\n  /** Color component currently being edited via a text field (if intermediate value is invalid) */\n  editingColor?: {\n    /** Which color component is being edited */\n    component: ColorComponent;\n    /** Currently entered value, which is not valid */\n    value: string;\n  };\n}\n\nconst getClassNames = classNamesFunction<IColorPickerStyleProps, IColorPickerStyles>();\n\nconst allColorComponents: ColorComponent[] = ['hex', 'r', 'g', 'b', 'a', 't'];\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorPickerBase extends React.Component<IColorPickerProps, IColorPickerState> implements IColorPicker {\n  public static defaultProps: Partial<IColorPickerProps> = {\n    alphaType: 'alpha',\n    strings: {\n      rootAriaLabelFormat: 'Color picker, {0} selected.',\n      hex: 'Hex',\n      red: 'Red',\n      green: 'Green',\n      blue: 'Blue',\n      alpha: 'Alpha',\n      transparency: 'Transparency',\n      hueAriaLabel: 'Hue',\n      svAriaLabel: ColorRectangleBase.defaultProps.ariaLabel!,\n      svAriaValueFormat: ColorRectangleBase.defaultProps.ariaValueFormat!,\n      svAriaDescription: ColorRectangleBase.defaultProps.ariaDescription!,\n    },\n  };\n\n  private _textChangeHandlers: {\n    [K in ColorComponent]: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void;\n  };\n  /**\n   * Strings displayed in the UI as text field labels (these are in a separate object for convenient\n   * indexing by short color component name).\n   */\n  private _textLabels: { [K in ColorComponent]: string };\n\n  /** Strings besides red/green/blue/alpha/hex, with defaults for all values except the deprecated `hue` */\n  private _strings: Required<Omit<IColorPickerStrings, ColorComponent | 'hue'>> & Pick<IColorPickerStrings, 'hue'>;\n\n  constructor(props: IColorPickerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    const strings = props.strings!; // always defined since it's in defaultProps\n\n    warnDeprecations('ColorPicker', props, {\n      hexLabel: 'strings.hex',\n      redLabel: 'strings.red',\n      greenLabel: 'strings.green',\n      blueLabel: 'strings.blue',\n      alphaLabel: 'strings.alpha',\n      alphaSliderHidden: 'alphaType',\n    });\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (strings.hue) {\n      // warnDeprecations can't handle nested deprecated props\n      warn(\"ColorPicker property 'strings.hue' was used but has been deprecated. Use 'strings.hueAriaLabel' instead.\");\n    }\n\n    this.state = {\n      color: _getColorFromProps(props) || getColorFromString('#ffffff')!,\n    };\n\n    this._textChangeHandlers = {} as any;\n    for (const component of allColorComponents) {\n      this._textChangeHandlers[component] = this._onTextChange.bind(this, component);\n    }\n\n    const defaultStrings = ColorPickerBase.defaultProps.strings as Required<IColorPickerStrings>;\n\n    this._textLabels = {\n      /* eslint-disable deprecation/deprecation */\n      r: props.redLabel || strings.red || defaultStrings.red,\n      g: props.greenLabel || strings.green || defaultStrings.green,\n      b: props.blueLabel || strings.blue || defaultStrings.blue,\n      a: props.alphaLabel || strings.alpha || defaultStrings.alpha,\n      hex: props.hexLabel || strings.hex || defaultStrings.hex,\n      t: strings.transparency || defaultStrings.transparency,\n      /* eslint-enable deprecation/deprecation */\n    };\n\n    this._strings = {\n      ...defaultStrings,\n      // these aria labels default to the visible labels\n      alphaAriaLabel: this._textLabels.a,\n      transparencyAriaLabel: this._textLabels.t,\n      ...strings,\n    };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  public componentDidUpdate(prevProps: Readonly<IColorPickerProps>, prevState: Readonly<IColorPickerState>): void {\n    // if props changed (as opposed to a state update), update the color\n    if (prevProps !== this.props) {\n      const color = _getColorFromProps(this.props);\n      if (color) {\n        this._updateColor(undefined, color);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const strings = this._strings;\n    const textLabels = this._textLabels;\n    const {\n      theme,\n      className,\n      styles,\n      alphaType,\n      // eslint-disable-next-line deprecation/deprecation\n      alphaSliderHidden = alphaType === 'none',\n    } = props;\n    const { color } = this.state;\n    const useTransparency = alphaType === 'transparency';\n    const colorComponents = ['hex', 'r', 'g', 'b', useTransparency ? 't' : 'a'];\n    const atValue = useTransparency ? color.t : color.a;\n    const atLabel = useTransparency ? textLabels.t : textLabels.a;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      alphaType,\n    });\n\n    const selectedColorAriaParts = [textLabels.r, color.r, textLabels.g, color.g, textLabels.b, color.b];\n    if (!alphaSliderHidden && typeof atValue === 'number') {\n      selectedColorAriaParts.push(atLabel, `${atValue}%`);\n    }\n    const ariaLabel = strings.rootAriaLabelFormat.replace('{0}', selectedColorAriaParts.join(' '));\n\n    return (\n      <div className={classNames.root} role=\"group\" aria-label={ariaLabel}>\n        <div className={classNames.panel}>\n          <ColorRectangle\n            color={color}\n            onChange={this._onSVChanged}\n            ariaLabel={strings.svAriaLabel}\n            ariaDescription={strings.svAriaDescription}\n            ariaValueFormat={strings.svAriaValueFormat}\n            className={classNames.colorRectangle}\n          />\n          <div className={classNames.flexContainer}>\n            <div className={classNames.flexSlider}>\n              <ColorSlider\n                className=\"is-hue\"\n                type=\"hue\"\n                // eslint-disable-next-line deprecation/deprecation\n                ariaLabel={strings.hue || strings.hueAriaLabel}\n                value={color.h}\n                onChange={this._onHChanged}\n              />\n              {!alphaSliderHidden && (\n                <ColorSlider\n                  className=\"is-alpha\"\n                  type={alphaType as 'alpha' | 'transparency'}\n                  ariaLabel={useTransparency ? strings.transparencyAriaLabel : strings.alphaAriaLabel}\n                  overlayColor={color.hex}\n                  value={atValue}\n                  onChange={this._onATChanged}\n                />\n              )}\n            </div>\n            {props.showPreview && (\n              <div className={classNames.flexPreviewBox}>\n                <div\n                  className={classNames.colorSquare + ' is-preview'}\n                  style={{\n                    backgroundColor: color.str,\n                  }}\n                />\n              </div>\n            )}\n          </div>\n\n          {/* Give the table role=group to prevent it from being read as a table (ideally we should\n          just get rid of the table, but this has the potential of breaking consumers) */}\n          <table className={classNames.table} role=\"group\" cellPadding=\"0\" cellSpacing=\"0\">\n            <thead>\n              <tr className={classNames.tableHeader}>\n                <td className={classNames.tableHexCell}>{textLabels.hex}</td>\n                <td>{textLabels.r}</td>\n                <td>{textLabels.g}</td>\n                <td>{textLabels.b}</td>\n                {!alphaSliderHidden && <td className={classNames.tableAlphaCell}>{atLabel}</td>}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {colorComponents.map((comp: ColorComponent) => {\n                  if ((comp === 'a' || comp === 't') && alphaSliderHidden) {\n                    return null;\n                  }\n                  return (\n                    <td key={comp}>\n                      <TextField\n                        className={classNames.input}\n                        onChange={this._textChangeHandlers[comp]}\n                        onBlur={this._onBlur}\n                        value={this._getDisplayValue(comp)}\n                        spellCheck={false}\n                        ariaLabel={textLabels[comp]}\n                        aria-live={comp !== 'hex' ? 'assertive' : undefined}\n                        autoComplete=\"off\"\n                      />\n                    </td>\n                  );\n                })}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private _getDisplayValue(component: ColorComponent): string {\n    const { color, editingColor } = this.state;\n    if (editingColor && editingColor.component === component) {\n      return editingColor.value;\n    }\n    if (component === 'hex') {\n      return color[component] || '';\n    } else if (typeof color[component] === 'number' && !isNaN(color[component] as number)) {\n      return String(color[component]);\n    }\n    return '';\n  }\n\n  private _onSVChanged = (ev: React.MouseEvent<HTMLElement>, color: IColor): void => {\n    this._updateColor(ev, color);\n  };\n\n  private _onHChanged = (ev: React.MouseEvent<HTMLElement>, h: number): void => {\n    this._updateColor(ev, updateH(this.state.color, h));\n  };\n\n  /** Callback for when the alpha/transparency slider changes */\n  private _onATChanged = (ev: React.MouseEvent<HTMLElement>, value: number): void => {\n    const updater = this.props.alphaType === 'transparency' ? updateT : updateA;\n    this._updateColor(ev, updater(this.state.color, Math.round(value)));\n  };\n\n  private _onTextChange(component: ColorComponent, event: React.FormEvent<HTMLInputElement>, newValue?: string): void {\n    const color = this.state.color;\n    const isHex = component === 'hex';\n    const isAlpha = component === 'a';\n    const isTransparency = component === 't';\n    newValue = (newValue || '').substr(0, isHex ? MAX_HEX_LENGTH : MAX_RGBA_LENGTH);\n\n    // Ignore what the user typed if it contains invalid characters\n    const validCharsRegex = isHex ? HEX_REGEX : RGBA_REGEX;\n    if (!validCharsRegex.test(newValue)) {\n      return;\n    }\n\n    // Determine if the entry is valid (different methods for hex, alpha, and RGB)\n    let isValid: boolean;\n    if (newValue === '') {\n      // Empty string is obviously not valid\n      isValid = false;\n    } else if (isHex) {\n      // Technically hex values of length 3 are also valid, but committing the value here would\n      // cause it to be automatically converted to a value of length 6, which may not be what the\n      // user wanted if they're not finished typing. (Values of length 3 will be committed on blur.)\n      isValid = newValue.length === MAX_HEX_LENGTH;\n    } else if (isAlpha || isTransparency) {\n      isValid = Number(newValue) <= MAX_COLOR_ALPHA;\n    } else {\n      isValid = Number(newValue) <= MAX_COLOR_RGB;\n    }\n\n    if (!isValid) {\n      // If the new value is an empty string or other invalid value, save that to display.\n      // (if the user still hasn't entered anything on blur, the last value is restored)\n      this.setState({ editingColor: { component, value: newValue } });\n    } else if (String(color[component]) === newValue) {\n      // If the new value is the same as the current value, mostly ignore it.\n      // Exception is that if the user was previously editing the value (but hadn't yet entered\n      // a new valid value), we should clear the intermediate value.\n      if (this.state.editingColor) {\n        this.setState({ editingColor: undefined });\n      }\n    } else {\n      // Should be a valid color. Update the value.\n      const newColor = isHex\n        ? getColorFromString('#' + newValue)\n        : isTransparency\n        ? updateT(color, Number(newValue))\n        : getColorFromRGBA({\n            ...color,\n            // Overwrite whichever key is being updated with the new value\n            [component]: Number(newValue),\n          });\n      this._updateColor(event, newColor);\n    }\n  }\n\n  private _onBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    const { color, editingColor } = this.state;\n    if (!editingColor) {\n      return;\n    }\n\n    // If there was an intermediate incorrect value (such as too large or empty), correct it.\n    const { value, component } = editingColor;\n    const isHex = component === 'hex';\n    const isAlpha = component === 'a';\n    const isTransparency = component === 't';\n    const minLength = isHex ? MIN_HEX_LENGTH : MIN_RGBA_LENGTH;\n    if (value.length >= minLength && (isHex || !isNaN(Number(value)))) {\n      // Real value. Clamp to appropriate length (hex) or range (rgba).\n      let newColor: IColor | undefined;\n      if (isHex) {\n        newColor = getColorFromString('#' + correctHex(value));\n      } else if (isAlpha || isTransparency) {\n        const updater = isAlpha ? updateA : updateT;\n        newColor = updater(color, clamp(Number(value), MAX_COLOR_ALPHA));\n      } else {\n        newColor = getColorFromRGBA(\n          correctRGB({\n            ...color,\n            [component]: Number(value),\n          } as IRGB),\n        );\n      }\n\n      // Update state and call onChange\n      this._updateColor(event, newColor);\n    } else {\n      // Intermediate value was an empty string or too short (hex only).\n      // Just clear the intermediate state and revert to the previous value.\n      this.setState({ editingColor: undefined });\n    }\n  };\n\n  /**\n   * Update the displayed color and call change handlers if appropriate.\n   * @param ev - Event if call was triggered by an event (undefined if triggered by props change)\n   * @param newColor - Updated color\n   */\n  private _updateColor(ev: React.SyntheticEvent<HTMLElement> | undefined, newColor: IColor | undefined): void {\n    if (!newColor) {\n      return;\n    }\n\n    const { color, editingColor } = this.state;\n    // For black or white, the hue can change without changing the string.\n    const isDifferentColor = newColor.h !== color.h || newColor.str !== color.str;\n\n    if (isDifferentColor || editingColor) {\n      // If ev is undefined, it's an update from props (which should be unconditionally respected\n      // and not call onChange).\n      if (ev && this.props.onChange) {\n        this.props.onChange(ev, newColor);\n        if (ev.defaultPrevented) {\n          return;\n        }\n      }\n      this.setState({ color: newColor, editingColor: undefined });\n    }\n  }\n}\n\nfunction _getColorFromProps(props: IColorPickerProps): IColor | undefined {\n  const { color } = props;\n  return typeof color === 'string' ? getColorFromString(color) : color;\n}\n"]},"metadata":{},"sourceType":"module"}