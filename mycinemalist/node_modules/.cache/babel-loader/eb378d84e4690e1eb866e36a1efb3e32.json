{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { getThemedContext } from '@uifabric/styling';\nimport { Customizer } from '@uifabric/utilities';\n/**\n * Theme provider is a simplified version of Customizer that activates the appropriate theme data\n * for a given scheme name.\n *\n * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.\n */\n\nexport var ThemeProvider = function (props) {\n  var scheme = props.scheme,\n      theme = props.theme,\n      rest = __rest(props, [\"scheme\", \"theme\"]); // TODO: consider merging implementation with theme-proto, which only stores a reference / scheme name to theme\n  //   in context and uses quick global store accessor to trigger change by passing in theme object as child and\n  //   triggering re-render. (perf benefits need verification)\n\n\n  var contextTransform = function (context) {\n    return getThemedContext(context, scheme, theme);\n  }; // eslint-disable-next-line react/jsx-no-bind\n\n\n  return React.createElement(Customizer, __assign({}, rest, {\n    contextTransform: contextTransform\n  }));\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAuD,mBAAvD;AACA,SAASC,UAAT,QAA6C,qBAA7C;AAOA;;;;;;;AAMA,OAAO,IAAMC,aAAa,GAAiD,UAACC,KAAD,EAA2B;AAC5F;AAAA,MAAQC,mBAAR;AAAA,MAAeC,yCAAf,CAD4F,CAGpG;AACA;AACA;;;AACA,MAAMC,gBAAgB,GAAyC,mBAAO;AACpE,WAAON,gBAAgB,CAACO,OAAD,EAAUC,MAAV,EAAkBJ,KAAlB,CAAvB;AACD,GAFD,CANoG,CAUpG;;;AACA,SAAOL,oBAACE,UAAD,EAAWQ,aAAKJ,IAAL,EAAS;AAAEC,oBAAgB,EAAEA;AAApB,GAAT,CAAX,CAAP;AACD,CAZM","names":["React","getThemedContext","Customizer","ThemeProvider","props","theme","rest","contextTransform","context","scheme","__assign"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\foundation\\src\\ThemeProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getThemedContext, ISchemeNames, ITheme } from '@uifabric/styling';\nimport { Customizer, ICustomizerProps } from '@uifabric/utilities';\n\nexport interface IThemeProviderProps {\n  scheme?: ISchemeNames;\n  theme?: ITheme;\n}\n\n/**\n * Theme provider is a simplified version of Customizer that activates the appropriate theme data\n * for a given scheme name.\n *\n * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.\n */\nexport const ThemeProvider: React.FunctionComponent<IThemeProviderProps> = (props: IThemeProviderProps) => {\n  const { scheme, theme, ...rest } = props;\n\n  // TODO: consider merging implementation with theme-proto, which only stores a reference / scheme name to theme\n  //   in context and uses quick global store accessor to trigger change by passing in theme object as child and\n  //   triggering re-render. (perf benefits need verification)\n  const contextTransform: ICustomizerProps['contextTransform'] = context => {\n    return getThemedContext(context, scheme, theme);\n  };\n\n  // eslint-disable-next-line react/jsx-no-bind\n  return <Customizer {...rest} contextTransform={contextTransform} />;\n};\n"]},"metadata":{},"sourceType":"module"}