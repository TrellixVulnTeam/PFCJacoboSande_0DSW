{"ast":null,"code":"// Regex that finds { and } so they can be removed on a lookup for string format\nvar FORMAT_ARGS_REGEX = /[\\{\\}]/g; // Regex that finds {#} so it can be replaced by the arguments in string format\n\nvar FORMAT_REGEX = /\\{\\d+\\}/g;\n/**\n * String format method, used for scenarios where at runtime you\n * need to evaluate a formatted string given a tokenized string. This\n * usually only is needed in localization scenarios.\n\n * @example\n * ```tsx\n * \"I love {0} every {1}\".format(\"CXP\")\n * ```\n * will result in a Debug Exception.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function format(s) {\n  var values = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    values[_i - 1] = arguments[_i];\n  }\n\n  var args = values; // Callback match function\n\n  function replaceFunc(match) {\n    // looks up in the args\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var replacement = args[match.replace(FORMAT_ARGS_REGEX, '')]; // catches undefined in nondebug and null in debug and nondebug\n\n    if (replacement === null || replacement === undefined) {\n      replacement = '';\n    }\n\n    return replacement;\n  }\n\n  return s.replace(FORMAT_REGEX, replaceFunc);\n}","map":{"version":3,"mappings":"AAAA;AACA,IAAMA,iBAAiB,GAAG,SAA1B,C,CAEA;;AACA,IAAMC,YAAY,GAAG,UAArB;AAEA;;;;;;;;;;;;;AAaA;;AACA,OAAM,SAAUC,MAAV,CAAiBC,CAAjB,EAA0B;EAAE;;OAAA,yCAAgB;IAAhBC;;;EAChC,IAAIC,IAAI,GAAGD,MAAX,CAD8B,CAE9B;;EACA,SAASE,WAAT,CAAqBC,KAArB,EAAkC;IAChC;IACA;IACA,IAAIC,WAAW,GAAGH,IAAI,CAACE,KAAK,CAACE,OAAN,CAAcT,iBAAd,EAAiC,EAAjC,CAAD,CAAtB,CAHgC,CAKhC;;IACA,IAAIQ,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAKE,SAA5C,EAAuD;MACrDF,WAAW,GAAG,EAAd;IACD;;IAED,OAAOA,WAAP;EACD;;EACD,OAAOL,CAAC,CAACM,OAAF,CAAUR,YAAV,EAAwBK,WAAxB,CAAP;AACD","names":["FORMAT_ARGS_REGEX","FORMAT_REGEX","format","s","values","args","replaceFunc","match","replacement","replace","undefined"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\utilities\\src\\string.ts"],"sourcesContent":["// Regex that finds { and } so they can be removed on a lookup for string format\nconst FORMAT_ARGS_REGEX = /[\\{\\}]/g;\n\n// Regex that finds {#} so it can be replaced by the arguments in string format\nconst FORMAT_REGEX = /\\{\\d+\\}/g;\n\n/**\n * String format method, used for scenarios where at runtime you\n * need to evaluate a formatted string given a tokenized string. This\n * usually only is needed in localization scenarios.\n\n * @example\n * ```tsx\n * \"I love {0} every {1}\".format(\"CXP\")\n * ```\n * will result in a Debug Exception.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function format(s: string, ...values: any[]): string {\n  let args = values;\n  // Callback match function\n  function replaceFunc(match: string): string {\n    // looks up in the args\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let replacement = args[match.replace(FORMAT_ARGS_REGEX, '') as any];\n\n    // catches undefined in nondebug and null in debug and nondebug\n    if (replacement === null || replacement === undefined) {\n      replacement = '';\n    }\n\n    return replacement;\n  }\n  return s.replace(FORMAT_REGEX, replaceFunc);\n}\n"]},"metadata":{},"sourceType":"module"}