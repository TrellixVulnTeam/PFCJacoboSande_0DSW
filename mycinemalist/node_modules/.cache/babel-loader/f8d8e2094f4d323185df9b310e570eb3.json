{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, warnDeprecations, initializeComponentRef } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { IconButton } from '../../Button';\nimport { DialogFooter } from './DialogFooter';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nvar getClassNames = classNamesFunction();\nvar DialogFooterType = React.createElement(DialogFooter, null).type;\nvar COMPONENT_NAME = 'DialogContent';\n\nvar DialogContentBase =\n/** @class */\nfunction (_super) {\n  __extends(DialogContentBase, _super);\n\n  function DialogContentBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      titleId: 'titleProps.id'\n    });\n    return _this;\n  }\n\n  DialogContentBase.prototype.render = function () {\n    var _a = this.props,\n        showCloseButton = _a.showCloseButton,\n        className = _a.className,\n        closeButtonAriaLabel = _a.closeButtonAriaLabel,\n        onDismiss = _a.onDismiss,\n        subTextId = _a.subTextId,\n        subText = _a.subText,\n        _b = _a.titleProps,\n        titleProps = _b === void 0 ? {} : _b,\n        // eslint-disable-next-line deprecation/deprecation\n    titleId = _a.titleId,\n        title = _a.title,\n        type = _a.type,\n        styles = _a.styles,\n        theme = _a.theme,\n        draggableHeaderClassName = _a.draggableHeaderClassName;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isLargeHeader: type === DialogType.largeHeader,\n      isClose: type === DialogType.close,\n      draggableHeaderClassName: draggableHeaderClassName\n    });\n\n    var groupings = this._groupChildren();\n\n    var subTextContent;\n\n    if (subText) {\n      subTextContent = React.createElement(\"p\", {\n        className: classNames.subText,\n        id: subTextId\n      }, subText);\n    }\n\n    return React.createElement(\"div\", {\n      className: classNames.content\n    }, React.createElement(\"div\", {\n      className: classNames.header\n    }, React.createElement(\"div\", __assign({\n      id: titleId,\n      role: \"heading\",\n      \"aria-level\": 1\n    }, titleProps, {\n      className: css(classNames.title, titleProps.className)\n    }), title), React.createElement(\"div\", {\n      className: classNames.topButton\n    }, this.props.topButtonsProps.map(function (props, index) {\n      return React.createElement(IconButton, __assign({\n        key: props.uniqueId || index\n      }, props));\n    }), (type === DialogType.close || showCloseButton && type !== DialogType.largeHeader) && React.createElement(IconButton, {\n      className: classNames.button,\n      iconProps: {\n        iconName: 'Cancel'\n      },\n      ariaLabel: closeButtonAriaLabel,\n      onClick: onDismiss,\n      title: closeButtonAriaLabel\n    }))), React.createElement(\"div\", {\n      className: classNames.inner\n    }, React.createElement(\"div\", {\n      className: classNames.innerContent\n    }, subTextContent, groupings.contents), groupings.footers));\n  }; // @TODO - typing the footers as an array of DialogFooter is difficult because\n  // casing \"child as DialogFooter\" causes a problem because\n  // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n\n\n  DialogContentBase.prototype._groupChildren = function () {\n    var groupings = {\n      footers: [],\n      contents: []\n    };\n    React.Children.map(this.props.children, function (child) {\n      if (typeof child === 'object' && child !== null && child.type === DialogFooterType) {\n        groupings.footers.push(child);\n      } else {\n        groupings.contents.push(child);\n      }\n    });\n    return groupings;\n  };\n\n  DialogContentBase.defaultProps = {\n    showCloseButton: false,\n    className: '',\n    topButtonsProps: [],\n    closeButtonAriaLabel: 'Close'\n  };\n  DialogContentBase = __decorate([withResponsiveMode], DialogContentBase);\n  return DialogContentBase;\n}(React.Component);\n\nexport { DialogContentBase };","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","css","warnDeprecations","initializeComponentRef","DialogType","IconButton","DialogFooter","withResponsiveMode","getClassNames","DialogFooterType","type","COMPONENT_NAME","__extends","props","_super","_this","titleId","DialogContentBase","showCloseButton","className","closeButtonAriaLabel","onDismiss","subTextId","subText","_b","titleProps","title","styles","theme","draggableHeaderClassName","classNames","isLargeHeader","largeHeader","isClose","close","groupings","_groupChildren","subTextContent","id","content","header","role","topButton","topButtonsProps","map","index","__assign","key","uniqueId","button","iconProps","iconName","ariaLabel","onClick","inner","innerContent","contents","footers","Children","children","child","push","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Dialog\\DialogContent.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, css, warnDeprecations, initializeComponentRef } from '../../Utilities';\nimport { DialogType, IDialogContentProps, IDialogContentStyleProps, IDialogContentStyles } from './DialogContent.types';\nimport { IconButton } from '../../Button';\nimport { DialogFooter } from './DialogFooter';\nimport { IDialogFooterProps } from './DialogFooter.types';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogContentStyleProps, IDialogContentStyles>();\n\nconst DialogFooterType = ((<DialogFooter />) as React.ReactElement<IDialogFooterProps>).type;\n\nconst COMPONENT_NAME = 'DialogContent';\n\n@withResponsiveMode\nexport class DialogContentBase extends React.Component<IDialogContentProps, {}> {\n  public static defaultProps: IDialogContentProps = {\n    showCloseButton: false,\n    className: '',\n    topButtonsProps: [],\n    closeButtonAriaLabel: 'Close',\n  };\n\n  constructor(props: IDialogContentProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      titleId: 'titleProps.id',\n    });\n  }\n\n  public render(): JSX.Element {\n    const {\n      showCloseButton,\n      className,\n      closeButtonAriaLabel,\n      onDismiss,\n      subTextId,\n      subText,\n      titleProps = {},\n      // eslint-disable-next-line deprecation/deprecation\n      titleId,\n      title,\n      type,\n      styles,\n      theme,\n      draggableHeaderClassName,\n    } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isLargeHeader: type === DialogType.largeHeader,\n      isClose: type === DialogType.close,\n      draggableHeaderClassName,\n    });\n\n    const groupings = this._groupChildren();\n    let subTextContent;\n    if (subText) {\n      subTextContent = (\n        <p className={classNames.subText} id={subTextId}>\n          {subText}\n        </p>\n      );\n    }\n\n    return (\n      <div className={classNames.content}>\n        <div className={classNames.header}>\n          <div\n            id={titleId}\n            role=\"heading\"\n            aria-level={1}\n            {...titleProps}\n            className={css(classNames.title, titleProps.className)}\n          >\n            {title}\n          </div>\n          <div className={classNames.topButton}>\n            {this.props.topButtonsProps!.map((props, index) => (\n              <IconButton key={props.uniqueId || index} {...props} />\n            ))}\n            {(type === DialogType.close || (showCloseButton && type !== DialogType.largeHeader)) && (\n              <IconButton\n                className={classNames.button}\n                iconProps={{ iconName: 'Cancel' }}\n                ariaLabel={closeButtonAriaLabel}\n                onClick={onDismiss as any}\n                title={closeButtonAriaLabel}\n              />\n            )}\n          </div>\n        </div>\n        <div className={classNames.inner}>\n          <div className={classNames.innerContent}>\n            {subTextContent}\n            {groupings.contents}\n          </div>\n          {groupings.footers}\n        </div>\n      </div>\n    );\n  }\n\n  // @TODO - typing the footers as an array of DialogFooter is difficult because\n  // casing \"child as DialogFooter\" causes a problem because\n  // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n  private _groupChildren(): { footers: any[]; contents: any[] } {\n    const groupings: { footers: any[]; contents: any[] } = {\n      footers: [],\n      contents: [],\n    };\n\n    React.Children.map(this.props.children, child => {\n      if (typeof child === 'object' && child !== null && (child as any).type === DialogFooterType) {\n        groupings.footers.push(child);\n      } else {\n        groupings.contents.push(child);\n      }\n    });\n\n    return groupings;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}