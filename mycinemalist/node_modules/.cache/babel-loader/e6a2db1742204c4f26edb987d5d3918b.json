{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { getId, classNamesFunction, mergeAriaAttributeValues, initializeComponentRef, warnMutuallyExclusive, FocusRects } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { KeytipData } from '../../KeytipData';\nvar getClassNames = classNamesFunction();\n\nvar CheckboxBase =\n/** @class */\nfunction (_super) {\n  __extends(CheckboxBase, _super);\n  /**\n   * Initialize a new instance of the Checkbox\n   * @param props - Props for the component\n   * @param context - Context or initial state for the base component.\n   */\n\n\n  function CheckboxBase(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this._checkBox = React.createRef();\n\n    _this._renderContent = function (checked, indeterminate, keytipAttributes) {\n      if (keytipAttributes === void 0) {\n        keytipAttributes = {};\n      }\n\n      var _a = _this.props,\n          disabled = _a.disabled,\n          inputProps = _a.inputProps,\n          name = _a.name,\n          ariaLabel = _a.ariaLabel,\n          ariaLabelledBy = _a.ariaLabelledBy,\n          ariaDescribedBy = _a.ariaDescribedBy,\n          _b = _a.onRenderLabel,\n          onRenderLabel = _b === void 0 ? _this._onRenderLabel : _b,\n          checkmarkIconProps = _a.checkmarkIconProps,\n          ariaPositionInSet = _a.ariaPositionInSet,\n          ariaSetSize = _a.ariaSetSize,\n          title = _a.title,\n          label = _a.label;\n      return React.createElement(\"div\", {\n        className: _this._classNames.root,\n        title: title\n      }, React.createElement(FocusRects, null), React.createElement(\"input\", __assign({\n        type: \"checkbox\"\n      }, inputProps, {\n        \"data-ktp-execute-target\": keytipAttributes['data-ktp-execute-target'],\n        checked: checked,\n        disabled: disabled,\n        className: _this._classNames.input,\n        ref: _this._checkBox,\n        name: name,\n        id: _this._id,\n        title: title,\n        onChange: _this._onChange,\n        onFocus: _this._onFocus,\n        onBlur: _this._onBlur,\n        \"aria-disabled\": disabled,\n        \"aria-label\": ariaLabel || label,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-describedby\": mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby']),\n        \"aria-posinset\": ariaPositionInSet,\n        \"aria-setsize\": ariaSetSize,\n        \"aria-checked\": indeterminate ? 'mixed' : checked ? 'true' : 'false'\n      })), React.createElement(\"label\", {\n        className: _this._classNames.label,\n        htmlFor: _this._id\n      }, React.createElement(\"div\", {\n        className: _this._classNames.checkbox,\n        \"data-ktp-target\": keytipAttributes['data-ktp-target']\n      }, React.createElement(Icon, __assign({\n        iconName: \"CheckMark\"\n      }, checkmarkIconProps, {\n        className: _this._classNames.checkmark\n      }))), onRenderLabel(_this.props, _this._onRenderLabel)));\n    };\n\n    _this._onFocus = function (ev) {\n      var inputProps = _this.props.inputProps;\n\n      if (inputProps && inputProps.onFocus) {\n        inputProps.onFocus(ev);\n      }\n    };\n\n    _this._onBlur = function (ev) {\n      var inputProps = _this.props.inputProps;\n\n      if (inputProps && inputProps.onBlur) {\n        inputProps.onBlur(ev);\n      }\n    };\n\n    _this._onChange = function (ev) {\n      var onChange = _this.props.onChange;\n      var _a = _this.state,\n          isChecked = _a.isChecked,\n          isIndeterminate = _a.isIndeterminate;\n\n      if (!isIndeterminate) {\n        if (onChange) {\n          onChange(ev, !isChecked);\n        }\n\n        if (_this.props.checked === undefined) {\n          _this.setState({\n            isChecked: !isChecked\n          });\n        }\n      } else {\n        // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n        // controlled, lets the consumer know to change it by calling onChange). It doesn't\n        // change the checked state.\n        if (onChange) {\n          onChange(ev, isChecked);\n        }\n\n        if (_this.props.indeterminate === undefined) {\n          _this.setState({\n            isIndeterminate: false\n          });\n        }\n      }\n    };\n\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n          title = props.title;\n      return label ? React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: _this._classNames.text,\n        title: title\n      }, label) : null;\n    };\n\n    initializeComponentRef(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive('Checkbox', props, {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate'\n      });\n    }\n\n    _this._id = _this.props.id || getId('checkbox-');\n    _this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked),\n      isIndeterminate: !!(props.indeterminate !== undefined ? props.indeterminate : props.defaultIndeterminate)\n    };\n    return _this;\n  }\n\n  CheckboxBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var stateUpdate = {};\n\n    if (nextProps.indeterminate !== undefined) {\n      stateUpdate.isIndeterminate = !!nextProps.indeterminate;\n    }\n\n    if (nextProps.checked !== undefined) {\n      stateUpdate.isChecked = !!nextProps.checked;\n    }\n\n    return Object.keys(stateUpdate).length ? stateUpdate : null;\n  };\n  /**\n   * Render the Checkbox based on passed props\n   */\n\n\n  CheckboxBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        className = _a.className,\n        disabled = _a.disabled,\n        boxSide = _a.boxSide,\n        theme = _a.theme,\n        styles = _a.styles,\n        _b = _a.onRenderLabel,\n        onRenderLabel = _b === void 0 ? this._onRenderLabel : _b,\n        keytipProps = _a.keytipProps;\n    var _c = this.state,\n        isChecked = _c.isChecked,\n        isIndeterminate = _c.isIndeterminate;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: boxSide !== 'start',\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel\n    });\n\n    if (keytipProps) {\n      return React.createElement(KeytipData, {\n        keytipProps: keytipProps,\n        disabled: disabled\n      }, function (keytipAttributes) {\n        return _this._renderContent(isChecked, isIndeterminate, keytipAttributes);\n      });\n    }\n\n    return this._renderContent(isChecked, isIndeterminate);\n  };\n\n  Object.defineProperty(CheckboxBase.prototype, \"indeterminate\", {\n    get: function () {\n      return !!this.state.isIndeterminate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CheckboxBase.prototype, \"checked\", {\n    get: function () {\n      return !!this.state.isChecked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CheckboxBase.prototype.focus = function () {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  };\n\n  CheckboxBase.defaultProps = {\n    boxSide: 'start'\n  };\n  return CheckboxBase;\n}(React.Component);\n\nexport { CheckboxBase };","map":{"version":3,"mappings":"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","names":["React","getId","classNamesFunction","mergeAriaAttributeValues","initializeComponentRef","warnMutuallyExclusive","FocusRects","Icon","KeytipData","getClassNames","__extends","props","context","_super","_this","createRef","checked","indeterminate","keytipAttributes","disabled","inputProps","name","ariaLabel","ariaLabelledBy","ariaDescribedBy","_b","onRenderLabel","checkmarkIconProps","ariaPositionInSet","ariaSetSize","title","label","className","_classNames","root","type","input","ref","_checkBox","id","_id","onChange","_onChange","onFocus","_onFocus","onBlur","_onBlur","htmlFor","checkbox","__assign","iconName","checkmark","_onRenderLabel","ev","isChecked","isIndeterminate","undefined","setState","text","process","env","NODE_ENV","state","defaultChecked","defaultIndeterminate","CheckboxBase","nextProps","prevState","stateUpdate","Object","keys","length","boxSide","theme","styles","keytipProps","reversed","isUsingCustomLabelRender","_renderContent","current","focus","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Checkbox\\Checkbox.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  getId,\n  classNamesFunction,\n  mergeAriaAttributeValues,\n  initializeComponentRef,\n  warnMutuallyExclusive,\n  FocusRects,\n} from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { ICheckbox, ICheckboxProps, ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface ICheckboxState {\n  /** Is true when Uncontrolled control is checked. */\n  isChecked?: boolean;\n  isIndeterminate?: boolean;\n}\n\nconst getClassNames = classNamesFunction<ICheckboxStyleProps, ICheckboxStyles>();\n\nexport class CheckboxBase extends React.Component<ICheckboxProps, ICheckboxState> implements ICheckbox {\n  public static defaultProps: ICheckboxProps = {\n    boxSide: 'start',\n  };\n\n  private _checkBox = React.createRef<HTMLInputElement>();\n  private _id: string;\n  private _classNames: { [key in keyof ICheckboxStyles]: string };\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<ICheckboxProps>,\n    prevState: Readonly<ICheckboxState>,\n  ): ICheckboxState | null {\n    const stateUpdate: Partial<ICheckboxState> = {};\n    if (nextProps.indeterminate !== undefined) {\n      stateUpdate.isIndeterminate = !!nextProps.indeterminate;\n    }\n    if (nextProps.checked !== undefined) {\n      stateUpdate.isChecked = !!nextProps.checked;\n    }\n    return Object.keys(stateUpdate).length ? stateUpdate : null;\n  }\n\n  /**\n   * Initialize a new instance of the Checkbox\n   * @param props - Props for the component\n   * @param context - Context or initial state for the base component.\n   */\n  constructor(props: ICheckboxProps, context?: any) {\n    super(props, context);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive('Checkbox', props, {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate',\n      });\n    }\n\n    this._id = this.props.id || getId('checkbox-');\n    this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked),\n      isIndeterminate: !!(props.indeterminate !== undefined ? props.indeterminate : props.defaultIndeterminate),\n    };\n  }\n\n  /**\n   * Render the Checkbox based on passed props\n   */\n  public render(): JSX.Element {\n    const {\n      className,\n      disabled,\n      boxSide,\n      theme,\n      styles,\n      onRenderLabel = this._onRenderLabel,\n      keytipProps,\n    } = this.props;\n\n    const { isChecked, isIndeterminate } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: boxSide !== 'start',\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel,\n    });\n\n    if (keytipProps) {\n      return (\n        <KeytipData keytipProps={keytipProps} disabled={disabled}>\n          {(keytipAttributes: any): JSX.Element => this._renderContent(isChecked, isIndeterminate, keytipAttributes)}\n        </KeytipData>\n      );\n    }\n\n    return this._renderContent(isChecked, isIndeterminate);\n  }\n\n  public get indeterminate(): boolean {\n    return !!this.state.isIndeterminate;\n  }\n\n  public get checked(): boolean {\n    return !!this.state.isChecked;\n  }\n\n  public focus(): void {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  }\n\n  private _renderContent = (\n    checked: boolean | undefined,\n    indeterminate: boolean | undefined,\n    keytipAttributes: any = {},\n  ): JSX.Element => {\n    const {\n      disabled,\n      inputProps,\n      name,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      onRenderLabel = this._onRenderLabel,\n      checkmarkIconProps,\n      ariaPositionInSet,\n      ariaSetSize,\n      title,\n      label,\n    } = this.props;\n\n    return (\n      <div className={this._classNames.root} title={title}>\n        <FocusRects />\n        <input\n          type=\"checkbox\"\n          {...inputProps}\n          data-ktp-execute-target={keytipAttributes['data-ktp-execute-target']}\n          checked={checked}\n          disabled={disabled}\n          className={this._classNames.input}\n          ref={this._checkBox}\n          name={name}\n          id={this._id}\n          title={title}\n          onChange={this._onChange}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          aria-disabled={disabled}\n          aria-label={ariaLabel || label}\n          aria-labelledby={ariaLabelledBy}\n          aria-describedby={mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'])}\n          aria-posinset={ariaPositionInSet}\n          aria-setsize={ariaSetSize}\n          aria-checked={indeterminate ? 'mixed' : checked ? 'true' : 'false'}\n        />\n        <label className={this._classNames.label} htmlFor={this._id}>\n          <div className={this._classNames.checkbox} data-ktp-target={keytipAttributes['data-ktp-target']}>\n            <Icon iconName=\"CheckMark\" {...checkmarkIconProps} className={this._classNames.checkmark} />\n          </div>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n        </label>\n      </div>\n    );\n  };\n\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onFocus) {\n      inputProps.onFocus(ev);\n    }\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onBlur) {\n      inputProps.onBlur(ev);\n    }\n  };\n\n  private _onChange = (ev: React.FormEvent<HTMLElement>): void => {\n    const { onChange } = this.props;\n    const { isChecked, isIndeterminate } = this.state;\n\n    if (!isIndeterminate) {\n      if (onChange) {\n        onChange(ev, !isChecked);\n      }\n      if (this.props.checked === undefined) {\n        this.setState({ isChecked: !isChecked });\n      }\n    } else {\n      // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n      // controlled, lets the consumer know to change it by calling onChange). It doesn't\n      // change the checked state.\n      if (onChange) {\n        onChange(ev, isChecked);\n      }\n      if (this.props.indeterminate === undefined) {\n        this.setState({ isIndeterminate: false });\n      }\n    }\n  };\n\n  private _onRenderLabel = (props: ICheckboxProps): JSX.Element | null => {\n    const { label, title } = props;\n\n    return label ? (\n      <span aria-hidden=\"true\" className={this._classNames.text} title={title}>\n        {label}\n      </span>\n    ) : null;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}