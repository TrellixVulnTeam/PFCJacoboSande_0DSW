{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, on, KeyCodes, getWindow, warnDeprecations, warn } from '../../../Utilities';\nimport { clamp } from '../../../utilities/color/clamp';\nimport { MAX_COLOR_HUE, MAX_COLOR_ALPHA } from '../../../utilities/color/consts';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory ColorPicker}\n */\n\nvar ColorSliderBase =\n/** @class */\nfunction (_super) {\n  __extends(ColorSliderBase, _super);\n\n  function ColorSliderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._disposables = [];\n    _this._root = React.createRef();\n\n    _this._onKeyDown = function (ev) {\n      var currentValue = _this.value;\n      var maxValue = _this._maxValue;\n      var increment = ev.shiftKey ? 10 : 1; // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n      // and getting all the math and styles flipped correctly is tricky\n\n      switch (ev.which) {\n        case KeyCodes.left:\n          {\n            currentValue -= increment;\n            break;\n          }\n\n        case KeyCodes.right:\n          {\n            currentValue += increment;\n            break;\n          }\n\n        case KeyCodes.home:\n          {\n            currentValue = 0;\n            break;\n          }\n\n        case KeyCodes.end:\n          {\n            currentValue = maxValue;\n            break;\n          }\n\n        default:\n          {\n            return;\n          }\n      }\n\n      _this._updateValue(ev, clamp(currentValue, maxValue));\n    };\n\n    _this._onMouseDown = function (ev) {\n      var win = getWindow(_this);\n\n      if (win) {\n        _this._disposables.push(on(win, 'mousemove', _this._onMouseMove, true), on(win, 'mouseup', _this._disposeListeners, true));\n      }\n\n      _this._onMouseMove(ev);\n    };\n\n    _this._onMouseMove = function (ev) {\n      if (!_this._root.current) {\n        return;\n      }\n\n      var maxValue = _this._maxValue;\n\n      var rectSize = _this._root.current.getBoundingClientRect();\n\n      var currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n      var newValue = clamp(Math.round(currentPercentage * maxValue), maxValue);\n\n      _this._updateValue(ev, newValue);\n    };\n\n    _this._disposeListeners = function () {\n      _this._disposables.forEach(function (dispose) {\n        return dispose();\n      });\n\n      _this._disposables = [];\n    };\n\n    initializeComponentRef(_this);\n    warnDeprecations('ColorSlider', props, {\n      thumbColor: 'styles.sliderThumb',\n      overlayStyle: 'overlayColor',\n      isAlpha: 'type',\n      maxValue: 'type',\n      minValue: 'type'\n    }); // eslint-disable-next-line deprecation/deprecation\n\n    if (_this._type !== 'hue' && !(props.overlayColor || props.overlayStyle)) {\n      warn(\"ColorSlider: 'overlayColor' is required when 'type' is \\\"alpha\\\" or \\\"transparency\\\"\");\n    }\n\n    _this.state = {\n      currentValue: props.value || 0\n    };\n    return _this;\n  }\n\n  Object.defineProperty(ColorSliderBase.prototype, \"value\", {\n    get: function get() {\n      return this.state.currentValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ColorSliderBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.value !== undefined) {\n      this.setState({\n        currentValue: this.props.value\n      });\n    }\n  };\n\n  ColorSliderBase.prototype.componentWillUnmount = function () {\n    this._disposeListeners();\n  };\n\n  ColorSliderBase.prototype.render = function () {\n    var type = this._type;\n    var maxValue = this._maxValue;\n    var _a = this.props,\n        // eslint-disable-next-line deprecation/deprecation\n    overlayStyle = _a.overlayStyle,\n        overlayColor = _a.overlayColor,\n        theme = _a.theme,\n        className = _a.className,\n        styles = _a.styles,\n        _b = _a.ariaLabel,\n        ariaLabel = _b === void 0 ? type : _b;\n    var currentValue = this.value;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      type: type\n    });\n    var currentPercentage = 100 * currentValue / maxValue;\n    return React.createElement(\"div\", {\n      ref: this._root,\n      className: classNames.root,\n      tabIndex: 0,\n      onKeyDown: this._onKeyDown,\n      onMouseDown: this._onMouseDown,\n      role: \"slider\",\n      \"aria-valuenow\": currentValue,\n      \"aria-valuetext\": String(currentValue),\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": maxValue,\n      \"aria-label\": ariaLabel,\n      \"data-is-focusable\": true\n    }, !!(overlayColor || overlayStyle) && React.createElement(\"div\", {\n      className: classNames.sliderOverlay,\n      // this isn't included in getStyles because it may change frequently\n      style: overlayColor ? {\n        background: type === 'transparency' ? \"linear-gradient(to right, #\" + overlayColor + \", transparent)\" : \"linear-gradient(to right, transparent, #\" + overlayColor + \")\"\n      } : overlayStyle\n    }), React.createElement(\"div\", {\n      className: classNames.sliderThumb,\n      style: {\n        left: currentPercentage + '%'\n      }\n    }));\n  };\n\n  Object.defineProperty(ColorSliderBase.prototype, \"_type\", {\n    get: function get() {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = this.props,\n          isAlpha = _a.isAlpha,\n          _b = _a.type,\n          type = _b === void 0 ? isAlpha ? 'alpha' : 'hue' : _b;\n      return type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColorSliderBase.prototype, \"_maxValue\", {\n    get: function get() {\n      return this._type === 'hue' ? MAX_COLOR_HUE : MAX_COLOR_ALPHA;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ColorSliderBase.prototype._updateValue = function (ev, newValue) {\n    if (newValue === this.value) {\n      return;\n    }\n\n    var onChange = this.props.onChange;\n\n    if (onChange) {\n      onChange(ev, newValue);\n    }\n\n    if (!ev.defaultPrevented) {\n      this.setState({\n        currentValue: newValue\n      });\n      ev.preventDefault();\n    }\n  };\n\n  ColorSliderBase.defaultProps = {\n    value: 0\n  };\n  return ColorSliderBase;\n}(React.Component);\n\nexport { ColorSliderBase };","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","initializeComponentRef","on","KeyCodes","getWindow","warnDeprecations","warn","clamp","MAX_COLOR_HUE","MAX_COLOR_ALPHA","getClassNames","__extends","props","_super","_this","createRef","ev","currentValue","value","maxValue","_maxValue","increment","shiftKey","which","left","right","home","end","_updateValue","win","_disposables","push","_onMouseMove","_disposeListeners","_root","current","rectSize","getBoundingClientRect","currentPercentage","clientX","width","newValue","Math","round","forEach","thumbColor","overlayStyle","isAlpha","minValue","_type","overlayColor","state","Object","ColorSliderBase","prevProps","prevState","undefined","setState","type","theme","className","styles","_b","ariaLabel","classNames","ref","root","tabIndex","onKeyDown","_onKeyDown","onMouseDown","_onMouseDown","role","String","sliderOverlay","style","background","sliderThumb","onChange","defaultPrevented","preventDefault","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\ColorPicker\\src\\components\\ColorPicker\\ColorSlider\\ColorSlider.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  classNamesFunction,\n  initializeComponentRef,\n  on,\n  KeyCodes,\n  getWindow,\n  warnDeprecations,\n  warn,\n} from '../../../Utilities';\nimport { IColorSliderProps, IColorSliderStyleProps, IColorSliderStyles, IColorSlider } from './ColorSlider.types';\nimport { clamp } from '../../../utilities/color/clamp';\nimport { MAX_COLOR_HUE, MAX_COLOR_ALPHA } from '../../../utilities/color/consts';\n\nconst getClassNames = classNamesFunction<IColorSliderStyleProps, IColorSliderStyles>();\n\nexport interface IColorSliderState {\n  currentValue: number;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorSliderBase extends React.Component<IColorSliderProps, IColorSliderState> implements IColorSlider {\n  public static defaultProps: Partial<IColorSliderProps> = {\n    value: 0,\n  };\n\n  private _disposables: (() => void)[] = [];\n  private _root = React.createRef<HTMLDivElement>();\n\n  constructor(props: IColorSliderProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    warnDeprecations('ColorSlider', props, {\n      thumbColor: 'styles.sliderThumb',\n      overlayStyle: 'overlayColor',\n      isAlpha: 'type',\n      maxValue: 'type',\n      minValue: 'type',\n    });\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._type !== 'hue' && !(props.overlayColor || props.overlayStyle)) {\n      warn(`ColorSlider: 'overlayColor' is required when 'type' is \"alpha\" or \"transparency\"`);\n    }\n\n    this.state = {\n      currentValue: props.value || 0,\n    };\n  }\n\n  public get value(): number {\n    return this.state.currentValue;\n  }\n\n  public componentDidUpdate(prevProps: Readonly<IColorSliderProps>, prevState: Readonly<IColorSliderState>): void {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.value !== undefined) {\n      this.setState({ currentValue: this.props.value });\n    }\n  }\n\n  public componentWillUnmount() {\n    this._disposeListeners();\n  }\n\n  public render(): JSX.Element {\n    const type = this._type;\n    const maxValue = this._maxValue;\n    const {\n      // eslint-disable-next-line deprecation/deprecation\n      overlayStyle,\n      overlayColor,\n      theme,\n      className,\n      styles,\n      ariaLabel = type,\n    } = this.props;\n    const currentValue = this.value;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      type,\n    });\n\n    const currentPercentage = (100 * currentValue) / maxValue;\n\n    return (\n      <div\n        ref={this._root}\n        className={classNames.root}\n        tabIndex={0}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        role=\"slider\"\n        aria-valuenow={currentValue}\n        // Narrator doesn't read aria-valuenow properly\n        aria-valuetext={String(currentValue)}\n        aria-valuemin={0}\n        aria-valuemax={maxValue}\n        aria-label={ariaLabel}\n        data-is-focusable={true}\n      >\n        {!!(overlayColor || overlayStyle) && (\n          <div\n            className={classNames.sliderOverlay}\n            // this isn't included in getStyles because it may change frequently\n            style={\n              overlayColor\n                ? {\n                    background:\n                      type === 'transparency'\n                        ? `linear-gradient(to right, #${overlayColor}, transparent)`\n                        : `linear-gradient(to right, transparent, #${overlayColor})`,\n                  }\n                : overlayStyle\n            }\n          />\n        )}\n        <div className={classNames.sliderThumb} style={{ left: currentPercentage + '%' }} />\n      </div>\n    );\n  }\n\n  private get _type(): IColorSliderProps['type'] {\n    // eslint-disable-next-line deprecation/deprecation\n    const { isAlpha, type = isAlpha ? 'alpha' : 'hue' } = this.props;\n    return type;\n  }\n\n  private get _maxValue(): number {\n    return this._type === 'hue' ? MAX_COLOR_HUE : MAX_COLOR_ALPHA;\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent): void => {\n    let currentValue = this.value;\n    const maxValue = this._maxValue;\n    const increment = ev.shiftKey ? 10 : 1;\n\n    // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n    // and getting all the math and styles flipped correctly is tricky\n    switch (ev.which) {\n      case KeyCodes.left: {\n        currentValue -= increment;\n        break;\n      }\n      case KeyCodes.right: {\n        currentValue += increment;\n        break;\n      }\n      case KeyCodes.home: {\n        currentValue = 0;\n        break;\n      }\n      case KeyCodes.end: {\n        currentValue = maxValue;\n        break;\n      }\n      default: {\n        return;\n      }\n    }\n\n    this._updateValue(ev, clamp(currentValue, maxValue));\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    const win = getWindow(this as any);\n\n    if (win) {\n      this._disposables.push(\n        on(win, 'mousemove', this._onMouseMove as (ev: MouseEvent) => void, true),\n        on(win, 'mouseup', this._disposeListeners, true),\n      );\n    }\n\n    this._onMouseMove(ev);\n  };\n\n  private _onMouseMove = (ev: MouseEvent | React.MouseEvent): void => {\n    if (!this._root.current) {\n      return;\n    }\n\n    const maxValue = this._maxValue;\n    const rectSize = this._root.current.getBoundingClientRect();\n\n    const currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n    const newValue = clamp(Math.round(currentPercentage * maxValue), maxValue);\n\n    this._updateValue(ev, newValue);\n  };\n\n  private _disposeListeners = (): void => {\n    this._disposables.forEach(dispose => dispose());\n    this._disposables = [];\n  };\n\n  private _updateValue(ev: MouseEvent | KeyboardEvent | React.MouseEvent | React.KeyboardEvent, newValue: number) {\n    if (newValue === this.value) {\n      return;\n    }\n\n    const { onChange } = this.props;\n\n    if (onChange) {\n      onChange(ev as React.MouseEvent | React.KeyboardEvent, newValue);\n    }\n\n    if (!ev.defaultPrevented) {\n      this.setState({\n        currentValue: newValue,\n      });\n      ev.preventDefault();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}