{"ast":null,"code":"import * as React from 'react';\nimport { useConst } from './useConst';\nexport function useControllableValue(controlledValue, defaultUncontrolledValue, onChange) {\n  var _a = React.useState(defaultUncontrolledValue),\n      value = _a[0],\n      setValue = _a[1];\n\n  var isControlled = useConst(controlledValue !== undefined);\n  var currentValue = isControlled ? controlledValue : value; // Duplicate the current value and onChange in refs so they're accessible from\n  // setValueOrCallOnChange without creating a new callback every time\n\n  var valueRef = React.useRef(currentValue);\n  var onChangeRef = React.useRef(onChange);\n  React.useEffect(function () {\n    valueRef.current = currentValue;\n    onChangeRef.current = onChange;\n  }); // To match the behavior of the setter returned by React.useState, this callback's identity\n  // should never change. This means it MUST NOT directly reference variables that can change.\n\n  var setValueOrCallOnChange = useConst(function () {\n    return function (update, ev) {\n      // Assuming here that TValue is not a function, because a controllable value will typically\n      // be something a user can enter as input\n      var newValue = typeof update === 'function' ? update(valueRef.current) : update;\n\n      if (onChangeRef.current) {\n        onChangeRef.current(ev, newValue);\n      }\n\n      if (!isControlled) {\n        setValue(newValue);\n      }\n    };\n  });\n  return [currentValue, setValueOrCallOnChange];\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAkCA,OAAM,SAAUC,oBAAV,CAKJC,eALI,EAMJC,wBANI,EAOJC,QAPI,EAO+C;AAE7C;AAAA,MAACC,aAAD;AAAA,MAAQC,gBAAR;;AACN,MAAMC,YAAY,GAAGP,QAAQ,CAAUE,eAAe,KAAKM,SAA9B,CAA7B;AACA,MAAMC,YAAY,GAAGF,YAAY,GAAGL,eAAH,GAAqBG,KAAtD,CAJmD,CAMnD;AACA;;AACA,MAAMK,QAAQ,GAAGX,KAAK,CAACY,MAAN,CAAaF,YAAb,CAAjB;AACA,MAAMG,WAAW,GAAGb,KAAK,CAACY,MAAN,CAAaP,QAAb,CAApB;AACAL,OAAK,CAACc,SAAN,CAAgB;AACdH,YAAQ,CAACI,OAAT,GAAmBL,YAAnB;AACAG,eAAW,CAACE,OAAZ,GAAsBV,QAAtB;AACD,GAHD,EAVmD,CAenD;AACA;;AACA,MAAMW,sBAAsB,GAAGf,QAAQ,CAAC;AAAM,qBAACgB,MAAD,EAAmDC,EAAnD,EAA8D;AAC1G;AACA;AACA,UAAMC,QAAQ,GAAG,OAAOF,MAAP,KAAkB,UAAlB,GAAgCA,MAAmB,CAACN,QAAQ,CAACI,OAAV,CAAnD,GAAwEE,MAAzF;;AAEA,UAAIJ,WAAW,CAACE,OAAhB,EAAyB;AACvBF,mBAAW,CAACE,OAAZ,CAAoBG,EAApB,EAAyBC,QAAzB;AACD;;AAED,UAAI,CAACX,YAAL,EAAmB;AACjBD,gBAAQ,CAACY,QAAD,CAAR;AACD;AACF,KAZ6C;AAY7C,GAZsC,CAAvC;AAcA,SAAO,CAACT,YAAD,EAAeM,sBAAf,CAAP;AACD","names":["React","useConst","useControllableValue","controlledValue","defaultUncontrolledValue","onChange","value","setValue","isControlled","undefined","currentValue","valueRef","useRef","onChangeRef","useEffect","current","setValueOrCallOnChange","update","ev","newValue"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\react-hooks\\src\\useControllableValue.ts"],"sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type ChangeCallback<\n  TElement extends HTMLElement,\n  TValue,\n  TEvent extends React.SyntheticEvent<TElement> | undefined\n> = (ev: TEvent, newValue: TValue | undefined) => void;\n\n/**\n * Hook to manage a value that could be either controlled or uncontrolled, such as a checked state or\n * text box string.\n * @param controlledValue - The controlled value passed in the props. This value will always be used if provided,\n * and the internal state will be updated to reflect it.\n * @param defaultUncontrolledValue - Initial value for the internal state in the uncontrolled case.\n * @returns An array of the current value and an updater callback. Like `React.useState`, the updater\n * callback always has the same identity, and it can take either a new value, or a function which\n * is passed the previous value and returns the new value.\n * @see https://reactjs.org/docs/uncontrolled-components.html\n */\nexport function useControllableValue<TValue, TElement extends HTMLElement>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n): Readonly<[TValue | undefined, (update: React.SetStateAction<TValue | undefined>) => void]>;\nexport function useControllableValue<\n  TValue,\n  TElement extends HTMLElement,\n  TEvent extends React.SyntheticEvent<TElement> | undefined\n>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n  onChange: ChangeCallback<TElement, TValue, TEvent> | undefined,\n): Readonly<\n  [TValue | undefined, (update: React.SetStateAction<TValue | undefined>, ev?: React.FormEvent<TElement>) => void]\n>;\nexport function useControllableValue<\n  TValue,\n  TElement extends HTMLElement,\n  TEvent extends React.SyntheticEvent<TElement> | undefined\n>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n  onChange?: ChangeCallback<TElement, TValue, TEvent>,\n) {\n  const [value, setValue] = React.useState<TValue | undefined>(defaultUncontrolledValue);\n  const isControlled = useConst<boolean>(controlledValue !== undefined);\n  const currentValue = isControlled ? controlledValue : value;\n\n  // Duplicate the current value and onChange in refs so they're accessible from\n  // setValueOrCallOnChange without creating a new callback every time\n  const valueRef = React.useRef(currentValue);\n  const onChangeRef = React.useRef(onChange);\n  React.useEffect(() => {\n    valueRef.current = currentValue;\n    onChangeRef.current = onChange;\n  });\n\n  // To match the behavior of the setter returned by React.useState, this callback's identity\n  // should never change. This means it MUST NOT directly reference variables that can change.\n  const setValueOrCallOnChange = useConst(() => (update: React.SetStateAction<TValue | undefined>, ev?: TEvent) => {\n    // Assuming here that TValue is not a function, because a controllable value will typically\n    // be something a user can enter as input\n    const newValue = typeof update === 'function' ? (update as Function)(valueRef.current) : update;\n\n    if (onChangeRef.current) {\n      onChangeRef.current(ev!, newValue);\n    }\n\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  });\n\n  return [currentValue, setValueOrCallOnChange] as const;\n}\n"]},"metadata":{},"sourceType":"module"}