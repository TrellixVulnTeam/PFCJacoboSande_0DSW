{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\nexport var ResponsiveMode;\n\n(function (ResponsiveMode) {\n  ResponsiveMode[ResponsiveMode[\"small\"] = 0] = \"small\";\n  ResponsiveMode[ResponsiveMode[\"medium\"] = 1] = \"medium\";\n  ResponsiveMode[ResponsiveMode[\"large\"] = 2] = \"large\";\n  ResponsiveMode[ResponsiveMode[\"xLarge\"] = 3] = \"xLarge\";\n  ResponsiveMode[ResponsiveMode[\"xxLarge\"] = 4] = \"xxLarge\";\n  ResponsiveMode[ResponsiveMode[\"xxxLarge\"] = 5] = \"xxxLarge\";\n  ResponsiveMode[ResponsiveMode[\"unknown\"] = 999] = \"unknown\";\n})(ResponsiveMode || (ResponsiveMode = {}));\n\nvar RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\n\nvar _defaultMode;\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\n\n\nvar _lastMode;\n/**\n * Allows a server rendered scenario to provide a default responsive mode.\n */\n\n\nexport function setResponsiveMode(responsiveMode) {\n  _defaultMode = responsiveMode;\n}\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n */\n\nexport function initializeResponsiveMode(element) {\n  if (typeof window !== 'undefined') {\n    var currentWindow = element && getWindow(element) || window;\n    getResponsiveMode(currentWindow);\n  }\n}\nexport function getInitialResponsiveMode() {\n  return _defaultMode || _lastMode || ResponsiveMode.large;\n}\nexport function withResponsiveMode(ComposedComponent) {\n  var _a;\n\n  var resultClass = (_a =\n  /** @class */\n  function (_super) {\n    __extends(WithResponsiveMode, _super);\n\n    function WithResponsiveMode(props) {\n      var _this = _super.call(this, props) || this;\n\n      _this._onResize = function () {\n        var responsiveMode = getResponsiveMode(_this.context.window);\n\n        if (responsiveMode !== _this.state.responsiveMode) {\n          _this.setState({\n            responsiveMode: responsiveMode\n          });\n        }\n      };\n\n      _this._events = new EventGroup(_this);\n      _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);\n      _this.state = {\n        responsiveMode: getInitialResponsiveMode()\n      };\n      return _this;\n    }\n\n    WithResponsiveMode.prototype.componentDidMount = function () {\n      this._events.on(this.context.window, 'resize', this._onResize);\n\n      this._onResize();\n    };\n\n    WithResponsiveMode.prototype.componentWillUnmount = function () {\n      this._events.dispose();\n    };\n\n    WithResponsiveMode.prototype.render = function () {\n      var responsiveMode = this.state.responsiveMode;\n      return responsiveMode === ResponsiveMode.unknown ? null : React.createElement(ComposedComponent, __assign({\n        ref: this._updateComposedComponentRef,\n        responsiveMode: responsiveMode\n      }, this.props));\n    };\n\n    return WithResponsiveMode;\n  }(BaseDecorator), _a.contextType = WindowContext, _a);\n  return hoistStatics(ComposedComponent, resultClass);\n}\nexport function getResponsiveMode(currentWindow) {\n  var responsiveMode = ResponsiveMode.small;\n\n  if (currentWindow) {\n    try {\n      while (currentWindow.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    } // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n\n\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error('Content was rendered in a server environment without providing a default responsive mode. ' + 'Call setResponsiveMode to define what the responsive mode is.');\n    }\n  }\n\n  return responsiveMode;\n}","map":{"version":3,"mappings":"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","names":["React","BaseDecorator","getWindow","hoistStatics","EventGroup","WindowContext","ResponsiveMode","RESPONSIVE_MAX_CONSTRAINT","_defaultMode","_lastMode","setResponsiveMode","responsiveMode","initializeResponsiveMode","element","window","currentWindow","getResponsiveMode","getInitialResponsiveMode","large","withResponsiveMode","ComposedComponent","resultClass","__extends","props","_super","_this","context","state","setState","_events","_updateComposedComponentRef","bind","WithResponsiveMode","on","_onResize","dispose","unknown","__assign","ref","_a","small","innerWidth","e","undefined","Error"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\utilities\\src\\utilities\\decorators\\withResponsiveMode.tsx"],"sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\n\nexport interface IWithResponsiveModeState {\n  responsiveMode?: ResponsiveMode;\n}\n\nexport enum ResponsiveMode {\n  small = 0,\n  medium = 1,\n  large = 2,\n  xLarge = 3,\n  xxLarge = 4,\n  xxxLarge = 5,\n  unknown = 999,\n}\n\nconst RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nlet _defaultMode: ResponsiveMode | undefined;\n\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nlet _lastMode: ResponsiveMode | undefined;\n\n/**\n * Allows a server rendered scenario to provide a default responsive mode.\n */\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined): void {\n  _defaultMode = responsiveMode;\n}\n\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n */\nexport function initializeResponsiveMode(element?: HTMLElement): void {\n  if (typeof window !== 'undefined') {\n    const currentWindow = (element && getWindow(element)) || window;\n\n    getResponsiveMode(currentWindow);\n  }\n}\n\nexport function getInitialResponsiveMode() {\n  return _defaultMode || _lastMode || ResponsiveMode.large;\n}\n\nexport function withResponsiveMode<TProps extends { responsiveMode?: ResponsiveMode }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  const resultClass = class WithResponsiveMode extends BaseDecorator<TProps, IWithResponsiveModeState> {\n    public static contextType = WindowContext;\n    public context: React.ContextType<typeof WindowContext>;\n\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n      this._events = new EventGroup(this);\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n\n      this.state = {\n        responsiveMode: getInitialResponsiveMode(),\n      };\n    }\n\n    public componentDidMount(): void {\n      this._events.on(this.context.window, 'resize', this._onResize);\n      this._onResize();\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n    }\n\n    public render(): JSX.Element | null {\n      const { responsiveMode } = this.state;\n\n      return responsiveMode === ResponsiveMode.unknown ? null : (\n        <ComposedComponent\n          ref={this._updateComposedComponentRef}\n          responsiveMode={responsiveMode}\n          {...(this.props as any)}\n        />\n      );\n    }\n\n    private _onResize = () => {\n      const responsiveMode = getResponsiveMode(this.context.window);\n\n      if (responsiveMode !== this.state.responsiveMode) {\n        this.setState({\n          responsiveMode,\n        });\n      }\n    };\n  };\n  return hoistStatics(ComposedComponent, resultClass);\n}\n\nexport function getResponsiveMode(currentWindow: Window | undefined): ResponsiveMode {\n  let responsiveMode = ResponsiveMode.small;\n\n  if (currentWindow) {\n    try {\n      while (currentWindow.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    }\n\n    // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error(\n        'Content was rendered in a server environment without providing a default responsive mode. ' +\n          'Call setResponsiveMode to define what the responsive mode is.',\n      );\n    }\n  }\n\n  return responsiveMode;\n}\n"]},"metadata":{},"sourceType":"module"}