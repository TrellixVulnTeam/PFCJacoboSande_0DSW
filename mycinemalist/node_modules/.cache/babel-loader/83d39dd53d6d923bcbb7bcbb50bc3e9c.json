{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\n\nvar DelayedRender =\n/** @class */\nfunction (_super) {\n  __extends(DelayedRender, _super);\n\n  function DelayedRender(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      isRendered: false\n    };\n    return _this;\n  }\n\n  DelayedRender.prototype.componentDidMount = function () {\n    var _this = this;\n\n    var delay = this.props.delay;\n    this._timeoutId = window.setTimeout(function () {\n      _this.setState({\n        isRendered: true\n      });\n    }, delay);\n  };\n\n  DelayedRender.prototype.componentWillUnmount = function () {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  };\n\n  DelayedRender.prototype.render = function () {\n    return this.state.isRendered ? React.Children.only(this.props.children) : null;\n  };\n\n  DelayedRender.defaultProps = {\n    delay: 0\n  };\n  return DelayedRender;\n}(React.Component);\n\nexport { DelayedRender };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AA2BA;;;;;;;;;AAQA;AAAA;AAAA;EAAmCC;;EAOjC,uBAAYC,KAAZ,EAAsC;IAAtC,YACEC,kBAAMD,KAAN,KAAY,IADd;;IAEEE,KAAI,CAACC,KAAL,GAAa;MACXC,UAAU,EAAE;IADD,CAAb;;EAGD;;EAEMC,4CAAP;IAAA;;IACQ;IACN,KAAKC,UAAL,GAAkBC,MAAM,CAACC,UAAP,CAAkB;MAClCN,KAAI,CAACO,QAAL,CAAc;QACZL,UAAU,EAAE;MADA,CAAd;IAGD,CAJiB,EAIfM,KAJe,CAAlB;EAKD,CAPM;;EASAL,+CAAP;IACE,IAAI,KAAKC,UAAT,EAAqB;MACnBK,YAAY,CAAC,KAAKL,UAAN,CAAZ;IACD;EACF,CAJM;;EAMAD,iCAAP;IACE,OAAO,KAAKF,KAAL,CAAWC,UAAX,GAAyBN,KAAK,CAACc,QAAN,CAAeC,IAAf,CAAoB,KAAKb,KAAL,CAAWc,QAA/B,CAAzB,GAA+F,IAAtG;EACD,CAFM;;EA5BOT,6BAAe;IAC3BK,KAAK,EAAE;EADoB,CAAf;EA+BhB;AAAC,CAhCD,CAAmCZ,KAAK,CAACiB,SAAzC;;SAAaV","names":["React","__extends","props","_super","_this","state","isRendered","DelayedRender","_timeoutId","window","setTimeout","setState","delay","clearTimeout","Children","only","children","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\utilities\\src\\DelayedRender.tsx"],"sourcesContent":["import * as React from 'react';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}