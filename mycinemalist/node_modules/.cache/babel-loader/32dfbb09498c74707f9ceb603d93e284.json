{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, getRTL, initializeComponentRef, format } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { addYears, setMonth, getYearStart, getYearEnd, getMonthStart, getMonthEnd, compareDatePart } from '../../utilities/dateMath/DateMath';\nimport { Icon } from '../../Icon';\nimport * as stylesImport from './Calendar.scss';\nimport { CalendarYear } from './CalendarYear';\nvar styles = stylesImport;\nvar MONTHS_PER_ROW = 4;\n\nvar CalendarMonth =\n/** @class */\nfunction (_super) {\n  __extends(CalendarMonth, _super);\n\n  function CalendarMonth(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._navigatedMonthRef = React.createRef();\n\n    _this._onCalendarYearRef = function (ref) {\n      _this._calendarYearRef = ref;\n    };\n\n    _this._onKeyDown = function (callback, ev) {\n      if (ev.which === KeyCodes.enter) {\n        callback();\n      }\n    };\n\n    _this._onSelectYear = function (selectedYear) {\n      _this._focusOnUpdate = true;\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          onNavigateDate = _a.onNavigateDate,\n          maxDate = _a.maxDate,\n          minDate = _a.minDate;\n      var navYear = navigatedDate.getFullYear();\n\n      if (navYear !== selectedYear) {\n        var newNavigationDate = new Date(navigatedDate.getTime());\n        newNavigationDate.setFullYear(selectedYear); // for min and max dates, adjust the new navigation date - perhaps this should be\n        // checked on the master navigation date handler (i.e. in Calendar)\n\n        if (maxDate && newNavigationDate > maxDate) {\n          newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n        } else if (minDate && newNavigationDate < minDate) {\n          newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n        }\n\n        onNavigateDate(newNavigationDate, true);\n      }\n\n      _this.setState({\n        isYearPickerVisible: false\n      });\n    };\n\n    _this._yearToString = function (year) {\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          dateTimeFormatter = _a.dateTimeFormatter;\n\n      if (dateTimeFormatter) {\n        // create a date based on the current nav date\n        var yearFormattingDate = new Date(navigatedDate.getTime());\n        yearFormattingDate.setFullYear(year);\n        return dateTimeFormatter.formatYear(yearFormattingDate);\n      }\n\n      return String(year);\n    };\n\n    _this._yearRangeToString = function (yearRange) {\n      return _this._yearToString(yearRange.fromYear) + \" - \" + _this._yearToString(yearRange.toYear);\n    };\n\n    _this._yearRangeToNextDecadeLabel = function (yearRange) {\n      var strings = _this.props.strings;\n      return strings.nextYearRangeAriaLabel ? strings.nextYearRangeAriaLabel + \" \" + _this._yearRangeToString(yearRange) : '';\n    };\n\n    _this._yearRangeToPrevDecadeLabel = function (yearRange) {\n      var strings = _this.props.strings;\n      return strings.prevYearRangeAriaLabel ? strings.prevYearRangeAriaLabel + \" \" + _this._yearRangeToString(yearRange) : '';\n    };\n\n    _this._onRenderYear = function (year) {\n      return _this._yearToString(year);\n    };\n\n    _this._onSelectNextYear = function () {\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          onNavigateDate = _a.onNavigateDate;\n      onNavigateDate(addYears(navigatedDate, 1), false);\n    };\n\n    _this._onSelectNextYearKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectNextYear, ev);\n      }\n    };\n\n    _this._onSelectPrevYear = function () {\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          onNavigateDate = _a.onNavigateDate;\n      onNavigateDate(addYears(navigatedDate, -1), false);\n    };\n\n    _this._onSelectPrevYearKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectPrevYear, ev);\n      }\n    };\n\n    _this._onSelectMonthKeyDown = function (index) {\n      return function (ev) {\n        return _this._onKeyDown(function () {\n          return _this._onSelectMonth(index);\n        }, ev);\n      };\n    };\n\n    _this._onSelectMonth = function (newMonth) {\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          onNavigateDate = _a.onNavigateDate,\n          onHeaderSelect = _a.onHeaderSelect; // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n\n      if (onHeaderSelect) {\n        onHeaderSelect(true);\n      }\n\n      onNavigateDate(setMonth(navigatedDate, newMonth), true);\n    };\n\n    _this._onHeaderSelect = function () {\n      var _a = _this.props,\n          onHeaderSelect = _a.onHeaderSelect,\n          yearPickerHidden = _a.yearPickerHidden;\n\n      if (!yearPickerHidden) {\n        _this._focusOnUpdate = true;\n\n        _this.setState({\n          isYearPickerVisible: true\n        });\n      } else if (onHeaderSelect) {\n        onHeaderSelect(true);\n      }\n    };\n\n    _this._onYearPickerHeaderSelect = function (focus) {\n      _this._focusOnUpdate = focus;\n\n      _this.setState({\n        isYearPickerVisible: false\n      });\n    };\n\n    _this._onHeaderKeyDown = function (ev) {\n      if (_this._onHeaderSelect && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n        _this._onHeaderSelect();\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._selectMonthCallbacks = [];\n    props.strings.shortMonths.forEach(function (month, index) {\n      _this._selectMonthCallbacks[index] = _this._onSelectMonth.bind(_this, index);\n    });\n    _this._isCurrentMonth = _this._isCurrentMonth.bind(_this);\n    _this._onSelectNextYear = _this._onSelectNextYear.bind(_this);\n    _this._onSelectPrevYear = _this._onSelectPrevYear.bind(_this);\n    _this._onSelectMonth = _this._onSelectMonth.bind(_this);\n    _this.state = {\n      isYearPickerVisible: false\n    };\n    return _this;\n  }\n\n  CalendarMonth.prototype.componentDidUpdate = function () {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  };\n\n  CalendarMonth.prototype.render = function () {\n    var _a, _b;\n\n    var _this = this;\n\n    var _c = this.props,\n        navigatedDate = _c.navigatedDate,\n        selectedDate = _c.selectedDate,\n        strings = _c.strings,\n        today = _c.today,\n        highlightCurrentMonth = _c.highlightCurrentMonth,\n        highlightSelectedMonth = _c.highlightSelectedMonth,\n        navigationIcons = _c.navigationIcons,\n        dateTimeFormatter = _c.dateTimeFormatter,\n        minDate = _c.minDate,\n        maxDate = _c.maxDate,\n        yearPickerHidden = _c.yearPickerHidden;\n\n    if (this.state.isYearPickerVisible) {\n      // default the year picker to the current navigated date\n      var currentSelectedDate = navigatedDate ? navigatedDate.getFullYear() : undefined;\n      return React.createElement(CalendarYear, {\n        key: 'calendarYear_' + (currentSelectedDate && currentSelectedDate.toString()),\n        minYear: minDate ? minDate.getFullYear() : undefined,\n        maxYear: maxDate ? maxDate.getFullYear() : undefined,\n        onSelectYear: this._onSelectYear,\n        navigationIcons: navigationIcons,\n        onHeaderSelect: this._onYearPickerHeaderSelect,\n        selectedYear: currentSelectedDate,\n        onRenderYear: this._onRenderYear,\n        strings: {\n          rangeAriaLabel: this._yearRangeToString,\n          prevRangeAriaLabel: this._yearRangeToPrevDecadeLabel,\n          nextRangeAriaLabel: this._yearRangeToNextDecadeLabel,\n          headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel\n        },\n        ref: this._onCalendarYearRef\n      });\n    }\n\n    var rowIndexes = [];\n\n    for (var i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {\n      rowIndexes.push(i);\n    }\n\n    var leftNavigationIcon = navigationIcons.leftNavigation;\n    var rightNavigationIcon = navigationIcons.rightNavigation; // determine if previous/next years are in bounds\n\n    var isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;\n    var isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;\n    var yearString = dateTimeFormatter.formatYear(navigatedDate);\n    var headerAriaLabel = strings.monthPickerHeaderAriaLabel ? format(strings.monthPickerHeaderAriaLabel, yearString) : yearString;\n    return React.createElement(\"div\", {\n      className: css('ms-DatePicker-monthPicker', styles.monthPicker)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-header', styles.header)\n    }, this.props.onHeaderSelect || !yearPickerHidden ? React.createElement(\"div\", {\n      className: css('ms-DatePicker-currentYear js-showYearPicker', styles.currentYear, styles.headerToggleView),\n      onClick: this._onHeaderSelect,\n      onKeyDown: this._onHeaderKeyDown,\n      \"aria-label\": headerAriaLabel,\n      role: \"button\",\n      \"aria-atomic\": true,\n      \"aria-live\": \"polite\",\n      tabIndex: 0\n    }, dateTimeFormatter.formatYear(navigatedDate)) : React.createElement(\"div\", {\n      className: css('ms-DatePicker-currentYear js-showYearPicker', styles.currentYear)\n    }, dateTimeFormatter.formatYear(navigatedDate)), React.createElement(\"div\", {\n      className: css('ms-DatePicker-yearComponents', styles.yearComponents)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-navContainer', styles.navContainer)\n    }, React.createElement(\"button\", {\n      className: css('ms-DatePicker-prevYear js-prevYear', styles.prevYear, (_a = {}, _a['ms-DatePicker-prevYear--disabled ' + styles.prevYearIsDisabled] = !isPrevYearInBounds, _a)),\n      disabled: !isPrevYearInBounds,\n      onClick: isPrevYearInBounds ? this._onSelectPrevYear : undefined,\n      onKeyDown: isPrevYearInBounds ? this._onSelectPrevYearKeyDown : undefined,\n      title: strings.prevYearAriaLabel ? strings.prevYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, -1)) : undefined,\n      role: \"button\",\n      type: \"button\"\n    }, React.createElement(Icon, {\n      iconName: getRTL() ? rightNavigationIcon : leftNavigationIcon\n    })), React.createElement(\"button\", {\n      className: css('ms-DatePicker-nextYear js-nextYear', styles.nextYear, (_b = {}, _b['ms-DatePicker-nextYear--disabled ' + styles.nextYearIsDisabled] = !isNextYearInBounds, _b)),\n      disabled: !isNextYearInBounds,\n      onClick: isNextYearInBounds ? this._onSelectNextYear : undefined,\n      onKeyDown: isNextYearInBounds ? this._onSelectNextYearKeyDown : undefined,\n      title: strings.nextYearAriaLabel ? strings.nextYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, 1)) : undefined,\n      role: \"button\",\n      type: \"button\"\n    }, React.createElement(Icon, {\n      iconName: getRTL() ? leftNavigationIcon : rightNavigationIcon\n    }))))), React.createElement(FocusZone, null, React.createElement(\"div\", {\n      className: css('ms-DatePicker-optionGrid', styles.optionGrid),\n      role: \"grid\",\n      \"aria-readonly\": \"true\"\n    }, rowIndexes.map(function (rowNum) {\n      var monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);\n      return React.createElement(\"div\", {\n        key: 'monthRow_' + rowNum,\n        role: \"row\"\n      }, monthsForRow.map(function (month, index) {\n        var _a;\n\n        var monthIndex = rowNum * MONTHS_PER_ROW + index;\n        var indexedMonth = setMonth(navigatedDate, monthIndex);\n\n        var isCurrentMonth = _this._isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today);\n\n        var isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n        var isSelectedMonth = selectedDate.getMonth() === monthIndex;\n        var isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();\n        var isInBounds = (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) && (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);\n        return React.createElement(\"button\", {\n          role: 'gridcell',\n          className: css('ms-DatePicker-monthOption', styles.monthOption, (_a = {}, _a['ms-DatePicker-day--today ' + styles.monthIsCurrentMonth] = highlightCurrentMonth && isCurrentMonth, _a['ms-DatePicker-day--highlighted ' + styles.monthIsHighlighted] = (highlightCurrentMonth || highlightSelectedMonth) && isSelectedMonth && isSelectedYear, _a['ms-DatePicker-monthOption--disabled ' + styles.monthOptionIsDisabled] = !isInBounds, _a)),\n          disabled: !isInBounds,\n          key: monthIndex,\n          onClick: isInBounds ? _this._selectMonthCallbacks[monthIndex] : undefined,\n          onKeyDown: isInBounds ? _this._onSelectMonthKeyDown(monthIndex) : undefined,\n          \"aria-label\": dateTimeFormatter.formatMonthYear(indexedMonth, strings),\n          \"aria-selected\": isNavigatedMonth,\n          \"data-is-focusable\": isInBounds ? true : undefined,\n          ref: isNavigatedMonth ? _this._navigatedMonthRef : undefined,\n          type: \"button\"\n        }, month);\n      }));\n    }))));\n  };\n\n  CalendarMonth.prototype.focus = function () {\n    if (this._calendarYearRef) {\n      this._calendarYearRef.focus();\n    } else if (this._navigatedMonthRef.current) {\n      this._navigatedMonthRef.current.tabIndex = 0;\n\n      this._navigatedMonthRef.current.focus();\n    }\n  };\n\n  CalendarMonth.prototype._isCurrentMonth = function (month, year, today) {\n    return today.getFullYear() === year && today.getMonth() === month;\n  };\n\n  return CalendarMonth;\n}(React.Component);\n\nexport { CalendarMonth };","map":{"version":3,"mappings":"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","names":["React","KeyCodes","css","getRTL","initializeComponentRef","format","FocusZone","addYears","setMonth","getYearStart","getYearEnd","getMonthStart","getMonthEnd","compareDatePart","Icon","stylesImport","CalendarYear","styles","MONTHS_PER_ROW","__extends","props","_super","_this","createRef","ref","_calendarYearRef","callback","ev","which","enter","selectedYear","_focusOnUpdate","navigatedDate","onNavigateDate","maxDate","minDate","navYear","getFullYear","newNavigationDate","Date","getTime","setFullYear","getMonth","setState","isYearPickerVisible","year","dateTimeFormatter","yearFormattingDate","formatYear","String","yearRange","_yearToString","fromYear","toYear","strings","nextYearRangeAriaLabel","_yearRangeToString","prevYearRangeAriaLabel","_onKeyDown","_onSelectNextYear","_onSelectPrevYear","index","_onSelectMonth","newMonth","onHeaderSelect","yearPickerHidden","focus","_onHeaderSelect","space","_selectMonthCallbacks","shortMonths","forEach","month","bind","_isCurrentMonth","state","CalendarMonth","selectedDate","today","highlightCurrentMonth","highlightSelectedMonth","navigationIcons","currentSelectedDate","undefined","key","toString","minYear","maxYear","onSelectYear","_onSelectYear","_onYearPickerHeaderSelect","onRenderYear","_onRenderYear","rangeAriaLabel","prevRangeAriaLabel","_yearRangeToPrevDecadeLabel","nextRangeAriaLabel","_yearRangeToNextDecadeLabel","headerAriaLabelFormatString","yearPickerHeaderAriaLabel","_onCalendarYearRef","rowIndexes","i","length","push","leftNavigationIcon","leftNavigation","rightNavigationIcon","rightNavigation","isPrevYearInBounds","isNextYearInBounds","yearString","headerAriaLabel","monthPickerHeaderAriaLabel","className","monthPicker","header","currentYear","headerToggleView","onClick","onKeyDown","_onHeaderKeyDown","role","tabIndex","yearComponents","navContainer","prevYear","_a","prevYearIsDisabled","disabled","_onSelectPrevYearKeyDown","title","prevYearAriaLabel","type","iconName","nextYear","_b","nextYearIsDisabled","_onSelectNextYearKeyDown","nextYearAriaLabel","optionGrid","map","rowNum","monthsForRow","slice","monthIndex","indexedMonth","isCurrentMonth","isNavigatedMonth","isSelectedMonth","isSelectedYear","isInBounds","monthOption","monthIsCurrentMonth","monthIsHighlighted","monthOptionIsDisabled","_onSelectMonthKeyDown","formatMonthYear","_navigatedMonthRef","current","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Calendar\\CalendarMonth.tsx"],"sourcesContent":["import * as React from 'react';\nimport { KeyCodes, css, getRTL, IRefObject, initializeComponentRef, format } from '../../Utilities';\nimport { ICalendarStrings, ICalendarIconStrings, ICalendarFormatDateCallbacks } from './Calendar.types';\nimport { FocusZone } from '../../FocusZone';\nimport {\n  addYears,\n  setMonth,\n  getYearStart,\n  getYearEnd,\n  getMonthStart,\n  getMonthEnd,\n  compareDatePart,\n} from '../../utilities/dateMath/DateMath';\nimport { Icon } from '../../Icon';\nimport * as stylesImport from './Calendar.scss';\nimport { CalendarYear, ICalendarYearRange } from './CalendarYear';\nconst styles: any = stylesImport;\nconst MONTHS_PER_ROW: number = 4;\n\nexport interface ICalendarMonth {\n  focus(): void;\n}\n\nexport interface ICalendarMonthProps extends React.ClassAttributes<CalendarMonth> {\n  componentRef?: IRefObject<ICalendarMonth>;\n  navigatedDate: Date;\n  selectedDate: Date;\n  strings: ICalendarStrings;\n  onNavigateDate: (date: Date, focusOnNavigatedDay: boolean) => void;\n  today?: Date;\n  highlightCurrentMonth: boolean;\n  highlightSelectedMonth: boolean;\n  onHeaderSelect?: (focus: boolean) => void;\n  navigationIcons: ICalendarIconStrings;\n  dateTimeFormatter: ICalendarFormatDateCallbacks;\n  minDate?: Date;\n  maxDate?: Date;\n  yearPickerHidden?: boolean;\n}\n\nexport interface ICalendarMonthState {\n  /** State used to show/hide month picker */\n  isYearPickerVisible?: boolean;\n}\n\nexport class CalendarMonth extends React.Component<ICalendarMonthProps, ICalendarMonthState> {\n  /**\n   * @deprecated unused, prefer 'ref' and 'componentRef' of ICalendarMonthProps.\n   */\n  public refs: {\n    [key: string]: React.ReactInstance;\n    navigatedMonth: HTMLElement;\n  };\n\n  private _selectMonthCallbacks: (() => void)[];\n  private _calendarYearRef: CalendarYear;\n  private _navigatedMonthRef: React.RefObject<HTMLButtonElement> = React.createRef<HTMLButtonElement>();\n  private _focusOnUpdate: boolean;\n\n  public constructor(props: ICalendarMonthProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._selectMonthCallbacks = [];\n    props.strings.shortMonths.forEach((month, index) => {\n      this._selectMonthCallbacks[index] = this._onSelectMonth.bind(this, index);\n    });\n\n    this._isCurrentMonth = this._isCurrentMonth.bind(this);\n    this._onSelectNextYear = this._onSelectNextYear.bind(this);\n    this._onSelectPrevYear = this._onSelectPrevYear.bind(this);\n    this._onSelectMonth = this._onSelectMonth.bind(this);\n\n    this.state = { isYearPickerVisible: false };\n  }\n\n  public componentDidUpdate(): void {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      navigatedDate,\n      selectedDate,\n      strings,\n      today,\n      highlightCurrentMonth,\n      highlightSelectedMonth,\n      navigationIcons,\n      dateTimeFormatter,\n      minDate,\n      maxDate,\n      yearPickerHidden,\n    } = this.props;\n\n    if (this.state.isYearPickerVisible) {\n      // default the year picker to the current navigated date\n      const currentSelectedDate = navigatedDate ? navigatedDate.getFullYear() : undefined;\n      return (\n        <CalendarYear\n          key={'calendarYear_' + (currentSelectedDate && currentSelectedDate.toString())}\n          minYear={minDate ? minDate.getFullYear() : undefined}\n          maxYear={maxDate ? maxDate.getFullYear() : undefined}\n          onSelectYear={this._onSelectYear}\n          navigationIcons={navigationIcons}\n          onHeaderSelect={this._onYearPickerHeaderSelect}\n          selectedYear={currentSelectedDate}\n          onRenderYear={this._onRenderYear}\n          strings={{\n            rangeAriaLabel: this._yearRangeToString,\n            prevRangeAriaLabel: this._yearRangeToPrevDecadeLabel,\n            nextRangeAriaLabel: this._yearRangeToNextDecadeLabel,\n            headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel,\n          }}\n          ref={this._onCalendarYearRef}\n        />\n      );\n    }\n\n    const rowIndexes = [];\n    for (let i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {\n      rowIndexes.push(i);\n    }\n\n    const leftNavigationIcon = navigationIcons.leftNavigation;\n    const rightNavigationIcon = navigationIcons.rightNavigation;\n\n    // determine if previous/next years are in bounds\n    const isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;\n    const isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;\n\n    const yearString = dateTimeFormatter.formatYear(navigatedDate);\n    const headerAriaLabel = strings.monthPickerHeaderAriaLabel\n      ? format(strings.monthPickerHeaderAriaLabel, yearString)\n      : yearString;\n\n    return (\n      <div className={css('ms-DatePicker-monthPicker', styles.monthPicker)}>\n        <div className={css('ms-DatePicker-header', styles.header)}>\n          {this.props.onHeaderSelect || !yearPickerHidden ? (\n            <div\n              className={css(\n                'ms-DatePicker-currentYear js-showYearPicker',\n                styles.currentYear,\n                styles.headerToggleView,\n              )}\n              onClick={this._onHeaderSelect}\n              onKeyDown={this._onHeaderKeyDown}\n              aria-label={headerAriaLabel}\n              role=\"button\"\n              aria-atomic={true}\n              aria-live=\"polite\"\n              tabIndex={0}\n            >\n              {dateTimeFormatter.formatYear(navigatedDate)}\n            </div>\n          ) : (\n            <div className={css('ms-DatePicker-currentYear js-showYearPicker', styles.currentYear)}>\n              {dateTimeFormatter.formatYear(navigatedDate)}\n            </div>\n          )}\n          <div className={css('ms-DatePicker-yearComponents', styles.yearComponents)}>\n            <div className={css('ms-DatePicker-navContainer', styles.navContainer)}>\n              <button\n                className={css('ms-DatePicker-prevYear js-prevYear', styles.prevYear, {\n                  ['ms-DatePicker-prevYear--disabled ' + styles.prevYearIsDisabled]: !isPrevYearInBounds,\n                })}\n                disabled={!isPrevYearInBounds}\n                onClick={isPrevYearInBounds ? this._onSelectPrevYear : undefined}\n                onKeyDown={isPrevYearInBounds ? this._onSelectPrevYearKeyDown : undefined}\n                title={\n                  strings.prevYearAriaLabel\n                    ? strings.prevYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, -1))\n                    : undefined\n                }\n                role=\"button\"\n                type=\"button\"\n              >\n                <Icon iconName={getRTL() ? rightNavigationIcon : leftNavigationIcon} />\n              </button>\n              <button\n                className={css('ms-DatePicker-nextYear js-nextYear', styles.nextYear, {\n                  ['ms-DatePicker-nextYear--disabled ' + styles.nextYearIsDisabled]: !isNextYearInBounds,\n                })}\n                disabled={!isNextYearInBounds}\n                onClick={isNextYearInBounds ? this._onSelectNextYear : undefined}\n                onKeyDown={isNextYearInBounds ? this._onSelectNextYearKeyDown : undefined}\n                title={\n                  strings.nextYearAriaLabel\n                    ? strings.nextYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, 1))\n                    : undefined\n                }\n                role=\"button\"\n                type=\"button\"\n              >\n                <Icon iconName={getRTL() ? leftNavigationIcon : rightNavigationIcon} />\n              </button>\n            </div>\n          </div>\n        </div>\n        <FocusZone>\n          <div className={css('ms-DatePicker-optionGrid', styles.optionGrid)} role=\"grid\" aria-readonly=\"true\">\n            {rowIndexes.map((rowNum: number) => {\n              const monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);\n              return (\n                <div key={'monthRow_' + rowNum} role=\"row\">\n                  {monthsForRow.map((month: string, index: number) => {\n                    const monthIndex = rowNum * MONTHS_PER_ROW + index;\n                    const indexedMonth = setMonth(navigatedDate, monthIndex);\n                    const isCurrentMonth = this._isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today!);\n                    const isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n                    const isSelectedMonth = selectedDate.getMonth() === monthIndex;\n                    const isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();\n                    const isInBounds =\n                      (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) &&\n                      (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);\n\n                    return (\n                      <button\n                        role={'gridcell'}\n                        className={css('ms-DatePicker-monthOption', styles.monthOption, {\n                          ['ms-DatePicker-day--today ' + styles.monthIsCurrentMonth]:\n                            highlightCurrentMonth && isCurrentMonth!,\n                          ['ms-DatePicker-day--highlighted ' + styles.monthIsHighlighted]:\n                            (highlightCurrentMonth || highlightSelectedMonth) && isSelectedMonth && isSelectedYear,\n                          ['ms-DatePicker-monthOption--disabled ' + styles.monthOptionIsDisabled]: !isInBounds,\n                        })}\n                        disabled={!isInBounds}\n                        key={monthIndex}\n                        onClick={isInBounds ? this._selectMonthCallbacks[monthIndex] : undefined}\n                        onKeyDown={isInBounds ? this._onSelectMonthKeyDown(monthIndex) : undefined}\n                        aria-label={dateTimeFormatter.formatMonthYear(indexedMonth, strings)}\n                        aria-selected={isNavigatedMonth}\n                        data-is-focusable={isInBounds ? true : undefined}\n                        ref={isNavigatedMonth ? this._navigatedMonthRef : undefined}\n                        type=\"button\"\n                      >\n                        {month}\n                      </button>\n                    );\n                  })}\n                </div>\n              );\n            })}\n          </div>\n        </FocusZone>\n      </div>\n    );\n  }\n\n  public focus() {\n    if (this._calendarYearRef) {\n      this._calendarYearRef.focus();\n    } else if (this._navigatedMonthRef.current) {\n      this._navigatedMonthRef.current.tabIndex = 0;\n      this._navigatedMonthRef.current.focus();\n    }\n  }\n\n  private _onCalendarYearRef = (ref: CalendarYear) => {\n    this._calendarYearRef = ref;\n  };\n\n  private _isCurrentMonth(month: number, year: number, today: Date): boolean {\n    return today.getFullYear() === year && today.getMonth() === month;\n  }\n\n  private _onKeyDown = (callback: () => void, ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter) {\n      callback();\n    }\n  };\n\n  private _onSelectYear = (selectedYear: number) => {\n    this._focusOnUpdate = true;\n    const { navigatedDate, onNavigateDate, maxDate, minDate } = this.props;\n    const navYear = navigatedDate.getFullYear();\n    if (navYear !== selectedYear) {\n      let newNavigationDate = new Date(navigatedDate.getTime());\n      newNavigationDate.setFullYear(selectedYear);\n      // for min and max dates, adjust the new navigation date - perhaps this should be\n      // checked on the master navigation date handler (i.e. in Calendar)\n      if (maxDate && newNavigationDate > maxDate) {\n        newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n      } else if (minDate && newNavigationDate < minDate) {\n        newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n      }\n      onNavigateDate(newNavigationDate, true);\n    }\n    this.setState({ isYearPickerVisible: false });\n  };\n\n  private _yearToString = (year: number) => {\n    const { navigatedDate, dateTimeFormatter } = this.props;\n    if (dateTimeFormatter) {\n      // create a date based on the current nav date\n      const yearFormattingDate = new Date(navigatedDate.getTime());\n      yearFormattingDate.setFullYear(year);\n      return dateTimeFormatter.formatYear(yearFormattingDate);\n    }\n    return String(year);\n  };\n\n  private _yearRangeToString = (yearRange: ICalendarYearRange) => {\n    return `${this._yearToString(yearRange.fromYear)} - ${this._yearToString(yearRange.toYear)}`;\n  };\n\n  private _yearRangeToNextDecadeLabel = (yearRange: ICalendarYearRange) => {\n    const { strings } = this.props;\n    return strings.nextYearRangeAriaLabel\n      ? `${strings.nextYearRangeAriaLabel} ${this._yearRangeToString(yearRange)}`\n      : '';\n  };\n\n  private _yearRangeToPrevDecadeLabel = (yearRange: ICalendarYearRange) => {\n    const { strings } = this.props;\n    return strings.prevYearRangeAriaLabel\n      ? `${strings.prevYearRangeAriaLabel} ${this._yearRangeToString(yearRange)}`\n      : '';\n  };\n\n  private _onRenderYear = (year: number) => {\n    return this._yearToString(year);\n  };\n\n  private _onSelectNextYear = (): void => {\n    const { navigatedDate, onNavigateDate } = this.props;\n    onNavigateDate(addYears(navigatedDate, 1), false);\n  };\n\n  private _onSelectNextYearKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter) {\n      this._onKeyDown(this._onSelectNextYear, ev);\n    }\n  };\n\n  private _onSelectPrevYear = (): void => {\n    const { navigatedDate, onNavigateDate } = this.props;\n    onNavigateDate(addYears(navigatedDate, -1), false);\n  };\n\n  private _onSelectPrevYearKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter) {\n      this._onKeyDown(this._onSelectPrevYear, ev);\n    }\n  };\n\n  private _onSelectMonthKeyDown = (index: number): ((ev: React.KeyboardEvent<HTMLElement>) => void) => {\n    return (ev: React.KeyboardEvent<HTMLElement>) => this._onKeyDown(() => this._onSelectMonth(index), ev);\n  };\n\n  private _onSelectMonth = (newMonth: number): void => {\n    const { navigatedDate, onNavigateDate, onHeaderSelect } = this.props;\n\n    // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n    if (onHeaderSelect) {\n      onHeaderSelect(true);\n    }\n    onNavigateDate(setMonth(navigatedDate, newMonth), true);\n  };\n\n  private _onHeaderSelect = (): void => {\n    const { onHeaderSelect, yearPickerHidden } = this.props;\n    if (!yearPickerHidden) {\n      this._focusOnUpdate = true;\n      this.setState({ isYearPickerVisible: true });\n    } else if (onHeaderSelect) {\n      onHeaderSelect(true);\n    }\n  };\n\n  private _onYearPickerHeaderSelect = (focus: boolean): void => {\n    this._focusOnUpdate = focus;\n    this.setState({ isYearPickerVisible: false });\n  };\n\n  private _onHeaderKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (this._onHeaderSelect && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n      this._onHeaderSelect();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}