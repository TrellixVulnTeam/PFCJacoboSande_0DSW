{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { getId, toMatrix, classNamesFunction, getNativeProps, htmlElementProperties, initializeComponentRef } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nvar getClassNames = classNamesFunction();\n\nvar ButtonGridBase =\n/** @class */\nfunction (_super) {\n  __extends(ButtonGridBase, _super);\n\n  function ButtonGridBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    initializeComponentRef(_this);\n    _this._id = props.id || getId();\n    return _this;\n  }\n\n  ButtonGridBase.prototype.render = function () {\n    var _this = this;\n\n    var props = this.props;\n    var items = props.items,\n        columnCount = props.columnCount,\n        onRenderItem = props.onRenderItem,\n\n    /* eslint-disable deprecation/deprecation */\n    _a = props.ariaPosInSet,\n\n    /* eslint-disable deprecation/deprecation */\n    ariaPosInSet = _a === void 0 ? props.positionInSet : _a,\n        _b = props.ariaSetSize,\n        ariaSetSize = _b === void 0 ? props.setSize : _b,\n\n    /* eslint-enable deprecation/deprecation */\n    styles = props.styles,\n        doNotContainWithinFocusZone = props.doNotContainWithinFocusZone;\n    var htmlProps = getNativeProps(this.props, htmlElementProperties, // avoid applying onBlur on the table if it's being used in the FocusZone\n    doNotContainWithinFocusZone ? [] : ['onBlur']);\n    var classNames = getClassNames(styles, {\n      theme: this.props.theme\n    }); // Array to store the cells in the correct row index\n\n    var rowsOfItems = toMatrix(items, columnCount);\n    var content = React.createElement(\"table\", __assign({\n      \"aria-posinset\": ariaPosInSet,\n      \"aria-setsize\": ariaSetSize,\n      id: this._id,\n      role: \"grid\"\n    }, htmlProps, {\n      className: classNames.root\n    }), React.createElement(\"tbody\", null, rowsOfItems.map(function (rows, rowIndex) {\n      return React.createElement(\"tr\", {\n        role: 'row',\n        key: _this._id + '-' + rowIndex + '-row'\n      }, rows.map(function (cell, cellIndex) {\n        return React.createElement(\"td\", {\n          role: 'presentation',\n          key: _this._id + '-' + cellIndex + '-cell',\n          className: classNames.tableCell\n        }, onRenderItem(cell, cellIndex));\n      }));\n    }))); // Create the table/grid\n\n    return doNotContainWithinFocusZone ? content : React.createElement(FocusZone, {\n      isCircularNavigation: this.props.shouldFocusCircularNavigate,\n      className: classNames.focusedContainer,\n      onBlur: this.props.onBlur\n    }, content);\n  };\n\n  return ButtonGridBase;\n}(React.Component);\n\nexport { ButtonGridBase };\n/**\n * @deprecated - use ButtonGridBase instead\n */\n\nexport var GridBase = ButtonGridBase;","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,KADF,EAEEC,QAFF,EAGEC,kBAHF,EAIEC,cAJF,EAKEC,qBALF,EAMEC,sBANF,QAOO,iBAPP;AAQA,SAASC,SAAT,QAA0B,iBAA1B;AAGA,IAAMC,aAAa,GAAGL,kBAAkB,EAAxC;;AAEA;AAAA;AAAA;EAAoCM;;EAGlC,wBAAYC,KAAZ,EAAmC;IAAnC,YACEC,kBAAMD,KAAN,KAAY,IADd;;IAGEJ,sBAAsB,CAACM,KAAD,CAAtB;IACAA,KAAI,CAACC,GAAL,GAAWH,KAAK,CAACI,EAAN,IAAYb,KAAK,EAA5B;;EACD;;EAEMc,kCAAP;IAAA;;IACE,IAAML,KAAK,GAAG,KAAKA,KAAnB;IAEE;IAAA,IACAM,+BADA;IAAA,IAEAC,iCAFA;;IAIA;IACAC,uBALA;;IAIA;IACAC,uDALA;IAAA,IAMAC,sBANA;IAAA,IAMAC,gDANA;;IAOA;IAEAC,qBATA;IAAA,IAUAC,+DAVA;IAaF,IAAMC,SAAS,GAAGpB,cAAc,CAC9B,KAAKM,KADyB,EAE9BL,qBAF8B,EAG9B;IACAkB,2BAA2B,GAAG,EAAH,GAAQ,CAAC,QAAD,CAJL,CAAhC;IAOA,IAAME,UAAU,GAAGjB,aAAa,CAACc,MAAD,EAAU;MAAEI,KAAK,EAAE,KAAKhB,KAAL,CAAWgB;IAApB,CAAV,CAAhC,CAvBF,CAyBE;;IACA,IAAMC,WAAW,GAAYzB,QAAQ,CAAC0B,KAAD,EAAQZ,WAAR,CAArC;IAEA,IAAMa,OAAO,GACX7B;MAAA,iBACiBmB,YADjB;MAC6B,gBACbE,WAFhB;MAGEP,EAAE,EAAE,KAAKD,GAHX;MAIEiB,IAAI,EAAC;IAJP,GAKMN,SALN,EAKe;MACbO,SAAS,EAAEN,UAAU,CAACO;IADT,CALf,GAQEhC,mCACG2B,WAAW,CAACM,GAAZ,CAAgB,UAACC,IAAD,EAAcC,QAAd,EAA8B;MAC7C,OACEnC;QAAI8B,IAAI,EAAE,KAAV;QAAiBM,GAAG,EAAExB,KAAI,CAACC,GAAL,GAAW,GAAX,GAAiBsB,QAAjB,GAA4B;MAAlD,GACGD,IAAI,CAACD,GAAL,CAAS,UAACI,IAAD,EAAYC,SAAZ,EAA6B;QACrC,OACEtC;UACE8B,IAAI,EAAE,cADR;UAEEM,GAAG,EAAExB,KAAI,CAACC,GAAL,GAAW,GAAX,GAAiByB,SAAjB,GAA6B,OAFpC;UAGEP,SAAS,EAAEN,UAAU,CAACc;QAHxB,GAKGtB,YAAY,CAACoB,IAAD,EAAOC,SAAP,CALf,CADF;MASD,CAVA,CADH,CADF;IAeD,CAhBA,CADH,CARF,CADF,CA5BF,CA2DE;;IACA,OAAOf,2BAA2B,GAChCM,OADgC,GAGhC7B,oBAACO,SAAD,EAAU;MACRiC,oBAAoB,EAAE,KAAK9B,KAAL,CAAW+B,2BADzB;MAERV,SAAS,EAAEN,UAAU,CAACiB,gBAFd;MAGRC,MAAM,EAAE,KAAKjC,KAAL,CAAWiC;IAHX,CAAV,EAKGd,OALH,CAHF;EAWD,CAvEM;;EAwET;AAAC,CAlFD,CAAoC7B,KAAK,CAAC4C,SAA1C;;;AAoFA;;;;AAGA,OAAO,IAAMC,QAAQ,GAAG9B,cAAjB","names":["React","getId","toMatrix","classNamesFunction","getNativeProps","htmlElementProperties","initializeComponentRef","FocusZone","getClassNames","__extends","props","_super","_this","_id","id","ButtonGridBase","columnCount","onRenderItem","_a","ariaPosInSet","_b","ariaSetSize","styles","doNotContainWithinFocusZone","htmlProps","classNames","theme","rowsOfItems","items","content","role","className","root","map","rows","rowIndex","key","cell","cellIndex","tableCell","isCircularNavigation","shouldFocusCircularNavigate","focusedContainer","onBlur","Component","GridBase"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\utilities\\src\\utilities\\ButtonGrid\\ButtonGrid.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  getId,\n  toMatrix,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { IButtonGrid, IButtonGridProps, IButtonGridStyleProps, IButtonGridStyles } from './ButtonGrid.types';\n\nconst getClassNames = classNamesFunction<IButtonGridStyleProps, IButtonGridStyles>();\n\nexport class ButtonGridBase extends React.Component<IButtonGridProps, {}> implements IButtonGrid {\n  private _id: string;\n\n  constructor(props: IButtonGridProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._id = props.id || getId();\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const {\n      items,\n      columnCount,\n      onRenderItem,\n\n      /* eslint-disable deprecation/deprecation */\n      ariaPosInSet = props.positionInSet,\n      ariaSetSize = props.setSize,\n      /* eslint-enable deprecation/deprecation */\n\n      styles,\n      doNotContainWithinFocusZone,\n    } = props;\n\n    const htmlProps = getNativeProps<React.HTMLAttributes<HTMLTableElement>>(\n      this.props,\n      htmlElementProperties,\n      // avoid applying onBlur on the table if it's being used in the FocusZone\n      doNotContainWithinFocusZone ? [] : ['onBlur'],\n    );\n\n    const classNames = getClassNames(styles!, { theme: this.props.theme! });\n\n    // Array to store the cells in the correct row index\n    const rowsOfItems: any[][] = toMatrix(items, columnCount);\n\n    const content = (\n      <table\n        aria-posinset={ariaPosInSet}\n        aria-setsize={ariaSetSize}\n        id={this._id}\n        role=\"grid\"\n        {...htmlProps}\n        className={classNames.root}\n      >\n        <tbody>\n          {rowsOfItems.map((rows: any[], rowIndex: number) => {\n            return (\n              <tr role={'row'} key={this._id + '-' + rowIndex + '-row'}>\n                {rows.map((cell: any, cellIndex: number) => {\n                  return (\n                    <td\n                      role={'presentation'}\n                      key={this._id + '-' + cellIndex + '-cell'}\n                      className={classNames.tableCell}\n                    >\n                      {onRenderItem(cell, cellIndex)}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n\n    // Create the table/grid\n    return doNotContainWithinFocusZone ? (\n      content\n    ) : (\n      <FocusZone\n        isCircularNavigation={this.props.shouldFocusCircularNavigate}\n        className={classNames.focusedContainer}\n        onBlur={this.props.onBlur}\n      >\n        {content}\n      </FocusZone>\n    );\n  }\n}\n\n/**\n * @deprecated - use ButtonGridBase instead\n */\nexport const GridBase = ButtonGridBase;\n"]},"metadata":{},"sourceType":"module"}