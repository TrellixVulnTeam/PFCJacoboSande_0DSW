{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport * as React from 'react';\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */\n\nexport function useMergedRefs() {\n  var refs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n\n  var mergedCallback = React.useCallback(function (value) {\n    // Update the \"current\" prop hanging on the function.\n    mergedCallback.current = value;\n\n    for (var _i = 0, refs_1 = refs; _i < refs_1.length; _i++) {\n      var ref = refs_1[_i];\n\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        // work around the immutability of the React.Ref type\n        ref.current = value;\n      }\n    }\n  }, __spreadArrays(refs));\n  return mergedCallback;\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAQA;;;;;;;AAMA,OAAM,SAAUC,aAAV,GAAuB;AAAI;;OAAA,yCAAqC;AAArCC;;;AAC/B,MAAMC,cAAc,GAA0BH,KAAK,CAACI,WAAN,CAC5C,UAACC,KAAD,EAAS;AACP;AACEF,kBAAwD,CAACG,OAAzD,GAAmED,KAAnE;;AAEF,SAAkB,yBAAlB,EAAkBE,kBAAlB,EAAkBA,IAAlB,EAAwB;AAAnB,UAAMC,GAAG,aAAT;;AACH,UAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,WAAG,CAACH,KAAD,CAAH;AACD,OAFD,MAEO,IAAIG,GAAJ,EAAS;AACd;AACEA,WAA6C,CAACF,OAA9C,GAAwDD,KAAxD;AACH;AACF;AACF,GAb2C,EAa3CI,eAEGP,IAFH,CAb2C,CAA9C;AAkBA,SAAOC,cAAP;AACD","names":["React","useMergedRefs","refs","mergedCallback","useCallback","value","current","_i","ref","__spreadArrays"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\react-hooks\\src\\useMergedRefs.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * A Ref function which can be treated like a ref object in that it has an attached\n * current property, which will be updated as the ref is evaluated.\n */\nexport type RefObjectFunction<T> = React.RefObject<T> & ((value: T) => void);\n\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */\nexport function useMergedRefs<T>(...refs: (React.Ref<T> | undefined)[]): RefObjectFunction<T> {\n  const mergedCallback: RefObjectFunction<T> = (React.useCallback(\n    (value: T) => {\n      // Update the \"current\" prop hanging on the function.\n      ((mergedCallback as unknown) as React.MutableRefObject<T>).current = value;\n\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref) {\n          // work around the immutability of the React.Ref type\n          ((ref as unknown) as React.MutableRefObject<T>).current = value;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive\n    [...refs],\n  ) as unknown) as RefObjectFunction<T>;\n\n  return mergedCallback;\n}\n"]},"metadata":{},"sourceType":"module"}