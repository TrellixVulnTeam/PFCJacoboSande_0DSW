{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { DayOfWeek, FirstWeekOfYear, DateRangeType } from '../../utilities/dateValues/DateValues';\nimport { CalendarDay } from './CalendarDay';\nimport { CalendarMonth } from './CalendarMonth';\nimport { compareDates, getDateRangeArray } from '../../utilities/dateMath/DateMath';\nimport { css, elementContains, KeyCodes, getNativeProps, divProperties, initializeComponentRef, FocusRects } from '../../Utilities';\nimport * as stylesImport from './Calendar.scss';\nvar styles = stylesImport;\nvar leftArrow = 'Up';\nvar rightArrow = 'Down';\nvar closeIcon = 'CalculatorMultiply';\nvar iconStrings = {\n  leftNavigation: leftArrow,\n  rightNavigation: rightArrow,\n  closeIcon: closeIcon\n};\nvar defaultWorkWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\nvar dateTimeFormatterCallbacks = {\n  formatMonthDayYear: function formatMonthDayYear(date, strings) {\n    return strings.months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();\n  },\n  formatMonthYear: function formatMonthYear(date, strings) {\n    return strings.months[date.getMonth()] + ' ' + date.getFullYear();\n  },\n  formatDay: function formatDay(date) {\n    return date.getDate().toString();\n  },\n  formatYear: function formatYear(date) {\n    return date.getFullYear().toString();\n  }\n};\n\nvar Calendar =\n/** @class */\nfunction (_super) {\n  __extends(Calendar, _super);\n\n  function Calendar(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._dayPicker = React.createRef();\n    _this._monthPicker = React.createRef();\n    _this._hasFocus = false;\n\n    _this._onBlur = function (event) {\n      if (!elementContains(event.currentTarget, event.relatedTarget)) {\n        _this._hasFocus = false;\n        _this.props.onBlur && _this.props.onBlur(event);\n      }\n    };\n\n    _this._onFocus = function (event) {\n      if (!_this._hasFocus) {\n        _this._hasFocus = true;\n        _this.props.onFocus && _this.props.onFocus(event);\n      }\n    };\n\n    _this._navigateDayPickerDay = function (date) {\n      _this.setState({\n        navigatedDayDate: date,\n        navigatedMonthDate: date\n      });\n    };\n\n    _this._navigateMonthPickerDay = function (date) {\n      _this.setState({\n        navigatedMonthDate: date\n      });\n    };\n\n    _this._onNavigateDayDate = function (date, focusOnNavigatedDay) {\n      _this._navigateDayPickerDay(date);\n\n      _this._focusOnUpdate = focusOnNavigatedDay;\n    };\n\n    _this._onNavigateMonthDate = function (date, focusOnNavigatedDay) {\n      if (!focusOnNavigatedDay) {\n        _this._navigateMonthPickerDay(date);\n\n        _this._focusOnUpdate = focusOnNavigatedDay;\n        return;\n      }\n\n      var monthPickerOnly = !_this.props.showMonthPickerAsOverlay && !_this.props.isDayPickerVisible;\n\n      if (monthPickerOnly) {\n        _this._onSelectDate(date);\n      }\n\n      _this._navigateDayPickerDay(date);\n    };\n\n    _this._onSelectDate = function (date, selectedDateRangeArray) {\n      var onSelectDate = _this.props.onSelectDate;\n\n      _this.setState({\n        selectedDate: date\n      });\n\n      if (onSelectDate) {\n        onSelectDate(date, selectedDateRangeArray);\n      }\n    };\n\n    _this._onHeaderSelect = function (focus) {\n      _this.setState({\n        isDayPickerVisible: !_this.state.isDayPickerVisible,\n        isMonthPickerVisible: !_this.state.isMonthPickerVisible\n      });\n\n      if (focus) {\n        _this._focusOnUpdate = true;\n      }\n    };\n\n    _this._onGotoToday = function () {\n      var _a = _this.props,\n          dateRangeType = _a.dateRangeType,\n          firstDayOfWeek = _a.firstDayOfWeek,\n          today = _a.today,\n          workWeekDays = _a.workWeekDays,\n          selectDateOnClick = _a.selectDateOnClick;\n\n      if (selectDateOnClick) {\n        // When using Defaultprops, TypeScript doesn't know that React is going to inject defaults\n        // so we use exclamation mark as a hint to the type checker (see link below)\n        // https://decembersoft.com/posts/error-ts2532-optional-react-component-props-in-typescript/\n        var dates = getDateRangeArray(today, dateRangeType, firstDayOfWeek, workWeekDays);\n\n        _this._onSelectDate(today, dates);\n      }\n\n      _this._navigateDayPickerDay(today);\n\n      _this._focusOnUpdate = true;\n    };\n\n    _this._onGotoTodayClick = function (ev) {\n      _this._onGotoToday();\n    };\n\n    _this._onGotoTodayKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        ev.preventDefault();\n\n        _this._onGotoToday();\n      }\n    };\n\n    _this._onDatePickerPopupKeyDown = function (ev) {\n      switch (ev.which) {\n        case KeyCodes.enter:\n          ev.preventDefault();\n          break;\n\n        case KeyCodes.backspace:\n          ev.preventDefault();\n          break;\n\n        case KeyCodes.escape:\n          _this._handleEscKey(ev);\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this._handleEscKey = function (ev) {\n      if (_this.props.onDismiss) {\n        _this.props.onDismiss();\n      }\n    };\n\n    initializeComponentRef(_this);\n    var currentDate = props.value && !isNaN(props.value.getTime()) ? props.value : props.today || new Date();\n    _this.state = {\n      selectedDate: currentDate,\n      navigatedDayDate: currentDate,\n      navigatedMonthDate: currentDate,\n\n      /** When showMonthPickerAsOverlay is active it overrides isMonthPickerVisible/isDayPickerVisible props\n       (These props permanently set the visibility of their respective calendars). */\n      isMonthPickerVisible: _this.props.showMonthPickerAsOverlay ? false : _this.props.isMonthPickerVisible,\n      isDayPickerVisible: _this.props.showMonthPickerAsOverlay ? true : _this.props.isDayPickerVisible\n    };\n    _this._focusOnUpdate = false;\n    return _this;\n  }\n\n  Calendar.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n    var autoNavigateOnSelection = nextProps.autoNavigateOnSelection,\n        value = nextProps.value,\n        _a = nextProps.today,\n        today = _a === void 0 ? new Date() : _a; // Make sure auto-navigation is supported for programmatic changes to selected date, i.e.,\n    // if selected date is updated via props, we may need to modify the navigated date\n\n    var overrideNavigatedDate = autoNavigateOnSelection && !compareDates(value, this.props.value);\n\n    if (overrideNavigatedDate) {\n      this.setState({\n        navigatedMonthDate: value,\n        navigatedDayDate: value\n      });\n    }\n\n    this.setState({\n      selectedDate: value || today\n    });\n  };\n\n  Calendar.prototype.componentDidUpdate = function () {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  };\n\n  Calendar.prototype.render = function () {\n    var _a;\n\n    var rootClass = 'ms-DatePicker';\n    var _b = this.props,\n        firstDayOfWeek = _b.firstDayOfWeek,\n        dateRangeType = _b.dateRangeType,\n        strings = _b.strings,\n        showMonthPickerAsOverlay = _b.showMonthPickerAsOverlay,\n        autoNavigateOnSelection = _b.autoNavigateOnSelection,\n        showGoToToday = _b.showGoToToday,\n        highlightCurrentMonth = _b.highlightCurrentMonth,\n        highlightSelectedMonth = _b.highlightSelectedMonth,\n        navigationIcons = _b.navigationIcons,\n        minDate = _b.minDate,\n        maxDate = _b.maxDate,\n        restrictedDates = _b.restrictedDates,\n        className = _b.className,\n        showCloseButton = _b.showCloseButton,\n        allFocusable = _b.allFocusable,\n        yearPickerHidden = _b.yearPickerHidden,\n        today = _b.today;\n    var nativeProps = getNativeProps(this.props, divProperties, ['value']);\n    var _c = this.state,\n        selectedDate = _c.selectedDate,\n        navigatedDayDate = _c.navigatedDayDate,\n        navigatedMonthDate = _c.navigatedMonthDate,\n        isMonthPickerVisible = _c.isMonthPickerVisible,\n        isDayPickerVisible = _c.isDayPickerVisible;\n    var onHeaderSelect = showMonthPickerAsOverlay ? this._onHeaderSelect : undefined;\n    var monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;\n    var overlayedWithButton = showMonthPickerAsOverlay && showGoToToday;\n    var goTodayEnabled = showGoToToday;\n\n    if (goTodayEnabled && navigatedDayDate && navigatedMonthDate && today) {\n      goTodayEnabled = navigatedDayDate.getFullYear() !== today.getFullYear() || navigatedDayDate.getMonth() !== today.getMonth() || navigatedMonthDate.getFullYear() !== today.getFullYear() || navigatedMonthDate.getMonth() !== today.getMonth();\n    }\n\n    return React.createElement(\"div\", {\n      className: css(rootClass, styles.root, className),\n      role: \"application\"\n    }, React.createElement(\"div\", __assign({}, nativeProps, {\n      onBlur: this._onBlur,\n      onFocus: this._onFocus,\n      className: css('ms-DatePicker-picker ms-DatePicker-picker--opened ms-DatePicker-picker--focused', styles.picker, styles.pickerIsOpened, styles.pickerIsFocused, isMonthPickerVisible && 'ms-DatePicker-monthPickerVisible ' + styles.monthPickerVisible, isMonthPickerVisible && isDayPickerVisible && 'ms-DatePicker-calendarsInline ' + styles.calendarsInline, monthPickerOnly && 'ms-DatePicker-monthPickerOnly ' + styles.monthPickerOnly, showMonthPickerAsOverlay && 'ms-DatePicker-monthPickerAsOverlay ' + styles.monthPickerAsOverlay)\n    }), React.createElement(\"div\", {\n      className: css('ms-DatePicker-holder ms-slideDownIn10', styles.holder, overlayedWithButton && styles.holderWithButton),\n      onKeyDown: this._onDatePickerPopupKeyDown\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-frame', styles.frame)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-wrap', styles.wrap, showGoToToday && styles.goTodaySpacing)\n    }, isDayPickerVisible && React.createElement(CalendarDay, {\n      selectedDate: selectedDate,\n      navigatedDate: navigatedDayDate,\n      today: this.props.today,\n      onSelectDate: this._onSelectDate,\n      onNavigateDate: this._onNavigateDayDate,\n      onDismiss: this.props.onDismiss,\n      firstDayOfWeek: firstDayOfWeek,\n      dateRangeType: dateRangeType,\n      autoNavigateOnSelection: autoNavigateOnSelection,\n      strings: strings,\n      onHeaderSelect: onHeaderSelect,\n      navigationIcons: navigationIcons,\n      showWeekNumbers: this.props.showWeekNumbers,\n      firstWeekOfYear: this.props.firstWeekOfYear,\n      dateTimeFormatter: this.props.dateTimeFormatter,\n      showSixWeeksByDefault: this.props.showSixWeeksByDefault,\n      minDate: minDate,\n      maxDate: maxDate,\n      restrictedDates: restrictedDates,\n      workWeekDays: this.props.workWeekDays,\n      componentRef: this._dayPicker,\n      showCloseButton: showCloseButton,\n      allFocusable: allFocusable\n    }), isDayPickerVisible && isMonthPickerVisible && React.createElement(\"div\", {\n      className: styles.divider\n    }), isMonthPickerVisible && React.createElement(CalendarMonth, {\n      navigatedDate: navigatedMonthDate,\n      selectedDate: navigatedDayDate,\n      strings: strings,\n      onNavigateDate: this._onNavigateMonthDate,\n      today: this.props.today,\n      highlightCurrentMonth: highlightCurrentMonth,\n      highlightSelectedMonth: highlightSelectedMonth,\n      onHeaderSelect: onHeaderSelect,\n      navigationIcons: navigationIcons,\n      dateTimeFormatter: this.props.dateTimeFormatter,\n      minDate: minDate,\n      maxDate: maxDate,\n      componentRef: this._monthPicker,\n      yearPickerHidden: yearPickerHidden || showMonthPickerAsOverlay\n    }), showGoToToday && React.createElement(\"button\", {\n      role: \"button\",\n      className: css('ms-DatePicker-goToday js-goToday', styles.goToday, (_a = {}, _a[styles.goTodayInlineMonth] = isMonthPickerVisible, _a[styles.goToTodayIsDisabled] = !goTodayEnabled, _a)),\n      onClick: this._onGotoTodayClick,\n      onKeyDown: this._onGotoTodayKeyDown,\n      tabIndex: 0,\n      disabled: !goTodayEnabled,\n      type: \"button\"\n    }, strings.goToToday))))), React.createElement(FocusRects, null));\n  };\n\n  Calendar.prototype.focus = function () {\n    if (this.state.isDayPickerVisible && this._dayPicker.current) {\n      this._dayPicker.current.focus();\n    } else if (this.state.isMonthPickerVisible && this._monthPicker.current) {\n      this._monthPicker.current.focus();\n    }\n  };\n\n  Calendar.defaultProps = {\n    onSelectDate: undefined,\n    onDismiss: undefined,\n    isMonthPickerVisible: true,\n    isDayPickerVisible: true,\n    showMonthPickerAsOverlay: false,\n    value: undefined,\n    today: new Date(),\n    firstDayOfWeek: DayOfWeek.Sunday,\n    dateRangeType: DateRangeType.Day,\n    autoNavigateOnSelection: false,\n    showGoToToday: true,\n    strings: null,\n    highlightCurrentMonth: false,\n    highlightSelectedMonth: false,\n    navigationIcons: iconStrings,\n    showWeekNumbers: false,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    dateTimeFormatter: dateTimeFormatterCallbacks,\n    showSixWeeksByDefault: false,\n    workWeekDays: defaultWorkWeekDays,\n    showCloseButton: false,\n    allFocusable: false\n  };\n  return Calendar;\n}(React.Component);\n\nexport { Calendar };","map":{"version":3,"mappings":"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","names":["React","DayOfWeek","FirstWeekOfYear","DateRangeType","CalendarDay","CalendarMonth","compareDates","getDateRangeArray","css","elementContains","KeyCodes","getNativeProps","divProperties","initializeComponentRef","FocusRects","stylesImport","styles","leftArrow","rightArrow","closeIcon","iconStrings","leftNavigation","rightNavigation","defaultWorkWeekDays","Monday","Tuesday","Wednesday","Thursday","Friday","dateTimeFormatterCallbacks","formatMonthDayYear","date","strings","months","getMonth","getDate","getFullYear","formatMonthYear","formatDay","toString","formatYear","__extends","props","_super","_this","createRef","event","currentTarget","relatedTarget","_hasFocus","onBlur","onFocus","setState","navigatedDayDate","navigatedMonthDate","focusOnNavigatedDay","_navigateDayPickerDay","_focusOnUpdate","_navigateMonthPickerDay","monthPickerOnly","showMonthPickerAsOverlay","isDayPickerVisible","_onSelectDate","selectedDateRangeArray","selectedDate","onSelectDate","focus","state","isMonthPickerVisible","dateRangeType","firstDayOfWeek","today","workWeekDays","selectDateOnClick","dates","ev","_onGotoToday","which","enter","preventDefault","backspace","escape","_handleEscKey","onDismiss","currentDate","value","isNaN","getTime","Date","Calendar","nextProps","_a","overrideNavigatedDate","autoNavigateOnSelection","rootClass","showGoToToday","highlightCurrentMonth","highlightSelectedMonth","navigationIcons","minDate","maxDate","restrictedDates","className","showCloseButton","allFocusable","yearPickerHidden","nativeProps","onHeaderSelect","_onHeaderSelect","undefined","overlayedWithButton","goTodayEnabled","root","role","_onBlur","_onFocus","picker","pickerIsOpened","pickerIsFocused","monthPickerVisible","calendarsInline","monthPickerAsOverlay","holder","holderWithButton","onKeyDown","_onDatePickerPopupKeyDown","frame","wrap","goTodaySpacing","navigatedDate","onNavigateDate","_onNavigateDayDate","showWeekNumbers","firstWeekOfYear","dateTimeFormatter","showSixWeeksByDefault","componentRef","_dayPicker","divider","_onNavigateMonthDate","_monthPicker","goToday","goTodayInlineMonth","goToTodayIsDisabled","onClick","_onGotoTodayClick","_onGotoTodayKeyDown","tabIndex","disabled","type","goToToday","current","Sunday","Day","FirstDay","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Calendar\\Calendar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  ICalendar,\n  ICalendarProps,\n  ICalendarStrings,\n  ICalendarIconStrings,\n  ICalendarFormatDateCallbacks,\n} from './Calendar.types';\nimport { DayOfWeek, FirstWeekOfYear, DateRangeType } from '../../utilities/dateValues/DateValues';\nimport { CalendarDay, ICalendarDay } from './CalendarDay';\nimport { CalendarMonth, ICalendarMonth } from './CalendarMonth';\nimport { compareDates, getDateRangeArray } from '../../utilities/dateMath/DateMath';\nimport {\n  css,\n  elementContains,\n  KeyCodes,\n  getNativeProps,\n  divProperties,\n  initializeComponentRef,\n  FocusRects,\n} from '../../Utilities';\nimport * as stylesImport from './Calendar.scss';\nconst styles: any = stylesImport;\n\nconst leftArrow = 'Up';\nconst rightArrow = 'Down';\nconst closeIcon = 'CalculatorMultiply';\nconst iconStrings: ICalendarIconStrings = {\n  leftNavigation: leftArrow,\n  rightNavigation: rightArrow,\n  closeIcon: closeIcon,\n};\nconst defaultWorkWeekDays: DayOfWeek[] = [\n  DayOfWeek.Monday,\n  DayOfWeek.Tuesday,\n  DayOfWeek.Wednesday,\n  DayOfWeek.Thursday,\n  DayOfWeek.Friday,\n];\n\nconst dateTimeFormatterCallbacks: ICalendarFormatDateCallbacks = {\n  formatMonthDayYear: (date: Date, strings: ICalendarStrings) =>\n    strings.months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear(),\n  formatMonthYear: (date: Date, strings: ICalendarStrings) =>\n    strings.months[date.getMonth()] + ' ' + date.getFullYear(),\n  formatDay: (date: Date) => date.getDate().toString(),\n  formatYear: (date: Date) => date.getFullYear().toString(),\n};\n\nexport interface ICalendarState {\n  /** The currently focused date in the day picker, but not necessarily selected */\n  navigatedDayDate?: Date;\n\n  /** The currently focused date in the month picker, but not necessarily selected */\n  navigatedMonthDate?: Date;\n\n  /** The currently selected date in the calendar */\n  selectedDate?: Date;\n\n  /** State used to show/hide month picker */\n  isMonthPickerVisible?: boolean;\n\n  /** State used to show/hide day picker */\n  isDayPickerVisible?: boolean;\n}\n\nexport class Calendar extends React.Component<ICalendarProps, ICalendarState> implements ICalendar {\n  public static defaultProps: ICalendarProps = {\n    onSelectDate: undefined,\n    onDismiss: undefined,\n    isMonthPickerVisible: true,\n    isDayPickerVisible: true,\n    showMonthPickerAsOverlay: false,\n    value: undefined,\n    today: new Date(),\n    firstDayOfWeek: DayOfWeek.Sunday,\n    dateRangeType: DateRangeType.Day,\n    autoNavigateOnSelection: false,\n    showGoToToday: true,\n    strings: null,\n    highlightCurrentMonth: false,\n    highlightSelectedMonth: false,\n    navigationIcons: iconStrings,\n    showWeekNumbers: false,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    dateTimeFormatter: dateTimeFormatterCallbacks,\n    showSixWeeksByDefault: false,\n    workWeekDays: defaultWorkWeekDays,\n    showCloseButton: false,\n    allFocusable: false,\n  };\n\n  private _dayPicker = React.createRef<ICalendarDay>();\n  private _monthPicker = React.createRef<ICalendarMonth>();\n  private _hasFocus = false;\n\n  private _focusOnUpdate: boolean;\n\n  constructor(props: ICalendarProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    const currentDate = props.value && !isNaN(props.value.getTime()) ? props.value : props.today || new Date();\n\n    this.state = {\n      selectedDate: currentDate,\n      navigatedDayDate: currentDate,\n      navigatedMonthDate: currentDate,\n\n      /** When showMonthPickerAsOverlay is active it overrides isMonthPickerVisible/isDayPickerVisible props\n       (These props permanently set the visibility of their respective calendars). */\n      isMonthPickerVisible: this.props.showMonthPickerAsOverlay ? false : this.props.isMonthPickerVisible,\n      isDayPickerVisible: this.props.showMonthPickerAsOverlay ? true : this.props.isDayPickerVisible,\n    };\n\n    this._focusOnUpdate = false;\n  }\n\n  public UNSAFE_componentWillReceiveProps(nextProps: ICalendarProps): void {\n    const { autoNavigateOnSelection, value, today = new Date() } = nextProps;\n\n    // Make sure auto-navigation is supported for programmatic changes to selected date, i.e.,\n    // if selected date is updated via props, we may need to modify the navigated date\n    const overrideNavigatedDate = autoNavigateOnSelection && !compareDates(value!, this.props.value!);\n    if (overrideNavigatedDate) {\n      this.setState({\n        navigatedMonthDate: value,\n        navigatedDayDate: value,\n      });\n    }\n\n    this.setState({\n      selectedDate: value || today,\n    });\n  }\n\n  public componentDidUpdate(): void {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  }\n\n  public render(): JSX.Element {\n    const rootClass = 'ms-DatePicker';\n    const {\n      firstDayOfWeek,\n      dateRangeType,\n      strings,\n      showMonthPickerAsOverlay,\n      autoNavigateOnSelection,\n      showGoToToday,\n      highlightCurrentMonth,\n      highlightSelectedMonth,\n      navigationIcons,\n      minDate,\n      maxDate,\n      restrictedDates,\n      className,\n      showCloseButton,\n      allFocusable,\n      yearPickerHidden,\n      today,\n    } = this.props;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['value']);\n    const { selectedDate, navigatedDayDate, navigatedMonthDate, isMonthPickerVisible, isDayPickerVisible } = this.state;\n    const onHeaderSelect = showMonthPickerAsOverlay ? this._onHeaderSelect : undefined;\n    const monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;\n    const overlayedWithButton = showMonthPickerAsOverlay && showGoToToday;\n\n    let goTodayEnabled = showGoToToday;\n\n    if (goTodayEnabled && navigatedDayDate && navigatedMonthDate && today) {\n      goTodayEnabled =\n        navigatedDayDate.getFullYear() !== today.getFullYear() ||\n        navigatedDayDate.getMonth() !== today.getMonth() ||\n        navigatedMonthDate.getFullYear() !== today.getFullYear() ||\n        navigatedMonthDate.getMonth() !== today.getMonth();\n    }\n\n    return (\n      <div className={css(rootClass, styles.root, className)} role=\"application\">\n        <div\n          {...nativeProps}\n          onBlur={this._onBlur}\n          onFocus={this._onFocus}\n          className={css(\n            'ms-DatePicker-picker ms-DatePicker-picker--opened ms-DatePicker-picker--focused',\n            styles.picker,\n            styles.pickerIsOpened,\n            styles.pickerIsFocused,\n            isMonthPickerVisible && 'ms-DatePicker-monthPickerVisible ' + styles.monthPickerVisible,\n            isMonthPickerVisible && isDayPickerVisible && 'ms-DatePicker-calendarsInline ' + styles.calendarsInline,\n            monthPickerOnly && 'ms-DatePicker-monthPickerOnly ' + styles.monthPickerOnly,\n            showMonthPickerAsOverlay && 'ms-DatePicker-monthPickerAsOverlay ' + styles.monthPickerAsOverlay,\n          )}\n        >\n          <div\n            className={css(\n              'ms-DatePicker-holder ms-slideDownIn10',\n              styles.holder,\n              overlayedWithButton && styles.holderWithButton,\n            )}\n            onKeyDown={this._onDatePickerPopupKeyDown}\n          >\n            <div className={css('ms-DatePicker-frame', styles.frame)}>\n              <div className={css('ms-DatePicker-wrap', styles.wrap, showGoToToday && styles.goTodaySpacing)}>\n                {isDayPickerVisible && (\n                  <CalendarDay\n                    selectedDate={selectedDate!}\n                    navigatedDate={navigatedDayDate!}\n                    today={this.props.today}\n                    onSelectDate={this._onSelectDate}\n                    onNavigateDate={this._onNavigateDayDate}\n                    onDismiss={this.props.onDismiss}\n                    firstDayOfWeek={firstDayOfWeek!}\n                    dateRangeType={dateRangeType!}\n                    autoNavigateOnSelection={autoNavigateOnSelection!}\n                    strings={strings!}\n                    onHeaderSelect={onHeaderSelect}\n                    navigationIcons={navigationIcons!}\n                    showWeekNumbers={this.props.showWeekNumbers}\n                    firstWeekOfYear={this.props.firstWeekOfYear!}\n                    dateTimeFormatter={this.props.dateTimeFormatter!}\n                    showSixWeeksByDefault={this.props.showSixWeeksByDefault}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    restrictedDates={restrictedDates}\n                    workWeekDays={this.props.workWeekDays}\n                    componentRef={this._dayPicker}\n                    showCloseButton={showCloseButton}\n                    allFocusable={allFocusable}\n                  />\n                )}\n                {isDayPickerVisible && isMonthPickerVisible && <div className={styles.divider} />}\n                {isMonthPickerVisible && (\n                  <CalendarMonth\n                    navigatedDate={navigatedMonthDate!}\n                    selectedDate={navigatedDayDate!}\n                    strings={strings!}\n                    onNavigateDate={this._onNavigateMonthDate}\n                    today={this.props.today}\n                    highlightCurrentMonth={highlightCurrentMonth!}\n                    highlightSelectedMonth={highlightSelectedMonth!}\n                    onHeaderSelect={onHeaderSelect}\n                    navigationIcons={navigationIcons!}\n                    dateTimeFormatter={this.props.dateTimeFormatter!}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    componentRef={this._monthPicker}\n                    yearPickerHidden={yearPickerHidden || showMonthPickerAsOverlay}\n                  />\n                )}\n\n                {showGoToToday && (\n                  <button\n                    role=\"button\"\n                    className={css('ms-DatePicker-goToday js-goToday', styles.goToday, {\n                      [styles.goTodayInlineMonth]: isMonthPickerVisible,\n                      [styles.goToTodayIsDisabled]: !goTodayEnabled,\n                    })}\n                    onClick={this._onGotoTodayClick}\n                    onKeyDown={this._onGotoTodayKeyDown}\n                    tabIndex={0}\n                    disabled={!goTodayEnabled}\n                    type=\"button\"\n                  >\n                    {strings!.goToToday}\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <FocusRects />\n      </div>\n    );\n  }\n\n  public focus() {\n    if (this.state.isDayPickerVisible && this._dayPicker.current) {\n      this._dayPicker.current.focus();\n    } else if (this.state.isMonthPickerVisible && this._monthPicker.current) {\n      this._monthPicker.current.focus();\n    }\n  }\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>) => {\n    if (!elementContains(event.currentTarget, event.relatedTarget as HTMLElement)) {\n      this._hasFocus = false;\n      this.props.onBlur && this.props.onBlur(event);\n    }\n  };\n\n  private _onFocus = (event: React.FocusEvent<HTMLElement>) => {\n    if (!this._hasFocus) {\n      this._hasFocus = true;\n      this.props.onFocus && this.props.onFocus(event);\n    }\n  };\n\n  private _navigateDayPickerDay = (date: Date): void => {\n    this.setState({\n      navigatedDayDate: date,\n      navigatedMonthDate: date,\n    });\n  };\n\n  private _navigateMonthPickerDay = (date: Date): void => {\n    this.setState({\n      navigatedMonthDate: date,\n    });\n  };\n\n  private _onNavigateDayDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n    this._navigateDayPickerDay(date);\n    this._focusOnUpdate = focusOnNavigatedDay;\n  };\n\n  private _onNavigateMonthDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n    if (!focusOnNavigatedDay) {\n      this._navigateMonthPickerDay(date);\n      this._focusOnUpdate = focusOnNavigatedDay;\n      return;\n    }\n\n    const monthPickerOnly = !this.props.showMonthPickerAsOverlay && !this.props.isDayPickerVisible;\n\n    if (monthPickerOnly) {\n      this._onSelectDate(date);\n    }\n\n    this._navigateDayPickerDay(date);\n  };\n\n  private _onSelectDate = (date: Date, selectedDateRangeArray?: Date[]): void => {\n    const { onSelectDate } = this.props;\n\n    this.setState({\n      selectedDate: date,\n    });\n\n    if (onSelectDate) {\n      onSelectDate(date, selectedDateRangeArray);\n    }\n  };\n\n  private _onHeaderSelect = (focus: boolean): void => {\n    this.setState({\n      isDayPickerVisible: !this.state.isDayPickerVisible,\n      isMonthPickerVisible: !this.state.isMonthPickerVisible,\n    });\n\n    if (focus) {\n      this._focusOnUpdate = true;\n    }\n  };\n\n  private _onGotoToday = (): void => {\n    const { dateRangeType, firstDayOfWeek, today, workWeekDays, selectDateOnClick } = this.props;\n\n    if (selectDateOnClick) {\n      // When using Defaultprops, TypeScript doesn't know that React is going to inject defaults\n      // so we use exclamation mark as a hint to the type checker (see link below)\n      // https://decembersoft.com/posts/error-ts2532-optional-react-component-props-in-typescript/\n      const dates = getDateRangeArray(today!, dateRangeType!, firstDayOfWeek!, workWeekDays!);\n      this._onSelectDate(today!, dates);\n    }\n\n    this._navigateDayPickerDay(today!);\n    this._focusOnUpdate = true;\n  };\n\n  private _onGotoTodayClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._onGotoToday();\n  };\n\n  private _onGotoTodayKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n      this._onGotoToday();\n    }\n  };\n\n  private _onDatePickerPopupKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    switch (ev.which) {\n      case KeyCodes.enter:\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.backspace:\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.escape:\n        this._handleEscKey(ev);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  private _handleEscKey = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (this.props.onDismiss) {\n      this.props.onDismiss();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}