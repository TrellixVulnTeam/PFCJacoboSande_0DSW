{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, classNamesFunction, getId, getNativeProps, divProperties, css, initializeComponentRef } from '../../Utilities';\nimport { Calendar, DayOfWeek } from '../../Calendar';\nimport { FirstWeekOfYear } from '../../utilities/dateValues/DateValues';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { TextField } from '../../TextField';\nimport { compareDates, compareDatePart } from '../../utilities/dateMath/DateMath';\nimport { FocusTrapZone } from '../../FocusTrapZone';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_STRINGS = {\n  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  goToToday: 'Go to today',\n  prevMonthAriaLabel: 'Go to previous month',\n  nextMonthAriaLabel: 'Go to next month',\n  prevYearAriaLabel: 'Go to previous year',\n  nextYearAriaLabel: 'Go to next year',\n  prevYearRangeAriaLabel: 'Previous year range',\n  nextYearRangeAriaLabel: 'Next year range',\n  closeButtonAriaLabel: 'Close date picker',\n  weekNumberFormatString: 'Week number {0}'\n};\n\nvar DatePickerBase =\n/** @class */\nfunction (_super) {\n  __extends(DatePickerBase, _super);\n\n  function DatePickerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._calendar = React.createRef();\n    _this._datePickerDiv = React.createRef();\n    _this._textField = React.createRef();\n\n    _this._onSelectDate = function (date) {\n      var _a = _this.props,\n          formatDate = _a.formatDate,\n          onSelectDate = _a.onSelectDate;\n\n      if (_this.props.calendarProps && _this.props.calendarProps.onSelectDate) {\n        _this.props.calendarProps.onSelectDate(date);\n      }\n\n      _this.setState({\n        selectedDate: date,\n        formattedDate: formatDate && date ? formatDate(date) : ''\n      });\n\n      if (onSelectDate) {\n        onSelectDate(date);\n      }\n\n      _this._calendarDismissed();\n    };\n\n    _this._onCalloutPositioned = function () {\n      var shouldFocus = true; // If the user has specified that the callout shouldn't use initial focus, then respect\n      // that and don't attempt to set focus. That will default to true within the callout\n      // so we need to check if it's undefined here.\n\n      if (_this.props.calloutProps && _this.props.calloutProps.setInitialFocus !== undefined) {\n        shouldFocus = _this.props.calloutProps.setInitialFocus;\n      }\n\n      if (_this._calendar.current && shouldFocus) {\n        _this._calendar.current.focus();\n      }\n    };\n\n    _this._onTextFieldFocus = function (ev) {\n      if (_this.props.disableAutoFocus) {\n        return;\n      }\n\n      if (!_this.props.allowTextInput) {\n        if (!_this._preventFocusOpeningPicker) {\n          _this._showDatePickerPopup();\n        } else {\n          _this._preventFocusOpeningPicker = false;\n        }\n      }\n    };\n\n    _this._onTextFieldBlur = function (ev) {\n      _this._validateTextInput();\n    };\n\n    _this._onTextFieldChanged = function (ev, newValue) {\n      var _a = _this.props,\n          allowTextInput = _a.allowTextInput,\n          textField = _a.textField;\n\n      if (allowTextInput) {\n        if (_this.state.isDatePickerShown) {\n          _this._dismissDatePickerPopup();\n        }\n\n        var _b = _this.props,\n            isRequired = _b.isRequired,\n            strings = _b.strings;\n\n        _this.setState({\n          errorMessage: isRequired && !newValue ? strings.isRequiredErrorMessage || ' ' : undefined,\n          formattedDate: newValue\n        });\n      }\n\n      if (textField && textField.onChange) {\n        textField.onChange(ev, newValue);\n      }\n    };\n\n    _this._onTextFieldKeyDown = function (ev) {\n      switch (ev.which) {\n        case KeyCodes.enter:\n          ev.preventDefault();\n          ev.stopPropagation();\n\n          if (!_this.state.isDatePickerShown) {\n            _this._validateTextInput();\n\n            _this._showDatePickerPopup();\n          } else {\n            // When DatePicker allows input date string directly,\n            // it is expected to hit another enter to close the popup\n            if (_this.props.allowTextInput) {\n              _this._dismissDatePickerPopup();\n            }\n          }\n\n          break;\n\n        case KeyCodes.escape:\n          _this._handleEscKey(ev);\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this._onTextFieldClick = function (ev) {\n      if (!_this.props.disableAutoFocus && !_this.state.isDatePickerShown && !_this.props.disabled) {\n        _this._showDatePickerPopup();\n\n        return;\n      }\n\n      if (_this.props.allowTextInput) {\n        _this._dismissDatePickerPopup();\n      }\n    };\n\n    _this._onIconClick = function (ev) {\n      ev.stopPropagation();\n\n      if (!_this.state.isDatePickerShown && !_this.props.disabled) {\n        _this._showDatePickerPopup();\n      } else if (_this.props.allowTextInput) {\n        _this._dismissDatePickerPopup();\n      }\n    };\n\n    _this._dismissDatePickerPopup = function () {\n      if (_this.state.isDatePickerShown) {\n        _this.setState({\n          isDatePickerShown: false\n        }, function () {\n          // setState is async, so we must call validate in a callback\n          _this._validateTextInput();\n        });\n      }\n    };\n    /**\n     * Callback for closing the calendar callout\n     */\n\n\n    _this._calendarDismissed = function () {\n      _this._preventFocusOpeningPicker = true;\n\n      _this._dismissDatePickerPopup(); // don't need to focus the text box, if necessary the focusTrapZone will do it\n\n    };\n\n    _this._handleEscKey = function (ev) {\n      if (_this.state.isDatePickerShown) {\n        ev.stopPropagation();\n      }\n\n      _this._calendarDismissed();\n    };\n\n    _this._validateTextInput = function () {\n      var _a = _this.props,\n          isRequired = _a.isRequired,\n          allowTextInput = _a.allowTextInput,\n          strings = _a.strings,\n          parseDateFromString = _a.parseDateFromString,\n          onSelectDate = _a.onSelectDate,\n          formatDate = _a.formatDate,\n          minDate = _a.minDate,\n          maxDate = _a.maxDate;\n      var inputValue = _this.state.formattedDate; // Do validation only if DatePicker's popup is dismissed\n\n      if (_this.state.isDatePickerShown) {\n        return;\n      }\n\n      if (allowTextInput) {\n        var date = null;\n\n        if (inputValue) {\n          // Don't parse if the selected date has the same formatted string as what we're about to parse.\n          // The formatted string might be ambiguous (ex: \"1/2/3\" or \"New Year Eve\") and the parser might\n          // not be able to come up with the exact same date.\n          if (_this.state.selectedDate && !_this.state.errorMessage && formatDate && formatDate(_this.state.selectedDate) === inputValue) {\n            return;\n          }\n\n          date = parseDateFromString(inputValue); // Check if date is null, or date is Invalid Date\n\n          if (!date || isNaN(date.getTime())) {\n            // Reset invalid input field, if formatting is available\n            if (formatDate) {\n              date = _this.state.selectedDate;\n\n              _this.setState({\n                formattedDate: formatDate(date).toString()\n              });\n            }\n\n            _this.setState({\n              errorMessage: strings.invalidInputErrorMessage || ' '\n            });\n          } else {\n            // Check against optional date boundaries\n            if (_this._isDateOutOfBounds(date, minDate, maxDate)) {\n              _this.setState({\n                errorMessage: strings.isOutOfBoundsErrorMessage || ' '\n              });\n            } else {\n              _this.setState({\n                selectedDate: date,\n                errorMessage: ''\n              }); // When formatting is available:\n              // If formatted date is valid, but is different from input, update with formatted date.\n              // This occurs when an invalid date is entered twice.\n\n\n              if (formatDate && formatDate(date) !== inputValue) {\n                _this.setState({\n                  formattedDate: formatDate(date).toString()\n                });\n              }\n            }\n          }\n        } else {\n          // Only show error for empty inputValue if it is a required field\n          _this.setState({\n            errorMessage: isRequired ? strings.isRequiredErrorMessage || ' ' : ''\n          });\n        } // Execute onSelectDate callback\n\n\n        if (onSelectDate) {\n          // If no input date string or input date string is invalid\n          // date variable will be null, callback should expect null value for this case\n          onSelectDate(date);\n        }\n      } else if (isRequired && !inputValue) {\n        // Check when DatePicker is a required field but has NO input value\n        _this.setState({\n          errorMessage: strings.isRequiredErrorMessage || ' '\n        });\n      } else {\n        // Cleanup the error message\n        _this.setState({\n          errorMessage: ''\n        });\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this.state = _this._getDefaultState();\n    _this._id = props.id || getId('DatePicker');\n    _this._preventFocusOpeningPicker = false;\n    return _this;\n  }\n\n  DatePickerBase.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n    var formatDate = nextProps.formatDate,\n        value = nextProps.value;\n\n    if (compareDates(this.props.minDate, nextProps.minDate) && compareDates(this.props.maxDate, nextProps.maxDate) && this.props.isRequired === nextProps.isRequired && compareDates(this.state.selectedDate, value) && this.props.formatDate === formatDate) {\n      // if the props we care about haven't changed, don't run validation or updates\n      return;\n    }\n\n    this._setErrorMessage(true, nextProps);\n\n    this._id = nextProps.id || this._id; // Issue# 1274: Check if the date value changed from old value, i.e., if indeed a new date is being\n    // passed in or if the formatting function was modified. We only update the selected date if either of these\n    // had a legit change. Note tha the bug will still repro when only the formatDate was passed in props and this\n    // is the result of the onSelectDate callback, but this should be a rare scenario.\n\n    var oldValue = this.state.selectedDate;\n\n    if (!compareDates(oldValue, value) || this.props.formatDate !== formatDate) {\n      this.setState({\n        selectedDate: value || undefined,\n        formattedDate: formatDate && value ? formatDate(value) : ''\n      });\n    }\n  };\n\n  DatePickerBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (prevState.isDatePickerShown && !this.state.isDatePickerShown) {\n      // If DatePicker's menu (Calendar) is closed, run onAfterMenuDismiss\n      if (this.props.onAfterMenuDismiss) {\n        this.props.onAfterMenuDismiss();\n      }\n    }\n  };\n\n  DatePickerBase.prototype.render = function () {\n    var _a = this.props,\n        firstDayOfWeek = _a.firstDayOfWeek,\n        strings = _a.strings,\n        label = _a.label,\n        theme = _a.theme,\n        className = _a.className,\n        styles = _a.styles,\n        initialPickerDate = _a.initialPickerDate,\n        isRequired = _a.isRequired,\n        disabled = _a.disabled,\n        ariaLabel = _a.ariaLabel,\n        pickerAriaLabel = _a.pickerAriaLabel,\n        placeholder = _a.placeholder,\n        allowTextInput = _a.allowTextInput,\n        borderless = _a.borderless,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        showCloseButton = _a.showCloseButton,\n        calendarProps = _a.calendarProps,\n        calloutProps = _a.calloutProps,\n        textFieldProps = _a.textField,\n        underlined = _a.underlined,\n        allFocusable = _a.allFocusable,\n        _b = _a.calendarAs,\n        CalendarType = _b === void 0 ? Calendar : _b,\n        tabIndex = _a.tabIndex;\n    var _c = this.state,\n        isDatePickerShown = _c.isDatePickerShown,\n        formattedDate = _c.formattedDate,\n        selectedDate = _c.selectedDate;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      label: !!label,\n      isDatePickerShown: isDatePickerShown\n    });\n    var calloutId = getId('DatePicker-Callout');\n    var nativeProps = getNativeProps(this.props, divProperties, ['value']);\n    var iconProps = textFieldProps && textFieldProps.iconProps;\n    return React.createElement(\"div\", __assign({}, nativeProps, {\n      className: classNames.root\n    }), React.createElement(\"div\", {\n      ref: this._datePickerDiv,\n      \"aria-haspopup\": \"true\",\n      \"aria-owns\": isDatePickerShown ? calloutId : undefined,\n      className: classNames.wrapper\n    }, React.createElement(TextField, __assign({\n      role: \"combobox\",\n      label: label,\n      \"aria-expanded\": isDatePickerShown,\n      ariaLabel: ariaLabel,\n      \"aria-controls\": isDatePickerShown ? calloutId : undefined,\n      required: isRequired,\n      disabled: disabled,\n      errorMessage: this._getErrorMessage(),\n      placeholder: placeholder,\n      borderless: borderless,\n      value: formattedDate,\n      componentRef: this._textField,\n      underlined: underlined,\n      tabIndex: tabIndex,\n      readOnly: !allowTextInput\n    }, textFieldProps, {\n      id: this._id + '-label',\n      className: css(classNames.textField, textFieldProps && textFieldProps.className),\n      iconProps: __assign(__assign({\n        iconName: 'Calendar'\n      }, iconProps), {\n        className: css(classNames.icon, iconProps && iconProps.className),\n        onClick: this._onIconClick\n      }),\n      onKeyDown: this._onTextFieldKeyDown,\n      onFocus: this._onTextFieldFocus,\n      onBlur: this._onTextFieldBlur,\n      onClick: this._onTextFieldClick,\n      onChange: this._onTextFieldChanged\n    }))), isDatePickerShown && React.createElement(Callout, __assign({\n      id: calloutId,\n      role: \"dialog\",\n      ariaLabel: pickerAriaLabel,\n      isBeakVisible: false,\n      gapSpace: 0,\n      doNotLayer: false,\n      target: this._datePickerDiv.current,\n      directionalHint: DirectionalHint.bottomLeftEdge\n    }, calloutProps, {\n      className: css(classNames.callout, calloutProps && calloutProps.className),\n      onDismiss: this._calendarDismissed,\n      onPositioned: this._onCalloutPositioned\n    }), React.createElement(FocusTrapZone, {\n      isClickableOutsideFocusTrap: true,\n      disableFirstFocus: this.props.disableAutoFocus,\n      forceFocusInsideTrap: false\n    }, React.createElement(CalendarType, __assign({}, calendarProps, {\n      onSelectDate: this._onSelectDate,\n      onDismiss: this._calendarDismissed,\n      isMonthPickerVisible: this.props.isMonthPickerVisible,\n      showMonthPickerAsOverlay: this.props.showMonthPickerAsOverlay,\n      today: this.props.today,\n      value: selectedDate || initialPickerDate,\n      firstDayOfWeek: firstDayOfWeek,\n      strings: strings,\n      highlightCurrentMonth: this.props.highlightCurrentMonth,\n      highlightSelectedMonth: this.props.highlightSelectedMonth,\n      showWeekNumbers: this.props.showWeekNumbers,\n      firstWeekOfYear: this.props.firstWeekOfYear,\n      showGoToToday: this.props.showGoToToday,\n      dateTimeFormatter: this.props.dateTimeFormatter,\n      minDate: minDate,\n      maxDate: maxDate,\n      componentRef: this._calendar,\n      showCloseButton: showCloseButton,\n      allFocusable: allFocusable\n    })))));\n  };\n\n  DatePickerBase.prototype.focus = function () {\n    if (this._textField.current) {\n      this._textField.current.focus();\n    }\n  };\n\n  DatePickerBase.prototype.reset = function () {\n    this.setState(this._getDefaultState());\n  };\n\n  DatePickerBase.prototype._setErrorMessage = function (setState, nextProps) {\n    var _a = nextProps || this.props,\n        isRequired = _a.isRequired,\n        strings = _a.strings,\n        value = _a.value,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        initialPickerDate = _a.initialPickerDate;\n\n    var errorMessage = !initialPickerDate && isRequired && !value ? strings.isRequiredErrorMessage || ' ' : undefined;\n\n    if (!errorMessage && value) {\n      errorMessage = this._isDateOutOfBounds(value, minDate, maxDate) ? strings.isOutOfBoundsErrorMessage || ' ' : undefined;\n    }\n\n    if (setState) {\n      this.setState({\n        errorMessage: errorMessage\n      });\n    }\n\n    return errorMessage;\n  };\n\n  DatePickerBase.prototype._showDatePickerPopup = function () {\n    if (!this.state.isDatePickerShown) {\n      this._preventFocusOpeningPicker = true;\n      this.setState({\n        isDatePickerShown: true\n      });\n    }\n  };\n\n  DatePickerBase.prototype._getDefaultState = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    return {\n      selectedDate: props.value || undefined,\n      formattedDate: props.formatDate && props.value ? props.formatDate(props.value) : '',\n      isDatePickerShown: false,\n      errorMessage: this._setErrorMessage(false)\n    };\n  };\n\n  DatePickerBase.prototype._isDateOutOfBounds = function (date, minDate, maxDate) {\n    return !!minDate && compareDatePart(minDate, date) > 0 || !!maxDate && compareDatePart(maxDate, date) < 0;\n  };\n\n  DatePickerBase.prototype._getErrorMessage = function () {\n    if (this.state.isDatePickerShown) {\n      return undefined;\n    }\n\n    return this.state.errorMessage;\n  };\n\n  DatePickerBase.defaultProps = {\n    allowTextInput: false,\n    formatDate: function formatDate(date) {\n      if (date) {\n        return date.toDateString();\n      }\n\n      return '';\n    },\n    parseDateFromString: function parseDateFromString(dateStr) {\n      var date = Date.parse(dateStr);\n\n      if (date) {\n        return new Date(date);\n      }\n\n      return null;\n    },\n    firstDayOfWeek: DayOfWeek.Sunday,\n    initialPickerDate: new Date(),\n    isRequired: false,\n    isMonthPickerVisible: true,\n    showMonthPickerAsOverlay: false,\n    strings: DEFAULT_STRINGS,\n    highlightCurrentMonth: false,\n    highlightSelectedMonth: false,\n    borderless: false,\n    pickerAriaLabel: 'Calendar',\n    showWeekNumbers: false,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    showGoToToday: true,\n    dateTimeFormatter: undefined,\n    showCloseButton: false,\n    underlined: false,\n    allFocusable: false\n  };\n  return DatePickerBase;\n}(React.Component);\n\nexport { DatePickerBase };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAQA,SACEC,QADF,EAEEC,kBAFF,EAGEC,KAHF,EAIEC,cAJF,EAKEC,aALF,EAMEC,GANF,EAOEC,sBAPF,QAQO,iBARP;AASA,SAASC,QAAT,EAA8BC,SAA9B,QAA+C,gBAA/C;AACA,SAASC,eAAT,QAAgC,uCAAhC;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,SAAT,QAAsC,iBAAtC;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,mCAA9C;AACA,SAASC,aAAT,QAA8B,qBAA9B;AAEA,IAAMC,aAAa,GAAGf,kBAAkB,EAAxC;AASA,IAAMgB,eAAe,GAAuB;EAC1CC,MAAM,EAAE,CACN,SADM,EAEN,UAFM,EAGN,OAHM,EAIN,OAJM,EAKN,KALM,EAMN,MANM,EAON,MAPM,EAQN,QARM,EASN,WATM,EAUN,SAVM,EAWN,UAXM,EAYN,UAZM,CADkC;EAe1CC,WAAW,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAf6B;EAgB1CC,IAAI,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE,CAhBoC;EAiB1CC,SAAS,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAjB+B;EAkB1CC,SAAS,EAAE,aAlB+B;EAmB1CC,kBAAkB,EAAE,sBAnBsB;EAoB1CC,kBAAkB,EAAE,kBApBsB;EAqB1CC,iBAAiB,EAAE,qBArBuB;EAsB1CC,iBAAiB,EAAE,iBAtBuB;EAuB1CC,sBAAsB,EAAE,qBAvBkB;EAwB1CC,sBAAsB,EAAE,iBAxBkB;EAyB1CC,oBAAoB,EAAE,mBAzBoB;EA0B1CC,sBAAsB,EAAE;AA1BkB,CAA5C;;AA6BA;AAAA;AAAA;EAAoCC;;EA2ClC,wBAAYC,KAAZ,EAAmC;IAAnC,YACEC,kBAAMD,KAAN,KAAY,IADd;;IANQE,kBAAYnC,KAAK,CAACoC,SAAN,EAAZ;IACAD,uBAAiBnC,KAAK,CAACoC,SAAN,EAAjB;IACAD,mBAAanC,KAAK,CAACoC,SAAN,EAAb;;IAsNAD,sBAAgB,UAACE,IAAD,EAAW;MAC3B;MAAA,IAAEC,0BAAF;MAAA,IAAcC,8BAAd;;MAEN,IAAIJ,KAAI,CAACF,KAAL,CAAWO,aAAX,IAA4BL,KAAI,CAACF,KAAL,CAAWO,aAAX,CAAyBD,YAAzD,EAAuE;QACrEJ,KAAI,CAACF,KAAL,CAAWO,aAAX,CAAyBD,YAAzB,CAAsCF,IAAtC;MACD;;MAEDF,KAAI,CAACM,QAAL,CAAc;QACZC,YAAY,EAAEL,IADF;QAEZM,aAAa,EAAEL,UAAU,IAAID,IAAd,GAAqBC,UAAU,CAACD,IAAD,CAA/B,GAAwC;MAF3C,CAAd;;MAKA,IAAIE,YAAJ,EAAkB;QAChBA,YAAY,CAACF,IAAD,CAAZ;MACD;;MAEDF,KAAI,CAACS,kBAAL;IACD,CAjBO;;IAmBAT,6BAAuB;MAC7B,IAAIU,WAAW,GAAG,IAAlB,CAD6B,CAE7B;MACA;MACA;;MACA,IAAIV,KAAI,CAACF,KAAL,CAAWa,YAAX,IAA2BX,KAAI,CAACF,KAAL,CAAWa,YAAX,CAAwBC,eAAxB,KAA4CC,SAA3E,EAAsF;QACpFH,WAAW,GAAGV,KAAI,CAACF,KAAL,CAAWa,YAAX,CAAwBC,eAAtC;MACD;;MACD,IAAIZ,KAAI,CAACc,SAAL,CAAeC,OAAf,IAA0BL,WAA9B,EAA2C;QACzCV,KAAI,CAACc,SAAL,CAAeC,OAAf,CAAuBC,KAAvB;MACD;IACF,CAXO;;IAaAhB,0BAAoB,UAACiB,EAAD,EAAkC;MAC5D,IAAIjB,KAAI,CAACF,KAAL,CAAWoB,gBAAf,EAAiC;QAC/B;MACD;;MAED,IAAI,CAAClB,KAAI,CAACF,KAAL,CAAWqB,cAAhB,EAAgC;QAC9B,IAAI,CAACnB,KAAI,CAACoB,0BAAV,EAAsC;UACpCpB,KAAI,CAACqB,oBAAL;QACD,CAFD,MAEO;UACLrB,KAAI,CAACoB,0BAAL,GAAkC,KAAlC;QACD;MACF;IACF,CAZO;;IAcApB,yBAAmB,UAACiB,EAAD,EAAkC;MAC3DjB,KAAI,CAACsB,kBAAL;IACD,CAFO;;IAIAtB,4BAAsB,UAC5BiB,EAD4B,EAE5BM,QAF4B,EAEZ;MAEV;MAAA,IAAEJ,kCAAF;MAAA,IAAkBK,wBAAlB;;MAEN,IAAIL,cAAJ,EAAoB;QAClB,IAAInB,KAAI,CAACyB,KAAL,CAAWC,iBAAf,EAAkC;UAChC1B,KAAI,CAAC2B,uBAAL;QACD;;QAEK;QAAA,IAAEC,0BAAF;QAAA,IAAcC,oBAAd;;QAEN7B,KAAI,CAACM,QAAL,CAAc;UACZwB,YAAY,EAAEF,UAAU,IAAI,CAACL,QAAf,GAA0BM,OAAQ,CAACE,sBAAT,IAAmC,GAA7D,GAAmElB,SADrE;UAEZL,aAAa,EAAEe;QAFH,CAAd;MAID;;MAED,IAAIC,SAAS,IAAIA,SAAS,CAACQ,QAA3B,EAAqC;QACnCR,SAAS,CAACQ,QAAV,CAAmBf,EAAnB,EAAuBM,QAAvB;MACD;IACF,CAtBO;;IAwBAvB,4BAAsB,UAACiB,EAAD,EAAqC;MACjE,QAAQA,EAAE,CAACgB,KAAX;QACE,KAAKnE,QAAQ,CAACoE,KAAd;UACEjB,EAAE,CAACkB,cAAH;UACAlB,EAAE,CAACmB,eAAH;;UACA,IAAI,CAACpC,KAAI,CAACyB,KAAL,CAAWC,iBAAhB,EAAmC;YACjC1B,KAAI,CAACsB,kBAAL;;YACAtB,KAAI,CAACqB,oBAAL;UACD,CAHD,MAGO;YACL;YACA;YACA,IAAIrB,KAAI,CAACF,KAAL,CAAWqB,cAAf,EAA+B;cAC7BnB,KAAI,CAAC2B,uBAAL;YACD;UACF;;UACD;;QAEF,KAAK7D,QAAQ,CAACuE,MAAd;UACErC,KAAI,CAACsC,aAAL,CAAmBrB,EAAnB;;UACA;;QAEF;UACE;MArBJ;IAuBD,CAxBO;;IA0BAjB,0BAAoB,UAACiB,EAAD,EAAkC;MAC5D,IAAI,CAACjB,KAAI,CAACF,KAAL,CAAWoB,gBAAZ,IAAgC,CAAClB,KAAI,CAACyB,KAAL,CAAWC,iBAA5C,IAAiE,CAAC1B,KAAI,CAACF,KAAL,CAAWyC,QAAjF,EAA2F;QACzFvC,KAAI,CAACqB,oBAAL;;QACA;MACD;;MACD,IAAIrB,KAAI,CAACF,KAAL,CAAWqB,cAAf,EAA+B;QAC7BnB,KAAI,CAAC2B,uBAAL;MACD;IACF,CARO;;IAUA3B,qBAAe,UAACiB,EAAD,EAAkC;MACvDA,EAAE,CAACmB,eAAH;;MACA,IAAI,CAACpC,KAAI,CAACyB,KAAL,CAAWC,iBAAZ,IAAiC,CAAC1B,KAAI,CAACF,KAAL,CAAWyC,QAAjD,EAA2D;QACzDvC,KAAI,CAACqB,oBAAL;MACD,CAFD,MAEO,IAAIrB,KAAI,CAACF,KAAL,CAAWqB,cAAf,EAA+B;QACpCnB,KAAI,CAAC2B,uBAAL;MACD;IACF,CAPO;;IAkBA3B,gCAA0B;MAChC,IAAIA,KAAI,CAACyB,KAAL,CAAWC,iBAAf,EAAkC;QAChC1B,KAAI,CAACM,QAAL,CACE;UACEoB,iBAAiB,EAAE;QADrB,CADF,EAIE;UACE;UACA1B,KAAI,CAACsB,kBAAL;QACD,CAPH;MASD;IACF,CAZO;IAcR;;;;;IAGQtB,2BAAqB;MAC3BA,KAAI,CAACoB,0BAAL,GAAkC,IAAlC;;MACApB,KAAI,CAAC2B,uBAAL,GAF2B,CAG3B;;IACD,CAJO;;IAMA3B,sBAAgB,UAACiB,EAAD,EAAqC;MAC3D,IAAIjB,KAAI,CAACyB,KAAL,CAAWC,iBAAf,EAAkC;QAChCT,EAAE,CAACmB,eAAH;MACD;;MACDpC,KAAI,CAACS,kBAAL;IACD,CALO;;IAOAT,2BAAqB;MACrB;MAAA,IACJ4B,0BADI;MAAA,IAEJT,kCAFI;MAAA,IAGJU,oBAHI;MAAA,IAIJW,4CAJI;MAAA,IAKJpC,8BALI;MAAA,IAMJD,0BANI;MAAA,IAOJsC,oBAPI;MAAA,IAQJC,oBARI;MAUN,IAAMC,UAAU,GAAG3C,KAAI,CAACyB,KAAL,CAAWjB,aAA9B,CAX2B,CAa3B;;MACA,IAAIR,KAAI,CAACyB,KAAL,CAAWC,iBAAf,EAAkC;QAChC;MACD;;MAED,IAAIP,cAAJ,EAAoB;QAClB,IAAIjB,IAAI,GAAG,IAAX;;QAEA,IAAIyC,UAAJ,EAAgB;UACd;UACA;UACA;UACA,IACE3C,KAAI,CAACyB,KAAL,CAAWlB,YAAX,IACA,CAACP,KAAI,CAACyB,KAAL,CAAWK,YADZ,IAEA3B,UAFA,IAGAA,UAAU,CAACH,KAAI,CAACyB,KAAL,CAAWlB,YAAZ,CAAV,KAAwCoC,UAJ1C,EAKE;YACA;UACD;;UACDzC,IAAI,GAAGsC,mBAAoB,CAACG,UAAD,CAA3B,CAZc,CAcd;;UACA,IAAI,CAACzC,IAAD,IAAS0C,KAAK,CAAC1C,IAAI,CAAC2C,OAAL,EAAD,CAAlB,EAAoC;YAClC;YACA,IAAI1C,UAAJ,EAAgB;cACdD,IAAI,GAAGF,KAAI,CAACyB,KAAL,CAAWlB,YAAlB;;cACAP,KAAI,CAACM,QAAL,CAAc;gBACZE,aAAa,EAAEL,UAAU,CAACD,IAAD,CAAV,CAAkB4C,QAAlB;cADH,CAAd;YAGD;;YAED9C,KAAI,CAACM,QAAL,CAAc;cACZwB,YAAY,EAAED,OAAQ,CAACkB,wBAAT,IAAqC;YADvC,CAAd;UAGD,CAZD,MAYO;YACL;YACA,IAAI/C,KAAI,CAACgD,kBAAL,CAAwB9C,IAAxB,EAA8BuC,OAA9B,EAAuCC,OAAvC,CAAJ,EAAqD;cACnD1C,KAAI,CAACM,QAAL,CAAc;gBACZwB,YAAY,EAAED,OAAQ,CAACoB,yBAAT,IAAsC;cADxC,CAAd;YAGD,CAJD,MAIO;cACLjD,KAAI,CAACM,QAAL,CAAc;gBACZC,YAAY,EAAEL,IADF;gBAEZ4B,YAAY,EAAE;cAFF,CAAd,EADK,CAML;cACA;cACA;;;cACA,IAAI3B,UAAU,IAAIA,UAAU,CAACD,IAAD,CAAV,KAAqByC,UAAvC,EAAmD;gBACjD3C,KAAI,CAACM,QAAL,CAAc;kBACZE,aAAa,EAAEL,UAAU,CAACD,IAAD,CAAV,CAAiB4C,QAAjB;gBADH,CAAd;cAGD;YACF;UACF;QACF,CAjDD,MAiDO;UACL;UACA9C,KAAI,CAACM,QAAL,CAAc;YACZwB,YAAY,EAAEF,UAAU,GAAGC,OAAQ,CAACE,sBAAT,IAAmC,GAAtC,GAA4C;UADxD,CAAd;QAGD,CAzDiB,CA2DlB;;;QACA,IAAI3B,YAAJ,EAAkB;UAChB;UACA;UACAA,YAAY,CAACF,IAAD,CAAZ;QACD;MACF,CAjED,MAiEO,IAAI0B,UAAU,IAAI,CAACe,UAAnB,EAA+B;QACpC;QACA3C,KAAI,CAACM,QAAL,CAAc;UACZwB,YAAY,EAAED,OAAQ,CAACE,sBAAT,IAAmC;QADrC,CAAd;MAGD,CALM,MAKA;QACL;QACA/B,KAAI,CAACM,QAAL,CAAc;UACZwB,YAAY,EAAE;QADF,CAAd;MAGD;IACF,CA9FO;;IA7WN1D,sBAAsB,CAAC4B,KAAD,CAAtB;IACAA,KAAI,CAACyB,KAAL,GAAazB,KAAI,CAACkD,gBAAL,EAAb;IAEAlD,KAAI,CAACmD,GAAL,GAAWrD,KAAK,CAACsD,EAAN,IAAYpF,KAAK,CAAC,YAAD,CAA5B;IAEAgC,KAAI,CAACoB,0BAAL,GAAkC,KAAlC;;EACD;;EAEMiC,4DAAP,UAAwCC,SAAxC,EAAmE;IACzD;IAAA,IAAYC,uBAAZ;;IAER,IACE5E,YAAY,CAAC,KAAKmB,KAAL,CAAW2C,OAAZ,EAAsBa,SAAS,CAACb,OAAhC,CAAZ,IACA9D,YAAY,CAAC,KAAKmB,KAAL,CAAW4C,OAAZ,EAAsBY,SAAS,CAACZ,OAAhC,CADZ,IAEA,KAAK5C,KAAL,CAAW8B,UAAX,KAA0B0B,SAAS,CAAC1B,UAFpC,IAGAjD,YAAY,CAAC,KAAK8C,KAAL,CAAWlB,YAAZ,EAA2BgD,KAA3B,CAHZ,IAIA,KAAKzD,KAAL,CAAWK,UAAX,KAA0BA,UAL5B,EAME;MACA;MACA;IACD;;IAED,KAAKqD,gBAAL,CAAsB,IAAtB,EAA4BF,SAA5B;;IAEA,KAAKH,GAAL,GAAWG,SAAS,CAACF,EAAV,IAAgB,KAAKD,GAAhC,CAhBiE,CAkBjE;IACA;IACA;IACA;;IACA,IAAMM,QAAQ,GAAG,KAAKhC,KAAL,CAAWlB,YAA5B;;IACA,IAAI,CAAC5B,YAAY,CAAC8E,QAAD,EAAYF,KAAZ,CAAb,IAAoC,KAAKzD,KAAL,CAAWK,UAAX,KAA0BA,UAAlE,EAA8E;MAC5E,KAAKG,QAAL,CAAc;QACZC,YAAY,EAAEgD,KAAK,IAAI1C,SADX;QAEZL,aAAa,EAAEL,UAAU,IAAIoD,KAAd,GAAsBpD,UAAU,CAACoD,KAAD,CAAhC,GAA0C;MAF7C,CAAd;IAID;EACF,CA7BM;;EA+BAF,8CAAP,UAA0BK,SAA1B,EAAuDC,SAAvD,EAAkF;IAChF,IAAIA,SAAS,CAACjC,iBAAV,IAA+B,CAAC,KAAKD,KAAL,CAAWC,iBAA/C,EAAkE;MAChE;MACA,IAAI,KAAK5B,KAAL,CAAW8D,kBAAf,EAAmC;QACjC,KAAK9D,KAAL,CAAW8D,kBAAX;MACD;IACF;EACF,CAPM;;EASAP,kCAAP;IACQ;IAAA,IACJQ,kCADI;IAAA,IAEJhC,oBAFI;IAAA,IAGJiC,gBAHI;IAAA,IAIJC,gBAJI;IAAA,IAKJC,wBALI;IAAA,IAMJC,kBANI;IAAA,IAOJC,wCAPI;IAAA,IAQJtC,0BARI;IAAA,IASJW,sBATI;IAAA,IAUJ4B,wBAVI;IAAA,IAWJC,oCAXI;IAAA,IAYJC,4BAZI;IAAA,IAaJlD,kCAbI;IAAA,IAcJmD,0BAdI;IAAA,IAeJ7B,oBAfI;IAAA,IAgBJC,oBAhBI;IAAA,IAiBJ6B,oCAjBI;IAAA,IAkBJlE,gCAlBI;IAAA,IAmBJM,8BAnBI;IAAA,IAoBJ6D,6BApBI;IAAA,IAqBJC,0BArBI;IAAA,IAsBJC,8BAtBI;IAAA,IAuBJC,kBAvBI;IAAA,IAuBJC,4CAvBI;IAAA,IAwBJC,sBAxBI;IA0BA;IAAA,IAAEnD,wCAAF;IAAA,IAAqBlB,gCAArB;IAAA,IAAoCD,8BAApC;IAEN,IAAMuE,UAAU,GAAGhG,aAAa,CAACmF,MAAD,EAAS;MACvCF,KAAK,EAAEA,KADgC;MAEvCC,SAAS,WAF8B;MAGvCzB,QAAQ,UAH+B;MAIvCuB,KAAK,EAAE,CAAC,CAACA,KAJ8B;MAKvCpC,iBAAiB;IALsB,CAAT,CAAhC;IAQA,IAAMqD,SAAS,GAAG/G,KAAK,CAAC,oBAAD,CAAvB;IACA,IAAMgH,WAAW,GAAG/G,cAAc,CAAuC,KAAK6B,KAA5C,EAAmD5B,aAAnD,EAAkE,CAAC,OAAD,CAAlE,CAAlC;IACA,IAAM+G,SAAS,GAAGT,cAAc,IAAIA,cAAc,CAACS,SAAnD;IAEA,OACEpH,wCAASmH,WAAT,EAAoB;MAAEhB,SAAS,EAAEc,UAAU,CAACI;IAAxB,CAApB,GACErH;MACEsH,GAAG,EAAE,KAAKC,cADZ;MAC0B,iBACV,MAFhB;MAEsB,aACT1D,iBAAiB,GAAGqD,SAAH,GAAelE,SAH7C;MAIEmD,SAAS,EAAEc,UAAU,CAACO;IAJxB,GAMExH,oBAACa,SAAD,EAAU4G;MACRC,IAAI,EAAC,UADG;MAERzB,KAAK,EAAEA,KAFC;MAEI,iBACGpC,iBAHP;MAIRyC,SAAS,EAAEA,SAJH;MAIY,iBACLzC,iBAAiB,GAAGqD,SAAH,GAAelE,SALvC;MAMR2E,QAAQ,EAAE5D,UANF;MAORW,QAAQ,EAAEA,QAPF;MAQRT,YAAY,EAAE,KAAK2D,gBAAL,EARN;MASRpB,WAAW,EAAEA,WATL;MAURC,UAAU,EAAEA,UAVJ;MAWRf,KAAK,EAAE/C,aAXC;MAYRkF,YAAY,EAAE,KAAKC,UAZX;MAaRlB,UAAU,EAAEA,UAbJ;MAcRI,QAAQ,EAAEA,QAdF;MAeRe,QAAQ,EAAE,CAACzE;IAfH,GAgBJqD,cAhBI,EAgBU;MAClBpB,EAAE,EAAE,KAAKD,GAAL,GAAW,QADG;MAElBa,SAAS,EAAE7F,GAAG,CAAC2G,UAAU,CAACtD,SAAZ,EAAuBgD,cAAc,IAAIA,cAAc,CAACR,SAAxD,CAFI;MAGlBiB,SAAS;QACPY,QAAQ,EAAE;MADH,GAEJZ,SAFI,GAEK;QACZjB,SAAS,EAAE7F,GAAG,CAAC2G,UAAU,CAACgB,IAAZ,EAAkBb,SAAS,IAAIA,SAAS,CAACjB,SAAzC,CADF;QAEZ+B,OAAO,EAAE,KAAKC;MAFF,CAFL,CAHS;MASlBC,SAAS,EAAE,KAAKC,mBATE;MAUlBC,OAAO,EAAE,KAAKC,iBAVI;MAWlBC,MAAM,EAAE,KAAKC,gBAXK;MAYlBP,OAAO,EAAE,KAAKQ,iBAZI;MAalBvE,QAAQ,EAAE,KAAKwE;IAbG,CAhBV,CAAV,CANF,CADF,EAuCG9E,iBAAiB,IAChB7D,oBAACW,OAAD,EAAQ8G;MACNlC,EAAE,EAAE2B,SADE;MAENQ,IAAI,EAAC,QAFC;MAGNpB,SAAS,EAAEC,eAHL;MAINqC,aAAa,EAAE,KAJT;MAKNC,QAAQ,EAAE,CALJ;MAMNC,UAAU,EAAE,KANN;MAONC,MAAM,EAAE,KAAKxB,cAAL,CAAoBrE,OAPtB;MAQN8F,eAAe,EAAEpI,eAAe,CAACqI;IAR3B,GASFnG,YATE,EASU;MAChBqD,SAAS,EAAE7F,GAAG,CAAC2G,UAAU,CAACiC,OAAZ,EAAqBpG,YAAY,IAAIA,YAAY,CAACqD,SAAlD,CADE;MAEhBgD,SAAS,EAAE,KAAKvG,kBAFA;MAGhBwG,YAAY,EAAE,KAAKC;IAHH,CATV,CAAR,EAcErJ,oBAACgB,aAAD,EAAc;MACZsI,2BAA2B,EAAE,IADjB;MAEZC,iBAAiB,EAAE,KAAKtH,KAAL,CAAWoB,gBAFlB;MAGZmG,oBAAoB,EAAE;IAHV,CAAd,EAKExJ,oBAAC+G,YAAD,EAAaU,aACPjF,aADO,EACM;MACjBD,YAAY,EAAE,KAAKkH,aADF;MAEjBN,SAAS,EAAE,KAAKvG,kBAFC;MAGjB8G,oBAAoB,EAAE,KAAKzH,KAAL,CAAWyH,oBAHhB;MAIjBC,wBAAwB,EAAE,KAAK1H,KAAL,CAAW0H,wBAJpB;MAKjBC,KAAK,EAAE,KAAK3H,KAAL,CAAW2H,KALD;MAMjBlE,KAAK,EAAEhD,YAAY,IAAI2D,iBANN;MAOjBL,cAAc,EAAEA,cAPC;MAQjBhC,OAAO,EAAEA,OARQ;MASjB6F,qBAAqB,EAAE,KAAK5H,KAAL,CAAW4H,qBATjB;MAUjBC,sBAAsB,EAAE,KAAK7H,KAAL,CAAW6H,sBAVlB;MAWjBC,eAAe,EAAE,KAAK9H,KAAL,CAAW8H,eAXX;MAYjBC,eAAe,EAAE,KAAK/H,KAAL,CAAW+H,eAZX;MAajBC,aAAa,EAAE,KAAKhI,KAAL,CAAWgI,aAbT;MAcjBC,iBAAiB,EAAE,KAAKjI,KAAL,CAAWiI,iBAdb;MAejBtF,OAAO,EAAEA,OAfQ;MAgBjBC,OAAO,EAAEA,OAhBQ;MAiBjBgD,YAAY,EAAE,KAAK5E,SAjBF;MAkBjByD,eAAe,EAAEA,eAlBA;MAmBjBG,YAAY,EAAEA;IAnBG,CADN,CAAb,CALF,CAdF,CAxCJ,CADF;EAuFD,CAhIM;;EAkIArB,iCAAP;IACE,IAAI,KAAKsC,UAAL,CAAgB5E,OAApB,EAA6B;MAC3B,KAAK4E,UAAL,CAAgB5E,OAAhB,CAAwBC,KAAxB;IACD;EACF,CAJM;;EAMAqC,iCAAP;IACE,KAAK/C,QAAL,CAAc,KAAK4C,gBAAL,EAAd;EACD,CAFM;;EAICG,4CAAR,UAAyB/C,QAAzB,EAA4CgD,SAA5C,EAAwE;IAChE;IAAA,IAAE1B,0BAAF;IAAA,IAAcC,oBAAd;IAAA,IAAuB0B,gBAAvB;IAAA,IAA8Bd,oBAA9B;IAAA,IAAuCC,oBAAvC;IAAA,IAAgDwB,wCAAhD;;IACN,IAAIpC,YAAY,GAAG,CAACoC,iBAAD,IAAsBtC,UAAtB,IAAoC,CAAC2B,KAArC,GAA6C1B,OAAQ,CAACE,sBAAT,IAAmC,GAAhF,GAAsFlB,SAAzG;;IAEA,IAAI,CAACiB,YAAD,IAAiByB,KAArB,EAA4B;MAC1BzB,YAAY,GAAG,KAAKkB,kBAAL,CAAwBO,KAAxB,EAAgCd,OAAhC,EAAyCC,OAAzC,IACXb,OAAQ,CAACoB,yBAAT,IAAsC,GAD3B,GAEXpC,SAFJ;IAGD;;IAED,IAAIP,QAAJ,EAAc;MACZ,KAAKA,QAAL,CAAc;QACZwB,YAAY,EAAEA;MADF,CAAd;IAGD;;IAED,OAAOA,YAAP;EACD,CAjBO;;EA0IAuB,gDAAR;IACE,IAAI,CAAC,KAAK5B,KAAL,CAAWC,iBAAhB,EAAmC;MACjC,KAAKN,0BAAL,GAAkC,IAAlC;MACA,KAAKd,QAAL,CAAc;QACZoB,iBAAiB,EAAE;MADP,CAAd;IAGD;EACF,CAPO;;EAuIA2B,4CAAR,UAAyBvD,KAAzB,EAA6D;IAApC;MAAAA,QAA0B,KAAKA,KAA/B;IAAoC;;IAC3D,OAAO;MACLS,YAAY,EAAET,KAAK,CAACyD,KAAN,IAAe1C,SADxB;MAELL,aAAa,EAAEV,KAAK,CAACK,UAAN,IAAoBL,KAAK,CAACyD,KAA1B,GAAkCzD,KAAK,CAACK,UAAN,CAAiBL,KAAK,CAACyD,KAAvB,CAAlC,GAAkE,EAF5E;MAGL7B,iBAAiB,EAAE,KAHd;MAILI,YAAY,EAAE,KAAK0B,gBAAL,CAAsB,KAAtB;IAJT,CAAP;EAMD,CAPO;;EASAH,8CAAR,UAA2BnD,IAA3B,EAAuCuC,OAAvC,EAAuDC,OAAvD,EAAqE;IACnE,OAAQ,CAAC,CAACD,OAAF,IAAa7D,eAAe,CAAC6D,OAAD,EAAWvC,IAAX,CAAf,GAAkC,CAAhD,IAAuD,CAAC,CAACwC,OAAF,IAAa9D,eAAe,CAAC8D,OAAD,EAAWxC,IAAX,CAAf,GAAkC,CAA7G;EACD,CAFO;;EAIAmD,4CAAR;IACE,IAAI,KAAK5B,KAAL,CAAWC,iBAAf,EAAkC;MAChC,OAAOb,SAAP;IACD;;IACD,OAAO,KAAKY,KAAL,CAAWK,YAAlB;EACD,CALO;;EAvgBMuB,8BAAiC;IAC7ClC,cAAc,EAAE,KAD6B;IAE7ChB,UAAU,EAAE,oBAACD,IAAD,EAAW;MACrB,IAAIA,IAAJ,EAAU;QACR,OAAOA,IAAI,CAAC8H,YAAL,EAAP;MACD;;MAED,OAAO,EAAP;IACD,CAR4C;IAS7CxF,mBAAmB,EAAE,6BAACyF,OAAD,EAAgB;MACnC,IAAM/H,IAAI,GAAGgI,IAAI,CAACC,KAAL,CAAWF,OAAX,CAAb;;MACA,IAAI/H,IAAJ,EAAU;QACR,OAAO,IAAIgI,IAAJ,CAAShI,IAAT,CAAP;MACD;;MAED,OAAO,IAAP;IACD,CAhB4C;IAiB7C2D,cAAc,EAAEvF,SAAS,CAAC8J,MAjBmB;IAkB7ClE,iBAAiB,EAAE,IAAIgE,IAAJ,EAlB0B;IAmB7CtG,UAAU,EAAE,KAnBiC;IAoB7C2F,oBAAoB,EAAE,IApBuB;IAqB7CC,wBAAwB,EAAE,KArBmB;IAsB7C3F,OAAO,EAAE9C,eAtBoC;IAuB7C2I,qBAAqB,EAAE,KAvBsB;IAwB7CC,sBAAsB,EAAE,KAxBqB;IAyB7CrD,UAAU,EAAE,KAzBiC;IA0B7CF,eAAe,EAAE,UA1B4B;IA2B7CwD,eAAe,EAAE,KA3B4B;IA4B7CC,eAAe,EAAEtJ,eAAe,CAAC8J,QA5BY;IA6B7CP,aAAa,EAAE,IA7B8B;IA8B7CC,iBAAiB,EAAElH,SA9B0B;IA+B7C0D,eAAe,EAAE,KA/B4B;IAgC7CE,UAAU,EAAE,KAhCiC;IAiC7CC,YAAY,EAAE;EAjC+B,CAAjC;EA6gBhB;AAAC,CA9gBD,CAAoC7G,KAAK,CAACyK,SAA1C;;SAAajF","names":["React","KeyCodes","classNamesFunction","getId","getNativeProps","divProperties","css","initializeComponentRef","Calendar","DayOfWeek","FirstWeekOfYear","Callout","DirectionalHint","TextField","compareDates","compareDatePart","FocusTrapZone","getClassNames","DEFAULT_STRINGS","months","shortMonths","days","shortDays","goToToday","prevMonthAriaLabel","nextMonthAriaLabel","prevYearAriaLabel","nextYearAriaLabel","prevYearRangeAriaLabel","nextYearRangeAriaLabel","closeButtonAriaLabel","weekNumberFormatString","__extends","props","_super","_this","createRef","date","formatDate","onSelectDate","calendarProps","setState","selectedDate","formattedDate","_calendarDismissed","shouldFocus","calloutProps","setInitialFocus","undefined","_calendar","current","focus","ev","disableAutoFocus","allowTextInput","_preventFocusOpeningPicker","_showDatePickerPopup","_validateTextInput","newValue","textField","state","isDatePickerShown","_dismissDatePickerPopup","isRequired","strings","errorMessage","isRequiredErrorMessage","onChange","which","enter","preventDefault","stopPropagation","escape","_handleEscKey","disabled","parseDateFromString","minDate","maxDate","inputValue","isNaN","getTime","toString","invalidInputErrorMessage","_isDateOutOfBounds","isOutOfBoundsErrorMessage","_getDefaultState","_id","id","DatePickerBase","nextProps","value","_setErrorMessage","oldValue","prevProps","prevState","onAfterMenuDismiss","firstDayOfWeek","label","theme","className","styles","initialPickerDate","ariaLabel","pickerAriaLabel","placeholder","borderless","showCloseButton","textFieldProps","underlined","allFocusable","_b","CalendarType","tabIndex","classNames","calloutId","nativeProps","iconProps","root","ref","_datePickerDiv","wrapper","__assign","role","required","_getErrorMessage","componentRef","_textField","readOnly","iconName","icon","onClick","_onIconClick","onKeyDown","_onTextFieldKeyDown","onFocus","_onTextFieldFocus","onBlur","_onTextFieldBlur","_onTextFieldClick","_onTextFieldChanged","isBeakVisible","gapSpace","doNotLayer","target","directionalHint","bottomLeftEdge","callout","onDismiss","onPositioned","_onCalloutPositioned","isClickableOutsideFocusTrap","disableFirstFocus","forceFocusInsideTrap","_onSelectDate","isMonthPickerVisible","showMonthPickerAsOverlay","today","highlightCurrentMonth","highlightSelectedMonth","showWeekNumbers","firstWeekOfYear","showGoToToday","dateTimeFormatter","toDateString","dateStr","Date","parse","Sunday","FirstDay","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\DatePicker\\DatePicker.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  IDatePicker,\n  IDatePickerProps,\n  IDatePickerStrings,\n  IDatePickerStyleProps,\n  IDatePickerStyles,\n} from './DatePicker.types';\nimport {\n  KeyCodes,\n  classNamesFunction,\n  getId,\n  getNativeProps,\n  divProperties,\n  css,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { Calendar, ICalendar, DayOfWeek } from '../../Calendar';\nimport { FirstWeekOfYear } from '../../utilities/dateValues/DateValues';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { TextField, ITextField } from '../../TextField';\nimport { compareDates, compareDatePart } from '../../utilities/dateMath/DateMath';\nimport { FocusTrapZone } from '../../FocusTrapZone';\n\nconst getClassNames = classNamesFunction<IDatePickerStyleProps, IDatePickerStyles>();\n\nexport interface IDatePickerState {\n  selectedDate?: Date;\n  formattedDate?: string;\n  isDatePickerShown?: boolean;\n  errorMessage?: string;\n}\n\nconst DEFAULT_STRINGS: IDatePickerStrings = {\n  months: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  goToToday: 'Go to today',\n  prevMonthAriaLabel: 'Go to previous month',\n  nextMonthAriaLabel: 'Go to next month',\n  prevYearAriaLabel: 'Go to previous year',\n  nextYearAriaLabel: 'Go to next year',\n  prevYearRangeAriaLabel: 'Previous year range',\n  nextYearRangeAriaLabel: 'Next year range',\n  closeButtonAriaLabel: 'Close date picker',\n  weekNumberFormatString: 'Week number {0}',\n};\n\nexport class DatePickerBase extends React.Component<IDatePickerProps, IDatePickerState> implements IDatePicker {\n  public static defaultProps: IDatePickerProps = {\n    allowTextInput: false,\n    formatDate: (date: Date) => {\n      if (date) {\n        return date.toDateString();\n      }\n\n      return '';\n    },\n    parseDateFromString: (dateStr: string) => {\n      const date = Date.parse(dateStr);\n      if (date) {\n        return new Date(date);\n      }\n\n      return null;\n    },\n    firstDayOfWeek: DayOfWeek.Sunday,\n    initialPickerDate: new Date(),\n    isRequired: false,\n    isMonthPickerVisible: true,\n    showMonthPickerAsOverlay: false,\n    strings: DEFAULT_STRINGS,\n    highlightCurrentMonth: false,\n    highlightSelectedMonth: false,\n    borderless: false,\n    pickerAriaLabel: 'Calendar',\n    showWeekNumbers: false,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    showGoToToday: true,\n    dateTimeFormatter: undefined,\n    showCloseButton: false,\n    underlined: false,\n    allFocusable: false,\n  };\n\n  private _calendar = React.createRef<ICalendar>();\n  private _datePickerDiv = React.createRef<HTMLDivElement>();\n  private _textField = React.createRef<ITextField>();\n  private _preventFocusOpeningPicker: boolean;\n  private _id: string;\n\n  constructor(props: IDatePickerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this.state = this._getDefaultState();\n\n    this._id = props.id || getId('DatePicker');\n\n    this._preventFocusOpeningPicker = false;\n  }\n\n  public UNSAFE_componentWillReceiveProps(nextProps: IDatePickerProps): void {\n    const { formatDate, value } = nextProps;\n\n    if (\n      compareDates(this.props.minDate!, nextProps.minDate!) &&\n      compareDates(this.props.maxDate!, nextProps.maxDate!) &&\n      this.props.isRequired === nextProps.isRequired &&\n      compareDates(this.state.selectedDate!, value!) &&\n      this.props.formatDate === formatDate\n    ) {\n      // if the props we care about haven't changed, don't run validation or updates\n      return;\n    }\n\n    this._setErrorMessage(true, nextProps);\n\n    this._id = nextProps.id || this._id;\n\n    // Issue# 1274: Check if the date value changed from old value, i.e., if indeed a new date is being\n    // passed in or if the formatting function was modified. We only update the selected date if either of these\n    // had a legit change. Note tha the bug will still repro when only the formatDate was passed in props and this\n    // is the result of the onSelectDate callback, but this should be a rare scenario.\n    const oldValue = this.state.selectedDate;\n    if (!compareDates(oldValue!, value!) || this.props.formatDate !== formatDate) {\n      this.setState({\n        selectedDate: value || undefined,\n        formattedDate: formatDate && value ? formatDate(value) : '',\n      });\n    }\n  }\n\n  public componentDidUpdate(prevProps: IDatePickerProps, prevState: IDatePickerState) {\n    if (prevState.isDatePickerShown && !this.state.isDatePickerShown) {\n      // If DatePicker's menu (Calendar) is closed, run onAfterMenuDismiss\n      if (this.props.onAfterMenuDismiss) {\n        this.props.onAfterMenuDismiss();\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      firstDayOfWeek,\n      strings,\n      label,\n      theme,\n      className,\n      styles,\n      initialPickerDate,\n      isRequired,\n      disabled,\n      ariaLabel,\n      pickerAriaLabel,\n      placeholder,\n      allowTextInput,\n      borderless,\n      minDate,\n      maxDate,\n      showCloseButton,\n      calendarProps,\n      calloutProps,\n      textField: textFieldProps,\n      underlined,\n      allFocusable,\n      calendarAs: CalendarType = Calendar,\n      tabIndex,\n    } = this.props;\n    const { isDatePickerShown, formattedDate, selectedDate } = this.state;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      disabled,\n      label: !!label,\n      isDatePickerShown,\n    });\n\n    const calloutId = getId('DatePicker-Callout');\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['value']);\n    const iconProps = textFieldProps && textFieldProps.iconProps;\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div\n          ref={this._datePickerDiv}\n          aria-haspopup=\"true\"\n          aria-owns={isDatePickerShown ? calloutId : undefined}\n          className={classNames.wrapper}\n        >\n          <TextField\n            role=\"combobox\"\n            label={label}\n            aria-expanded={isDatePickerShown}\n            ariaLabel={ariaLabel}\n            aria-controls={isDatePickerShown ? calloutId : undefined}\n            required={isRequired}\n            disabled={disabled}\n            errorMessage={this._getErrorMessage()}\n            placeholder={placeholder}\n            borderless={borderless}\n            value={formattedDate}\n            componentRef={this._textField}\n            underlined={underlined}\n            tabIndex={tabIndex}\n            readOnly={!allowTextInput}\n            {...textFieldProps}\n            id={this._id + '-label'}\n            className={css(classNames.textField, textFieldProps && textFieldProps.className)}\n            iconProps={{\n              iconName: 'Calendar',\n              ...iconProps,\n              className: css(classNames.icon, iconProps && iconProps.className),\n              onClick: this._onIconClick,\n            }}\n            onKeyDown={this._onTextFieldKeyDown}\n            onFocus={this._onTextFieldFocus}\n            onBlur={this._onTextFieldBlur}\n            onClick={this._onTextFieldClick}\n            onChange={this._onTextFieldChanged}\n          />\n        </div>\n        {isDatePickerShown && (\n          <Callout\n            id={calloutId}\n            role=\"dialog\"\n            ariaLabel={pickerAriaLabel}\n            isBeakVisible={false}\n            gapSpace={0}\n            doNotLayer={false}\n            target={this._datePickerDiv.current}\n            directionalHint={DirectionalHint.bottomLeftEdge}\n            {...calloutProps}\n            className={css(classNames.callout, calloutProps && calloutProps.className)}\n            onDismiss={this._calendarDismissed}\n            onPositioned={this._onCalloutPositioned}\n          >\n            <FocusTrapZone\n              isClickableOutsideFocusTrap={true}\n              disableFirstFocus={this.props.disableAutoFocus}\n              forceFocusInsideTrap={false}\n            >\n              <CalendarType\n                {...calendarProps}\n                onSelectDate={this._onSelectDate}\n                onDismiss={this._calendarDismissed}\n                isMonthPickerVisible={this.props.isMonthPickerVisible}\n                showMonthPickerAsOverlay={this.props.showMonthPickerAsOverlay}\n                today={this.props.today}\n                value={selectedDate || initialPickerDate}\n                firstDayOfWeek={firstDayOfWeek}\n                strings={strings!}\n                highlightCurrentMonth={this.props.highlightCurrentMonth}\n                highlightSelectedMonth={this.props.highlightSelectedMonth}\n                showWeekNumbers={this.props.showWeekNumbers}\n                firstWeekOfYear={this.props.firstWeekOfYear}\n                showGoToToday={this.props.showGoToToday}\n                dateTimeFormatter={this.props.dateTimeFormatter}\n                minDate={minDate}\n                maxDate={maxDate}\n                componentRef={this._calendar}\n                showCloseButton={showCloseButton}\n                allFocusable={allFocusable}\n              />\n            </FocusTrapZone>\n          </Callout>\n        )}\n      </div>\n    );\n  }\n\n  public focus(): void {\n    if (this._textField.current) {\n      this._textField.current.focus();\n    }\n  }\n\n  public reset(): void {\n    this.setState(this._getDefaultState());\n  }\n\n  private _setErrorMessage(setState: boolean, nextProps?: IDatePickerProps): string | undefined {\n    const { isRequired, strings, value, minDate, maxDate, initialPickerDate } = nextProps || this.props;\n    let errorMessage = !initialPickerDate && isRequired && !value ? strings!.isRequiredErrorMessage || ' ' : undefined;\n\n    if (!errorMessage && value) {\n      errorMessage = this._isDateOutOfBounds(value!, minDate, maxDate)\n        ? strings!.isOutOfBoundsErrorMessage || ' '\n        : undefined;\n    }\n\n    if (setState) {\n      this.setState({\n        errorMessage: errorMessage,\n      });\n    }\n\n    return errorMessage;\n  }\n\n  private _onSelectDate = (date: Date): void => {\n    const { formatDate, onSelectDate } = this.props;\n\n    if (this.props.calendarProps && this.props.calendarProps.onSelectDate) {\n      this.props.calendarProps.onSelectDate(date);\n    }\n\n    this.setState({\n      selectedDate: date,\n      formattedDate: formatDate && date ? formatDate(date) : '',\n    });\n\n    if (onSelectDate) {\n      onSelectDate(date);\n    }\n\n    this._calendarDismissed();\n  };\n\n  private _onCalloutPositioned = (): void => {\n    let shouldFocus = true;\n    // If the user has specified that the callout shouldn't use initial focus, then respect\n    // that and don't attempt to set focus. That will default to true within the callout\n    // so we need to check if it's undefined here.\n    if (this.props.calloutProps && this.props.calloutProps.setInitialFocus !== undefined) {\n      shouldFocus = this.props.calloutProps.setInitialFocus;\n    }\n    if (this._calendar.current && shouldFocus) {\n      this._calendar.current.focus();\n    }\n  };\n\n  private _onTextFieldFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    if (this.props.disableAutoFocus) {\n      return;\n    }\n\n    if (!this.props.allowTextInput) {\n      if (!this._preventFocusOpeningPicker) {\n        this._showDatePickerPopup();\n      } else {\n        this._preventFocusOpeningPicker = false;\n      }\n    }\n  };\n\n  private _onTextFieldBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    this._validateTextInput();\n  };\n\n  private _onTextFieldChanged = (\n    ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    newValue: string,\n  ): void => {\n    const { allowTextInput, textField } = this.props;\n\n    if (allowTextInput) {\n      if (this.state.isDatePickerShown) {\n        this._dismissDatePickerPopup();\n      }\n\n      const { isRequired, strings } = this.props;\n\n      this.setState({\n        errorMessage: isRequired && !newValue ? strings!.isRequiredErrorMessage || ' ' : undefined,\n        formattedDate: newValue,\n      });\n    }\n\n    if (textField && textField.onChange) {\n      textField.onChange(ev, newValue);\n    }\n  };\n\n  private _onTextFieldKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    switch (ev.which) {\n      case KeyCodes.enter:\n        ev.preventDefault();\n        ev.stopPropagation();\n        if (!this.state.isDatePickerShown) {\n          this._validateTextInput();\n          this._showDatePickerPopup();\n        } else {\n          // When DatePicker allows input date string directly,\n          // it is expected to hit another enter to close the popup\n          if (this.props.allowTextInput) {\n            this._dismissDatePickerPopup();\n          }\n        }\n        break;\n\n      case KeyCodes.escape:\n        this._handleEscKey(ev);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  private _onTextFieldClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    if (!this.props.disableAutoFocus && !this.state.isDatePickerShown && !this.props.disabled) {\n      this._showDatePickerPopup();\n      return;\n    }\n    if (this.props.allowTextInput) {\n      this._dismissDatePickerPopup();\n    }\n  };\n\n  private _onIconClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    ev.stopPropagation();\n    if (!this.state.isDatePickerShown && !this.props.disabled) {\n      this._showDatePickerPopup();\n    } else if (this.props.allowTextInput) {\n      this._dismissDatePickerPopup();\n    }\n  };\n\n  private _showDatePickerPopup(): void {\n    if (!this.state.isDatePickerShown) {\n      this._preventFocusOpeningPicker = true;\n      this.setState({\n        isDatePickerShown: true,\n      });\n    }\n  }\n\n  private _dismissDatePickerPopup = (): void => {\n    if (this.state.isDatePickerShown) {\n      this.setState(\n        {\n          isDatePickerShown: false,\n        },\n        () => {\n          // setState is async, so we must call validate in a callback\n          this._validateTextInput();\n        },\n      );\n    }\n  };\n\n  /**\n   * Callback for closing the calendar callout\n   */\n  private _calendarDismissed = (): void => {\n    this._preventFocusOpeningPicker = true;\n    this._dismissDatePickerPopup();\n    // don't need to focus the text box, if necessary the focusTrapZone will do it\n  };\n\n  private _handleEscKey = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (this.state.isDatePickerShown) {\n      ev.stopPropagation();\n    }\n    this._calendarDismissed();\n  };\n\n  private _validateTextInput = (): void => {\n    const {\n      isRequired,\n      allowTextInput,\n      strings,\n      parseDateFromString,\n      onSelectDate,\n      formatDate,\n      minDate,\n      maxDate,\n    } = this.props;\n    const inputValue = this.state.formattedDate;\n\n    // Do validation only if DatePicker's popup is dismissed\n    if (this.state.isDatePickerShown) {\n      return;\n    }\n\n    if (allowTextInput) {\n      let date = null;\n\n      if (inputValue) {\n        // Don't parse if the selected date has the same formatted string as what we're about to parse.\n        // The formatted string might be ambiguous (ex: \"1/2/3\" or \"New Year Eve\") and the parser might\n        // not be able to come up with the exact same date.\n        if (\n          this.state.selectedDate &&\n          !this.state.errorMessage &&\n          formatDate &&\n          formatDate(this.state.selectedDate) === inputValue\n        ) {\n          return;\n        }\n        date = parseDateFromString!(inputValue);\n\n        // Check if date is null, or date is Invalid Date\n        if (!date || isNaN(date.getTime())) {\n          // Reset invalid input field, if formatting is available\n          if (formatDate) {\n            date = this.state.selectedDate;\n            this.setState({\n              formattedDate: formatDate(date!).toString(),\n            });\n          }\n\n          this.setState({\n            errorMessage: strings!.invalidInputErrorMessage || ' ',\n          });\n        } else {\n          // Check against optional date boundaries\n          if (this._isDateOutOfBounds(date, minDate, maxDate)) {\n            this.setState({\n              errorMessage: strings!.isOutOfBoundsErrorMessage || ' ',\n            });\n          } else {\n            this.setState({\n              selectedDate: date,\n              errorMessage: '',\n            });\n\n            // When formatting is available:\n            // If formatted date is valid, but is different from input, update with formatted date.\n            // This occurs when an invalid date is entered twice.\n            if (formatDate && formatDate(date) !== inputValue) {\n              this.setState({\n                formattedDate: formatDate(date).toString(),\n              });\n            }\n          }\n        }\n      } else {\n        // Only show error for empty inputValue if it is a required field\n        this.setState({\n          errorMessage: isRequired ? strings!.isRequiredErrorMessage || ' ' : '',\n        });\n      }\n\n      // Execute onSelectDate callback\n      if (onSelectDate) {\n        // If no input date string or input date string is invalid\n        // date variable will be null, callback should expect null value for this case\n        onSelectDate(date);\n      }\n    } else if (isRequired && !inputValue) {\n      // Check when DatePicker is a required field but has NO input value\n      this.setState({\n        errorMessage: strings!.isRequiredErrorMessage || ' ',\n      });\n    } else {\n      // Cleanup the error message\n      this.setState({\n        errorMessage: '',\n      });\n    }\n  };\n\n  private _getDefaultState(props: IDatePickerProps = this.props): IDatePickerState {\n    return {\n      selectedDate: props.value || undefined,\n      formattedDate: props.formatDate && props.value ? props.formatDate(props.value) : '',\n      isDatePickerShown: false,\n      errorMessage: this._setErrorMessage(false),\n    };\n  }\n\n  private _isDateOutOfBounds(date: Date, minDate?: Date, maxDate?: Date): boolean {\n    return (!!minDate && compareDatePart(minDate!, date) > 0) || (!!maxDate && compareDatePart(maxDate!, date) < 0);\n  }\n\n  private _getErrorMessage(): string | undefined {\n    if (this.state.isDatePickerShown) {\n      return undefined;\n    }\n    return this.state.errorMessage;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}