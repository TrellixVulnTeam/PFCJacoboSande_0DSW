{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { keyframes, getGlobalClassNames, hiddenContentStyle, HighContrastSelector, getEdgeChromiumNoHighContrastAdjustSelector } from '../../Styling';\nimport { getRTL, memoizeFunction } from '../../Utilities';\nvar GlobalClassNames = {\n  root: 'ms-Shimmer-container',\n  shimmerWrapper: 'ms-Shimmer-shimmerWrapper',\n  shimmerGradient: 'ms-Shimmer-shimmerGradient',\n  dataWrapper: 'ms-Shimmer-dataWrapper'\n};\nvar BACKGROUND_OFF_SCREEN_POSITION = '100%';\nvar shimmerAnimation = memoizeFunction(function () {\n  return keyframes({\n    '0%': {\n      transform: \"translateX(-\" + BACKGROUND_OFF_SCREEN_POSITION + \")\"\n    },\n    '100%': {\n      transform: \"translateX(\" + BACKGROUND_OFF_SCREEN_POSITION + \")\"\n    }\n  });\n});\nvar shimmerAnimationRTL = memoizeFunction(function () {\n  return keyframes({\n    '100%': {\n      transform: \"translateX(-\" + BACKGROUND_OFF_SCREEN_POSITION + \")\"\n    },\n    '0%': {\n      transform: \"translateX(\" + BACKGROUND_OFF_SCREEN_POSITION + \")\"\n    }\n  });\n});\nexport function getStyles(props) {\n  var _a;\n\n  var isDataLoaded = props.isDataLoaded,\n      className = props.className,\n      theme = props.theme,\n      transitionAnimationInterval = props.transitionAnimationInterval,\n      shimmerColor = props.shimmerColor,\n      shimmerWaveColor = props.shimmerWaveColor;\n  var semanticColors = theme.semanticColors;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var isRTL = getRTL(theme);\n  return {\n    root: [classNames.root, theme.fonts.medium, {\n      position: 'relative',\n      height: 'auto'\n    }, className],\n    shimmerWrapper: [classNames.shimmerWrapper, {\n      position: 'relative',\n      overflow: 'hidden',\n      transform: 'translateZ(0)',\n      backgroundColor: shimmerColor || semanticColors.disabledBackground,\n      transition: \"opacity \" + transitionAnimationInterval + \"ms\",\n      selectors: __assign((_a = {\n        '> *': {\n          transform: 'translateZ(0)'\n        }\n      }, _a[HighContrastSelector] = {\n        background: \"WindowText\\n                        linear-gradient(\\n                          to right,\\n                          transparent 0%,\\n                          Window 50%,\\n                          transparent 100%)\\n                        0 0 / 90% 100%\\n                        no-repeat\"\n      }, _a), getEdgeChromiumNoHighContrastAdjustSelector())\n    }, isDataLoaded && {\n      opacity: '0',\n      position: 'absolute',\n      top: '0',\n      bottom: '0',\n      left: '0',\n      right: '0'\n    }],\n    shimmerGradient: [classNames.shimmerGradient, {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      background: (shimmerColor || semanticColors.disabledBackground) + \"\\n                      linear-gradient(\\n                        to right,\\n                        \" + (shimmerColor || semanticColors.disabledBackground) + \" 0%,\\n                        \" + (shimmerWaveColor || semanticColors.bodyDivider) + \" 50%,\\n                        \" + (shimmerColor || semanticColors.disabledBackground) + \" 100%)\\n                      0 0 / 90% 100%\\n                      no-repeat\",\n      transform: \"translateX(-\" + BACKGROUND_OFF_SCREEN_POSITION + \")\",\n      animationDuration: '2s',\n      animationTimingFunction: 'ease-in-out',\n      animationDirection: 'normal',\n      animationIterationCount: 'infinite',\n      animationName: isRTL ? shimmerAnimationRTL() : shimmerAnimation()\n    }],\n    dataWrapper: [classNames.dataWrapper, {\n      position: 'absolute',\n      top: '0',\n      bottom: '0',\n      left: '0',\n      right: '0',\n      opacity: '0',\n      background: 'none',\n      backgroundColor: 'transparent',\n      border: 'none',\n      transition: \"opacity \" + transitionAnimationInterval + \"ms\"\n    }, isDataLoaded && {\n      opacity: '1',\n      position: 'static'\n    }],\n    screenReaderText: hiddenContentStyle\n  };\n}","map":{"version":3,"mappings":";AACA,SACEA,SADF,EAEEC,mBAFF,EAGEC,kBAHF,EAIEC,oBAJF,EAKEC,2CALF,QAMO,eANP;AAOA,SAASC,MAAT,EAAiBC,eAAjB,QAAwC,iBAAxC;AAEA,IAAMC,gBAAgB,GAAG;AACvBC,MAAI,EAAE,sBADiB;AAEvBC,gBAAc,EAAE,2BAFO;AAGvBC,iBAAe,EAAE,4BAHM;AAIvBC,aAAW,EAAE;AAJU,CAAzB;AAOA,IAAMC,8BAA8B,GAAG,MAAvC;AAEA,IAAMC,gBAAgB,GAAGP,eAAe,CAAC;AACvC,kBAAS,CAAC;AACR,UAAM;AACJQ,eAAS,EAAE,iBAAeF,8BAAf,GAA6C;AADpD,KADE;AAIR,YAAQ;AACNE,eAAS,EAAE,gBAAcF,8BAAd,GAA4C;AADjD;AAJA,GAAD,CAAT;AAOE,CARoC,CAAxC;AAWA,IAAMG,mBAAmB,GAAGT,eAAe,CAAC;AAC1C,kBAAS,CAAC;AACR,YAAQ;AACNQ,eAAS,EAAE,iBAAeF,8BAAf,GAA6C;AADlD,KADA;AAIR,UAAM;AACJE,eAAS,EAAE,gBAAcF,8BAAd,GAA4C;AADnD;AAJE,GAAD,CAAT;AAOE,CARuC,CAA3C;AAWA,OAAM,SAAUI,SAAV,CAAoBC,KAApB,EAA6C;;;AACzC;AAAA,MAAcC,2BAAd;AAAA,MAAyBC,mBAAzB;AAAA,MAAgCC,+DAAhC;AAAA,MAA6DC,iCAA7D;AAAA,MAA2EC,yCAA3E;AAEA;AACR,MAAMC,UAAU,GAAGtB,mBAAmB,CAACM,gBAAD,EAAmBY,KAAnB,CAAtC;AAEA,MAAMK,KAAK,GAAGnB,MAAM,CAACc,KAAD,CAApB;AAEA,SAAO;AACLX,QAAI,EAAE,CACJe,UAAU,CAACf,IADP,EAEJW,KAAK,CAACM,KAAN,CAAYC,MAFR,EAGJ;AACEC,cAAQ,EAAE,UADZ;AAEEC,YAAM,EAAE;AAFV,KAHI,EAOJV,SAPI,CADD;AAULT,kBAAc,EAAE,CACdc,UAAU,CAACd,cADG,EAEd;AACEkB,cAAQ,EAAE,UADZ;AAEEE,cAAQ,EAAE,QAFZ;AAGEf,eAAS,EAAE,eAHb;AAIEgB,qBAAe,EAAET,YAAY,IAAIU,cAAc,CAACC,kBAJlD;AAKEC,gBAAU,EAAE,aAAWb,2BAAX,GAAsC,IALpD;AAMEc,eAAS;AACP,eAAO;AACLpB,mBAAS,EAAE;AADN;AADA,SAGNqB,GACAhC,oBADA,IACuB;AACtBiC,kBAAU,EAAE;AADU,OAJjB,EAaND,EAbM,GAcJ/B,2CAA2C,EAdvC;AANX,KAFc,EAyBdiC,YAAY,IAAI;AACdC,aAAO,EAAE,GADK;AAEdX,cAAQ,EAAE,UAFI;AAGdY,SAAG,EAAE,GAHS;AAIdC,YAAM,EAAE,GAJM;AAKdC,UAAI,EAAE,GALQ;AAMdC,WAAK,EAAE;AANO,KAzBF,CAVX;AA4CLhC,mBAAe,EAAE,CACfa,UAAU,CAACb,eADI,EAEf;AACEiB,cAAQ,EAAE,UADZ;AAEEY,SAAG,EAAE,CAFP;AAGEE,UAAI,EAAE,CAHR;AAIEE,WAAK,EAAE,MAJT;AAKEf,YAAM,EAAE,MALV;AAMEQ,gBAAU,EAAE,CAAGf,YAAY,IAAIU,cAAc,CAACC,kBAAlC,IAAoD,uGAApD,IAGMX,YAAY,IAAIU,cAAc,CAACC,kBAHrC,IAGuD,gCAHvD,IAIMV,gBAAgB,IAAIS,cAAc,CAACa,WAJzC,IAIoD,iCAJpD,IAKMvB,YAAY,IAAIU,cAAc,CAACC,kBALrC,IAKuD,+EAXrE;AAcElB,eAAS,EAAE,iBAAeF,8BAAf,GAA6C,GAd1D;AAeEiC,uBAAiB,EAAE,IAfrB;AAgBEC,6BAAuB,EAAE,aAhB3B;AAiBEC,wBAAkB,EAAE,QAjBtB;AAkBEC,6BAAuB,EAAE,UAlB3B;AAmBEC,mBAAa,EAAEzB,KAAK,GAAGT,mBAAmB,EAAtB,GAA2BF,gBAAgB;AAnBjE,KAFe,CA5CZ;AAoELF,eAAW,EAAE,CACXY,UAAU,CAACZ,WADA,EAEX;AACEgB,cAAQ,EAAE,UADZ;AAEEY,SAAG,EAAE,GAFP;AAGEC,YAAM,EAAE,GAHV;AAIEC,UAAI,EAAE,GAJR;AAKEC,WAAK,EAAE,GALT;AAMEJ,aAAO,EAAE,GANX;AAOEF,gBAAU,EAAE,MAPd;AAQEN,qBAAe,EAAE,aARnB;AASEoB,YAAM,EAAE,MATV;AAUEjB,gBAAU,EAAE,aAAWb,2BAAX,GAAsC;AAVpD,KAFW,EAcXiB,YAAY,IAAI;AACdC,aAAO,EAAE,GADK;AAEdX,cAAQ,EAAE;AAFI,KAdL,CApER;AAuFLwB,oBAAgB,EAAEjD;AAvFb,GAAP;AAyFD","names":["keyframes","getGlobalClassNames","hiddenContentStyle","HighContrastSelector","getEdgeChromiumNoHighContrastAdjustSelector","getRTL","memoizeFunction","GlobalClassNames","root","shimmerWrapper","shimmerGradient","dataWrapper","BACKGROUND_OFF_SCREEN_POSITION","shimmerAnimation","transform","shimmerAnimationRTL","getStyles","props","className","theme","transitionAnimationInterval","shimmerColor","shimmerWaveColor","classNames","isRTL","fonts","medium","position","height","overflow","backgroundColor","semanticColors","disabledBackground","transition","selectors","_a","background","isDataLoaded","opacity","top","bottom","left","right","width","bodyDivider","animationDuration","animationTimingFunction","animationDirection","animationIterationCount","animationName","border","screenReaderText"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Shimmer\\Shimmer.styles.ts"],"sourcesContent":["import { IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\nimport {\n  keyframes,\n  getGlobalClassNames,\n  hiddenContentStyle,\n  HighContrastSelector,\n  getEdgeChromiumNoHighContrastAdjustSelector,\n} from '../../Styling';\nimport { getRTL, memoizeFunction } from '../../Utilities';\n\nconst GlobalClassNames = {\n  root: 'ms-Shimmer-container',\n  shimmerWrapper: 'ms-Shimmer-shimmerWrapper',\n  shimmerGradient: 'ms-Shimmer-shimmerGradient',\n  dataWrapper: 'ms-Shimmer-dataWrapper',\n};\n\nconst BACKGROUND_OFF_SCREEN_POSITION = '100%';\n\nconst shimmerAnimation = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      transform: `translateX(-${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n    '100%': {\n      transform: `translateX(${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n  }),\n);\n\nconst shimmerAnimationRTL = memoizeFunction(() =>\n  keyframes({\n    '100%': {\n      transform: `translateX(-${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n    '0%': {\n      transform: `translateX(${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n  }),\n);\n\nexport function getStyles(props: IShimmerStyleProps): IShimmerStyles {\n  const { isDataLoaded, className, theme, transitionAnimationInterval, shimmerColor, shimmerWaveColor } = props;\n\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const isRTL = getRTL(theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        position: 'relative',\n        height: 'auto',\n      },\n      className,\n    ],\n    shimmerWrapper: [\n      classNames.shimmerWrapper,\n      {\n        position: 'relative',\n        overflow: 'hidden',\n        transform: 'translateZ(0)',\n        backgroundColor: shimmerColor || semanticColors.disabledBackground,\n        transition: `opacity ${transitionAnimationInterval}ms`,\n        selectors: {\n          '> *': {\n            transform: 'translateZ(0)',\n          },\n          [HighContrastSelector]: {\n            background: `WindowText\n                        linear-gradient(\n                          to right,\n                          transparent 0%,\n                          Window 50%,\n                          transparent 100%)\n                        0 0 / 90% 100%\n                        no-repeat`,\n          },\n          ...getEdgeChromiumNoHighContrastAdjustSelector(),\n        },\n      },\n      isDataLoaded && {\n        opacity: '0',\n        position: 'absolute',\n        top: '0',\n        bottom: '0',\n        left: '0',\n        right: '0',\n      },\n    ],\n    shimmerGradient: [\n      classNames.shimmerGradient,\n      {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        background: `${shimmerColor || semanticColors.disabledBackground}\n                      linear-gradient(\n                        to right,\n                        ${shimmerColor || semanticColors.disabledBackground} 0%,\n                        ${shimmerWaveColor || semanticColors.bodyDivider} 50%,\n                        ${shimmerColor || semanticColors.disabledBackground} 100%)\n                      0 0 / 90% 100%\n                      no-repeat`,\n        transform: `translateX(-${BACKGROUND_OFF_SCREEN_POSITION})`,\n        animationDuration: '2s',\n        animationTimingFunction: 'ease-in-out',\n        animationDirection: 'normal',\n        animationIterationCount: 'infinite',\n        animationName: isRTL ? shimmerAnimationRTL() : shimmerAnimation(),\n      },\n    ],\n    dataWrapper: [\n      classNames.dataWrapper,\n      {\n        position: 'absolute',\n        top: '0',\n        bottom: '0',\n        left: '0',\n        right: '0',\n        opacity: '0',\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        transition: `opacity ${transitionAnimationInterval}ms`,\n      },\n      isDataLoaded && {\n        opacity: '1',\n        position: 'static',\n      },\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}