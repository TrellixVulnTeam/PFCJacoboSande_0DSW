{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { buttonProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { getIsChecked, isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\n\nvar ContextualMenuButton =\n/** @class */\nfunction (_super) {\n  __extends(ContextualMenuButton, _super);\n\n  function ContextualMenuButton() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._btn = React.createRef();\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n\n    _this._renderAriaDescription = function (ariaDescription, className) {\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n      return ariaDescription ? React.createElement(\"span\", {\n        id: _this._ariaDescriptionId,\n        className: className\n      }, ariaDescription) : null;\n    };\n\n    _this._getSubmenuTarget = function () {\n      return _this._btn.current ? _this._btn.current : undefined;\n    };\n\n    return _this;\n  }\n\n  ContextualMenuButton.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        item = _a.item,\n        classNames = _a.classNames,\n        index = _a.index,\n        focusableElementIndex = _a.focusableElementIndex,\n        totalItemCount = _a.totalItemCount,\n        hasCheckmarks = _a.hasCheckmarks,\n        hasIcons = _a.hasIcons,\n        _b = _a.contextualMenuItemAs,\n        ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n        expandedMenuItemKey = _a.expandedMenuItemKey,\n        onItemMouseDown = _a.onItemMouseDown,\n        onItemClick = _a.onItemClick,\n        openSubMenu = _a.openSubMenu,\n        dismissSubMenu = _a.dismissSubMenu,\n        dismissMenu = _a.dismissMenu;\n\n    var subMenuId = this._getSubMenuId(item);\n\n    var isChecked = getIsChecked(item);\n    var canCheck = isChecked !== null;\n    var defaultRole = getMenuItemAriaRole(item);\n    var itemHasSubmenu = hasSubmenu(item);\n    var itemProps = item.itemProps,\n        ariaLabel = item.ariaLabel,\n        ariaDescription = item.ariaDescription;\n    var buttonNativeProperties = getNativeProps(item, buttonProperties); // Do not add the disabled attribute to the button so that it is focusable\n\n    delete buttonNativeProperties.disabled;\n    var itemRole = item.role || defaultRole; // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    var ariaDescribedByIds = ariaDescription ? this._ariaDescriptionId : undefined;\n    var itemButtonProperties = {\n      className: classNames.root,\n      onClick: this._onItemClick,\n      onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,\n      onMouseEnter: this._onItemMouseEnter,\n      onMouseLeave: this._onItemMouseLeave,\n      onMouseDown: function onMouseDown(ev) {\n        return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;\n      },\n      onMouseMove: this._onItemMouseMove,\n      href: item.href,\n      title: item.title,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedByIds,\n      'aria-haspopup': itemHasSubmenu || undefined,\n      'aria-owns': item.key === expandedMenuItemKey ? subMenuId : undefined,\n      'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n      'aria-posinset': focusableElementIndex + 1,\n      'aria-setsize': totalItemCount,\n      'aria-disabled': isItemDisabled(item),\n      'aria-checked': (itemRole === 'menuitemcheckbox' || itemRole === 'menuitemradio') && canCheck ? !!isChecked : undefined,\n      'aria-selected': itemRole === 'menuitem' && canCheck ? !!isChecked : undefined,\n      role: itemRole,\n      // eslint-disable-next-line deprecation/deprecation\n      style: item.style\n    };\n    var keytipProps = item.keytipProps;\n\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    return React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      ariaDescribedBy: buttonNativeProperties['aria-describedby'],\n      disabled: isItemDisabled(item)\n    }, function (keytipAttributes) {\n      return React.createElement(\"button\", __assign({\n        ref: _this._btn\n      }, buttonNativeProperties, itemButtonProperties, keytipAttributes, {\n        \"aria-describedby\": mergeAriaAttributeValues(itemButtonProperties['aria-describedby'], keytipAttributes ? keytipAttributes['aria-describedby'] : undefined)\n      }), React.createElement(ChildrenRenderer, __assign({\n        componentRef: item.componentRef,\n        item: item,\n        classNames: classNames,\n        index: index,\n        onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,\n        hasIcons: hasIcons,\n        openSubMenu: openSubMenu,\n        dismissSubMenu: dismissSubMenu,\n        dismissMenu: dismissMenu,\n        getSubmenuTarget: _this._getSubmenuTarget\n      }, itemProps)), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));\n    });\n  };\n\n  return ContextualMenuButton;\n}(ContextualMenuItemWrapper);\n\nexport { ContextualMenuButton };","map":{"version":3,"mappings":"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","names":["React","buttonProperties","getNativeProps","memoizeFunction","getId","mergeAriaAttributeValues","ContextualMenuItemWrapper","KeytipData","getIsChecked","isItemDisabled","hasSubmenu","getMenuItemAriaRole","ContextualMenuItem","__extends","_this","createRef","keytipProps","hasMenu","ariaDescription","className","id","_ariaDescriptionId","_btn","current","undefined","ContextualMenuButton","item","classNames","index","focusableElementIndex","totalItemCount","hasCheckmarks","hasIcons","_b","ChildrenRenderer","expandedMenuItemKey","onItemMouseDown","onItemClick","openSubMenu","dismissSubMenu","dismissMenu","subMenuId","_getSubMenuId","isChecked","canCheck","defaultRole","itemHasSubmenu","ariaLabel","buttonNativeProperties","disabled","itemRole","role","ariaDescribedByIds","itemButtonProperties","root","onClick","_onItemClick","onKeyDown","_onItemKeyDown","onMouseEnter","_onItemMouseEnter","onMouseLeave","_onItemMouseLeave","onMouseDown","ev","onMouseMove","_onItemMouseMove","href","title","key","style","_getMemoizedMenuButtonKeytipProps","ariaDescribedBy","keytipAttributes","ref","__assign","componentRef","onCheckmarkClick","getSubmenuTarget","_getSubmenuTarget","itemProps","_renderAriaDescription","screenReaderText"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\ContextualMenu\\src\\components\\ContextualMenu\\ContextualMenuItemWrapper\\ContextualMenuButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { buttonProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { getIsChecked, isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { IKeytipProps } from '../../Keytip/Keytip.types';\n\nexport class ContextualMenuButton extends ContextualMenuItemWrapper {\n  private _btn = React.createRef<HTMLButtonElement>();\n  private _ariaDescriptionId: string;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  public render() {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      expandedMenuItemKey,\n      onItemMouseDown,\n      onItemClick,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    const subMenuId = this._getSubMenuId(item);\n\n    const isChecked: boolean | null | undefined = getIsChecked(item);\n    const canCheck: boolean = isChecked !== null;\n    const defaultRole = getMenuItemAriaRole(item);\n    const itemHasSubmenu = hasSubmenu(item);\n    const { itemProps, ariaLabel, ariaDescription } = item;\n\n    const buttonNativeProperties = getNativeProps<React.ButtonHTMLAttributes<HTMLButtonElement>>(\n      item,\n      buttonProperties,\n    );\n    // Do not add the disabled attribute to the button so that it is focusable\n    delete buttonNativeProperties.disabled;\n\n    const itemRole = item.role || defaultRole;\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n    const ariaDescribedByIds = ariaDescription ? this._ariaDescriptionId : undefined;\n\n    const itemButtonProperties = {\n      className: classNames.root,\n      onClick: this._onItemClick,\n      onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,\n      onMouseEnter: this._onItemMouseEnter,\n      onMouseLeave: this._onItemMouseLeave,\n      onMouseDown: (ev: React.MouseEvent<HTMLButtonElement>) =>\n        onItemMouseDown ? onItemMouseDown(item, ev) : undefined,\n      onMouseMove: this._onItemMouseMove,\n      href: item.href,\n      title: item.title,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedByIds,\n      'aria-haspopup': itemHasSubmenu || undefined,\n      'aria-owns': item.key === expandedMenuItemKey ? subMenuId : undefined,\n      'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n      'aria-posinset': focusableElementIndex + 1,\n      'aria-setsize': totalItemCount,\n      'aria-disabled': isItemDisabled(item),\n      'aria-checked':\n        (itemRole === 'menuitemcheckbox' || itemRole === 'menuitemradio') && canCheck ? !!isChecked : undefined,\n      'aria-selected': itemRole === 'menuitem' && canCheck ? !!isChecked : undefined,\n      role: itemRole,\n      // eslint-disable-next-line deprecation/deprecation\n      style: item.style,\n    };\n\n    let { keytipProps } = item;\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    return (\n      <KeytipData\n        keytipProps={keytipProps}\n        ariaDescribedBy={buttonNativeProperties['aria-describedby']}\n        disabled={isItemDisabled(item)}\n      >\n        {(keytipAttributes: any): JSX.Element => (\n          <button\n            ref={this._btn}\n            {...buttonNativeProperties}\n            {...itemButtonProperties}\n            {...keytipAttributes}\n            aria-describedby={mergeAriaAttributeValues(\n              itemButtonProperties['aria-describedby'],\n              keytipAttributes ? keytipAttributes['aria-describedby'] : undefined,\n            )}\n          >\n            <ChildrenRenderer\n              componentRef={item.componentRef}\n              item={item}\n              classNames={classNames}\n              index={index}\n              onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n              hasIcons={hasIcons}\n              openSubMenu={openSubMenu}\n              dismissSubMenu={dismissSubMenu}\n              dismissMenu={dismissMenu}\n              getSubmenuTarget={this._getSubmenuTarget}\n              {...itemProps}\n            />\n            {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n          </button>\n        )}\n      </KeytipData>\n    );\n  }\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._btn.current ? this._btn.current : undefined;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}