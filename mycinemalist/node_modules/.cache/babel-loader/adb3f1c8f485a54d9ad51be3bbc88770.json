{"ast":null,"code":"import * as React from 'react';\n/**\n * Controlled state helper that gives priority to props value. Useful for components that have props with both\n * controlled and uncontrolled modes. Any props values will override state, but will not update internal state.\n * If prop is defined and then later undefined, state will revert to its previous value.\n *\n * @param props - The props object containing controlled prop values.\n * @param propName - The controlled prop name.\n * @param options - Options. defaultPropValue is only used if defaultPropName (or its value) is undefined.\n */\n\nexport function useControlledState(props, propName, options) {\n  var defaultValue;\n\n  if (options) {\n    if (options.defaultPropName && props[options.defaultPropName] !== undefined) {\n      // No easy way to coerce TProps[TDefaultProp] to match TProps[TProp] in generic typings, so cast it here.\n      defaultValue = props[options.defaultPropName];\n    } else {\n      defaultValue = options && options.defaultPropValue;\n    }\n  }\n\n  var _a = React.useState(defaultValue),\n      state = _a[0],\n      setState = _a[1];\n\n  if (props[propName] !== undefined) {\n    return [props[propName], setState];\n  } else {\n    return [state, setState];\n  }\n}\n/**\n * Simple controlled helper that gives priority to props value and falls back to derived value.\n *\n * @param props - The props object containing controlled prop values.\n * @param propName - The controlled prop name.\n * @param derivedValue - Derived value. Returned when controlled value is not present.\n */\n\nexport function getControlledDerivedProps(props, propName, derivedValue) {\n  if (props[propName] !== undefined) {\n    return props[propName];\n  } else {\n    return derivedValue;\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAOA;;;;;;;;;;AASA,OAAM,SAAUC,kBAAV,CACJC,KADI,EAEJC,QAFI,EAGJC,OAHI,EAG0D;AAE9D,MAAIC,YAAJ;;AACA,MAAID,OAAJ,EAAa;AACX,QAAIA,OAAO,CAACE,eAAR,IAA2BJ,KAAK,CAACE,OAAO,CAACE,eAAT,CAAL,KAAmCC,SAAlE,EAA6E;AAC3E;AACAF,kBAAY,GAAIH,KAAK,CAACE,OAAO,CAACE,eAAT,CAArB;AACD,KAHD,MAGO;AACLD,kBAAY,GAAGD,OAAO,IAAIA,OAAO,CAACI,gBAAlC;AACD;AACF;;AAEK;AAAA,MAACC,aAAD;AAAA,MAAQC,gBAAR;;AAEN,MAAIR,KAAK,CAACC,QAAD,CAAL,KAAoBI,SAAxB,EAAmC;AACjC,WAAO,CAACL,KAAK,CAACC,QAAD,CAAN,EAAkBO,QAAlB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,CAACD,KAAD,EAAQC,QAAR,CAAP;AACD;AACF;AAED;;;;;;;;AAOA,OAAM,SAAUC,yBAAV,CACJT,KADI,EAEJC,QAFI,EAGJS,YAHI,EAGuB;AAE3B,MAAIV,KAAK,CAACC,QAAD,CAAL,KAAoBI,SAAxB,EAAmC;AACjC,WAAOL,KAAK,CAACC,QAAD,CAAZ;AACD,GAFD,MAEO;AACL,WAAOS,YAAP;AACD;AACF","names":["React","useControlledState","props","propName","options","defaultValue","defaultPropName","undefined","defaultPropValue","state","setState","getControlledDerivedProps","derivedValue"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\foundation\\lib\\src\\hooks\\controlled.ts"],"sourcesContent":["import * as React from 'react';\n\nexport interface IControlledStateOptions<TProps, TProp extends keyof TProps, TDefaultProp extends keyof TProps> {\n  defaultPropValue?: TProps[TProp];\n  defaultPropName?: TDefaultProp;\n}\n\n/**\n * Controlled state helper that gives priority to props value. Useful for components that have props with both\n * controlled and uncontrolled modes. Any props values will override state, but will not update internal state.\n * If prop is defined and then later undefined, state will revert to its previous value.\n *\n * @param props - The props object containing controlled prop values.\n * @param propName - The controlled prop name.\n * @param options - Options. defaultPropValue is only used if defaultPropName (or its value) is undefined.\n */\nexport function useControlledState<TProps, TProp extends keyof TProps, TDefaultProp extends keyof TProps>(\n  props: Readonly<TProps>,\n  propName: TProp,\n  options?: IControlledStateOptions<TProps, TProp, TDefaultProp>,\n): [TProps[TProp] | undefined, React.Dispatch<React.SetStateAction<TProps[TProp]>>] {\n  let defaultValue: TProps[TProp] | undefined;\n  if (options) {\n    if (options.defaultPropName && props[options.defaultPropName] !== undefined) {\n      // No easy way to coerce TProps[TDefaultProp] to match TProps[TProp] in generic typings, so cast it here.\n      defaultValue = (props[options.defaultPropName] as unknown) as TProps[TProp];\n    } else {\n      defaultValue = options && options.defaultPropValue;\n    }\n  }\n\n  const [state, setState] = React.useState(defaultValue);\n\n  if (props[propName] !== undefined) {\n    return [props[propName], setState];\n  } else {\n    return [state, setState];\n  }\n}\n\n/**\n * Simple controlled helper that gives priority to props value and falls back to derived value.\n *\n * @param props - The props object containing controlled prop values.\n * @param propName - The controlled prop name.\n * @param derivedValue - Derived value. Returned when controlled value is not present.\n */\nexport function getControlledDerivedProps<TProps, TProp extends keyof TProps>(\n  props: Readonly<TProps>,\n  propName: TProp,\n  derivedValue: TProps[TProp],\n): TProps[TProp] {\n  if (props[propName] !== undefined) {\n    return props[propName];\n  } else {\n    return derivedValue;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}