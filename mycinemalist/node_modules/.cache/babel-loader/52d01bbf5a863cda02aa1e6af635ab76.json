{"ast":null,"code":"var now = function now() {\n  return typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n};\n\nvar RESET_INTERVAL = 3 * 60 * 1000; // auto reset every 3 minutes\n\n/**\n * Performance helper class for measuring things.\n *\n * @public\n * {@docCategory FabricPerformance}\n */\n\nvar FabricPerformance =\n/** @class */\nfunction () {\n  function FabricPerformance() {}\n  /**\n   * Measures execution time of the given syncronous function. If the same logic is executed multiple times,\n   * each individual measurement will be collected as well the overall numbers.\n   * @param name - The name of this measurement\n   * @param func - The logic to be measured for execution time\n   */\n\n\n  FabricPerformance.measure = function (name, func) {\n    if (FabricPerformance._timeoutId) {\n      FabricPerformance.setPeriodicReset();\n    }\n\n    var start = now();\n    func();\n    var end = now();\n    var measurement = FabricPerformance.summary[name] || {\n      totalDuration: 0,\n      count: 0,\n      all: []\n    };\n    var duration = end - start;\n    measurement.totalDuration += duration;\n    measurement.count++;\n    measurement.all.push({\n      duration: duration,\n      timeStamp: end\n    });\n    FabricPerformance.summary[name] = measurement;\n  };\n\n  FabricPerformance.reset = function () {\n    FabricPerformance.summary = {};\n    clearTimeout(FabricPerformance._timeoutId);\n    FabricPerformance._timeoutId = NaN;\n  };\n\n  FabricPerformance.setPeriodicReset = function () {\n    FabricPerformance._timeoutId = setTimeout(function () {\n      return FabricPerformance.reset();\n    }, RESET_INTERVAL);\n  };\n\n  FabricPerformance.summary = {};\n  return FabricPerformance;\n}();\n\nexport { FabricPerformance };","map":{"version":3,"mappings":"AAgCA,IAAMA,GAAG,GAAiB,SAApBA,GAAoB;AACxB,gBAAOC,WAAP,KAAuB,WAAvB,IAAsC,CAAC,CAACA,WAAW,CAACD,GAApD,GAA0DC,WAAW,CAACD,GAAZ,EAA1D,GAA8EE,IAAI,CAACF,GAAL,EAA9E;AAAwF,CAD1F;;AAGA,IAAMG,cAAc,GAAG,IAAI,EAAJ,GAAS,IAAhC,C,CAAsC;;AAEtC;;;;;;;AAMA;AAAA;AAAA;AAAA,gCAyCC;AArCC;;;;;;;;AAMcC,8BAAd,UAAsBC,IAAtB,EAAoCC,IAApC,EAAoD;AAClD,QAAIF,iBAAiB,CAACG,UAAtB,EAAkC;AAChCH,uBAAiB,CAACI,gBAAlB;AACD;;AACD,QAAMC,KAAK,GAAGT,GAAG,EAAjB;AACAM,QAAI;AACJ,QAAMI,GAAG,GAAGV,GAAG,EAAf;AACA,QAAMW,WAAW,GAAqBP,iBAAiB,CAACQ,OAAlB,CAA0BP,IAA1B,KAAmC;AACvEQ,mBAAa,EAAE,CADwD;AAEvEC,WAAK,EAAE,CAFgE;AAGvEC,SAAG,EAAE;AAHkE,KAAzE;AAKA,QAAMC,QAAQ,GAAGN,GAAG,GAAGD,KAAvB;AACAE,eAAW,CAACE,aAAZ,IAA6BG,QAA7B;AACAL,eAAW,CAACG,KAAZ;AACAH,eAAW,CAACI,GAAZ,CAAgBE,IAAhB,CAAqB;AACnBD,cAAQ,EAAEA,QADS;AAEnBE,eAAS,EAAER;AAFQ,KAArB;AAIAN,qBAAiB,CAACQ,OAAlB,CAA0BP,IAA1B,IAAkCM,WAAlC;AACD,GApBa;;AAsBAP,4BAAd;AACEA,qBAAiB,CAACQ,OAAlB,GAA4B,EAA5B;AACAO,gBAAY,CAACf,iBAAiB,CAACG,UAAnB,CAAZ;AACAH,qBAAiB,CAACG,UAAlB,GAA+Ba,GAA/B;AACD,GAJa;;AAMAhB,uCAAd;AACEA,qBAAiB,CAACG,UAAlB,GAA+Bc,UAAU,CAAC;AAAM,8BAAiB,CAACC,KAAlB;AAAyB,KAAhC,EAAkCnB,cAAlC,CAAzC;AACD,GAFa;;AArCAC,8BAAwB,EAAxB;AAwChB;AAAC,CAzCD;;SAAaA","names":["now","performance","Date","RESET_INTERVAL","FabricPerformance","name","func","_timeoutId","setPeriodicReset","start","end","measurement","summary","totalDuration","count","all","duration","push","timeStamp","clearTimeout","NaN","setTimeout","reset"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\src\\FabricPerformance.ts"],"sourcesContent":["declare const setTimeout: (cb: () => void, delay: number) => number;\n\n/**\n * PerfData interface.\n *\n * @internal\n */\nexport interface IPerfData {\n  duration: number;\n  timeStamp: number;\n}\n\n/**\n * PerfMeasurement interface.\n *\n * @internal\n */\nexport interface IPerfMeasurement {\n  totalDuration: number;\n  count: number;\n  all: IPerfData[];\n}\n\n/**\n * PerfSummary interface.\n *\n * @internal\n */\nexport interface IPerfSummary {\n  [key: string]: IPerfMeasurement;\n}\n\nconst now: () => number = () =>\n  typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n\nconst RESET_INTERVAL = 3 * 60 * 1000; // auto reset every 3 minutes\n\n/**\n * Performance helper class for measuring things.\n *\n * @public\n * {@docCategory FabricPerformance}\n */\nexport class FabricPerformance {\n  public static summary: IPerfSummary = {};\n  private static _timeoutId: number;\n\n  /**\n   * Measures execution time of the given syncronous function. If the same logic is executed multiple times,\n   * each individual measurement will be collected as well the overall numbers.\n   * @param name - The name of this measurement\n   * @param func - The logic to be measured for execution time\n   */\n  public static measure(name: string, func: () => void): void {\n    if (FabricPerformance._timeoutId) {\n      FabricPerformance.setPeriodicReset();\n    }\n    const start = now();\n    func();\n    const end = now();\n    const measurement: IPerfMeasurement = FabricPerformance.summary[name] || {\n      totalDuration: 0,\n      count: 0,\n      all: [],\n    };\n    const duration = end - start;\n    measurement.totalDuration += duration;\n    measurement.count++;\n    measurement.all.push({\n      duration: duration,\n      timeStamp: end,\n    });\n    FabricPerformance.summary[name] = measurement;\n  }\n\n  public static reset(): void {\n    FabricPerformance.summary = {};\n    clearTimeout(FabricPerformance._timeoutId);\n    FabricPerformance._timeoutId = NaN;\n  }\n\n  public static setPeriodicReset(): void {\n    FabricPerformance._timeoutId = setTimeout(() => FabricPerformance.reset(), RESET_INTERVAL);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}