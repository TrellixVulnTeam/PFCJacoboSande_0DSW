{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { divProperties, getNativeProps, getId, KeyCodes, getDocument, classNamesFunction, initializeComponentRef, EventGroup, Async } from '../../Utilities';\nimport { OpenCardMode, HoverCardType } from './HoverCard.types';\nimport { ExpandingCard } from './ExpandingCard';\nimport { ExpandingCardMode } from './ExpandingCard.types';\nimport { PlainCard } from './PlainCard/PlainCard';\nvar getClassNames = classNamesFunction();\n\nvar HoverCardBase =\n/** @class */\nfunction (_super) {\n  __extends(HoverCardBase, _super); // Constructor\n\n\n  function HoverCardBase(props) {\n    var _this = _super.call(this, props) || this; // The wrapping div that gets the hover events\n\n\n    _this._hoverCard = React.createRef();\n\n    _this.dismiss = function (withTimeOut) {\n      _this._async.clearTimeout(_this._openTimerId);\n\n      _this._async.clearTimeout(_this._dismissTimerId);\n\n      if (!withTimeOut) {\n        _this._setDismissedState();\n      } else {\n        _this._dismissTimerId = _this._async.setTimeout(function () {\n          _this._setDismissedState();\n        }, _this.props.cardDismissDelay);\n      }\n    }; // Show HoverCard\n\n\n    _this._cardOpen = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (_this._shouldBlockHoverCard() || ev.type === 'keydown' && !(ev.which === _this.props.openHotKey)) {\n        return;\n      }\n\n      _this._async.clearTimeout(_this._dismissTimerId);\n\n      if (ev.type === 'mouseenter') {\n        _this._currentMouseTarget = ev.currentTarget;\n      }\n\n      _this._executeCardOpen(ev);\n    };\n\n    _this._executeCardOpen = function (ev) {\n      _this._async.clearTimeout(_this._openTimerId);\n\n      _this._openTimerId = _this._async.setTimeout(function () {\n        _this.setState(function (prevState) {\n          if (!prevState.isHoverCardVisible) {\n            return {\n              isHoverCardVisible: true,\n              mode: ExpandingCardMode.compact,\n              openMode: ev.type === 'keydown' ? OpenCardMode.hotKey : OpenCardMode.hover\n            };\n          }\n\n          return prevState;\n        });\n      }, _this.props.cardOpenDelay);\n    };\n    /**\n     * Hide HoverCard\n     * How we dismiss the card depends on where the callback is coming from.\n     * This is provided by the `isNativeEvent` argument.\n     *  true: Event is coming from event listeners set up in componentDidMount.\n     *  false: Event is coming from the `onLeave` prop from the HoverCard component.\n     */\n\n\n    _this._cardDismiss = function (isNativeEvent, ev) {\n      if (isNativeEvent) {\n        // We expect these to be MouseEvents, If not, return.\n        if (!(ev instanceof MouseEvent)) {\n          return;\n        } // eslint-disable-next-line deprecation/deprecation\n\n\n        if (ev.type === 'keydown' && ev.which !== KeyCodes.escape) {\n          return;\n        } // Dismiss if not sticky and currentTarget is the same element that mouse last entered\n        // eslint-disable-next-line deprecation/deprecation\n\n\n        if (!_this.props.sticky && (_this._currentMouseTarget === ev.currentTarget || ev.which === KeyCodes.escape)) {\n          _this.dismiss(true);\n        }\n      } else {\n        // If this is a mouseleave event and the component is sticky, do not dismiss.\n        if (_this.props.sticky && !(ev instanceof MouseEvent) && ev.nativeEvent instanceof MouseEvent && ev.type === 'mouseleave') {\n          return;\n        }\n\n        _this.dismiss(true);\n      }\n    };\n\n    _this._setDismissedState = function () {\n      _this.setState({\n        isHoverCardVisible: false,\n        mode: ExpandingCardMode.compact,\n        openMode: OpenCardMode.hover\n      });\n    };\n\n    _this._instantOpenAsExpanded = function (ev) {\n      _this._async.clearTimeout(_this._dismissTimerId);\n\n      _this.setState(function (prevState) {\n        if (!prevState.isHoverCardVisible) {\n          return {\n            isHoverCardVisible: true,\n            mode: ExpandingCardMode.expanded\n          };\n        }\n\n        return prevState;\n      });\n    };\n\n    _this._setEventListeners = function () {\n      var _a = _this.props,\n          trapFocus = _a.trapFocus,\n          instantOpenOnClick = _a.instantOpenOnClick,\n          eventListenerTarget = _a.eventListenerTarget;\n      var target = eventListenerTarget ? _this._getTargetElement(eventListenerTarget) : _this._getTargetElement(_this.props.target);\n      var nativeEventDismiss = _this._nativeDismissEvent; // target can be undefined if ref isn't available, only assign\n      // events when defined to avoid throwing exception.\n\n      if (target) {\n        _this._events.on(target, 'mouseenter', _this._cardOpen);\n\n        _this._events.on(target, 'mouseleave', nativeEventDismiss);\n\n        if (trapFocus) {\n          _this._events.on(target, 'keydown', _this._cardOpen);\n        } else {\n          _this._events.on(target, 'focus', _this._cardOpen);\n\n          _this._events.on(target, 'blur', nativeEventDismiss);\n        }\n\n        if (instantOpenOnClick) {\n          _this._events.on(target, 'click', _this._instantOpenAsExpanded);\n        } else {\n          _this._events.on(target, 'mousedown', nativeEventDismiss);\n\n          _this._events.on(target, 'keydown', nativeEventDismiss);\n        }\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this._nativeDismissEvent = _this._cardDismiss.bind(_this, true);\n    _this._childDismissEvent = _this._cardDismiss.bind(_this, false);\n    _this.state = {\n      isHoverCardVisible: false,\n      mode: ExpandingCardMode.compact,\n      openMode: OpenCardMode.hover\n    };\n    return _this;\n  }\n\n  HoverCardBase.prototype.componentDidMount = function () {\n    this._setEventListeners();\n  };\n\n  HoverCardBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._events.dispose();\n  };\n\n  HoverCardBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _this = this;\n\n    if (prevProps.target !== this.props.target) {\n      this._events.off();\n\n      this._setEventListeners();\n    }\n\n    if (prevState.isHoverCardVisible !== this.state.isHoverCardVisible) {\n      if (this.state.isHoverCardVisible) {\n        this._async.setTimeout(function () {\n          _this.setState({\n            mode: ExpandingCardMode.expanded\n          }, function () {\n            _this.props.onCardExpand && _this.props.onCardExpand();\n          });\n        }, this.props.expandedCardOpenDelay);\n\n        this.props.onCardVisible && this.props.onCardVisible();\n      } else {\n        this.setState({\n          mode: ExpandingCardMode.compact\n        });\n        this.props.onCardHide && this.props.onCardHide();\n      }\n    }\n  }; // Render\n\n\n  HoverCardBase.prototype.render = function () {\n    var _a = this.props,\n        expandingCardProps = _a.expandingCardProps,\n        children = _a.children,\n        id = _a.id,\n        _b = _a.setAriaDescribedBy,\n        setAriaDescribedBy = _b === void 0 ? true : _b,\n        customStyles = _a.styles,\n        theme = _a.theme,\n        className = _a.className,\n        type = _a.type,\n        plainCardProps = _a.plainCardProps,\n        trapFocus = _a.trapFocus,\n        setInitialFocus = _a.setInitialFocus;\n    var _c = this.state,\n        isHoverCardVisible = _c.isHoverCardVisible,\n        mode = _c.mode,\n        openMode = _c.openMode;\n    var hoverCardId = id || getId('hoverCard');\n    this._classNames = getClassNames(customStyles, {\n      theme: theme,\n      className: className\n    }); // Common props for both card types.\n\n    var commonCardProps = __assign(__assign({}, getNativeProps(this.props, divProperties)), {\n      id: hoverCardId,\n      trapFocus: !!trapFocus,\n      firstFocus: setInitialFocus || openMode === OpenCardMode.hotKey,\n      targetElement: this._getTargetElement(this.props.target),\n      onEnter: this._cardOpen,\n      onLeave: this._childDismissEvent\n    });\n\n    var finalExpandedCardProps = __assign(__assign(__assign({}, expandingCardProps), commonCardProps), {\n      mode: mode\n    });\n\n    var finalPlainCardProps = __assign(__assign({}, plainCardProps), commonCardProps);\n\n    return React.createElement(\"div\", {\n      className: this._classNames.host,\n      ref: this._hoverCard,\n      \"aria-describedby\": setAriaDescribedBy && isHoverCardVisible ? hoverCardId : undefined,\n      \"data-is-focusable\": !this.props.target\n    }, children, isHoverCardVisible && (type === HoverCardType.expanding ? React.createElement(ExpandingCard, __assign({}, finalExpandedCardProps)) : React.createElement(PlainCard, __assign({}, finalPlainCardProps))));\n  };\n\n  HoverCardBase.prototype._getTargetElement = function (target) {\n    switch (typeof target) {\n      case 'string':\n        return getDocument().querySelector(target);\n\n      case 'object':\n        return target;\n\n      default:\n        return this._hoverCard.current || undefined;\n    }\n  };\n\n  HoverCardBase.prototype._shouldBlockHoverCard = function () {\n    return !!(this.props.shouldBlockHoverCard && this.props.shouldBlockHoverCard());\n  };\n\n  HoverCardBase.defaultProps = {\n    cardOpenDelay: 500,\n    cardDismissDelay: 100,\n    expandedCardOpenDelay: 1500,\n    instantOpenOnClick: false,\n    setInitialFocus: false,\n    openHotKey: KeyCodes.c,\n    type: HoverCardType.expanding\n  };\n  return HoverCardBase;\n}(React.Component);\n\nexport { HoverCardBase };","map":{"version":3,"mappings":"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","names":["React","divProperties","getNativeProps","getId","KeyCodes","getDocument","classNamesFunction","initializeComponentRef","EventGroup","Async","OpenCardMode","HoverCardType","ExpandingCard","ExpandingCardMode","PlainCard","getClassNames","__extends","props","_super","_this","createRef","withTimeOut","_async","clearTimeout","_openTimerId","_dismissTimerId","_setDismissedState","setTimeout","cardDismissDelay","ev","_shouldBlockHoverCard","type","which","openHotKey","_currentMouseTarget","currentTarget","_executeCardOpen","setState","prevState","isHoverCardVisible","mode","compact","openMode","hotKey","hover","cardOpenDelay","isNativeEvent","MouseEvent","escape","sticky","dismiss","nativeEvent","expanded","trapFocus","instantOpenOnClick","eventListenerTarget","target","_getTargetElement","nativeEventDismiss","_nativeDismissEvent","_events","on","_cardOpen","_instantOpenAsExpanded","_cardDismiss","bind","_childDismissEvent","state","HoverCardBase","_setEventListeners","dispose","prevProps","off","onCardExpand","expandedCardOpenDelay","onCardVisible","onCardHide","expandingCardProps","children","id","_b","setAriaDescribedBy","customStyles","theme","className","plainCardProps","setInitialFocus","hoverCardId","_classNames","commonCardProps","firstFocus","targetElement","onEnter","onLeave","finalExpandedCardProps","finalPlainCardProps","host","ref","_hoverCard","undefined","expanding","__assign","querySelector","current","shouldBlockHoverCard","c","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\HoverCard\\HoverCard.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  divProperties,\n  getNativeProps,\n  getId,\n  KeyCodes,\n  getDocument,\n  classNamesFunction,\n  initializeComponentRef,\n  EventGroup,\n  Async,\n} from '../../Utilities';\nimport {\n  IHoverCardProps,\n  IHoverCardStyles,\n  IHoverCardStyleProps,\n  OpenCardMode,\n  HoverCardType,\n  IHoverCard,\n} from './HoverCard.types';\nimport { ExpandingCard } from './ExpandingCard';\nimport { ExpandingCardMode, IExpandingCardProps } from './ExpandingCard.types';\nimport { PlainCard } from './PlainCard/PlainCard';\nimport { IPlainCardProps } from './PlainCard/PlainCard.types';\n\nconst getClassNames = classNamesFunction<IHoverCardStyleProps, IHoverCardStyles>();\n\nexport interface IHoverCardState {\n  isHoverCardVisible?: boolean;\n  mode?: ExpandingCardMode;\n  openMode?: OpenCardMode;\n}\n\nexport class HoverCardBase extends React.Component<IHoverCardProps, IHoverCardState> implements IHoverCard {\n  public static defaultProps = {\n    cardOpenDelay: 500,\n    cardDismissDelay: 100,\n    expandedCardOpenDelay: 1500,\n    instantOpenOnClick: false,\n    setInitialFocus: false,\n    openHotKey: KeyCodes.c as KeyCodes,\n    type: HoverCardType.expanding,\n  };\n\n  // The wrapping div that gets the hover events\n  private _hoverCard = React.createRef<HTMLDivElement>();\n  private _dismissTimerId: number;\n  private _openTimerId: number;\n  private _currentMouseTarget: EventTarget | null;\n\n  private _nativeDismissEvent: (ev?: any) => void;\n  private _childDismissEvent: (ev?: any) => void;\n\n  private _classNames: { [key in keyof IHoverCardStyles]: string };\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  // Constructor\n  constructor(props: IHoverCardProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this._nativeDismissEvent = this._cardDismiss.bind(this, true);\n    this._childDismissEvent = this._cardDismiss.bind(this, false);\n\n    this.state = {\n      isHoverCardVisible: false,\n      mode: ExpandingCardMode.compact,\n      openMode: OpenCardMode.hover,\n    };\n  }\n\n  public componentDidMount(): void {\n    this._setEventListeners();\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IHoverCardProps, prevState: IHoverCardState) {\n    if (prevProps.target !== this.props.target) {\n      this._events.off();\n      this._setEventListeners();\n    }\n\n    if (prevState.isHoverCardVisible !== this.state.isHoverCardVisible) {\n      if (this.state.isHoverCardVisible) {\n        this._async.setTimeout(() => {\n          this.setState(\n            {\n              mode: ExpandingCardMode.expanded,\n            },\n            () => {\n              this.props.onCardExpand && this.props.onCardExpand();\n            },\n          );\n        }, this.props.expandedCardOpenDelay!);\n        this.props.onCardVisible && this.props.onCardVisible();\n      } else {\n        this.setState({\n          mode: ExpandingCardMode.compact,\n        });\n        this.props.onCardHide && this.props.onCardHide();\n      }\n    }\n  }\n\n  public dismiss = (withTimeOut?: boolean): void => {\n    this._async.clearTimeout(this._openTimerId);\n    this._async.clearTimeout(this._dismissTimerId);\n    if (!withTimeOut) {\n      this._setDismissedState();\n    } else {\n      this._dismissTimerId = this._async.setTimeout(() => {\n        this._setDismissedState();\n      }, this.props.cardDismissDelay!);\n    }\n  };\n\n  // Render\n  public render(): JSX.Element {\n    const {\n      expandingCardProps,\n      children,\n      id,\n      setAriaDescribedBy = true,\n      styles: customStyles,\n      theme,\n      className,\n      type,\n      plainCardProps,\n      trapFocus,\n      setInitialFocus,\n    } = this.props;\n    const { isHoverCardVisible, mode, openMode } = this.state;\n    const hoverCardId = id || getId('hoverCard');\n\n    this._classNames = getClassNames(customStyles, {\n      theme: theme!,\n      className,\n    });\n\n    // Common props for both card types.\n    const commonCardProps = {\n      ...getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties),\n      id: hoverCardId,\n      trapFocus: !!trapFocus,\n      firstFocus: setInitialFocus || openMode === OpenCardMode.hotKey,\n      targetElement: this._getTargetElement(this.props.target),\n      onEnter: this._cardOpen,\n      onLeave: this._childDismissEvent,\n    };\n\n    const finalExpandedCardProps: IExpandingCardProps = { ...expandingCardProps, ...commonCardProps, mode };\n    const finalPlainCardProps: IPlainCardProps = { ...plainCardProps, ...commonCardProps };\n\n    return (\n      <div\n        className={this._classNames.host}\n        ref={this._hoverCard}\n        aria-describedby={setAriaDescribedBy && isHoverCardVisible ? hoverCardId : undefined}\n        data-is-focusable={!this.props.target}\n      >\n        {children}\n        {isHoverCardVisible &&\n          (type === HoverCardType.expanding ? (\n            <ExpandingCard {...finalExpandedCardProps} />\n          ) : (\n            <PlainCard {...finalPlainCardProps} />\n          ))}\n      </div>\n    );\n  }\n\n  private _getTargetElement(target?: HTMLElement | string | null): HTMLElement | undefined {\n    switch (typeof target) {\n      case 'string':\n        return getDocument()!.querySelector(target as string) as HTMLElement;\n\n      case 'object':\n        return target as HTMLElement;\n\n      default:\n        return this._hoverCard.current || undefined;\n    }\n  }\n\n  private _shouldBlockHoverCard(): boolean {\n    return !!(this.props.shouldBlockHoverCard && this.props.shouldBlockHoverCard());\n  }\n\n  // Show HoverCard\n  private _cardOpen = (ev: MouseEvent): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._shouldBlockHoverCard() || (ev.type === 'keydown' && !(ev.which === this.props.openHotKey))) {\n      return;\n    }\n    this._async.clearTimeout(this._dismissTimerId);\n    if (ev.type === 'mouseenter') {\n      this._currentMouseTarget = ev.currentTarget;\n    }\n\n    this._executeCardOpen(ev);\n  };\n\n  private _executeCardOpen = (ev: MouseEvent): void => {\n    this._async.clearTimeout(this._openTimerId);\n    this._openTimerId = this._async.setTimeout(() => {\n      this.setState((prevState: IHoverCardState) => {\n        if (!prevState.isHoverCardVisible) {\n          return {\n            isHoverCardVisible: true,\n            mode: ExpandingCardMode.compact,\n            openMode: ev.type === 'keydown' ? OpenCardMode.hotKey : OpenCardMode.hover,\n          };\n        }\n\n        return prevState;\n      });\n    }, this.props.cardOpenDelay!);\n  };\n\n  /**\n   * Hide HoverCard\n   * How we dismiss the card depends on where the callback is coming from.\n   * This is provided by the `isNativeEvent` argument.\n   *  true: Event is coming from event listeners set up in componentDidMount.\n   *  false: Event is coming from the `onLeave` prop from the HoverCard component.\n   */\n  private _cardDismiss = (\n    isNativeEvent: boolean,\n    ev: MouseEvent | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n  ) => {\n    if (isNativeEvent) {\n      // We expect these to be MouseEvents, If not, return.\n      if (!(ev instanceof MouseEvent)) {\n        return;\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.type === 'keydown' && ev.which !== KeyCodes.escape) {\n        return;\n      }\n\n      // Dismiss if not sticky and currentTarget is the same element that mouse last entered\n      // eslint-disable-next-line deprecation/deprecation\n      if (!this.props.sticky && (this._currentMouseTarget === ev.currentTarget || ev.which === KeyCodes.escape)) {\n        this.dismiss(true);\n      }\n    } else {\n      // If this is a mouseleave event and the component is sticky, do not dismiss.\n      if (\n        this.props.sticky &&\n        !(ev instanceof MouseEvent) &&\n        ev.nativeEvent instanceof MouseEvent &&\n        ev.type === 'mouseleave'\n      ) {\n        return;\n      }\n\n      this.dismiss(true);\n    }\n  };\n\n  private _setDismissedState = () => {\n    this.setState({\n      isHoverCardVisible: false,\n      mode: ExpandingCardMode.compact,\n      openMode: OpenCardMode.hover,\n    });\n  };\n\n  private _instantOpenAsExpanded = (ev: React.MouseEvent<HTMLDivElement>): void => {\n    this._async.clearTimeout(this._dismissTimerId);\n\n    this.setState((prevState: IHoverCardState) => {\n      if (!prevState.isHoverCardVisible) {\n        return {\n          isHoverCardVisible: true,\n          mode: ExpandingCardMode.expanded,\n        };\n      }\n\n      return prevState;\n    });\n  };\n\n  private _setEventListeners = (): void => {\n    const { trapFocus, instantOpenOnClick, eventListenerTarget } = this.props;\n    const target = eventListenerTarget\n      ? this._getTargetElement(eventListenerTarget)\n      : this._getTargetElement(this.props.target);\n    const nativeEventDismiss = this._nativeDismissEvent;\n\n    // target can be undefined if ref isn't available, only assign\n    // events when defined to avoid throwing exception.\n    if (target) {\n      this._events.on(target, 'mouseenter', this._cardOpen);\n      this._events.on(target, 'mouseleave', nativeEventDismiss);\n      if (trapFocus) {\n        this._events.on(target, 'keydown', this._cardOpen);\n      } else {\n        this._events.on(target, 'focus', this._cardOpen);\n        this._events.on(target, 'blur', nativeEventDismiss);\n      }\n      if (instantOpenOnClick) {\n        this._events.on(target, 'click', this._instantOpenAsExpanded);\n      } else {\n        this._events.on(target, 'mousedown', nativeEventDismiss);\n        this._events.on(target, 'keydown', nativeEventDismiss);\n      }\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}