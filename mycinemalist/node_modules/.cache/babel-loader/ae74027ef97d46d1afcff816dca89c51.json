{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\nexport var getIconContent = memoizeFunction(function (iconName) {\n  var _a = getIcon(iconName) || {\n    subset: {},\n    code: undefined\n  },\n      code = _a.code,\n      subset = _a.subset;\n\n  if (!code) {\n    return null;\n  }\n\n  return {\n    children: code,\n    iconClassName: subset.className,\n    fontFamily: subset.fontFace && subset.fontFace.fontFamily\n  };\n}, undefined, true\n/*ignoreNullOrUndefinedResult */\n);\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\n\nexport var FontIcon = function FontIcon(props) {\n  var iconName = props.iconName,\n      className = props.className,\n      _a = props.style,\n      style = _a === void 0 ? {} : _a;\n  var iconContent = getIconContent(iconName) || {};\n  var iconClassName = iconContent.iconClassName,\n      children = iconContent.children,\n      fontFamily = iconContent.fontFamily;\n  var nativeProps = getNativeProps(props, htmlElementProperties);\n  var containerProps = props['aria-label'] ? {} : {\n    role: 'presentation',\n    'aria-hidden': true\n  };\n  return React.createElement(\"i\", __assign({\n    \"data-icon-name\": iconName\n  }, containerProps, nativeProps, {\n    className: css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className),\n    // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n    // https://github.com/microsoft/fluentui/issues/10449\n    style: __assign({\n      fontFamily: fontFamily\n    }, style)\n  }), children);\n};\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\n\nexport var getFontIcon = memoizeFunction(function (iconName, className, ariaLabel) {\n  return FontIcon({\n    iconName: iconName,\n    className: className,\n    'aria-label': ariaLabel\n  });\n});","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,eAApC;AACA,SAASC,GAAT,EAAcC,cAAd,EAA8BC,qBAA9B,EAAqDC,eAArD,QAA4E,iBAA5E;AACA,SAASC,OAAT,QAAwD,eAAxD;AAQA,OAAO,IAAMC,cAAc,GAAGF,eAAe,CAC3C,UAACG,QAAD,EAAkB;EACV;cAAA;;EAAA;EAAA,IAAEC,cAAF;EAAA,IAAQC,kBAAR;;EAKN,IAAI,CAACD,IAAL,EAAW;IACT,OAAO,IAAP;EACD;;EAED,OAAO;IACLE,QAAQ,EAAEF,IADL;IAELG,aAAa,EAAEF,MAAM,CAACG,SAFjB;IAGLC,UAAU,EAAEJ,MAAM,CAACK,QAAP,IAAmBL,MAAM,CAACK,QAAP,CAAgBD;EAH1C,CAAP;AAKD,CAhB0C,EAiB3CE,SAjB2C,EAkB3C;AAAK;AAlBsC,CAAtC;AAqBP;;;;;;AAKA,OAAO,IAAMC,QAAQ,GAA4C,SAApDA,QAAoD,QAAK;EAC5D;EAAA,IAAUJ,2BAAV;EAAA,IAAqBK,gBAArB;EAAA,IAAqBC,+BAArB;EACR,IAAMC,WAAW,GAAGb,cAAc,CAACC,QAAD,CAAd,IAA4B,EAAhD;EACQ;EAAA,IAAeG,+BAAf;EAAA,IAAyBG,mCAAzB;EAER,IAAMO,WAAW,GAAGlB,cAAc,CAAoCmB,KAApC,EAA2ClB,qBAA3C,CAAlC;EACA,IAAMmB,cAAc,GAAGD,KAAK,CAAC,YAAD,CAAL,GACnB,EADmB,GAEnB;IACEE,IAAI,EAAE,cADR;IAEE,eAAe;EAFjB,CAFJ;EAOA,OACEzB;IAAA,kBACkBS;EADlB,GAEMe,cAFN,EAGMF,WAHN,EAGiB;IACfR,SAAS,EAAEX,GAAG,CAACD,OAAD,EAAUD,UAAU,CAACyB,IAArB,EAA2Bb,aAA3B,EAA0C,CAACJ,QAAD,IAAaR,UAAU,CAAC0B,WAAlE,EAA+Eb,SAA/E,CADC;IAEf;IACA;IACAM,KAAK;MAAIL,UAAU;IAAd,GAAmBK,KAAnB;EAJU,CAHjB,GASGR,QATH,CADF;AAaD,CA1BM;AA4BP;;;;;;;;AAOA,OAAO,IAAMgB,WAAW,GAAGtB,eAAe,CAAC,UAACG,QAAD,EAAmBK,SAAnB,EAAuCe,SAAvC,EAAyD;EAClG,OAAOX,QAAQ,CAAC;IAAET,QAAQ,UAAV;IAAYK,SAAS,WAArB;IAAuB,cAAce;EAArC,CAAD,CAAf;AACD,CAFyC,CAAnC","names":["React","classNames","MS_ICON","css","getNativeProps","htmlElementProperties","memoizeFunction","getIcon","getIconContent","iconName","code","subset","children","iconClassName","className","fontFamily","fontFace","undefined","FontIcon","_a","style","iconContent","nativeProps","props","containerProps","role","root","placeholder","getFontIcon","ariaLabel"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Icon\\FontIcon.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { IFontIconProps } from './Icon.types';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon, IIconRecord, IIconSubsetRecord } from '../../Styling';\n\nexport interface IIconContent {\n  children?: string;\n  iconClassName?: string;\n  fontFamily?: string;\n}\n\nexport const getIconContent = memoizeFunction(\n  (iconName?: string): IIconContent | null => {\n    const { code, subset }: Pick<IIconRecord, 'code'> & { subset: Partial<IIconSubsetRecord> } = getIcon(iconName) || {\n      subset: {},\n      code: undefined,\n    };\n\n    if (!code) {\n      return null;\n    }\n\n    return {\n      children: code,\n      iconClassName: subset.className,\n      fontFamily: subset.fontFace && subset.fontFace.fontFamily,\n    };\n  },\n  undefined,\n  true /*ignoreNullOrUndefinedResult */,\n);\n\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const FontIcon: React.FunctionComponent<IFontIconProps> = props => {\n  const { iconName, className, style = {} } = props;\n  const iconContent = getIconContent(iconName) || {};\n  const { iconClassName, children, fontFamily } = iconContent;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLElement>>(props, htmlElementProperties);\n  const containerProps = props['aria-label']\n    ? {}\n    : {\n        role: 'presentation',\n        'aria-hidden': true,\n      };\n\n  return (\n    <i\n      data-icon-name={iconName}\n      {...containerProps}\n      {...nativeProps}\n      className={css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className)}\n      // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n      // https://github.com/microsoft/fluentui/issues/10449\n      style={{ fontFamily, ...style }}\n    >\n      {children}\n    </i>\n  );\n};\n\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport const getFontIcon = memoizeFunction((iconName: string, className?: string, ariaLabel?: string) => {\n  return FontIcon({ iconName, className, 'aria-label': ariaLabel });\n});\n"]},"metadata":{},"sourceType":"module"}