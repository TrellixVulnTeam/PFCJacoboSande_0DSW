{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties, Async, initializeComponentRef } from '../../Utilities';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\nvar TRANSITION_ANIMATION_INTERVAL = 200;\n/* ms */\n\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Shimmer}\n */\n\nvar ShimmerBase =\n/** @class */\nfunction (_super) {\n  __extends(ShimmerBase, _super);\n\n  function ShimmerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    initializeComponentRef(_this);\n    _this.state = {\n      contentLoaded: props.isDataLoaded\n    };\n    _this._async = new Async(_this);\n    return _this;\n  }\n\n  ShimmerBase.prototype.componentDidUpdate = function (prevProps) {\n    var _this = this;\n\n    var isDataLoaded = this.props.isDataLoaded;\n\n    if (isDataLoaded !== prevProps.isDataLoaded) {\n      this._async.clearTimeout(this._lastTimeoutId); // Removing the shimmerWrapper div from the DOM only after the fade out animation completed.\n\n\n      if (isDataLoaded) {\n        this._lastTimeoutId = this._async.setTimeout(function () {\n          _this.setState({\n            contentLoaded: isDataLoaded\n          });\n        }, TRANSITION_ANIMATION_INTERVAL);\n      } else {\n        this.setState({\n          contentLoaded: isDataLoaded\n        });\n      }\n    }\n  };\n\n  ShimmerBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n\n  ShimmerBase.prototype.render = function () {\n    var _a = this.props,\n        styles = _a.styles,\n        shimmerElements = _a.shimmerElements,\n        children = _a.children,\n        isDataLoaded = _a.isDataLoaded,\n        width = _a.width,\n        className = _a.className,\n        customElementsGroup = _a.customElementsGroup,\n        theme = _a.theme,\n        ariaLabel = _a.ariaLabel,\n        shimmerColors = _a.shimmerColors;\n    var contentLoaded = this.state.contentLoaded;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      isDataLoaded: isDataLoaded,\n      className: className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave\n    });\n    var divProps = getNativeProps(this.props, divProperties);\n    return React.createElement(\"div\", __assign({}, divProps, {\n      className: this._classNames.root\n    }), !contentLoaded && React.createElement(\"div\", {\n      style: {\n        width: width ? width : '100%'\n      },\n      className: this._classNames.shimmerWrapper\n    }, React.createElement(\"div\", {\n      className: this._classNames.shimmerGradient\n    }), customElementsGroup ? customElementsGroup : React.createElement(ShimmerElementsGroup, {\n      shimmerElements: shimmerElements,\n      backgroundColor: shimmerColors && shimmerColors.background\n    })), children && React.createElement(\"div\", {\n      className: this._classNames.dataWrapper\n    }, children), ariaLabel && !isDataLoaded && React.createElement(\"div\", {\n      role: \"status\",\n      \"aria-live\": \"polite\"\n    }, React.createElement(DelayedRender, null, React.createElement(\"div\", {\n      className: this._classNames.screenReaderText\n    }, ariaLabel))));\n  };\n\n  ShimmerBase.defaultProps = {\n    isDataLoaded: false\n  };\n  return ShimmerBase;\n}(React.Component);\n\nexport { ShimmerBase };","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","DelayedRender","getNativeProps","divProperties","Async","initializeComponentRef","ShimmerElementsGroup","TRANSITION_ANIMATION_INTERVAL","getClassNames","__extends","props","_super","_this","state","contentLoaded","isDataLoaded","_async","ShimmerBase","prevProps","clearTimeout","_lastTimeoutId","setTimeout","setState","dispose","styles","shimmerElements","children","width","className","customElementsGroup","theme","ariaLabel","shimmerColors","_classNames","transitionAnimationInterval","shimmerColor","shimmer","shimmerWaveColor","shimmerWave","divProps","root","style","shimmerWrapper","shimmerGradient","backgroundColor","background","dataWrapper","role","screenReaderText","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Shimmer\\Shimmer.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  classNamesFunction,\n  DelayedRender,\n  getNativeProps,\n  divProperties,\n  Async,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\n\nexport interface IShimmerState {\n  /**\n   * Flag for knowing when to remove the shimmerWrapper from the DOM.\n   */\n  contentLoaded?: boolean;\n}\n\nconst TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\n\nconst getClassNames = classNamesFunction<IShimmerStyleProps, IShimmerStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport class ShimmerBase extends React.Component<IShimmerProps, IShimmerState> {\n  public static defaultProps: IShimmerProps = {\n    isDataLoaded: false,\n  };\n\n  private _classNames: { [key in keyof IShimmerStyles]: string };\n  private _lastTimeoutId: number;\n  private _async: Async;\n\n  constructor(props: IShimmerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      contentLoaded: props.isDataLoaded,\n    };\n\n    this._async = new Async(this);\n  }\n\n  public componentDidUpdate(prevProps: IShimmerProps): void {\n    const { isDataLoaded } = this.props;\n\n    if (isDataLoaded !== prevProps.isDataLoaded) {\n      this._async.clearTimeout(this._lastTimeoutId);\n\n      // Removing the shimmerWrapper div from the DOM only after the fade out animation completed.\n      if (isDataLoaded) {\n        this._lastTimeoutId = this._async.setTimeout(() => {\n          this.setState({\n            contentLoaded: isDataLoaded,\n          });\n        }, TRANSITION_ANIMATION_INTERVAL);\n      } else {\n        this.setState({\n          contentLoaded: isDataLoaded,\n        });\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const {\n      styles,\n      shimmerElements,\n      children,\n      isDataLoaded,\n      width,\n      className,\n      customElementsGroup,\n      theme,\n      ariaLabel,\n      shimmerColors,\n    } = this.props;\n\n    const { contentLoaded } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      isDataLoaded,\n      className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave,\n    });\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    return (\n      <div {...divProps} className={this._classNames.root}>\n        {!contentLoaded && (\n          <div style={{ width: width ? width : '100%' }} className={this._classNames.shimmerWrapper}>\n            <div className={this._classNames.shimmerGradient} />\n            {customElementsGroup ? (\n              customElementsGroup\n            ) : (\n              <ShimmerElementsGroup\n                shimmerElements={shimmerElements}\n                backgroundColor={shimmerColors && shimmerColors.background}\n              />\n            )}\n          </div>\n        )}\n        {children && <div className={this._classNames.dataWrapper}>{children}</div>}\n        {ariaLabel && !isDataLoaded && (\n          <div role=\"status\" aria-live=\"polite\">\n            <DelayedRender>\n              <div className={this._classNames.screenReaderText}>{ariaLabel}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}