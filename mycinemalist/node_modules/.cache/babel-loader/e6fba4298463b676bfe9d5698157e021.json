{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, EventGroup, divProperties, getNativeProps, warnDeprecations } from '../../Utilities';\nimport { ResizeGroupDirection } from './ResizeGroup.types';\nimport { initializeComponentRef } from '@uifabric/utilities';\nvar RESIZE_DELAY = 16;\n/**\n * Returns a simple object is able to store measurements with a given key.\n */\n\nexport var getMeasurementCache = function getMeasurementCache() {\n  var measurementsCache = {};\n  return {\n    /**\n     * Checks if the provided data has a cacheKey. If it has a cacheKey and there is a\n     * corresponding entry in the measurementsCache, then it will return that value.\n     * Returns undefined otherwise.\n     */\n    getCachedMeasurement: function getCachedMeasurement(data) {\n      if (data && data.cacheKey && measurementsCache.hasOwnProperty(data.cacheKey)) {\n        return measurementsCache[data.cacheKey];\n      }\n\n      return undefined;\n    },\n\n    /**\n     * Should be called whenever there is a new measurement associated with a given data object.\n     * If the data has a cacheKey, store that measurement in the measurementsCache.\n     */\n    addMeasurementToCache: function addMeasurementToCache(data, measurement) {\n      if (data.cacheKey) {\n        measurementsCache[data.cacheKey] = measurement;\n      }\n    }\n  };\n};\n/**\n * Returns a function that is able to compute the next state for the ResizeGroup given the current\n * state and any measurement updates.\n */\n\nexport var getNextResizeGroupStateProvider = function getNextResizeGroupStateProvider(measurementCache) {\n  if (measurementCache === void 0) {\n    measurementCache = getMeasurementCache();\n  }\n\n  var _measurementCache = measurementCache;\n\n  var _containerDimension;\n  /**\n   * Gets the width/height of the data rendered in a hidden div.\n   * @param measuredData - The data corresponding to the measurement we wish to take.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n\n\n  function _getMeasuredDimension(measuredData, getElementToMeasureDimension) {\n    var cachedDimension = _measurementCache.getCachedMeasurement(measuredData);\n\n    if (cachedDimension !== undefined) {\n      return cachedDimension;\n    }\n\n    var measuredDimension = getElementToMeasureDimension();\n\n    _measurementCache.addMeasurementToCache(measuredData, measuredDimension);\n\n    return measuredDimension;\n  }\n  /**\n   * Will get the next IResizeGroupState based on the current data while trying to shrink contents\n   * to fit in the container.\n   * @param data - The initial data point to start measuring.\n   * @param onReduceData - Function that transforms the data into something that should render with less width/height.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n\n\n  function _shrinkContentsUntilTheyFit(data, onReduceData, getElementToMeasureDimension) {\n    var dataToMeasure = data;\n\n    var measuredDimension = _getMeasuredDimension(data, getElementToMeasureDimension);\n\n    while (measuredDimension > _containerDimension) {\n      var nextMeasuredData = onReduceData(dataToMeasure); // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onReduceData should return undefined when\n      // there are no more scaling states to apply.\n\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined\n        };\n      }\n\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData); // If the measurement isn't in the cache, we need to rerender with some data in a hidden div\n\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData,\n          resizeDirection: 'shrink'\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    }\n\n    return {\n      renderedData: dataToMeasure,\n      resizeDirection: undefined,\n      dataToMeasure: undefined\n    };\n  }\n  /**\n   * This function should be called when the state changes in a manner that might allow for more content to fit\n   * on the screen, such as the window width/height growing.\n   * @param data - The initial data point to start measuring.\n   * @param onGrowData - Function that transforms the data into something that may take up more space when rendering.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n\n\n  function _growDataUntilItDoesNotFit(data, onGrowData, getElementToMeasureDimension, onReduceData) {\n    var dataToMeasure = data;\n\n    var measuredDimension = _getMeasuredDimension(data, getElementToMeasureDimension);\n\n    while (measuredDimension < _containerDimension) {\n      var nextMeasuredData = onGrowData(dataToMeasure); // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onGrowData should return undefined when\n      // there are no more scaling states to apply.\n\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined\n        };\n      }\n\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData); // If the measurement isn't in the cache, we need to rerender with some data in a hidden div\n\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    } // Once the loop is done, we should now shrink until the contents fit.\n\n\n    return __assign({\n      resizeDirection: 'shrink'\n    }, _shrinkContentsUntilTheyFit(dataToMeasure, onReduceData, getElementToMeasureDimension));\n  }\n  /**\n   * Handles an update to the container width/height.\n   * Should only be called when we knew the previous container width/height.\n   * @param newDimension - The new width/height of the container.\n   * @param fullDimensionData - The initial data passed in as a prop to resizeGroup.\n   * @param renderedData - The data that was rendered prior to the container size changing.\n   * @param onGrowData - Set to true if the Resize group has an onGrowData function.\n   */\n\n\n  function _updateContainerDimension(newDimension, fullDimensionData, renderedData, onGrowData) {\n    var nextState;\n\n    if (newDimension > _containerDimension) {\n      if (onGrowData) {\n        nextState = {\n          resizeDirection: 'grow',\n          dataToMeasure: onGrowData(renderedData)\n        };\n      } else {\n        nextState = {\n          resizeDirection: 'shrink',\n          dataToMeasure: fullDimensionData\n        };\n      }\n    } else {\n      nextState = {\n        resizeDirection: 'shrink',\n        dataToMeasure: renderedData\n      };\n    }\n\n    _containerDimension = newDimension;\n    return __assign(__assign({}, nextState), {\n      measureContainer: false\n    });\n  }\n\n  function getNextState(props, currentState, getElementToMeasureDimension, newContainerDimension) {\n    // If there is no new container width/height or data to measure, there is no need for a new state update\n    if (newContainerDimension === undefined && currentState.dataToMeasure === undefined) {\n      return undefined;\n    }\n\n    if (newContainerDimension) {\n      // If we know the last container size and we rendered data at that width/height, we can do an optimized render\n      if (_containerDimension && currentState.renderedData && !currentState.dataToMeasure) {\n        return __assign(__assign({}, currentState), _updateContainerDimension(newContainerDimension, props.data, currentState.renderedData, props.onGrowData));\n      } // If we are just setting the container width/height for the first time, we can't do any optimizations\n\n\n      _containerDimension = newContainerDimension;\n    }\n\n    var nextState = __assign(__assign({}, currentState), {\n      measureContainer: false\n    });\n\n    if (currentState.dataToMeasure) {\n      if (currentState.resizeDirection === 'grow' && props.onGrowData) {\n        nextState = __assign(__assign({}, nextState), _growDataUntilItDoesNotFit(currentState.dataToMeasure, props.onGrowData, getElementToMeasureDimension, props.onReduceData));\n      } else {\n        nextState = __assign(__assign({}, nextState), _shrinkContentsUntilTheyFit(currentState.dataToMeasure, props.onReduceData, getElementToMeasureDimension));\n      }\n    }\n\n    return nextState;\n  }\n  /** Function that determines if we need to render content for measurement based on the measurement cache contents. */\n\n\n  function shouldRenderDataForMeasurement(dataToMeasure) {\n    if (!dataToMeasure || _measurementCache.getCachedMeasurement(dataToMeasure) !== undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function getInitialResizeGroupState(data) {\n    return {\n      dataToMeasure: __assign({}, data),\n      resizeDirection: 'grow',\n      measureContainer: true\n    };\n  }\n\n  return {\n    getNextState: getNextState,\n    shouldRenderDataForMeasurement: shouldRenderDataForMeasurement,\n    getInitialResizeGroupState: getInitialResizeGroupState\n  };\n}; // Provides a context property that (if true) tells any child components that\n// they are only being used for measurement purposes and will not be visible.\n\nexport var MeasuredContext = React.createContext({\n  isMeasured: false\n}); // Styles for the hidden div used for measurement\n\nvar hiddenDivStyles = {\n  position: 'fixed',\n  visibility: 'hidden'\n};\nvar hiddenParentStyles = {\n  position: 'relative'\n};\nvar COMPONENT_NAME = 'ResizeGroup';\n\nvar ResizeGroupBase =\n/** @class */\nfunction (_super) {\n  __extends(ResizeGroupBase, _super);\n\n  function ResizeGroupBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._nextResizeGroupStateProvider = getNextResizeGroupStateProvider(); // The root div which is the container inside of which we are trying to fit content.\n\n    _this._root = React.createRef(); // A div that can be used for the initial measurement so that we can avoid mounting a second instance\n    // of the component being measured for the initial render.\n\n    _this._initialHiddenDiv = React.createRef(); // A hidden div that is used for mounting a new instance of the component for measurement in a hidden\n    // div without unmounting the currently visible content.\n\n    _this._updateHiddenDiv = React.createRef(); // Tracks if any content has been rendered to the user. This enables us to do some performance optimizations\n    // for the initial render.\n\n    _this._hasRenderedContent = false;\n    _this.state = _this._nextResizeGroupStateProvider.getInitialResizeGroupState(_this.props.data);\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      styles: 'className'\n    });\n    return _this;\n  }\n\n  ResizeGroupBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        onRenderData = _a.onRenderData;\n    var _b = this.state,\n        dataToMeasure = _b.dataToMeasure,\n        renderedData = _b.renderedData;\n    var divProps = getNativeProps(this.props, divProperties, ['data']);\n\n    var dataNeedsMeasuring = this._nextResizeGroupStateProvider.shouldRenderDataForMeasurement(dataToMeasure);\n\n    var isInitialMeasure = !this._hasRenderedContent && dataNeedsMeasuring; // We only ever render the final content to the user. All measurements are done in a hidden div.\n    // For the initial render, we want this to be as fast as possible, so we need to make sure that we only mount one\n    // version of the component for measurement and the final render. For renders that update what is on screen, we\n    // want to make sure that there are no jarring effects such as the screen flashing as we apply scaling steps for\n    // measurement. In the update case, we mount a second version of the component just for measurement purposes and\n    // leave the rendered content untouched until we know the next state to show to the user.\n\n    return React.createElement(\"div\", __assign({}, divProps, {\n      className: className,\n      ref: this._root\n    }), React.createElement(\"div\", {\n      style: hiddenParentStyles\n    }, dataNeedsMeasuring && !isInitialMeasure && React.createElement(\"div\", {\n      style: hiddenDivStyles,\n      ref: this._updateHiddenDiv\n    }, React.createElement(MeasuredContext.Provider, {\n      value: {\n        isMeasured: true\n      }\n    }, onRenderData(dataToMeasure))), React.createElement(\"div\", {\n      ref: this._initialHiddenDiv,\n      style: isInitialMeasure ? hiddenDivStyles : undefined,\n      \"data-automation-id\": \"visibleContent\"\n    }, isInitialMeasure ? onRenderData(dataToMeasure) : renderedData && onRenderData(renderedData))));\n  };\n\n  ResizeGroupBase.prototype.componentDidMount = function () {\n    this._afterComponentRendered(this.props.direction);\n\n    this._events.on(window, 'resize', this._async.debounce(this._onResize, RESIZE_DELAY, {\n      leading: true\n    }));\n  };\n\n  ResizeGroupBase.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n    this.setState({\n      dataToMeasure: __assign({}, nextProps.data),\n      resizeDirection: 'grow',\n      // Receiving new props means the parent might rerender and the root width/height might change\n      measureContainer: true\n    });\n  };\n\n  ResizeGroupBase.prototype.componentDidUpdate = function (prevProps) {\n    if (this.state.renderedData) {\n      this._hasRenderedContent = true;\n\n      if (this.props.dataDidRender) {\n        this.props.dataDidRender(this.state.renderedData);\n      }\n    }\n\n    this._afterComponentRendered(this.props.direction);\n  };\n\n  ResizeGroupBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._events.dispose();\n  };\n\n  ResizeGroupBase.prototype.remeasure = function () {\n    if (this._root.current) {\n      this.setState({\n        measureContainer: true\n      });\n    }\n  };\n\n  ResizeGroupBase.prototype._afterComponentRendered = function (direction) {\n    var _this = this;\n\n    this._async.requestAnimationFrame(function () {\n      var containerDimension = undefined;\n\n      if (_this.state.measureContainer && _this._root.current) {\n        var boundingRect = _this._root.current.getBoundingClientRect();\n\n        containerDimension = direction && direction === ResizeGroupDirection.vertical ? boundingRect.height : boundingRect.width;\n      }\n\n      var nextState = _this._nextResizeGroupStateProvider.getNextState(_this.props, _this.state, function () {\n        var refToMeasure = !_this._hasRenderedContent ? _this._initialHiddenDiv : _this._updateHiddenDiv;\n\n        if (!refToMeasure.current) {\n          return 0;\n        }\n\n        return direction && direction === ResizeGroupDirection.vertical ? refToMeasure.current.scrollHeight : refToMeasure.current.scrollWidth;\n      }, containerDimension);\n\n      if (nextState) {\n        _this.setState(nextState);\n      }\n    }, this._root.current);\n  };\n\n  ResizeGroupBase.prototype._onResize = function () {\n    if (this._root.current) {\n      this.setState({\n        measureContainer: true\n      });\n    }\n  };\n\n  return ResizeGroupBase;\n}(React.Component);\n\nexport { ResizeGroupBase };","map":{"version":3,"mappings":"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","names":["React","Async","EventGroup","divProperties","getNativeProps","warnDeprecations","ResizeGroupDirection","initializeComponentRef","RESIZE_DELAY","getMeasurementCache","measurementsCache","getCachedMeasurement","data","cacheKey","hasOwnProperty","undefined","addMeasurementToCache","measurement","getNextResizeGroupStateProvider","measurementCache","_measurementCache","_containerDimension","_getMeasuredDimension","measuredData","getElementToMeasureDimension","cachedDimension","measuredDimension","_shrinkContentsUntilTheyFit","onReduceData","dataToMeasure","nextMeasuredData","renderedData","resizeDirection","_growDataUntilItDoesNotFit","onGrowData","_updateContainerDimension","newDimension","fullDimensionData","nextState","measureContainer","getNextState","props","currentState","newContainerDimension","shouldRenderDataForMeasurement","getInitialResizeGroupState","MeasuredContext","createContext","isMeasured","hiddenDivStyles","position","visibility","hiddenParentStyles","COMPONENT_NAME","__extends","_super","_this","createRef","state","_nextResizeGroupStateProvider","_async","_events","styles","ResizeGroupBase","className","onRenderData","divProps","dataNeedsMeasuring","isInitialMeasure","_hasRenderedContent","ref","_root","style","_updateHiddenDiv","Provider","value","_initialHiddenDiv","_afterComponentRendered","direction","on","window","debounce","_onResize","leading","nextProps","setState","prevProps","dataDidRender","dispose","current","requestAnimationFrame","containerDimension","boundingRect","getBoundingClientRect","vertical","height","width","refToMeasure","scrollHeight","scrollWidth","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\ResizeGroup\\ResizeGroup.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Async, EventGroup, divProperties, getNativeProps, warnDeprecations } from '../../Utilities';\nimport { IResizeGroupProps, ResizeGroupDirection } from './ResizeGroup.types';\nimport { initializeComponentRef } from '@uifabric/utilities';\n\nconst RESIZE_DELAY = 16;\n\nexport interface IResizeGroupState {\n  /**\n   * Final data used to render proper sized component\n   */\n  renderedData?: any;\n\n  /**\n   * Data to render in a hidden div for measurement\n   */\n  dataToMeasure?: any;\n\n  /**\n   * Set to true when the content container might have new dimensions and should\n   * be remeasured.\n   */\n  measureContainer?: boolean;\n\n  /**\n   * Are we resizing to accommodate having more or less available space?\n   * The 'grow' direction is when the container may have more room than the last render,\n   * such as when a window resize occurs. This means we will try to fit more content in the window.\n   * The 'shrink' direction is when the contents don't fit in the container and we need\n   * to find a transformation of the data that makes everything fit.\n   */\n  resizeDirection?: 'grow' | 'shrink';\n}\n\n/**\n * Returns a simple object is able to store measurements with a given key.\n */\nexport const getMeasurementCache = () => {\n  const measurementsCache: { [key: string]: number } = {};\n\n  return {\n    /**\n     * Checks if the provided data has a cacheKey. If it has a cacheKey and there is a\n     * corresponding entry in the measurementsCache, then it will return that value.\n     * Returns undefined otherwise.\n     */\n    getCachedMeasurement: (data: any): number | undefined => {\n      if (data && data.cacheKey && measurementsCache.hasOwnProperty(data.cacheKey)) {\n        return measurementsCache[data.cacheKey];\n      }\n\n      return undefined;\n    },\n    /**\n     * Should be called whenever there is a new measurement associated with a given data object.\n     * If the data has a cacheKey, store that measurement in the measurementsCache.\n     */\n    addMeasurementToCache: (data: any, measurement: number): void => {\n      if (data.cacheKey) {\n        measurementsCache[data.cacheKey] = measurement;\n      }\n    },\n  };\n};\n\n/**\n * Returns a function that is able to compute the next state for the ResizeGroup given the current\n * state and any measurement updates.\n */\nexport const getNextResizeGroupStateProvider = (measurementCache = getMeasurementCache()) => {\n  const _measurementCache = measurementCache;\n  let _containerDimension: number | undefined;\n\n  /**\n   * Gets the width/height of the data rendered in a hidden div.\n   * @param measuredData - The data corresponding to the measurement we wish to take.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _getMeasuredDimension(measuredData: any, getElementToMeasureDimension: () => number): number {\n    const cachedDimension = _measurementCache.getCachedMeasurement(measuredData);\n    if (cachedDimension !== undefined) {\n      return cachedDimension;\n    }\n\n    const measuredDimension = getElementToMeasureDimension();\n    _measurementCache.addMeasurementToCache(measuredData, measuredDimension);\n    return measuredDimension;\n  }\n\n  /**\n   * Will get the next IResizeGroupState based on the current data while trying to shrink contents\n   * to fit in the container.\n   * @param data - The initial data point to start measuring.\n   * @param onReduceData - Function that transforms the data into something that should render with less width/height.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _shrinkContentsUntilTheyFit(\n    data: any,\n    onReduceData: (prevData: any) => any,\n    getElementToMeasureDimension: () => number,\n  ): IResizeGroupState {\n    let dataToMeasure = data;\n    let measuredDimension: number | undefined = _getMeasuredDimension(data, getElementToMeasureDimension);\n\n    while (measuredDimension > _containerDimension!) {\n      const nextMeasuredData = onReduceData(dataToMeasure);\n\n      // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onReduceData should return undefined when\n      // there are no more scaling states to apply.\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined,\n        };\n      }\n\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData);\n\n      // If the measurement isn't in the cache, we need to rerender with some data in a hidden div\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData,\n          resizeDirection: 'shrink',\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    }\n\n    return {\n      renderedData: dataToMeasure,\n      resizeDirection: undefined,\n      dataToMeasure: undefined,\n    };\n  }\n\n  /**\n   * This function should be called when the state changes in a manner that might allow for more content to fit\n   * on the screen, such as the window width/height growing.\n   * @param data - The initial data point to start measuring.\n   * @param onGrowData - Function that transforms the data into something that may take up more space when rendering.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _growDataUntilItDoesNotFit(\n    data: any,\n    onGrowData: (prevData: any) => any,\n    getElementToMeasureDimension: () => number,\n    onReduceData: (prevData: any) => any,\n  ): IResizeGroupState {\n    let dataToMeasure = data;\n    let measuredDimension: number | undefined = _getMeasuredDimension(data, getElementToMeasureDimension);\n\n    while (measuredDimension < _containerDimension!) {\n      const nextMeasuredData = onGrowData(dataToMeasure);\n\n      // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onGrowData should return undefined when\n      // there are no more scaling states to apply.\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined,\n        };\n      }\n\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData);\n      // If the measurement isn't in the cache, we need to rerender with some data in a hidden div\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData,\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    }\n\n    // Once the loop is done, we should now shrink until the contents fit.\n    return {\n      resizeDirection: 'shrink',\n      ..._shrinkContentsUntilTheyFit(dataToMeasure, onReduceData, getElementToMeasureDimension),\n    };\n  }\n\n  /**\n   * Handles an update to the container width/height.\n   * Should only be called when we knew the previous container width/height.\n   * @param newDimension - The new width/height of the container.\n   * @param fullDimensionData - The initial data passed in as a prop to resizeGroup.\n   * @param renderedData - The data that was rendered prior to the container size changing.\n   * @param onGrowData - Set to true if the Resize group has an onGrowData function.\n   */\n  function _updateContainerDimension(\n    newDimension: number,\n    fullDimensionData: any,\n    renderedData: any,\n    onGrowData?: (prevData: any) => any,\n  ): IResizeGroupState {\n    let nextState: IResizeGroupState;\n    if (newDimension > _containerDimension!) {\n      if (onGrowData) {\n        nextState = {\n          resizeDirection: 'grow',\n          dataToMeasure: onGrowData(renderedData),\n        };\n      } else {\n        nextState = {\n          resizeDirection: 'shrink',\n          dataToMeasure: fullDimensionData,\n        };\n      }\n    } else {\n      nextState = {\n        resizeDirection: 'shrink',\n        dataToMeasure: renderedData,\n      };\n    }\n    _containerDimension = newDimension;\n    return { ...nextState, measureContainer: false };\n  }\n\n  function getNextState(\n    props: IResizeGroupProps,\n    currentState: IResizeGroupState,\n    getElementToMeasureDimension: () => number,\n    newContainerDimension?: number,\n  ): IResizeGroupState | undefined {\n    // If there is no new container width/height or data to measure, there is no need for a new state update\n    if (newContainerDimension === undefined && currentState.dataToMeasure === undefined) {\n      return undefined;\n    }\n\n    if (newContainerDimension) {\n      // If we know the last container size and we rendered data at that width/height, we can do an optimized render\n      if (_containerDimension && currentState.renderedData && !currentState.dataToMeasure) {\n        return {\n          ...currentState,\n          ..._updateContainerDimension(newContainerDimension, props.data, currentState.renderedData, props.onGrowData),\n        };\n      }\n\n      // If we are just setting the container width/height for the first time, we can't do any optimizations\n      _containerDimension = newContainerDimension;\n    }\n\n    let nextState: IResizeGroupState = {\n      ...currentState,\n      measureContainer: false,\n    };\n\n    if (currentState.dataToMeasure) {\n      if (currentState.resizeDirection === 'grow' && props.onGrowData) {\n        nextState = {\n          ...nextState,\n          ..._growDataUntilItDoesNotFit(\n            currentState.dataToMeasure,\n            props.onGrowData,\n            getElementToMeasureDimension,\n            props.onReduceData,\n          ),\n        };\n      } else {\n        nextState = {\n          ...nextState,\n          ..._shrinkContentsUntilTheyFit(currentState.dataToMeasure, props.onReduceData, getElementToMeasureDimension),\n        };\n      }\n    }\n\n    return nextState;\n  }\n\n  /** Function that determines if we need to render content for measurement based on the measurement cache contents. */\n  function shouldRenderDataForMeasurement(dataToMeasure: any | undefined): boolean {\n    if (!dataToMeasure || _measurementCache.getCachedMeasurement(dataToMeasure) !== undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function getInitialResizeGroupState(data: any): IResizeGroupState {\n    return {\n      dataToMeasure: { ...data },\n      resizeDirection: 'grow',\n      measureContainer: true,\n    };\n  }\n\n  return {\n    getNextState,\n    shouldRenderDataForMeasurement,\n    getInitialResizeGroupState,\n  };\n};\n\n// Provides a context property that (if true) tells any child components that\n// they are only being used for measurement purposes and will not be visible.\nexport const MeasuredContext = React.createContext({ isMeasured: false });\n\n// Styles for the hidden div used for measurement\nconst hiddenDivStyles: React.CSSProperties = { position: 'fixed', visibility: 'hidden' };\nconst hiddenParentStyles: React.CSSProperties = { position: 'relative' };\nconst COMPONENT_NAME = 'ResizeGroup';\n\nexport class ResizeGroupBase extends React.Component<IResizeGroupProps, IResizeGroupState> {\n  private _nextResizeGroupStateProvider = getNextResizeGroupStateProvider();\n  // The root div which is the container inside of which we are trying to fit content.\n  private _root = React.createRef<HTMLDivElement>();\n  // A div that can be used for the initial measurement so that we can avoid mounting a second instance\n  // of the component being measured for the initial render.\n  private _initialHiddenDiv = React.createRef<HTMLDivElement>();\n  // A hidden div that is used for mounting a new instance of the component for measurement in a hidden\n  // div without unmounting the currently visible content.\n  private _updateHiddenDiv = React.createRef<HTMLDivElement>();\n  // Tracks if any content has been rendered to the user. This enables us to do some performance optimizations\n  // for the initial render.\n  private _hasRenderedContent = false;\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  constructor(props: IResizeGroupProps) {\n    super(props);\n    this.state = this._nextResizeGroupStateProvider.getInitialResizeGroupState(this.props.data);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      styles: 'className',\n    });\n  }\n\n  public render(): JSX.Element {\n    const { className, onRenderData } = this.props;\n    const { dataToMeasure, renderedData } = this.state;\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['data']);\n\n    const dataNeedsMeasuring = this._nextResizeGroupStateProvider.shouldRenderDataForMeasurement(dataToMeasure);\n\n    const isInitialMeasure = !this._hasRenderedContent && dataNeedsMeasuring;\n\n    // We only ever render the final content to the user. All measurements are done in a hidden div.\n    // For the initial render, we want this to be as fast as possible, so we need to make sure that we only mount one\n    // version of the component for measurement and the final render. For renders that update what is on screen, we\n    // want to make sure that there are no jarring effects such as the screen flashing as we apply scaling steps for\n    // measurement. In the update case, we mount a second version of the component just for measurement purposes and\n    // leave the rendered content untouched until we know the next state to show to the user.\n    return (\n      <div {...divProps} className={className} ref={this._root}>\n        <div style={hiddenParentStyles}>\n          {dataNeedsMeasuring && !isInitialMeasure && (\n            <div style={hiddenDivStyles} ref={this._updateHiddenDiv}>\n              <MeasuredContext.Provider value={{ isMeasured: true }}>\n                {onRenderData(dataToMeasure)}\n              </MeasuredContext.Provider>\n            </div>\n          )}\n\n          <div\n            ref={this._initialHiddenDiv}\n            style={isInitialMeasure ? hiddenDivStyles : undefined}\n            data-automation-id=\"visibleContent\"\n          >\n            {isInitialMeasure ? onRenderData(dataToMeasure) : renderedData && onRenderData(renderedData)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public componentDidMount(): void {\n    this._afterComponentRendered(this.props.direction);\n    this._events.on(window, 'resize', this._async.debounce(this._onResize, RESIZE_DELAY, { leading: true }));\n  }\n\n  public UNSAFE_componentWillReceiveProps(nextProps: IResizeGroupProps): void {\n    this.setState({\n      dataToMeasure: { ...nextProps.data },\n      resizeDirection: 'grow',\n      // Receiving new props means the parent might rerender and the root width/height might change\n      measureContainer: true,\n    });\n  }\n\n  public componentDidUpdate(prevProps: IResizeGroupProps) {\n    if (this.state.renderedData) {\n      this._hasRenderedContent = true;\n      if (this.props.dataDidRender) {\n        this.props.dataDidRender(this.state.renderedData);\n      }\n    }\n    this._afterComponentRendered(this.props.direction);\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public remeasure(): void {\n    if (this._root.current) {\n      this.setState({ measureContainer: true });\n    }\n  }\n\n  private _afterComponentRendered(direction?: ResizeGroupDirection): void {\n    this._async.requestAnimationFrame(() => {\n      let containerDimension = undefined;\n      if (this.state.measureContainer && this._root.current) {\n        const boundingRect = this._root.current.getBoundingClientRect();\n        containerDimension =\n          direction && direction === ResizeGroupDirection.vertical ? boundingRect.height : boundingRect.width;\n      }\n      const nextState = this._nextResizeGroupStateProvider.getNextState(\n        this.props,\n        this.state,\n        () => {\n          const refToMeasure = !this._hasRenderedContent ? this._initialHiddenDiv : this._updateHiddenDiv;\n          if (!refToMeasure.current) {\n            return 0;\n          }\n          return direction && direction === ResizeGroupDirection.vertical\n            ? refToMeasure.current.scrollHeight\n            : refToMeasure.current.scrollWidth;\n        },\n        containerDimension,\n      );\n\n      if (nextState) {\n        this.setState(nextState);\n      }\n    }, this._root.current);\n  }\n\n  private _onResize(): void {\n    if (this._root.current) {\n      this.setState({ measureContainer: true });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}