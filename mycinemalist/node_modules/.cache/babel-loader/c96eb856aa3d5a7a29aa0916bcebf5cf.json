{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css } from '../../Utilities';\nimport { SelectionMode } from '../../utilities/selection/interfaces';\nimport { DetailsList } from './DetailsList';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType } from '../../Shimmer';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DEFAULT_CELL_STYLE_PROPS, DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nvar getClassNames = classNamesFunction();\nvar SHIMMER_INITIAL_ITEMS = 10;\nvar DEFAULT_SHIMMER_HEIGHT = 7;\nvar SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\n\nvar ShimmeredDetailsListBase =\n/** @class */\nfunction (_super) {\n  __extends(ShimmeredDetailsListBase, _super);\n\n  function ShimmeredDetailsListBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onRenderShimmerPlaceholder = function (index, rowProps) {\n      var onRenderCustomPlaceholder = _this.props.onRenderCustomPlaceholder;\n      var placeholderElements = onRenderCustomPlaceholder ? onRenderCustomPlaceholder(rowProps, index, _this._renderDefaultShimmerPlaceholder) : _this._renderDefaultShimmerPlaceholder(rowProps);\n      return React.createElement(Shimmer, {\n        customElementsGroup: placeholderElements\n      });\n    };\n\n    _this._renderDefaultShimmerPlaceholder = function (rowProps) {\n      var columns = rowProps.columns,\n          compact = rowProps.compact,\n          selectionMode = rowProps.selectionMode,\n          checkboxVisibility = rowProps.checkboxVisibility,\n          _a = rowProps.cellStyleProps,\n          cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n      var rowHeight = DEFAULT_ROW_HEIGHTS.rowHeight,\n          compactRowHeight = DEFAULT_ROW_HEIGHTS.compactRowHeight; // 1px to take into account the border-bottom of DetailsRow.\n\n      var gapHeight = compact ? compactRowHeight : rowHeight + 1;\n      var shimmerElementsRow = [];\n      var showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n\n      if (showCheckbox) {\n        shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n          key: 'checkboxGap',\n          shimmerElements: [{\n            type: ShimmerElementType.gap,\n            width: '40px',\n            height: gapHeight\n          }]\n        }));\n      }\n\n      columns.forEach(function (column, columnIdx) {\n        var shimmerElements = [];\n        var groupWidth = cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + column.calculatedWidth + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width: cellStyleProps.cellLeftPadding,\n          height: gapHeight\n        });\n\n        if (column.isIconOnly) {\n          shimmerElements.push({\n            type: ShimmerElementType.line,\n            width: column.calculatedWidth,\n            height: column.calculatedWidth\n          });\n          shimmerElements.push({\n            type: ShimmerElementType.gap,\n            width: cellStyleProps.cellRightPadding,\n            height: gapHeight\n          });\n        } else {\n          shimmerElements.push({\n            type: ShimmerElementType.line,\n            width: column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n            height: DEFAULT_SHIMMER_HEIGHT\n          });\n          shimmerElements.push({\n            type: ShimmerElementType.gap,\n            width: cellStyleProps.cellRightPadding + (column.calculatedWidth - column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n            height: gapHeight\n          });\n        }\n\n        shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n          key: columnIdx,\n          width: groupWidth + \"px\",\n          shimmerElements: shimmerElements\n        }));\n      }); // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave\n      // until the column resizing logic is done.\n\n      shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n        key: 'endGap',\n        width: '100%',\n        shimmerElements: [{\n          type: ShimmerElementType.gap,\n          width: '100%',\n          height: gapHeight\n        }]\n      }));\n      return React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        }\n      }, shimmerElementsRow);\n    };\n\n    _this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n    return _this;\n  }\n\n  ShimmeredDetailsListBase.prototype.render = function () {\n    var _a = this.props,\n        detailsListStyles = _a.detailsListStyles,\n        enableShimmer = _a.enableShimmer,\n        items = _a.items,\n        listProps = _a.listProps,\n        onRenderCustomPlaceholder = _a.onRenderCustomPlaceholder,\n        removeFadingOverlay = _a.removeFadingOverlay,\n        shimmerLines = _a.shimmerLines,\n        styles = _a.styles,\n        theme = _a.theme,\n        ariaLabelForGrid = _a.ariaLabelForGrid,\n        ariaLabelForShimmer = _a.ariaLabelForShimmer,\n        restProps = __rest(_a, [\"detailsListStyles\", \"enableShimmer\", \"items\", \"listProps\", \"onRenderCustomPlaceholder\", \"removeFadingOverlay\", \"shimmerLines\", \"styles\", \"theme\", \"ariaLabelForGrid\", \"ariaLabelForShimmer\"]);\n\n    var listClassName = listProps && listProps.className;\n    this._classNames = getClassNames(styles, {\n      theme: theme\n    });\n\n    var newListProps = __assign(__assign({}, listProps), {\n      // Adds to the optional listProp className a fading out overlay className only when `enableShimmer` toggled on\n      // and the overlay is not disabled by `removeFadingOverlay` prop.\n      className: enableShimmer && !removeFadingOverlay ? css(this._classNames.root, listClassName) : listClassName\n    });\n\n    return React.createElement(DetailsList, __assign({}, restProps, {\n      styles: detailsListStyles,\n      items: enableShimmer ? this._shimmerItems : items,\n      isPlaceholderData: enableShimmer,\n      ariaLabelForGrid: enableShimmer && ariaLabelForShimmer || ariaLabelForGrid,\n      onRenderMissingItem: this._onRenderShimmerPlaceholder,\n      listProps: newListProps\n    }));\n  };\n\n  return ShimmeredDetailsListBase;\n}(React.Component);\n\nexport { ShimmeredDetailsListBase };","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","css","SelectionMode","DetailsList","Shimmer","ShimmerElementsGroup","ShimmerElementType","CheckboxVisibility","DEFAULT_CELL_STYLE_PROPS","DEFAULT_ROW_HEIGHTS","getClassNames","SHIMMER_INITIAL_ITEMS","DEFAULT_SHIMMER_HEIGHT","SHIMMER_LINE_VS_CELL_WIDTH_RATIO","__extends","props","_super","_this","index","rowProps","placeholderElements","onRenderCustomPlaceholder","_renderDefaultShimmerPlaceholder","customElementsGroup","compact","selectionMode","checkboxVisibility","_a","cellStyleProps","compactRowHeight","gapHeight","rowHeight","shimmerElementsRow","showCheckbox","none","hidden","push","key","shimmerElements","type","gap","width","height","columns","forEach","column","columnIdx","groupWidth","cellLeftPadding","cellRightPadding","calculatedWidth","isPadded","cellExtraRightPadding","isIconOnly","line","style","display","_shimmerItems","shimmerLines","Array","ShimmeredDetailsListBase","detailsListStyles","enableShimmer","items","listProps","removeFadingOverlay","styles","theme","ariaLabelForGrid","ariaLabelForShimmer","restProps","listClassName","className","_classNames","newListProps","root","__assign","isPlaceholderData","onRenderMissingItem","_onRenderShimmerPlaceholder","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\DetailsList\\ShimmeredDetailsList.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { classNamesFunction, css } from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { SelectionMode } from '../../utilities/selection/interfaces';\nimport { DetailsList } from './DetailsList';\nimport { IDetailsRowProps } from './DetailsRow.types';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType, IShimmerElement } from '../../Shimmer';\nimport {\n  IShimmeredDetailsListProps,\n  IShimmeredDetailsListStyleProps,\n  IShimmeredDetailsListStyles,\n} from './ShimmeredDetailsList.types';\nimport { CheckboxVisibility } from './DetailsList.types';\n\nimport { DEFAULT_CELL_STYLE_PROPS, DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\n\nconst getClassNames = classNamesFunction<IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles>();\n\nconst SHIMMER_INITIAL_ITEMS = 10;\nconst DEFAULT_SHIMMER_HEIGHT = 7;\nconst SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\n\nexport class ShimmeredDetailsListBase extends React.Component<IShimmeredDetailsListProps, {}> {\n  private _shimmerItems: null[];\n  private _classNames: IProcessedStyleSet<IShimmeredDetailsListStyles>;\n\n  constructor(props: IShimmeredDetailsListProps) {\n    super(props);\n\n    this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n  }\n\n  public render(): JSX.Element {\n    const {\n      detailsListStyles,\n      enableShimmer,\n      items,\n      listProps,\n      onRenderCustomPlaceholder,\n      removeFadingOverlay,\n      shimmerLines,\n      styles,\n      theme,\n      ariaLabelForGrid,\n      ariaLabelForShimmer,\n      ...restProps\n    } = this.props;\n\n    const listClassName = listProps && listProps.className;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n    });\n\n    const newListProps = {\n      ...listProps,\n      // Adds to the optional listProp className a fading out overlay className only when `enableShimmer` toggled on\n      // and the overlay is not disabled by `removeFadingOverlay` prop.\n      className: enableShimmer && !removeFadingOverlay ? css(this._classNames.root, listClassName) : listClassName,\n    };\n\n    return (\n      <DetailsList\n        {...restProps}\n        styles={detailsListStyles}\n        items={enableShimmer ? this._shimmerItems : items}\n        isPlaceholderData={enableShimmer}\n        ariaLabelForGrid={(enableShimmer && ariaLabelForShimmer) || ariaLabelForGrid}\n        onRenderMissingItem={this._onRenderShimmerPlaceholder}\n        listProps={newListProps}\n      />\n    );\n  }\n\n  private _onRenderShimmerPlaceholder = (index: number, rowProps: IDetailsRowProps): React.ReactNode => {\n    const { onRenderCustomPlaceholder } = this.props;\n\n    const placeholderElements: React.ReactNode = onRenderCustomPlaceholder\n      ? onRenderCustomPlaceholder(rowProps, index, this._renderDefaultShimmerPlaceholder)\n      : this._renderDefaultShimmerPlaceholder(rowProps);\n\n    return <Shimmer customElementsGroup={placeholderElements} />;\n  };\n\n  private _renderDefaultShimmerPlaceholder = (rowProps: IDetailsRowProps): React.ReactNode => {\n    const { columns, compact, selectionMode, checkboxVisibility, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = rowProps;\n\n    const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n    // 1px to take into account the border-bottom of DetailsRow.\n    const gapHeight: number = compact ? compactRowHeight : rowHeight + 1;\n\n    const shimmerElementsRow: JSX.Element[] = [];\n\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n\n    if (showCheckbox) {\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup\n          key={'checkboxGap'}\n          shimmerElements={[{ type: ShimmerElementType.gap, width: '40px', height: gapHeight }]}\n        />,\n      );\n    }\n\n    columns.forEach((column, columnIdx) => {\n      const shimmerElements: IShimmerElement[] = [];\n      const groupWidth: number =\n        cellStyleProps.cellLeftPadding +\n        cellStyleProps.cellRightPadding +\n        column.calculatedWidth! +\n        (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n      shimmerElements.push({\n        type: ShimmerElementType.gap,\n        width: cellStyleProps.cellLeftPadding,\n        height: gapHeight,\n      });\n\n      if (column.isIconOnly) {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth!,\n          height: column.calculatedWidth!,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width: cellStyleProps.cellRightPadding,\n          height: gapHeight,\n        });\n      } else {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n          height: DEFAULT_SHIMMER_HEIGHT,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width:\n            cellStyleProps.cellRightPadding +\n            (column.calculatedWidth! - column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) +\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          height: gapHeight,\n        });\n      }\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup key={columnIdx} width={`${groupWidth}px`} shimmerElements={shimmerElements} />,\n      );\n    });\n    // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave\n    // until the column resizing logic is done.\n    shimmerElementsRow.push(\n      <ShimmerElementsGroup\n        key={'endGap'}\n        width={'100%'}\n        shimmerElements={[{ type: ShimmerElementType.gap, width: '100%', height: gapHeight }]}\n      />,\n    );\n    return <div style={{ display: 'flex' }}>{shimmerElementsRow}</div>;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}