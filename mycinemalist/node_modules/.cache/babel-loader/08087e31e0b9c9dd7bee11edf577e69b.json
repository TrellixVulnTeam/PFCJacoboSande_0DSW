{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { BaseSelectedItemsList } from '../BaseSelectedItemsList';\nimport { ExtendedSelectedItem } from './Items/ExtendedSelectedItem';\nimport { SelectedItemWithContextMenu } from './Items/SelectedItemWithContextMenu';\nimport { EditingItem } from './Items/EditingItem';\n/**\n * {@docCategory SelectedPeopleList}\n */\n\nvar BasePeopleSelectedItemsList =\n/** @class */\nfunction (_super) {\n  __extends(BasePeopleSelectedItemsList, _super);\n\n  function BasePeopleSelectedItemsList() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return BasePeopleSelectedItemsList;\n}(BaseSelectedItemsList);\n\nexport { BasePeopleSelectedItemsList };\n/**\n * Standard People Picker.\n */\n\nvar SelectedPeopleList =\n/** @class */\nfunction (_super) {\n  __extends(SelectedPeopleList, _super);\n\n  function SelectedPeopleList() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.renderItems = function () {\n      var items = _this.state.items;\n      return items.map(function (item, index) {\n        return _this._renderItem(item, index);\n      });\n    };\n\n    _this._beginEditing = function (item) {\n      item.isEditing = true;\n\n      _this.forceUpdate();\n    };\n\n    _this._completeEditing = function (oldItem, newItem) {\n      oldItem.isEditing = false;\n\n      _this.replaceItem(oldItem, newItem);\n    };\n\n    return _this;\n  }\n\n  SelectedPeopleList.prototype._renderItem = function (item, index) {\n    var _this = this;\n\n    var removeButtonAriaLabel = this.props.removeButtonAriaLabel;\n    var expandGroup = this.props.onExpandGroup;\n    var props = {\n      item: item,\n      index: index,\n      key: item.key ? item.key : index,\n      selected: this.selection.isIndexSelected(index),\n      onRemoveItem: function () {\n        return _this.removeItem(item);\n      },\n      onItemChange: this.onItemChange,\n      removeButtonAriaLabel: removeButtonAriaLabel,\n      onCopyItem: function (itemToCopy) {\n        return _this.copyItems([itemToCopy]);\n      },\n      onExpandItem: expandGroup ? function () {\n        return expandGroup(item);\n      } : undefined,\n      menuItems: this._createMenuItems(item)\n    };\n    var hasContextMenu = props.menuItems.length > 0;\n\n    if (item.isEditing && hasContextMenu) {\n      return React.createElement(EditingItem, __assign({}, props, {\n        onRenderFloatingPicker: this.props.onRenderFloatingPicker,\n        floatingPickerProps: this.props.floatingPickerProps,\n        onEditingComplete: this._completeEditing,\n        getEditingItemText: this.props.getEditingItemText\n      }));\n    } else {\n      // This cast is here because we are guaranteed that onRenderItem is set\n      // from static defaultProps\n      // TODO: Move this component to composition with required onRenderItem to remove\n      // this cast.\n      var onRenderItem = this.props.onRenderItem;\n      var renderedItem = onRenderItem(props);\n      return hasContextMenu ? React.createElement(SelectedItemWithContextMenu, {\n        key: props.key,\n        renderedItem: renderedItem,\n        beginEditing: this._beginEditing,\n        menuItems: this._createMenuItems(props.item),\n        item: props.item\n      }) : renderedItem;\n    }\n  };\n\n  SelectedPeopleList.prototype._createMenuItems = function (item) {\n    var _this = this;\n\n    var menuItems = [];\n\n    if (this.props.editMenuItemText && this.props.getEditingItemText) {\n      menuItems.push({\n        key: 'Edit',\n        text: this.props.editMenuItemText,\n        onClick: function (ev, menuItem) {\n          _this._beginEditing(menuItem.data);\n        },\n        data: item\n      });\n    }\n\n    if (this.props.removeMenuItemText) {\n      menuItems.push({\n        key: 'Remove',\n        text: this.props.removeMenuItemText,\n        onClick: function (ev, menuItem) {\n          _this.removeItem(menuItem.data);\n        },\n        data: item\n      });\n    }\n\n    if (this.props.copyMenuItemText) {\n      menuItems.push({\n        key: 'Copy',\n        text: this.props.copyMenuItemText,\n        onClick: function (ev, menuItem) {\n          if (_this.props.onCopyItems) {\n            _this.copyItems([menuItem.data]);\n          }\n        },\n        data: item\n      });\n    }\n\n    return menuItems;\n  };\n\n  SelectedPeopleList.defaultProps = {\n    onRenderItem: function (props) {\n      return React.createElement(ExtendedSelectedItem, __assign({}, props));\n    }\n  };\n  return SelectedPeopleList;\n}(BasePeopleSelectedItemsList);\n\nexport { SelectedPeopleList };","map":{"version":3,"mappings":"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","names":["React","BaseSelectedItemsList","ExtendedSelectedItem","SelectedItemWithContextMenu","EditingItem","__extends","_this","items","map","item","index","_renderItem","isEditing","forceUpdate","oldItem","newItem","replaceItem","SelectedPeopleList","expandGroup","props","onExpandGroup","key","selected","selection","isIndexSelected","onRemoveItem","removeItem","onItemChange","removeButtonAriaLabel","onCopyItem","itemToCopy","copyItems","onExpandItem","undefined","menuItems","_createMenuItems","hasContextMenu","length","__assign","onRenderFloatingPicker","floatingPickerProps","onEditingComplete","_completeEditing","getEditingItemText","onRenderItem","renderedItem","beginEditing","_beginEditing","editMenuItemText","push","text","onClick","ev","menuItem","data","removeMenuItemText","copyMenuItemText","onCopyItems","BasePeopleSelectedItemsList"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\SelectedItemsList\\src\\components\\SelectedItemsList\\SelectedPeopleList\\SelectedPeopleList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { BaseSelectedItemsList } from '../BaseSelectedItemsList';\nimport { IBaseSelectedItemsListProps, ISelectedItemProps } from '../BaseSelectedItemsList.types';\nimport { IPersonaProps } from '../../../Persona';\nimport { ExtendedSelectedItem } from './Items/ExtendedSelectedItem';\nimport { SelectedItemWithContextMenu } from './Items/SelectedItemWithContextMenu';\nimport { IRenderFunction } from '../../../Utilities';\nimport { IContextualMenuItem } from '../../../ContextualMenu';\nimport { IBaseFloatingPickerProps } from '../../../FloatingPicker';\nimport { EditingItem } from './Items/EditingItem';\n\n/**\n * {@docCategory SelectedPeopleList}\n */\nexport interface IExtendedPersonaProps extends IPersonaProps {\n  key?: React.Key;\n  isValid: boolean;\n  blockRecipientRemoval?: boolean;\n  shouldBlockSelection?: boolean;\n  canExpand?: boolean;\n  isEditing?: boolean;\n}\n\n/**\n * {@docCategory SelectedPeopleList}\n */\nexport interface ISelectedPeopleItemProps extends ISelectedItemProps<IExtendedPersonaProps> {\n  onExpandItem?: () => void;\n  renderPersonaCoin?: IRenderFunction<IPersonaProps>;\n  renderPrimaryText?: IRenderFunction<IPersonaProps>;\n}\n\n/**\n * {@docCategory SelectedPeopleList}\n */\nexport interface ISelectedPeopleProps extends IBaseSelectedItemsListProps<IExtendedPersonaProps> {\n  onExpandGroup?: (item: IExtendedPersonaProps) => void;\n  removeMenuItemText?: string;\n  copyMenuItemText?: string;\n  editMenuItemText?: string;\n  getEditingItemText?: (item: IExtendedPersonaProps) => string;\n  onRenderFloatingPicker?: React.ComponentType<IBaseFloatingPickerProps<IPersonaProps>>;\n  floatingPickerProps?: IBaseFloatingPickerProps<IPersonaProps>;\n}\n\n/**\n * {@docCategory SelectedPeopleList}\n */\nexport class BasePeopleSelectedItemsList extends BaseSelectedItemsList<IExtendedPersonaProps, ISelectedPeopleProps> {}\n\n/**\n * Standard People Picker.\n */\nexport class SelectedPeopleList extends BasePeopleSelectedItemsList {\n  public static defaultProps: any = {\n    onRenderItem: (props: ISelectedPeopleItemProps) => <ExtendedSelectedItem {...props} />,\n  };\n\n  protected renderItems = (): JSX.Element[] => {\n    const { items } = this.state;\n    return items.map((item: IExtendedPersonaProps, index: number) => this._renderItem(item, index));\n  };\n\n  private _renderItem(item: IExtendedPersonaProps, index: number): JSX.Element {\n    const { removeButtonAriaLabel } = this.props;\n    const expandGroup = this.props.onExpandGroup;\n    const props = {\n      item,\n      index,\n      key: item.key ? item.key : index,\n      selected: this.selection.isIndexSelected(index),\n      onRemoveItem: () => this.removeItem(item),\n      onItemChange: this.onItemChange,\n      removeButtonAriaLabel: removeButtonAriaLabel,\n      onCopyItem: (itemToCopy: IExtendedPersonaProps) => this.copyItems([itemToCopy]),\n      onExpandItem: expandGroup ? () => expandGroup(item) : undefined,\n      menuItems: this._createMenuItems(item),\n    };\n\n    const hasContextMenu = props.menuItems.length > 0;\n    if ((item as IExtendedPersonaProps).isEditing && hasContextMenu) {\n      return (\n        <EditingItem\n          {...props}\n          onRenderFloatingPicker={this.props.onRenderFloatingPicker}\n          floatingPickerProps={this.props.floatingPickerProps}\n          onEditingComplete={this._completeEditing}\n          getEditingItemText={this.props.getEditingItemText}\n        />\n      );\n    } else {\n      // This cast is here because we are guaranteed that onRenderItem is set\n      // from static defaultProps\n      // TODO: Move this component to composition with required onRenderItem to remove\n      // this cast.\n      const onRenderItem = this.props.onRenderItem as (props: ISelectedPeopleItemProps) => JSX.Element;\n      const renderedItem = onRenderItem(props);\n      return hasContextMenu ? (\n        <SelectedItemWithContextMenu\n          key={props.key}\n          renderedItem={renderedItem}\n          beginEditing={this._beginEditing}\n          menuItems={this._createMenuItems(props.item)}\n          item={props.item}\n        />\n      ) : (\n        renderedItem\n      );\n    }\n  }\n\n  private _beginEditing = (item: IExtendedPersonaProps): void => {\n    item.isEditing = true;\n    this.forceUpdate();\n  };\n\n  private _completeEditing = (oldItem: any, newItem: any): void => {\n    oldItem.isEditing = false;\n    this.replaceItem(oldItem, newItem);\n  };\n\n  private _createMenuItems(item: any): IContextualMenuItem[] {\n    const menuItems: IContextualMenuItem[] = [];\n\n    if (this.props.editMenuItemText && this.props.getEditingItemText) {\n      menuItems.push({\n        key: 'Edit',\n        text: this.props.editMenuItemText,\n        onClick: (ev: React.MouseEvent<HTMLElement>, menuItem: IContextualMenuItem) => {\n          this._beginEditing(menuItem.data);\n        },\n        data: item,\n      });\n    }\n\n    if (this.props.removeMenuItemText) {\n      menuItems.push({\n        key: 'Remove',\n        text: this.props.removeMenuItemText,\n        onClick: (ev: React.MouseEvent<HTMLElement>, menuItem: IContextualMenuItem) => {\n          this.removeItem(menuItem.data as IExtendedPersonaProps);\n        },\n        data: item,\n      });\n    }\n\n    if (this.props.copyMenuItemText) {\n      menuItems.push({\n        key: 'Copy',\n        text: this.props.copyMenuItemText,\n        onClick: (ev: React.MouseEvent<HTMLElement>, menuItem: IContextualMenuItem) => {\n          if (this.props.onCopyItems) {\n            (this.copyItems as (items: IExtendedPersonaProps[]) => void)([menuItem.data] as IExtendedPersonaProps[]);\n          }\n        },\n        data: item,\n      });\n    }\n\n    return menuItems;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}