{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent, getRect, getWindow, Async, EventGroup } from '../../Utilities';\nvar RESIZE_DELAY = 500;\nvar MAX_RESIZE_ATTEMPTS = 3;\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent decorated React component reference.\n */\n\nexport function withViewport(ComposedComponent) {\n  return (\n    /** @class */\n    function (_super) {\n      __extends(WithViewportComponent, _super);\n\n      function WithViewportComponent(props) {\n        var _this = _super.call(this, props) || this;\n\n        _this._root = React.createRef();\n\n        _this._registerResizeObserver = function () {\n          var win = getWindow(_this._root.current);\n          _this._viewportResizeObserver = new win.ResizeObserver(_this._onAsyncResize);\n\n          _this._viewportResizeObserver.observe(_this._root.current);\n        };\n\n        _this._unregisterResizeObserver = function () {\n          if (_this._viewportResizeObserver) {\n            _this._viewportResizeObserver.disconnect();\n\n            delete _this._viewportResizeObserver;\n          }\n        };\n        /* Note: using lambda here because decorators don't seem to work in decorators. */\n\n\n        _this._updateViewport = function (withForceUpdate) {\n          var viewport = _this.state.viewport;\n          var viewportElement = _this._root.current;\n          var scrollElement = findScrollableParent(viewportElement);\n          var scrollRect = getRect(scrollElement);\n          var clientRect = getRect(viewportElement);\n\n          var updateComponent = function () {\n            if (withForceUpdate && _this._composedComponentInstance) {\n              _this._composedComponentInstance.forceUpdate();\n            }\n          };\n\n          var isSizeChanged = (clientRect && clientRect.width) !== viewport.width || (scrollRect && scrollRect.height) !== viewport.height;\n\n          if (isSizeChanged && _this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n            _this._resizeAttempts++;\n\n            _this.setState({\n              viewport: {\n                width: clientRect.width,\n                height: scrollRect.height\n              }\n            }, function () {\n              _this._updateViewport(withForceUpdate);\n            });\n          } else {\n            _this._resizeAttempts = 0;\n            updateComponent();\n          }\n        };\n\n        _this._async = new Async(_this);\n        _this._events = new EventGroup(_this);\n        _this._resizeAttempts = 0;\n        _this.state = {\n          viewport: {\n            width: 0,\n            height: 0\n          }\n        };\n        return _this;\n      }\n\n      WithViewportComponent.prototype.componentDidMount = function () {\n        var _a = this.props,\n            skipViewportMeasures = _a.skipViewportMeasures,\n            disableResizeObserver = _a.disableResizeObserver;\n        var win = getWindow(this._root.current);\n        this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n          leading: false\n        });\n\n        if (!skipViewportMeasures) {\n          if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n            this._registerResizeObserver();\n          } else {\n            this._events.on(win, 'resize', this._onAsyncResize);\n          }\n\n          this._updateViewport();\n        }\n      };\n\n      WithViewportComponent.prototype.componentDidUpdate = function (previousProps) {\n        var previousSkipViewportMeasures = previousProps.skipViewportMeasures;\n        var _a = this.props,\n            skipViewportMeasures = _a.skipViewportMeasures,\n            disableResizeObserver = _a.disableResizeObserver;\n        var win = getWindow(this._root.current);\n\n        if (skipViewportMeasures !== previousSkipViewportMeasures) {\n          if (!skipViewportMeasures) {\n            if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n              if (!this._viewportResizeObserver) {\n                this._registerResizeObserver();\n              }\n            } else {\n              this._events.on(win, 'resize', this._onAsyncResize);\n            }\n\n            this._updateViewport();\n          } else {\n            this._unregisterResizeObserver();\n\n            this._events.off(win, 'resize', this._onAsyncResize);\n          }\n        }\n      };\n\n      WithViewportComponent.prototype.componentWillUnmount = function () {\n        this._events.dispose();\n\n        this._async.dispose();\n\n        this._unregisterResizeObserver();\n      };\n\n      WithViewportComponent.prototype.render = function () {\n        var viewport = this.state.viewport;\n        var newViewport = viewport.width > 0 && viewport.height > 0 ? viewport : undefined;\n        return React.createElement(\"div\", {\n          className: \"ms-Viewport\",\n          ref: this._root,\n          style: {\n            minWidth: 1,\n            minHeight: 1\n          }\n        }, React.createElement(ComposedComponent, __assign({\n          ref: this._updateComposedComponentRef,\n          viewport: newViewport\n        }, this.props)));\n      };\n\n      WithViewportComponent.prototype.forceUpdate = function () {\n        this._updateViewport(true);\n      };\n\n      WithViewportComponent.prototype._onAsyncResize = function () {\n        this._updateViewport();\n      };\n\n      WithViewportComponent.prototype._isResizeObserverAvailable = function () {\n        var win = getWindow(this._root.current);\n        return win && win.ResizeObserver;\n      };\n\n      return WithViewportComponent;\n    }(BaseDecorator)\n  );\n}","map":{"version":3,"mappings":"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","names":["React","BaseDecorator","findScrollableParent","getRect","getWindow","Async","EventGroup","RESIZE_DELAY","MAX_RESIZE_ATTEMPTS","withViewport","ComposedComponent","__extends","props","_super","_this","createRef","win","_root","current","_viewportResizeObserver","ResizeObserver","_onAsyncResize","observe","disconnect","withForceUpdate","viewportElement","scrollElement","scrollRect","clientRect","updateComponent","_composedComponentInstance","forceUpdate","isSizeChanged","width","viewport","height","_resizeAttempts","setState","_updateViewport","_async","_events","state","WithViewportComponent","skipViewportMeasures","disableResizeObserver","debounce","leading","_isResizeObserverAvailable","_registerResizeObserver","on","previousProps","previousSkipViewportMeasures","_unregisterResizeObserver","off","dispose","newViewport","undefined","className","ref","style","minWidth","minHeight","__assign","_updateComposedComponentRef"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\utilities\\src\\utilities\\decorators\\withViewport.tsx"],"sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent, getRect, getWindow, Async, EventGroup } from '../../Utilities';\n\n/**\n * Viewport rectangle dimensions.\n *\n * {@docCategory DetailsList}\n */\nexport interface IViewport {\n  /**\n   * Width in pixels.\n   */\n  width: number;\n  /**\n   * Height in pixels.\n   */\n  height: number;\n}\n\nexport interface IWithViewportState {\n  viewport?: IViewport;\n}\n\n/**\n * Props interface for the withViewport component.\n *\n * {@docCategory DetailsList}\n */\nexport interface IWithViewportProps {\n  /**\n   * Whether or not `withViewport` should disable its viewport measurements, effectively making this decorator\n   * pass-through with no impact on the rendered component.\n   *\n   * Since `withViewport` measures the `viewport` on mount, after each React update, and in response to events,\n   * it may cause a component which does not currently need this information due to its configuration to re-render\n   * too often. `skipViewportMeasures` may be toggled on and off based on current state, and will suspend and resume\n   * measurement as-needed.\n   *\n   * For example, when this wraps `DetailsList`, set `skipViewportMeasures` to `true` when the `layoutMode` is\n   * `fixedColumns`, since the `DetailsList` does not use the viewport size in any calculations.\n   *\n   * In addition, consider setting `skipViewportMeasures` to `true` when running within a React test renderer, to avoid\n   * direct DOM dependencies.\n   */\n  skipViewportMeasures?: boolean;\n  /**\n   * Whether or not to explicitly disable usage of the `ResizeObserver` in favor of a `'resize'` event on `window`,\n   * even if the browser supports `ResizeObserver`. This may be necessary if use of `ResizeObserver` results in too\n   * many re-renders of the wrapped component due to the frequency at which events are fired.\n   *\n   * This has no impact if `skipViewportMeasures` is `true`, as no viewport measurement strategy is used.\n   */\n  disableResizeObserver?: boolean;\n}\n\nconst RESIZE_DELAY = 500;\nconst MAX_RESIZE_ATTEMPTS = 3;\n\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent decorated React component reference.\n */\nexport function withViewport<TProps extends { viewport?: IViewport }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  return class WithViewportComponent extends BaseDecorator<TProps, IWithViewportState> {\n    private _root = React.createRef<HTMLDivElement>();\n    private _resizeAttempts: number;\n    private _viewportResizeObserver: any;\n    private _async: Async;\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n\n      this._async = new Async(this);\n      this._events = new EventGroup(this);\n      this._resizeAttempts = 0;\n\n      this.state = {\n        viewport: {\n          width: 0,\n          height: 0,\n        },\n      };\n    }\n\n    public componentDidMount(): void {\n      const { skipViewportMeasures, disableResizeObserver } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n        leading: false,\n      });\n\n      if (!skipViewportMeasures) {\n        if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n          this._registerResizeObserver();\n        } else {\n          this._events.on(win, 'resize', this._onAsyncResize);\n        }\n\n        this._updateViewport();\n      }\n    }\n\n    public componentDidUpdate(previousProps: TProps) {\n      const { skipViewportMeasures: previousSkipViewportMeasures } = previousProps as IWithViewportProps;\n      const { skipViewportMeasures, disableResizeObserver } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      if (skipViewportMeasures !== previousSkipViewportMeasures) {\n        if (!skipViewportMeasures) {\n          if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n            if (!this._viewportResizeObserver) {\n              this._registerResizeObserver();\n            }\n          } else {\n            this._events.on(win, 'resize', this._onAsyncResize);\n          }\n\n          this._updateViewport();\n        } else {\n          this._unregisterResizeObserver();\n          this._events.off(win, 'resize', this._onAsyncResize);\n        }\n      }\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n      this._async.dispose();\n      this._unregisterResizeObserver();\n    }\n\n    public render(): JSX.Element {\n      const { viewport } = this.state;\n      const newViewport = viewport!.width > 0 && viewport!.height > 0 ? viewport : undefined;\n\n      return (\n        <div className=\"ms-Viewport\" ref={this._root} style={{ minWidth: 1, minHeight: 1 }}>\n          <ComposedComponent ref={this._updateComposedComponentRef} viewport={newViewport} {...(this.props as any)} />\n        </div>\n      );\n    }\n\n    public forceUpdate(): void {\n      this._updateViewport(true);\n    }\n\n    private _onAsyncResize(): void {\n      this._updateViewport();\n    }\n\n    private _isResizeObserverAvailable(): boolean {\n      const win = getWindow(this._root.current);\n\n      return win && (win as any).ResizeObserver;\n    }\n\n    private _registerResizeObserver = () => {\n      const win = getWindow(this._root.current);\n\n      this._viewportResizeObserver = new (win as any).ResizeObserver(this._onAsyncResize);\n      this._viewportResizeObserver.observe(this._root.current);\n    };\n\n    private _unregisterResizeObserver = () => {\n      if (this._viewportResizeObserver) {\n        this._viewportResizeObserver.disconnect();\n        delete this._viewportResizeObserver;\n      }\n    };\n\n    /* Note: using lambda here because decorators don't seem to work in decorators. */\n    private _updateViewport = (withForceUpdate?: boolean) => {\n      const { viewport } = this.state;\n      const viewportElement = this._root.current;\n      const scrollElement = findScrollableParent(viewportElement) as HTMLElement;\n      const scrollRect = getRect(scrollElement);\n      const clientRect = getRect(viewportElement);\n      const updateComponent = () => {\n        if (withForceUpdate && this._composedComponentInstance) {\n          this._composedComponentInstance.forceUpdate();\n        }\n      };\n\n      const isSizeChanged =\n        (clientRect && clientRect.width) !== viewport!.width || (scrollRect && scrollRect.height) !== viewport!.height;\n\n      if (isSizeChanged && this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n        this._resizeAttempts++;\n        this.setState(\n          {\n            viewport: {\n              width: clientRect.width,\n              height: scrollRect.height,\n            },\n          },\n          () => {\n            this._updateViewport(withForceUpdate);\n          },\n        );\n      } else {\n        this._resizeAttempts = 0;\n        updateComponent();\n      }\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}