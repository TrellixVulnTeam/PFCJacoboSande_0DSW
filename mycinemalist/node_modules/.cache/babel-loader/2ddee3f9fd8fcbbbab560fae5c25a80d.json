{"ast":null,"code":"import { mergeCssSets, Stylesheet } from '@uifabric/merge-styles';\nimport { getRTL } from './rtl';\nimport { getWindow } from './dom';\nvar MAX_CACHE_COUNT = 50;\nvar DEFAULT_SPECIFICITY_MULTIPLIER = 5;\nvar _memoizedClassNames = 0;\nvar stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(function () {\n    return _memoizedClassNames++;\n  });\n} // Note that because of the caching nature within the classNames memoization,\n// I've disabled this rule to simply be able to work with any types.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// This represents a prop we attach to each Map to indicate the cached return value\n// associated with the graph node.\n\n\nvar retVal = '__retval__';\n/**\n * Creates a getClassNames function which calls getStyles given the props, and injects them\n * into mergeStyleSets.\n *\n * Note that the props you pass in on every render should be in the same order and\n * immutable (numbers, strings, and booleans). This will allow the results to be memoized. Violating\n * these will cause extra recalcs to occur.\n */\n\nexport function classNamesFunction(options) {\n  // We build a trie where each node is a Map. The map entry key represents an argument\n  // value, and the entry value is another node (Map). Each node has a `__retval__`\n  // property which is used to hold the cached response.\n  if (options === void 0) {\n    options = {};\n  } // To derive the response, we can simply ensure the arguments are added or already\n  // exist in the trie. At the last node, if there is a `__retval__` we return that. Otherwise\n  // we call the `getStyles` api to evaluate, cache on the property, and return that.\n\n\n  var map = new Map();\n  var styleCalcCount = 0;\n  var getClassNamesCount = 0;\n  var currentMemoizedClassNames = _memoizedClassNames;\n\n  var getClassNames = function (styleFunctionOrObject, styleProps) {\n    if (styleProps === void 0) {\n      styleProps = {};\n    }\n\n    var _a, _b; // If useStaticStyles is true, styleFunctionOrObject returns slot to classname mappings.\n    // If there is also no style overrides, we can skip merge styles completely and\n    // simply return the result from the style funcion.\n\n\n    if (options.useStaticStyles && typeof styleFunctionOrObject === 'function' && styleFunctionOrObject.__noStyleOverride__) {\n      return styleFunctionOrObject(styleProps);\n    }\n\n    getClassNamesCount++;\n    var current = map;\n    var theme = styleProps.theme;\n    var rtl = theme && theme.rtl !== undefined ? theme.rtl : getRTL();\n    var disableCaching = options.disableCaching; // On reset of our stylesheet, reset memoized cache.\n\n    if (currentMemoizedClassNames !== _memoizedClassNames) {\n      currentMemoizedClassNames = _memoizedClassNames;\n      map = new Map();\n      styleCalcCount = 0;\n    }\n\n    if (!options.disableCaching) {\n      current = _traverseMap(map, styleFunctionOrObject);\n      current = _traverseMap(current, styleProps);\n    }\n\n    if (disableCaching || !current[retVal]) {\n      if (styleFunctionOrObject === undefined) {\n        current[retVal] = {};\n      } else {\n        current[retVal] = mergeCssSets([typeof styleFunctionOrObject === 'function' ? styleFunctionOrObject(styleProps) : styleFunctionOrObject], {\n          rtl: !!rtl,\n          specificityMultiplier: options.useStaticStyles ? DEFAULT_SPECIFICITY_MULTIPLIER : undefined\n        });\n      }\n\n      if (!disableCaching) {\n        styleCalcCount++;\n      }\n    }\n\n    if (styleCalcCount > (options.cacheSize || MAX_CACHE_COUNT)) {\n      var win = getWindow();\n\n      if ((_b = (_a = win) === null || _a === void 0 ? void 0 : _a.FabricConfig) === null || _b === void 0 ? void 0 : _b.enableClassNameCacheFullWarning) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Styles are being recalculated too frequently. Cache miss rate is \" + styleCalcCount + \"/\" + getClassNamesCount + \".\"); // eslint-disable-next-line no-console\n\n        console.trace();\n      }\n\n      map.clear();\n      styleCalcCount = 0; // Mutate the options passed in, that's all we can do.\n\n      options.disableCaching = true;\n    } // Note: the retVal is an attached property on the Map; not a key in the Map. We use this attached property to\n    // cache the return value for this branch of the graph.\n\n\n    return current[retVal];\n  };\n\n  return getClassNames;\n}\n\nfunction _traverseEdge(current, value) {\n  value = _normalizeValue(value);\n\n  if (!current.has(value)) {\n    current.set(value, new Map());\n  }\n\n  return current.get(value);\n}\n\nfunction _traverseMap(current, inputs) {\n  if (typeof inputs === 'function') {\n    var cachedInputsFromStyled = inputs.__cachedInputs__;\n\n    if (cachedInputsFromStyled) {\n      // The styled helper will generate the styles function and will attach the cached\n      // inputs (consisting of the default styles, customzied styles, and user provided styles.)\n      // These should be used as cache keys for deriving the memoized value.\n      for (var _i = 0, _a = inputs.__cachedInputs__; _i < _a.length; _i++) {\n        var input = _a[_i];\n        current = _traverseEdge(current, input);\n      }\n    } else {\n      current = _traverseEdge(current, inputs);\n    }\n  } else if (typeof inputs === 'object') {\n    for (var propName in inputs) {\n      if (inputs.hasOwnProperty(propName)) {\n        current = _traverseEdge(current, inputs[propName]);\n      }\n    }\n  }\n\n  return current;\n}\n\nfunction _normalizeValue(value) {\n  switch (value) {\n    case undefined:\n      return '__undefined__';\n\n    case null:\n      return '__null__';\n\n    default:\n      return value;\n  }\n}","map":{"version":3,"mappings":"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","names":["mergeCssSets","Stylesheet","getRTL","getWindow","MAX_CACHE_COUNT","DEFAULT_SPECIFICITY_MULTIPLIER","_memoizedClassNames","stylesheet","getInstance","onReset","retVal","classNamesFunction","options","map","Map","styleCalcCount","getClassNamesCount","currentMemoizedClassNames","getClassNames","styleFunctionOrObject","styleProps","useStaticStyles","__noStyleOverride__","current","rtl","theme","undefined","disableCaching","_traverseMap","specificityMultiplier","cacheSize","win","_a","FabricConfig","_b","enableClassNameCacheFullWarning","console","warn","trace","clear","_traverseEdge","value","_normalizeValue","has","set","get","inputs","cachedInputsFromStyled","__cachedInputs__","_i","input","propName","hasOwnProperty"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\src\\classNamesFunction.ts"],"sourcesContent":["import {\n  mergeCssSets,\n  IStyleSet,\n  IProcessedStyleSet,\n  Stylesheet,\n  IStyleFunctionOrObject,\n} from '@uifabric/merge-styles';\nimport { getRTL } from './rtl';\nimport { getWindow } from './dom';\nimport { StyleFunction } from './styled';\n\nconst MAX_CACHE_COUNT = 50;\nconst DEFAULT_SPECIFICITY_MULTIPLIER = 5;\n\nlet _memoizedClassNames = 0;\n\nconst stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(() => _memoizedClassNames++);\n}\n\n// Note that because of the caching nature within the classNames memoization,\n// I've disabled this rule to simply be able to work with any types.\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// This represents a prop we attach to each Map to indicate the cached return value\n// associated with the graph node.\nconst retVal = '__retval__';\n\ninterface IRecursiveMemoNode extends Map<any, IRecursiveMemoNode> {\n  [retVal]?: string;\n}\n\ntype AppWindow = (Window & { FabricConfig?: { enableClassNameCacheFullWarning?: boolean } }) | undefined;\n\nexport interface IClassNamesFunctionOptions {\n  /**\n   * Disables class caching for scenarios where styleProp parts mutate frequently.\n   */\n  disableCaching?: boolean;\n\n  /**\n   * Size of the cache. It overwrites default cache size when defined.\n   */\n  cacheSize?: number;\n\n  /**\n   * Set to true if component base styles are implemented in scss instead of css-in-js.\n   */\n  useStaticStyles?: boolean;\n}\n\n/**\n * Creates a getClassNames function which calls getStyles given the props, and injects them\n * into mergeStyleSets.\n *\n * Note that the props you pass in on every render should be in the same order and\n * immutable (numbers, strings, and booleans). This will allow the results to be memoized. Violating\n * these will cause extra recalcs to occur.\n */\nexport function classNamesFunction<TStyleProps extends {}, TStyleSet extends IStyleSet<TStyleSet>>(\n  options: IClassNamesFunctionOptions = {},\n): (\n  getStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined,\n  styleProps?: TStyleProps,\n) => IProcessedStyleSet<TStyleSet> {\n  // We build a trie where each node is a Map. The map entry key represents an argument\n  // value, and the entry value is another node (Map). Each node has a `__retval__`\n  // property which is used to hold the cached response.\n\n  // To derive the response, we can simply ensure the arguments are added or already\n  // exist in the trie. At the last node, if there is a `__retval__` we return that. Otherwise\n  // we call the `getStyles` api to evaluate, cache on the property, and return that.\n  let map: IRecursiveMemoNode = new Map();\n  let styleCalcCount = 0;\n  let getClassNamesCount = 0;\n  let currentMemoizedClassNames = _memoizedClassNames;\n\n  const getClassNames = (\n    styleFunctionOrObject: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined,\n    styleProps: TStyleProps = {} as TStyleProps,\n  ): IProcessedStyleSet<TStyleSet> => {\n    // If useStaticStyles is true, styleFunctionOrObject returns slot to classname mappings.\n    // If there is also no style overrides, we can skip merge styles completely and\n    // simply return the result from the style funcion.\n    if (\n      options.useStaticStyles &&\n      typeof styleFunctionOrObject === 'function' &&\n      (styleFunctionOrObject as StyleFunction<TStyleProps, TStyleSet>).__noStyleOverride__\n    ) {\n      return styleFunctionOrObject(styleProps) as IProcessedStyleSet<TStyleSet>;\n    }\n\n    getClassNamesCount++;\n    let current: Map<any, any> = map;\n    const { theme } = styleProps as any;\n    const rtl = theme && theme.rtl !== undefined ? theme.rtl : getRTL();\n\n    const disableCaching = options.disableCaching;\n\n    // On reset of our stylesheet, reset memoized cache.\n    if (currentMemoizedClassNames !== _memoizedClassNames) {\n      currentMemoizedClassNames = _memoizedClassNames;\n      map = new Map();\n      styleCalcCount = 0;\n    }\n\n    if (!options.disableCaching) {\n      current = _traverseMap(map, styleFunctionOrObject as any);\n      current = _traverseMap(current, styleProps);\n    }\n\n    if (disableCaching || !(current as any)[retVal]) {\n      if (styleFunctionOrObject === undefined) {\n        (current as any)[retVal] = {} as IProcessedStyleSet<TStyleSet>;\n      } else {\n        (current as any)[retVal] = mergeCssSets(\n          [\n            (typeof styleFunctionOrObject === 'function'\n              ? styleFunctionOrObject(styleProps)\n              : styleFunctionOrObject) as IStyleSet<TStyleSet>,\n          ],\n          { rtl: !!rtl, specificityMultiplier: options.useStaticStyles ? DEFAULT_SPECIFICITY_MULTIPLIER : undefined },\n        );\n      }\n\n      if (!disableCaching) {\n        styleCalcCount++;\n      }\n    }\n\n    if (styleCalcCount > (options.cacheSize || MAX_CACHE_COUNT)) {\n      const win = getWindow() as AppWindow;\n      if (win?.FabricConfig?.enableClassNameCacheFullWarning) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Styles are being recalculated too frequently. Cache miss rate is ${styleCalcCount}/${getClassNamesCount}.`,\n        );\n        // eslint-disable-next-line no-console\n        console.trace();\n      }\n\n      map.clear();\n      styleCalcCount = 0;\n\n      // Mutate the options passed in, that's all we can do.\n      options.disableCaching = true;\n    }\n\n    // Note: the retVal is an attached property on the Map; not a key in the Map. We use this attached property to\n    // cache the return value for this branch of the graph.\n    return (current as any)[retVal];\n  };\n\n  return getClassNames;\n}\n\nfunction _traverseEdge(current: Map<any, any>, value: any): Map<any, any> {\n  value = _normalizeValue(value);\n\n  if (!current.has(value)) {\n    current.set(value, new Map<any, any>());\n  }\n\n  return current.get(value);\n}\n\nfunction _traverseMap(current: Map<any, any>, inputs: any[] | Object): Map<any, any> {\n  if (typeof inputs === 'function') {\n    const cachedInputsFromStyled = (inputs as StyleFunction<any, any>).__cachedInputs__;\n    if (cachedInputsFromStyled) {\n      // The styled helper will generate the styles function and will attach the cached\n      // inputs (consisting of the default styles, customzied styles, and user provided styles.)\n      // These should be used as cache keys for deriving the memoized value.\n      for (const input of (inputs as any).__cachedInputs__) {\n        current = _traverseEdge(current, input);\n      }\n    } else {\n      current = _traverseEdge(current, inputs);\n    }\n  } else if (typeof inputs === 'object') {\n    for (const propName in inputs) {\n      if (inputs.hasOwnProperty(propName)) {\n        current = _traverseEdge(current, (inputs as any)[propName]);\n      }\n    }\n  }\n\n  return current;\n}\n\nfunction _normalizeValue(value: any): string {\n  switch (value) {\n    case undefined:\n      return '__undefined__';\n    case null:\n      return '__null__';\n    default:\n      return value;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}