{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { initializeComponentRef, EventGroup, Async, classNamesFunction } from '../../Utilities';\nimport { ColumnActionsMode } from './DetailsList.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nvar MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nvar getClassNames = classNamesFunction();\nvar TRANSITION_DURATION_DRAG = 200; // ms\n\nvar TRANSITION_DURATION_DROP = 1500; // ms\n\nvar CLASSNAME_ADD_INTERVAL = 20; // ms\n\n/**\n * Component for rendering columns in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\n\nvar DetailsColumnBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsColumnBase, _super);\n\n  function DetailsColumnBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n\n    _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {\n      return React.createElement(\"span\", {\n        className: tooltipHostProps.hostClassName\n      }, tooltipHostProps.children);\n    };\n\n    _this._onColumnClick = function (ev) {\n      var _a = _this.props,\n          onColumnClick = _a.onColumnClick,\n          column = _a.column;\n\n      if (column.columnActionsMode === ColumnActionsMode.disabled) {\n        return;\n      }\n\n      if (column.onColumnClick) {\n        column.onColumnClick(ev, column);\n      }\n\n      if (onColumnClick) {\n        onColumnClick(ev, column);\n      }\n    };\n\n    _this._onDragStart = function (item, itemIndex, selectedItems, event) {\n      var classNames = _this._classNames;\n\n      if (itemIndex) {\n        _this._updateHeaderDragInfo(itemIndex);\n\n        _this._root.current.classList.add(classNames.borderWhileDragging);\n\n        _this._async.setTimeout(function () {\n          if (_this._root.current) {\n            _this._root.current.classList.add(classNames.noBorderWhileDragging);\n          }\n        }, CLASSNAME_ADD_INTERVAL);\n      }\n    };\n\n    _this._onDragEnd = function (item, event) {\n      var classNames = _this._classNames;\n\n      if (event) {\n        _this._updateHeaderDragInfo(-1, event);\n      }\n\n      _this._root.current.classList.remove(classNames.borderWhileDragging);\n\n      _this._root.current.classList.remove(classNames.noBorderWhileDragging);\n    };\n\n    _this._updateHeaderDragInfo = function (itemIndex, event) {\n      /* eslint-disable deprecation/deprecation */\n      if (_this.props.setDraggedItemIndex) {\n        _this.props.setDraggedItemIndex(itemIndex);\n      }\n      /* eslint-enable deprecation/deprecation */\n\n\n      if (_this.props.updateDragInfo) {\n        _this.props.updateDragInfo({\n          itemIndex: itemIndex\n        }, event);\n      }\n    };\n\n    _this._onColumnContextMenu = function (ev) {\n      var _a = _this.props,\n          onColumnContextMenu = _a.onColumnContextMenu,\n          column = _a.column;\n\n      if (column.onColumnContextMenu) {\n        column.onColumnContextMenu(column, ev);\n        ev.preventDefault();\n      }\n\n      if (onColumnContextMenu) {\n        onColumnContextMenu(column, ev);\n        ev.preventDefault();\n      }\n    };\n\n    _this._onRootMouseDown = function (ev) {\n      var isDraggable = _this.props.isDraggable; // Ignore anything except the primary button.\n\n      if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON) {\n        ev.stopPropagation();\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    return _this;\n  }\n\n  DetailsColumnBase.prototype.render = function () {\n    var _a = this.props,\n        column = _a.column,\n        columnIndex = _a.columnIndex,\n        parentId = _a.parentId,\n        isDraggable = _a.isDraggable,\n        styles = _a.styles,\n        theme = _a.theme,\n        _b = _a.cellStyleProps,\n        cellStyleProps = _b === void 0 ? DEFAULT_CELL_STYLE_PROPS : _b,\n        _c = _a.useFastIcons,\n        useFastIcons = _c === void 0 ? true : _c;\n    var _d = this.props.onRenderColumnHeaderTooltip,\n        onRenderColumnHeaderTooltip = _d === void 0 ? this._onRenderColumnHeaderTooltip : _d;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      headerClassName: column.headerClassName,\n      iconClassName: column.iconClassName,\n      isActionable: column.columnActionsMode !== ColumnActionsMode.disabled,\n      isEmpty: !column.name,\n      isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,\n      isPadded: column.isPadded,\n      isIconOnly: column.isIconOnly,\n      cellStyleProps: cellStyleProps,\n      transitionDurationDrag: TRANSITION_DURATION_DRAG,\n      transitionDurationDrop: TRANSITION_DURATION_DROP\n    });\n    var classNames = this._classNames;\n    var IconComponent = useFastIcons ? FontIcon : Icon;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      key: column.key,\n      ref: this._root,\n      role: 'columnheader',\n      \"aria-sort\": column.isSorted ? column.isSortedDescending ? 'descending' : 'ascending' : 'none',\n      \"aria-colindex\": columnIndex,\n      className: classNames.root,\n      \"data-is-draggable\": isDraggable,\n      draggable: isDraggable,\n      style: {\n        width: column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n      },\n      \"data-automationid\": 'ColumnsHeaderColumn',\n      \"data-item-key\": column.key\n    }, isDraggable && React.createElement(IconComponent, {\n      iconName: \"GripperBarVertical\",\n      className: classNames.gripperBarVerticalStyle\n    }), onRenderColumnHeaderTooltip({\n      hostClassName: classNames.cellTooltip,\n      id: parentId + \"-\" + column.key + \"-tooltip\",\n      setAriaDescribedBy: false,\n      column: column,\n      content: column.columnActionsMode !== ColumnActionsMode.disabled ? column.ariaLabel : '',\n      children: React.createElement(\"span\", {\n        id: parentId + \"-\" + column.key,\n        \"aria-label\": column.isIconOnly ? column.name : undefined,\n        \"aria-labelledby\": column.isIconOnly ? undefined : parentId + \"-\" + column.key + \"-name\",\n        className: classNames.cellTitle,\n        \"data-is-focusable\": column.columnActionsMode !== ColumnActionsMode.disabled,\n        role: column.columnActionsMode !== ColumnActionsMode.disabled && (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined) ? 'button' : undefined,\n        \"aria-describedby\": !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleLabel() ? parentId + \"-\" + column.key + \"-tooltip\" : undefined,\n        onContextMenu: this._onColumnContextMenu,\n        onClick: this._onColumnClick,\n        \"aria-haspopup\": column.columnActionsMode === ColumnActionsMode.hasDropdown,\n        \"aria-expanded\": column.columnActionsMode === ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : undefined\n      }, React.createElement(\"span\", {\n        id: parentId + \"-\" + column.key + \"-name\",\n        className: classNames.cellName\n      }, (column.iconName || column.iconClassName) && React.createElement(IconComponent, {\n        className: classNames.iconClassName,\n        iconName: column.iconName\n      }), column.isIconOnly ? React.createElement(\"span\", {\n        className: classNames.accessibleLabel\n      }, column.name) : column.name), column.isFiltered && React.createElement(IconComponent, {\n        className: classNames.nearIcon,\n        iconName: \"Filter\"\n      }), column.isSorted && React.createElement(IconComponent, {\n        className: classNames.sortIcon,\n        iconName: column.isSortedDescending ? 'SortDown' : 'SortUp'\n      }), column.isGrouped && React.createElement(IconComponent, {\n        className: classNames.nearIcon,\n        iconName: \"GroupedDescending\"\n      }), column.columnActionsMode === ColumnActionsMode.hasDropdown && !column.isIconOnly && React.createElement(IconComponent, {\n        \"aria-hidden\": true,\n        className: classNames.filterChevron,\n        iconName: \"ChevronDown\"\n      }))\n    }, this._onRenderColumnHeaderTooltip)), !this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleLabel() : null);\n  };\n\n  DetailsColumnBase.prototype.componentDidMount = function () {\n    var _this = this;\n\n    if (this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    var classNames = this._classNames;\n\n    if (this.props.isDropped) {\n      if (this._root.current) {\n        this._root.current.classList.add(classNames.borderAfterDropping);\n\n        this._async.setTimeout(function () {\n          if (_this._root.current) {\n            _this._root.current.classList.add(classNames.noBorderAfterDropping);\n          }\n        }, CLASSNAME_ADD_INTERVAL);\n      }\n\n      this._async.setTimeout(function () {\n        if (_this._root.current) {\n          _this._root.current.classList.remove(classNames.borderAfterDropping);\n\n          _this._root.current.classList.remove(classNames.noBorderAfterDropping);\n        }\n      }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);\n    }\n  };\n\n  DetailsColumnBase.prototype.componentWillUnmount = function () {\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n\n      delete this._dragDropSubscription;\n    }\n\n    this._async.dispose();\n\n    this._events.dispose();\n  };\n\n  DetailsColumnBase.prototype.componentDidUpdate = function () {\n    if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    if (this._dragDropSubscription && !this.props.isDraggable) {\n      this._dragDropSubscription.dispose();\n\n      this._events.off(this._root.current, 'mousedown');\n\n      delete this._dragDropSubscription;\n    }\n  };\n\n  DetailsColumnBase.prototype._getColumnDragDropOptions = function () {\n    var _this = this;\n\n    var columnIndex = this.props.columnIndex;\n    var options = {\n      selectionIndex: columnIndex,\n      context: {\n        data: columnIndex,\n        index: columnIndex\n      },\n      canDrag: function canDrag() {\n        return _this.props.isDraggable;\n      },\n      canDrop: function canDrop() {\n        return false;\n      },\n      onDragStart: this._onDragStart,\n      updateDropState: function updateDropState() {\n        return undefined;\n      },\n      onDrop: function onDrop() {\n        return undefined;\n      },\n      onDragEnd: this._onDragEnd\n    };\n    return options;\n  };\n\n  DetailsColumnBase.prototype._hasAccessibleLabel = function () {\n    var column = this.props.column;\n    return !!(column.ariaLabel || column.filterAriaLabel || column.sortAscendingAriaLabel || column.sortDescendingAriaLabel || column.groupAriaLabel);\n  };\n\n  DetailsColumnBase.prototype._renderAccessibleLabel = function () {\n    var _a = this.props,\n        column = _a.column,\n        parentId = _a.parentId;\n    var classNames = this._classNames;\n    return this._hasAccessibleLabel() && !this.props.onRenderColumnHeaderTooltip ? React.createElement(\"label\", {\n      key: column.key + \"_label\",\n      id: parentId + \"-\" + column.key + \"-tooltip\",\n      className: classNames.accessibleLabel\n    }, column.ariaLabel, column.isFiltered && column.filterAriaLabel || null, column.isSorted && (column.isSortedDescending ? column.sortDescendingAriaLabel : column.sortAscendingAriaLabel) || null, column.isGrouped && column.groupAriaLabel || null) : null;\n  };\n\n  DetailsColumnBase.prototype._addDragDropHandling = function () {\n    this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getColumnDragDropOptions()); // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n\n    this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);\n  };\n\n  return DetailsColumnBase;\n}(React.Component);\n\nexport { DetailsColumnBase };","map":{"version":3,"mappings":"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","names":["React","Icon","FontIcon","initializeComponentRef","EventGroup","Async","classNamesFunction","ColumnActionsMode","DEFAULT_CELL_STYLE_PROPS","MOUSEDOWN_PRIMARY_BUTTON","getClassNames","TRANSITION_DURATION_DRAG","TRANSITION_DURATION_DROP","CLASSNAME_ADD_INTERVAL","__extends","props","_super","_this","createRef","tooltipHostProps","className","hostClassName","children","ev","onColumnClick","column","columnActionsMode","disabled","item","itemIndex","selectedItems","event","classNames","_classNames","_updateHeaderDragInfo","_root","current","classList","add","borderWhileDragging","_async","setTimeout","noBorderWhileDragging","remove","setDraggedItemIndex","updateDragInfo","onColumnContextMenu","preventDefault","isDraggable","button","stopPropagation","_events","DetailsColumnBase","columnIndex","parentId","styles","theme","_b","cellStyleProps","_c","useFastIcons","headerClassName","iconClassName","isActionable","isEmpty","name","isIconVisible","isSorted","isGrouped","isFiltered","isPadded","isIconOnly","transitionDurationDrag","transitionDurationDrop","IconComponent","key","ref","role","isSortedDescending","root","draggable","style","width","calculatedWidth","cellLeftPadding","cellRightPadding","cellExtraRightPadding","iconName","gripperBarVerticalStyle","onRenderColumnHeaderTooltip","cellTooltip","id","setAriaDescribedBy","content","ariaLabel","undefined","cellTitle","_hasAccessibleLabel","onContextMenu","_onColumnContextMenu","onClick","_onColumnClick","hasDropdown","isMenuOpen","cellName","accessibleLabel","nearIcon","sortIcon","filterChevron","_onRenderColumnHeaderTooltip","_renderAccessibleLabel","dragDropHelper","_addDragDropHandling","isDropped","borderAfterDropping","noBorderAfterDropping","_dragDropSubscription","dispose","off","options","selectionIndex","context","data","index","canDrag","canDrop","onDragStart","_onDragStart","updateDropState","onDrop","onDragEnd","_onDragEnd","filterAriaLabel","sortAscendingAriaLabel","sortDescendingAriaLabel","groupAriaLabel","subscribe","_getColumnDragDropOptions","on","_onRootMouseDown","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\DetailsList\\DetailsColumn.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { initializeComponentRef, EventGroup, Async, IDisposable, classNamesFunction } from '../../Utilities';\nimport { ColumnActionsMode } from './DetailsList.types';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnRenderTooltipProps,\n} from './DetailsColumn.types';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nconst getClassNames = classNamesFunction<IDetailsColumnStyleProps, IDetailsColumnStyles>();\nconst TRANSITION_DURATION_DRAG = 200; // ms\nconst TRANSITION_DURATION_DROP = 1500; // ms\nconst CLASSNAME_ADD_INTERVAL = 20; // ms\n\n/**\n * Component for rendering columns in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport class DetailsColumnBase extends React.Component<IDetailsColumnProps> {\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragDropSubscription: IDisposable;\n  private _classNames: IProcessedStyleSet<IDetailsColumnStyles>;\n\n  constructor(props: IDetailsColumnProps) {\n    super(props);\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      column,\n      columnIndex,\n      parentId,\n      isDraggable,\n      styles,\n      theme,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      useFastIcons = true,\n    } = this.props;\n    const { onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip } = this.props;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      headerClassName: column.headerClassName,\n      iconClassName: column.iconClassName,\n      isActionable: column.columnActionsMode !== ColumnActionsMode.disabled,\n      isEmpty: !column.name,\n      isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,\n      isPadded: column.isPadded,\n      isIconOnly: column.isIconOnly,\n      cellStyleProps,\n      transitionDurationDrag: TRANSITION_DURATION_DRAG,\n      transitionDurationDrop: TRANSITION_DURATION_DROP,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    return (\n      <>\n        <div\n          key={column.key}\n          ref={this._root}\n          role={'columnheader'}\n          aria-sort={column.isSorted ? (column.isSortedDescending ? 'descending' : 'ascending') : 'none'}\n          aria-colindex={columnIndex}\n          className={classNames.root}\n          data-is-draggable={isDraggable}\n          draggable={isDraggable}\n          style={{\n            width:\n              column.calculatedWidth! +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          }}\n          data-automationid={'ColumnsHeaderColumn'}\n          data-item-key={column.key}\n        >\n          {isDraggable && (\n            <IconComponent iconName=\"GripperBarVertical\" className={classNames.gripperBarVerticalStyle} />\n          )}\n          {onRenderColumnHeaderTooltip(\n            {\n              hostClassName: classNames.cellTooltip,\n              id: `${parentId}-${column.key}-tooltip`,\n              setAriaDescribedBy: false,\n              column,\n              content: column.columnActionsMode !== ColumnActionsMode.disabled ? column.ariaLabel : '',\n              children: (\n                <span\n                  id={`${parentId}-${column.key}`}\n                  aria-label={column.isIconOnly ? column.name : undefined}\n                  aria-labelledby={column.isIconOnly ? undefined : `${parentId}-${column.key}-name`}\n                  className={classNames.cellTitle}\n                  data-is-focusable={column.columnActionsMode !== ColumnActionsMode.disabled}\n                  role={\n                    column.columnActionsMode !== ColumnActionsMode.disabled &&\n                    (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined)\n                      ? 'button'\n                      : undefined\n                  }\n                  aria-describedby={\n                    !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleLabel()\n                      ? `${parentId}-${column.key}-tooltip`\n                      : undefined\n                  }\n                  onContextMenu={this._onColumnContextMenu}\n                  onClick={this._onColumnClick}\n                  aria-haspopup={column.columnActionsMode === ColumnActionsMode.hasDropdown}\n                  aria-expanded={\n                    column.columnActionsMode === ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : undefined\n                  }\n                >\n                  <span id={`${parentId}-${column.key}-name`} className={classNames.cellName}>\n                    {(column.iconName || column.iconClassName) && (\n                      <IconComponent className={classNames.iconClassName} iconName={column.iconName} />\n                    )}\n\n                    {column.isIconOnly ? (\n                      <span className={classNames.accessibleLabel}>{column.name}</span>\n                    ) : (\n                      column.name\n                    )}\n                  </span>\n\n                  {column.isFiltered && <IconComponent className={classNames.nearIcon} iconName=\"Filter\" />}\n\n                  {column.isSorted && (\n                    <IconComponent\n                      className={classNames.sortIcon}\n                      iconName={column.isSortedDescending ? 'SortDown' : 'SortUp'}\n                    />\n                  )}\n\n                  {column.isGrouped && <IconComponent className={classNames.nearIcon} iconName=\"GroupedDescending\" />}\n\n                  {column.columnActionsMode === ColumnActionsMode.hasDropdown && !column.isIconOnly && (\n                    <IconComponent aria-hidden={true} className={classNames.filterChevron} iconName=\"ChevronDown\" />\n                  )}\n                </span>\n              ),\n            },\n            this._onRenderColumnHeaderTooltip,\n          )}\n        </div>\n        {!this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleLabel() : null}\n      </>\n    );\n  }\n\n  public componentDidMount(): void {\n    if (this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    const classNames = this._classNames;\n\n    if (this.props.isDropped) {\n      if (this._root.current) {\n        this._root.current.classList.add(classNames.borderAfterDropping);\n\n        this._async.setTimeout(() => {\n          if (this._root.current) {\n            this._root.current.classList.add(classNames.noBorderAfterDropping);\n          }\n        }, CLASSNAME_ADD_INTERVAL);\n      }\n\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.remove(classNames.borderAfterDropping);\n          this._root.current.classList.remove(classNames.noBorderAfterDropping);\n        }\n      }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public componentDidUpdate(): void {\n    if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    if (this._dragDropSubscription && !this.props.isDraggable) {\n      this._dragDropSubscription.dispose();\n      this._events.off(this._root.current, 'mousedown');\n      delete this._dragDropSubscription;\n    }\n  }\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: IDetailsColumnRenderTooltipProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnClick, column } = this.props;\n\n    if (column.columnActionsMode === ColumnActionsMode.disabled) {\n      return;\n    }\n\n    if (column.onColumnClick) {\n      column.onColumnClick(ev, column);\n    }\n\n    if (onColumnClick) {\n      onColumnClick(ev, column);\n    }\n  };\n\n  private _getColumnDragDropOptions(): IDragDropOptions {\n    const { columnIndex } = this.props;\n    const options = {\n      selectionIndex: columnIndex,\n      context: { data: columnIndex, index: columnIndex },\n      canDrag: () => this.props.isDraggable!,\n      canDrop: () => false,\n      onDragStart: this._onDragStart,\n      updateDropState: () => undefined,\n      onDrop: () => undefined,\n      onDragEnd: this._onDragEnd,\n    };\n    return options;\n  }\n\n  private _hasAccessibleLabel(): boolean {\n    const { column } = this.props;\n\n    return !!(\n      column.ariaLabel ||\n      column.filterAriaLabel ||\n      column.sortAscendingAriaLabel ||\n      column.sortDescendingAriaLabel ||\n      column.groupAriaLabel\n    );\n  }\n\n  private _renderAccessibleLabel(): JSX.Element | null {\n    const { column, parentId } = this.props;\n    const classNames = this._classNames;\n\n    return this._hasAccessibleLabel() && !this.props.onRenderColumnHeaderTooltip ? (\n      <label\n        key={`${column.key}_label`}\n        id={`${parentId}-${column.key}-tooltip`}\n        className={classNames.accessibleLabel}\n      >\n        {column.ariaLabel}\n        {(column.isFiltered && column.filterAriaLabel) || null}\n        {(column.isSorted &&\n          (column.isSortedDescending ? column.sortDescendingAriaLabel : column.sortAscendingAriaLabel)) ||\n          null}\n        {(column.isGrouped && column.groupAriaLabel) || null}\n      </label>\n    ) : null;\n  }\n\n  private _onDragStart = (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (itemIndex) {\n      this._updateHeaderDragInfo(itemIndex);\n      this._root.current!.classList.add(classNames.borderWhileDragging);\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.add(classNames.noBorderWhileDragging);\n        }\n      }, CLASSNAME_ADD_INTERVAL);\n    }\n  };\n\n  private _onDragEnd = (item?: any, event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (event) {\n      this._updateHeaderDragInfo(-1, event);\n    }\n    this._root.current!.classList.remove(classNames.borderWhileDragging);\n    this._root.current!.classList.remove(classNames.noBorderWhileDragging);\n  };\n\n  private _updateHeaderDragInfo = (itemIndex: number, event?: MouseEvent) => {\n    /* eslint-disable deprecation/deprecation */\n    if (this.props.setDraggedItemIndex) {\n      this.props.setDraggedItemIndex(itemIndex);\n    }\n    /* eslint-enable deprecation/deprecation */\n    if (this.props.updateDragInfo) {\n      this.props.updateDragInfo({ itemIndex }, event);\n    }\n  };\n\n  private _onColumnContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnContextMenu, column } = this.props;\n    if (column.onColumnContextMenu) {\n      column.onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n    if (onColumnContextMenu) {\n      onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const { isDraggable } = this.props;\n    // Ignore anything except the primary button.\n    if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON) {\n      ev.stopPropagation();\n    }\n  };\n\n  private _addDragDropHandling() {\n    this._dragDropSubscription = this.props.dragDropHelper!.subscribe(\n      this._root.current!,\n      this._events,\n      this._getColumnDragDropOptions(),\n    );\n\n    // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n    this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}