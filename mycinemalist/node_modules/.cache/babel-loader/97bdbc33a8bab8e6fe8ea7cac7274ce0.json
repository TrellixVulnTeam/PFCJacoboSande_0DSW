{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, EventGroup, KeyCodes, elementContains, findScrollableParent, getParent, getDocument, getWindow, isElementTabbable, css, initializeComponentRef, FocusRects } from '../../Utilities';\nimport { SelectionMode } from './interfaces'; // Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nvar SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nvar SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nvar SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nvar SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nvar SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';\nvar SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\nvar SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\n/**\n * {@docCategory Selection}\n */\n\nvar SelectionZone =\n/** @class */\nfunction (_super) {\n  __extends(SelectionZone, _super);\n\n  function SelectionZone(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    /**\n     * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n     * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\n     * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n     * focus event that occurs. This method does that.\n     */\n\n    _this.ignoreNextFocus = function () {\n      _this._handleNextFocus(false);\n    };\n\n    _this._onSelectionChange = function () {\n      var selection = _this.props.selection;\n      var isModal = selection.isModal && selection.isModal();\n\n      _this.setState({\n        isModal: isModal\n      });\n    };\n\n    _this._onMouseDownCapture = function (ev) {\n      var target = ev.target;\n\n      if (document.activeElement !== target && !elementContains(document.activeElement, target)) {\n        _this.ignoreNextFocus();\n\n        return;\n      }\n\n      if (!elementContains(target, _this._root.current)) {\n        return;\n      }\n\n      while (target !== _this._root.current) {\n        if (_this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          _this.ignoreNextFocus();\n\n          break;\n        }\n\n        target = getParent(target);\n      }\n    };\n    /**\n     * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n     * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n     * specially.\n     */\n\n\n    _this._onFocus = function (ev) {\n      var target = ev.target;\n      var selection = _this.props.selection;\n      var isToggleModifierPressed = _this._isCtrlPressed || _this._isMetaPressed;\n\n      var selectionMode = _this._getSelectionMode();\n\n      if (_this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\n        var isToggle = _this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n\n        var itemRoot = _this._findItemRoot(target);\n\n        if (!isToggle && itemRoot) {\n          var index = _this._getItemIndex(itemRoot);\n\n          if (isToggleModifierPressed) {\n            // set anchor only.\n            selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n\n            if (_this.props.enterModalOnTouch && _this._isTouch && selection.setModal) {\n              selection.setModal(true);\n\n              _this._setIsTouch(false);\n            }\n          } else {\n            if (_this.props.isSelectedOnFocus) {\n              _this._onItemSurfaceClick(ev, index);\n            }\n          }\n        }\n      }\n\n      _this._handleNextFocus(false);\n    };\n\n    _this._onMouseDown = function (ev) {\n      _this._updateModifiers(ev);\n\n      var target = ev.target;\n\n      var itemRoot = _this._findItemRoot(target); // No-op if selection is disabled\n\n\n      if (_this._isSelectionDisabled(target)) {\n        return;\n      }\n\n      while (target !== _this._root.current) {\n        if (_this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n          break;\n        } else if (itemRoot) {\n          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n            break;\n          } else if (_this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n            break;\n          } else if ((target === itemRoot || _this._shouldAutoSelect(target)) && !_this._isShiftPressed && !_this._isCtrlPressed && !_this._isMetaPressed) {\n            _this._onInvokeMouseDown(ev, _this._getItemIndex(itemRoot));\n\n            break;\n          } else if (_this.props.disableAutoSelectOnInputElements && (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')) {\n            return;\n          }\n        }\n\n        target = getParent(target);\n      }\n    };\n\n    _this._onTouchStartCapture = function (ev) {\n      _this._setIsTouch(true);\n    };\n\n    _this._onClick = function (ev) {\n      var _a = _this.props.enableTouchInvocationTarget,\n          enableTouchInvocationTarget = _a === void 0 ? false : _a;\n\n      _this._updateModifiers(ev);\n\n      var target = ev.target;\n\n      var itemRoot = _this._findItemRoot(target);\n\n      var isSelectionDisabled = _this._isSelectionDisabled(target);\n\n      while (target !== _this._root.current) {\n        if (_this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n          if (!isSelectionDisabled) {\n            _this._onToggleAllClick(ev);\n          }\n\n          break;\n        } else if (itemRoot) {\n          var index = _this._getItemIndex(itemRoot);\n\n          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n            if (!isSelectionDisabled) {\n              if (_this._isShiftPressed) {\n                _this._onItemSurfaceClick(ev, index);\n              } else {\n                _this._onToggleClick(ev, index);\n              }\n            }\n\n            break;\n          } else if (_this._isTouch && enableTouchInvocationTarget && _this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME) || _this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n            // Items should be invokable even if selection is disabled.\n            _this._onInvokeClick(ev, index);\n\n            break;\n          } else if (target === itemRoot) {\n            if (!isSelectionDisabled) {\n              _this._onItemSurfaceClick(ev, index);\n            }\n\n            break;\n          } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\n            return;\n          }\n        }\n\n        target = getParent(target);\n      }\n    };\n\n    _this._onContextMenu = function (ev) {\n      var target = ev.target;\n      var _a = _this.props,\n          onItemContextMenu = _a.onItemContextMenu,\n          selection = _a.selection;\n\n      if (onItemContextMenu) {\n        var itemRoot = _this._findItemRoot(target);\n\n        if (itemRoot) {\n          var index = _this._getItemIndex(itemRoot);\n\n          _this._onInvokeMouseDown(ev, index);\n\n          var skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent); // In order to keep back compat, if the value here is undefined, then we should still\n          // call preventDefault(). Only in the case where true is explicitly returned should\n          // the call be skipped.\n\n          if (!skipPreventDefault) {\n            ev.preventDefault();\n          }\n        }\n      }\n    };\n    /**\n     * In multi selection, if you double click within an item's root (but not within the invoke element or\n     * input elements), we should execute the invoke handler.\n     */\n\n\n    _this._onDoubleClick = function (ev) {\n      var target = ev.target;\n      var onItemInvoked = _this.props.onItemInvoked;\n\n      var itemRoot = _this._findItemRoot(target);\n\n      if (itemRoot && onItemInvoked && !_this._isInputElement(target)) {\n        var index = _this._getItemIndex(itemRoot);\n\n        while (target !== _this._root.current) {\n          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) || _this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n            break;\n          } else if (target === itemRoot) {\n            _this._onInvokeClick(ev, index);\n\n            break;\n          }\n\n          target = getParent(target);\n        }\n\n        target = getParent(target);\n      }\n    };\n\n    _this._onKeyDownCapture = function (ev) {\n      _this._updateModifiers(ev);\n\n      _this._handleNextFocus(true);\n    };\n\n    _this._onKeyDown = function (ev) {\n      _this._updateModifiers(ev);\n\n      var target = ev.target;\n\n      var isSelectionDisabled = _this._isSelectionDisabled(target);\n\n      var selection = _this.props.selection;\n      var isSelectAllKey = ev.which === KeyCodes.a && (_this._isCtrlPressed || _this._isMetaPressed);\n      var isClearSelectionKey = ev.which === KeyCodes.escape; // Ignore key downs from input elements.\n\n      if (_this._isInputElement(target)) {\n        // A key was pressed while an item in this zone was focused.\n        return;\n      }\n\n      var selectionMode = _this._getSelectionMode(); // If ctrl-a is pressed, select all (if all are not already selected.)\n\n\n      if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n        if (!isSelectionDisabled) {\n          selection.setAllSelected(true);\n        }\n\n        ev.stopPropagation();\n        ev.preventDefault();\n        return;\n      } // If escape is pressed, clear selection (if any are selected.)\n\n\n      if (isClearSelectionKey && selection.getSelectedCount() > 0) {\n        if (!isSelectionDisabled) {\n          selection.setAllSelected(false);\n        }\n\n        ev.stopPropagation();\n        ev.preventDefault();\n        return;\n      }\n\n      var itemRoot = _this._findItemRoot(target); // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n\n\n      if (itemRoot) {\n        var index = _this._getItemIndex(itemRoot);\n\n        while (target !== _this._root.current) {\n          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n            // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n            // so we can no-op for any keydowns in this case.\n            break;\n          } else if (_this._shouldAutoSelect(target)) {\n            if (!isSelectionDisabled) {\n              // If the event went to an element which should trigger auto-select, select it and then let\n              // the default behavior kick in.\n              _this._onInvokeMouseDown(ev, index);\n            }\n\n            break;\n          } else if ((ev.which === KeyCodes.enter || ev.which === KeyCodes.space) && (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')) {\n            return false;\n          } else if (target === itemRoot) {\n            if (ev.which === KeyCodes.enter) {\n              // Items should be invokable even if selection is disabled.\n              _this._onInvokeClick(ev, index);\n\n              ev.preventDefault();\n              return;\n            } else if (ev.which === KeyCodes.space) {\n              if (!isSelectionDisabled) {\n                _this._onToggleClick(ev, index);\n              }\n\n              ev.preventDefault();\n              return;\n            }\n\n            break;\n          }\n\n          target = getParent(target);\n        }\n      }\n    };\n\n    _this._events = new EventGroup(_this);\n    _this._async = new Async(_this);\n    initializeComponentRef(_this);\n    var selection = _this.props.selection; // Reflect the initial modal state of selection into the state.\n\n    var isModal = selection.isModal && selection.isModal();\n    _this.state = {\n      isModal: isModal\n    };\n    return _this;\n  }\n\n  SelectionZone.getDerivedStateFromProps = function (nextProps, prevState) {\n    var isModal = nextProps.selection.isModal && nextProps.selection.isModal();\n    return __assign(__assign({}, prevState), {\n      isModal: isModal\n    });\n  };\n\n  SelectionZone.prototype.componentDidMount = function () {\n    var win = getWindow(this._root.current); // Track the latest modifier keys globally.\n\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\n\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true); // Subscribe to the selection to keep modal state updated.\n\n\n    this._events.on(this.props.selection, 'change', this._onSelectionChange);\n  };\n\n  SelectionZone.prototype.render = function () {\n    var isModal = this.state.isModal;\n    return React.createElement(\"div\", {\n      className: css('ms-SelectionZone', this.props.className, {\n        'ms-SelectionZone--modal': !!isModal\n      }),\n      ref: this._root,\n      onKeyDown: this._onKeyDown,\n      onMouseDown: this._onMouseDown,\n      onKeyDownCapture: this._onKeyDownCapture,\n      onClick: this._onClick,\n      role: \"presentation\",\n      onDoubleClick: this._onDoubleClick,\n      onContextMenu: this._onContextMenu,\n      onMouseDownCapture: this._onMouseDownCapture,\n      onFocusCapture: this._onFocus,\n      \"data-selection-is-modal\": isModal ? true : undefined\n    }, this.props.children, React.createElement(FocusRects, null));\n  };\n\n  SelectionZone.prototype.componentDidUpdate = function (previousProps) {\n    var selection = this.props.selection;\n\n    if (selection !== previousProps.selection) {\n      // Whenever selection changes, update the subscripton to keep modal state updated.\n      this._events.off(previousProps.selection);\n\n      this._events.on(selection, 'change', this._onSelectionChange);\n    }\n  };\n\n  SelectionZone.prototype.componentWillUnmount = function () {\n    this._events.dispose();\n\n    this._async.dispose();\n  };\n\n  SelectionZone.prototype._isSelectionDisabled = function (target) {\n    if (this._getSelectionMode() === SelectionMode.none) {\n      return true;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n        return true;\n      }\n\n      target = getParent(target);\n    }\n\n    return false;\n  };\n\n  SelectionZone.prototype._onToggleAllClick = function (ev) {\n    var selection = this.props.selection;\n\n    var selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  };\n\n  SelectionZone.prototype._onToggleClick = function (ev, index) {\n    var selection = this.props.selection;\n\n    var selectionMode = this._getSelectionMode();\n\n    selection.setChangeEvents(false);\n\n    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {\n      selection.setModal(true);\n\n      this._setIsTouch(false);\n    }\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleIndexSelected(index);\n    } else if (selectionMode === SelectionMode.single) {\n      var isSelected = selection.isIndexSelected(index);\n      var isModal = selection.isModal && selection.isModal();\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, !isSelected, true);\n\n      if (isModal && selection.setModal) {\n        // Since the above call to setAllSelected(false) clears modal state,\n        // restore it. This occurs because the SelectionMode of the Selection\n        // may differ from the SelectionZone.\n        selection.setModal(true);\n      }\n    } else {\n      selection.setChangeEvents(true);\n      return;\n    }\n\n    selection.setChangeEvents(true);\n    ev.stopPropagation(); // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  };\n\n  SelectionZone.prototype._onInvokeClick = function (ev, index) {\n    var _a = this.props,\n        selection = _a.selection,\n        onItemInvoked = _a.onItemInvoked;\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n\n  SelectionZone.prototype._onItemSurfaceClick = function (ev, index) {\n    var selection = this.props.selection;\n    var isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    var selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed && !this._isTabPressed) {\n        selection.selectToIndex(index, !isToggleModifierPressed);\n      } else if (isToggleModifierPressed) {\n        selection.toggleIndexSelected(index);\n      } else {\n        this._clearAndSelectIndex(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index);\n    }\n  };\n\n  SelectionZone.prototype._onInvokeMouseDown = function (ev, index) {\n    var selection = this.props.selection; // Only do work if item is not selected.\n\n    if (selection.isIndexSelected(index)) {\n      return;\n    }\n\n    this._clearAndSelectIndex(index);\n  };\n  /**\n   * To avoid high startup cost of traversing the DOM on component mount,\n   * defer finding the scrollable parent until a click interaction.\n   *\n   * The styles will probably already calculated since we're running in a click handler,\n   * so this is less likely to cause layout thrashing then doing it in mount.\n   */\n\n\n  SelectionZone.prototype._findScrollParentAndTryClearOnEmptyClick = function (ev) {\n    var scrollParent = findScrollableParent(this._root.current); // unbind this handler and replace binding with a binding on the actual scrollable parent\n\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick); // If we clicked inside the scrollable parent, call through to the handler on this click.\n\n\n    if (scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target) || scrollParent === ev.target) {\n      this._tryClearOnEmptyClick(ev);\n    }\n  };\n\n  SelectionZone.prototype._tryClearOnEmptyClick = function (ev) {\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target)) {\n      this.props.selection.setAllSelected(false);\n    }\n  };\n\n  SelectionZone.prototype._clearAndSelectIndex = function (index) {\n    var selection = this.props.selection;\n    var isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n\n    if (!isAlreadySingleSelected) {\n      var isModal = selection.isModal && selection.isModal();\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, true, true);\n\n      if (isModal || this.props.enterModalOnTouch && this._isTouch) {\n        if (selection.setModal) {\n          selection.setModal(true);\n        }\n\n        if (this._isTouch) {\n          this._setIsTouch(false);\n        }\n      }\n\n      selection.setChangeEvents(true);\n    }\n  };\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n\n\n  SelectionZone.prototype._updateModifiers = function (ev) {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n    var keyCode = ev.keyCode;\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\n  };\n\n  SelectionZone.prototype._findItemRoot = function (target) {\n    var selection = this.props.selection;\n\n    while (target !== this._root.current) {\n      var indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      var index = Number(indexValue);\n\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n        break;\n      }\n\n      target = getParent(target);\n    }\n\n    if (target === this._root.current) {\n      return undefined;\n    }\n\n    return target;\n  };\n\n  SelectionZone.prototype._getItemIndex = function (itemRoot) {\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\n  };\n\n  SelectionZone.prototype._shouldAutoSelect = function (element) {\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\n  };\n\n  SelectionZone.prototype._hasAttribute = function (element, attributeName) {\n    var isToggle = false;\n\n    while (!isToggle && element !== this._root.current) {\n      isToggle = element.getAttribute(attributeName) === 'true';\n      element = getParent(element);\n    }\n\n    return isToggle;\n  };\n\n  SelectionZone.prototype._isInputElement = function (element) {\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\n  };\n\n  SelectionZone.prototype._isNonHandledClick = function (element) {\n    var doc = getDocument();\n\n    if (doc && element) {\n      while (element && element !== doc.documentElement) {\n        if (isElementTabbable(element)) {\n          return false;\n        }\n\n        element = getParent(element);\n      }\n    }\n\n    return true;\n  };\n\n  SelectionZone.prototype._handleNextFocus = function (handleFocus) {\n    var _this = this;\n\n    if (this._shouldHandleFocusTimeoutId) {\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n\n      this._shouldHandleFocusTimeoutId = undefined;\n    }\n\n    this._shouldHandleFocus = handleFocus;\n\n    if (handleFocus) {\n      this._async.setTimeout(function () {\n        _this._shouldHandleFocus = false;\n      }, 100);\n    }\n  };\n\n  SelectionZone.prototype._setIsTouch = function (isTouch) {\n    var _this = this;\n\n    if (this._isTouchTimeoutId) {\n      this._async.clearTimeout(this._isTouchTimeoutId);\n\n      this._isTouchTimeoutId = undefined;\n    }\n\n    this._isTouch = true;\n\n    if (isTouch) {\n      this._async.setTimeout(function () {\n        _this._isTouch = false;\n      }, 300);\n    }\n  };\n\n  SelectionZone.prototype._getSelectionMode = function () {\n    var selection = this.props.selection;\n    var _a = this.props.selectionMode,\n        selectionMode = _a === void 0 ? selection ? selection.mode : SelectionMode.none : _a;\n    return selectionMode;\n  };\n\n  SelectionZone.defaultProps = {\n    isSelectedOnFocus: true,\n    selectionMode: SelectionMode.multiple\n  };\n  return SelectionZone;\n}(React.Component);\n\nexport { SelectionZone };","map":{"version":3,"mappings":"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","names":["React","Async","EventGroup","KeyCodes","elementContains","findScrollableParent","getParent","getDocument","getWindow","isElementTabbable","css","initializeComponentRef","FocusRects","SelectionMode","SELECTION_DISABLED_ATTRIBUTE_NAME","SELECTION_INDEX_ATTRIBUTE_NAME","SELECTION_TOGGLE_ATTRIBUTE_NAME","SELECTION_INVOKE_ATTRIBUTE_NAME","SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME","SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME","SELECTION_SELECT_ATTRIBUTE_NAME","__extends","props","_super","_this","createRef","_handleNextFocus","isModal","selection","setState","ev","target","document","activeElement","ignoreNextFocus","_root","current","_hasAttribute","isToggleModifierPressed","_isCtrlPressed","_isMetaPressed","selectionMode","_getSelectionMode","_shouldHandleFocus","none","isToggle","itemRoot","_findItemRoot","index","_getItemIndex","setIndexSelected","isIndexSelected","enterModalOnTouch","_isTouch","setModal","_setIsTouch","isSelectedOnFocus","_onItemSurfaceClick","_updateModifiers","_isSelectionDisabled","_shouldAutoSelect","_isShiftPressed","_onInvokeMouseDown","disableAutoSelectOnInputElements","tagName","isSelectionDisabled","_onToggleAllClick","_onToggleClick","enableTouchInvocationTarget","_onInvokeClick","onItemContextMenu","skipPreventDefault","getItems","nativeEvent","preventDefault","onItemInvoked","_isInputElement","isSelectAllKey","which","a","isClearSelectionKey","escape","multiple","isAllSelected","setAllSelected","stopPropagation","getSelectedCount","enter","space","_events","_async","state","SelectionZone","nextProps","prevState","win","on","_findScrollParentAndTryClearOnEmptyClick","body","_onTouchStartCapture","_onSelectionChange","className","ref","onKeyDown","_onKeyDown","onMouseDown","_onMouseDown","onKeyDownCapture","_onKeyDownCapture","onClick","_onClick","role","onDoubleClick","_onDoubleClick","onContextMenu","_onContextMenu","onMouseDownCapture","_onMouseDownCapture","onFocusCapture","_onFocus","undefined","children","previousProps","off","dispose","toggleAllSelected","setChangeEvents","toggleIndexSelected","single","isSelected","_isTabPressed","selectToIndex","_clearAndSelectIndex","scrollParent","_tryClearOnEmptyClick","Node","contains","selectionPreservedOnEmptyClick","_isNonHandledClick","isAlreadySingleSelected","shiftKey","ctrlKey","metaKey","keyCode","tab","indexValue","getAttribute","Number","length","element","attributeName","doc","documentElement","handleFocus","_shouldHandleFocusTimeoutId","clearTimeout","setTimeout","isTouch","_isTouchTimeoutId","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\utilities\\src\\utilities\\selection\\SelectionZone.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  KeyCodes,\n  elementContains,\n  findScrollableParent,\n  getParent,\n  getDocument,\n  getWindow,\n  isElementTabbable,\n  css,\n  initializeComponentRef,\n  FocusRects,\n} from '../../Utilities';\nimport { ISelection, SelectionMode, IObjectWithKey } from './interfaces';\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nconst SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nconst SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\nconst SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZone {\n  /**\n   * Method to ignore subsequent focus.\n   */\n  ignoreNextFocus: () => void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneProps extends React.ClassAttributes<SelectionZone> {\n  /**\n   * Reference to the component interface.\n   */\n  componentRef?: () => void;\n  /**\n   * Required {@link ISelection} instance bound to the {@link SelectionZone}.\n   */\n  selection: ISelection;\n  /**\n   * @deprecated No longer in use, focus is now managed by {@link FocusZone}.\n   */\n  layout?: {};\n  /**\n   * The mode of Selection, where the value is one of\n   * 'none', 'single', or 'multiple'.\n   *\n   * @defaultvalue {@link SelectionMode.multiple}\n   */\n  selectionMode?: SelectionMode;\n  /**\n   * If true, selection is preserved on outer click.\n   */\n  selectionPreservedOnEmptyClick?: boolean;\n  /**\n   * If true, disables automatic selection on input elements.\n   */\n  disableAutoSelectOnInputElements?: boolean;\n  /**\n   * If true, modal selection is enabled on touch event.\n   */\n  enterModalOnTouch?: boolean;\n  /**\n   * Determines whether elements with the attribute `data-selection-touch-invoke` should be used as invocation targets\n   * for an item if the user is using touch.\n   *\n   * @defaultvalue false\n   */\n  enableTouchInvocationTarget?: boolean;\n  /**\n   * Determines if an item is selected on focus.\n   *\n   * @defaultvalue true\n   */\n  isSelectedOnFocus?: boolean;\n  /**\n   * Optional callback for when an item is\n   * invoked via ENTER or double-click.\n   */\n  onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\n  /**\n   * Optional callback for when an\n   * item's contextual menu action occurs.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n  /**\n   * Additional CSS class(es) to apply to the SelectionZone.\n   */\n  className?: string;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneState {\n  isModal: boolean | undefined;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport class SelectionZone extends React.Component<ISelectionZoneProps, ISelectionZoneState> {\n  public static defaultProps = {\n    isSelectedOnFocus: true,\n    selectionMode: SelectionMode.multiple,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _isCtrlPressed: boolean;\n  private _isShiftPressed: boolean;\n  private _isMetaPressed: boolean;\n  private _isTabPressed: boolean;\n  private _shouldHandleFocus: boolean;\n  private _shouldHandleFocusTimeoutId: number | undefined;\n  private _isTouch: boolean;\n  private _isTouchTimeoutId: number | undefined;\n\n  public static getDerivedStateFromProps(\n    nextProps: ISelectionZoneProps,\n    prevState: ISelectionZoneState,\n  ): ISelectionZoneState {\n    const isModal = nextProps.selection.isModal && nextProps.selection.isModal();\n\n    return {\n      ...prevState,\n      isModal,\n    };\n  }\n\n  constructor(props: ISelectionZoneProps) {\n    super(props);\n\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    const { selection } = this.props;\n\n    // Reflect the initial modal state of selection into the state.\n    const isModal = selection.isModal && selection.isModal();\n\n    this.state = {\n      isModal,\n    };\n  }\n\n  public componentDidMount(): void {\n    const win = getWindow(this._root.current);\n\n    // Track the latest modifier keys globally.\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\n\n    // Subscribe to the selection to keep modal state updated.\n    this._events.on(this.props.selection, 'change', this._onSelectionChange);\n  }\n\n  public render(): JSX.Element {\n    const { isModal } = this.state;\n\n    return (\n      <div\n        className={css('ms-SelectionZone', this.props.className, {\n          'ms-SelectionZone--modal': !!isModal,\n        })}\n        ref={this._root}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        onKeyDownCapture={this._onKeyDownCapture}\n        onClick={this._onClick}\n        role=\"presentation\"\n        onDoubleClick={this._onDoubleClick}\n        onContextMenu={this._onContextMenu}\n        onMouseDownCapture={this._onMouseDownCapture}\n        onFocusCapture={this._onFocus}\n        data-selection-is-modal={isModal ? true : undefined}\n      >\n        {this.props.children}\n        <FocusRects />\n      </div>\n    );\n  }\n\n  public componentDidUpdate(previousProps: ISelectionZoneProps): void {\n    const { selection } = this.props;\n\n    if (selection !== previousProps.selection) {\n      // Whenever selection changes, update the subscripton to keep modal state updated.\n      this._events.off(previousProps.selection);\n      this._events.on(selection, 'change', this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  /**\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n   * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n   * focus event that occurs. This method does that.\n   */\n  public ignoreNextFocus = (): void => {\n    this._handleNextFocus(false);\n  };\n\n  private _onSelectionChange = (): void => {\n    const { selection } = this.props;\n\n    const isModal = selection.isModal && selection.isModal();\n\n    this.setState({\n      isModal,\n    });\n  };\n\n  private _onMouseDownCapture = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    if (document.activeElement !== target && !elementContains(document.activeElement as HTMLElement, target)) {\n      this.ignoreNextFocus();\n      return;\n    }\n\n    if (!elementContains(target, this._root.current)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n        this.ignoreNextFocus();\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  /**\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n   * specially.\n   */\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\n      const isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n      const itemRoot = this._findItemRoot(target);\n\n      if (!isToggle && itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (isToggleModifierPressed) {\n          // set anchor only.\n          selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n          if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\n            selection.setModal(true);\n            this._setIsTouch(false);\n          }\n        } else {\n          if (this.props.isSelectedOnFocus) {\n            this._onItemSurfaceClick(ev, index);\n          }\n        }\n      }\n    }\n\n    this._handleNextFocus(false);\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    // No-op if selection is disabled\n    if (this._isSelectionDisabled(target)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        break;\n      } else if (itemRoot) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (\n          (target === itemRoot || this._shouldAutoSelect(target)) &&\n          !this._isShiftPressed &&\n          !this._isCtrlPressed &&\n          !this._isMetaPressed\n        ) {\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot));\n          break;\n        } else if (\n          this.props.disableAutoSelectOnInputElements &&\n          (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')\n        ) {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onTouchStartCapture = (ev: React.TouchEvent<HTMLElement>): void => {\n    this._setIsTouch(true);\n  };\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { enableTouchInvocationTarget = false } = this.props;\n\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        if (!isSelectionDisabled) {\n          this._onToggleAllClick(ev);\n        }\n        break;\n      } else if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          if (!isSelectionDisabled) {\n            if (this._isShiftPressed) {\n              this._onItemSurfaceClick(ev, index);\n            } else {\n              this._onToggleClick(ev, index);\n            }\n          }\n          break;\n        } else if (\n          (this._isTouch &&\n            enableTouchInvocationTarget &&\n            this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME)) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          // Items should be invokable even if selection is disabled.\n          this._onInvokeClick(ev, index);\n          break;\n        } else if (target === itemRoot) {\n          if (!isSelectionDisabled) {\n            this._onItemSurfaceClick(ev, index);\n          }\n          break;\n        } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n\n    const { onItemContextMenu, selection } = this.props;\n    if (onItemContextMenu) {\n      const itemRoot = this._findItemRoot(target);\n\n      if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        this._onInvokeMouseDown(ev, index);\n\n        const skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\n\n        // In order to keep back compat, if the value here is undefined, then we should still\n        // call preventDefault(). Only in the case where true is explicitly returned should\n        // the call be skipped.\n        if (!skipPreventDefault) {\n          ev.preventDefault();\n        }\n      }\n    }\n  };\n\n  private _isSelectionDisabled(target: HTMLElement): boolean {\n    if (this._getSelectionMode() === SelectionMode.none) {\n      return true;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n        return true;\n      }\n      target = getParent(target) as HTMLElement;\n    }\n\n    return false;\n  }\n\n  /**\n   * In multi selection, if you double click within an item's root (but not within the invoke element or\n   * input elements), we should execute the invoke handler.\n   */\n  private _onDoubleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    const { onItemInvoked } = this.props;\n    const itemRoot = this._findItemRoot(target);\n\n    if (itemRoot && onItemInvoked && !this._isInputElement(target)) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (\n          this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          break;\n        } else if (target === itemRoot) {\n          this._onInvokeClick(ev, index);\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onKeyDownCapture = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    this._handleNextFocus(true);\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    const { selection } = this.props;\n    const isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\n    const isClearSelectionKey = ev.which === KeyCodes.escape;\n\n    // Ignore key downs from input elements.\n    if (this._isInputElement(target)) {\n      // A key was pressed while an item in this zone was focused.\n      return;\n    }\n\n    const selectionMode = this._getSelectionMode();\n\n    // If ctrl-a is pressed, select all (if all are not already selected.)\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(true);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    // If escape is pressed, clear selection (if any are selected.)\n    if (isClearSelectionKey && selection.getSelectedCount() > 0) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(false);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    const itemRoot = this._findItemRoot(target);\n\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n    if (itemRoot) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n          // so we can no-op for any keydowns in this case.\n          break;\n        } else if (this._shouldAutoSelect(target)) {\n          if (!isSelectionDisabled) {\n            // If the event went to an element which should trigger auto-select, select it and then let\n            // the default behavior kick in.\n            this._onInvokeMouseDown(ev, index);\n          }\n          break;\n        } else if (\n          (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&\n          (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')\n        ) {\n          return false;\n        } else if (target === itemRoot) {\n          if (ev.which === KeyCodes.enter) {\n            // Items should be invokable even if selection is disabled.\n            this._onInvokeClick(ev, index);\n            ev.preventDefault();\n            return;\n          } else if (ev.which === KeyCodes.space) {\n            if (!isSelectionDisabled) {\n              this._onToggleClick(ev, index);\n            }\n            ev.preventDefault();\n            return;\n          }\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n    }\n  };\n\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }\n\n  private _onToggleClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    selection.setChangeEvents(false);\n\n    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {\n      selection.setModal(true);\n      this._setIsTouch(false);\n    }\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleIndexSelected(index);\n    } else if (selectionMode === SelectionMode.single) {\n      const isSelected = selection.isIndexSelected(index);\n      const isModal = selection.isModal && selection.isModal();\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, !isSelected, true);\n      if (isModal && selection.setModal) {\n        // Since the above call to setAllSelected(false) clears modal state,\n        // restore it. This occurs because the SelectionMode of the Selection\n        // may differ from the SelectionZone.\n        selection.setModal(true);\n      }\n    } else {\n      selection.setChangeEvents(true);\n      return;\n    }\n\n    selection.setChangeEvents(true);\n\n    ev.stopPropagation();\n\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  }\n\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection, onItemInvoked } = this.props;\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onItemSurfaceClick(ev: React.SyntheticEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed && !this._isTabPressed) {\n        selection.selectToIndex(index, !isToggleModifierPressed);\n      } else if (isToggleModifierPressed) {\n        selection.toggleIndexSelected(index);\n      } else {\n        this._clearAndSelectIndex(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index);\n    }\n  }\n\n  private _onInvokeMouseDown(\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    index: number,\n  ): void {\n    const { selection } = this.props;\n\n    // Only do work if item is not selected.\n    if (selection.isIndexSelected(index)) {\n      return;\n    }\n\n    this._clearAndSelectIndex(index);\n  }\n\n  /**\n   * To avoid high startup cost of traversing the DOM on component mount,\n   * defer finding the scrollable parent until a click interaction.\n   *\n   * The styles will probably already calculated since we're running in a click handler,\n   * so this is less likely to cause layout thrashing then doing it in mount.\n   */\n  private _findScrollParentAndTryClearOnEmptyClick(ev: MouseEvent) {\n    const scrollParent = findScrollableParent(this._root.current) as HTMLElement;\n    // unbind this handler and replace binding with a binding on the actual scrollable parent\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\n\n    // If we clicked inside the scrollable parent, call through to the handler on this click.\n    if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {\n      this._tryClearOnEmptyClick(ev);\n    }\n  }\n\n  private _tryClearOnEmptyClick(ev: MouseEvent): void {\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target as HTMLElement)) {\n      this.props.selection.setAllSelected(false);\n    }\n  }\n\n  private _clearAndSelectIndex(index: number): void {\n    const { selection } = this.props;\n    const isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n\n    if (!isAlreadySingleSelected) {\n      const isModal = selection.isModal && selection.isModal();\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, true, true);\n      if (isModal || (this.props.enterModalOnTouch && this._isTouch)) {\n        if (selection.setModal) {\n          selection.setModal(true);\n        }\n        if (this._isTouch) {\n          this._setIsTouch(false);\n        }\n      }\n      selection.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n\n    const keyCode = (ev as React.KeyboardEvent<HTMLElement>).keyCode;\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\n  }\n\n  private _findItemRoot(target: HTMLElement): HTMLElement | undefined {\n    const { selection } = this.props;\n\n    while (target !== this._root.current) {\n      const indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      const index = Number(indexValue);\n\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n\n    if (target === this._root.current) {\n      return undefined;\n    }\n\n    return target;\n  }\n\n  private _getItemIndex(itemRoot: HTMLElement): number {\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\n  }\n\n  private _shouldAutoSelect(element: HTMLElement): boolean {\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\n  }\n\n  private _hasAttribute(element: HTMLElement, attributeName: string): boolean {\n    let isToggle = false;\n\n    while (!isToggle && element !== this._root.current) {\n      isToggle = element.getAttribute(attributeName) === 'true';\n      element = getParent(element) as HTMLElement;\n    }\n\n    return isToggle;\n  }\n\n  private _isInputElement(element: HTMLElement): boolean {\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\n  }\n\n  private _isNonHandledClick(element: HTMLElement): boolean {\n    const doc = getDocument();\n\n    if (doc && element) {\n      while (element && element !== doc.documentElement) {\n        if (isElementTabbable(element)) {\n          return false;\n        }\n\n        element = getParent(element) as HTMLElement;\n      }\n    }\n\n    return true;\n  }\n\n  private _handleNextFocus(handleFocus: boolean): void {\n    if (this._shouldHandleFocusTimeoutId) {\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n      this._shouldHandleFocusTimeoutId = undefined;\n    }\n\n    this._shouldHandleFocus = handleFocus;\n\n    if (handleFocus) {\n      this._async.setTimeout(() => {\n        this._shouldHandleFocus = false;\n      }, 100);\n    }\n  }\n\n  private _setIsTouch(isTouch: boolean): void {\n    if (this._isTouchTimeoutId) {\n      this._async.clearTimeout(this._isTouchTimeoutId);\n      this._isTouchTimeoutId = undefined;\n    }\n\n    this._isTouch = true;\n\n    if (isTouch) {\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 300);\n    }\n  }\n\n  private _getSelectionMode(): SelectionMode {\n    const { selection } = this.props;\n\n    const { selectionMode = selection ? selection.mode : SelectionMode.none } = this.props;\n\n    return selectionMode;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}