{"ast":null,"code":"import { Stylesheet } from '@uifabric/merge-styles';\nimport { memoizeFunction } from '@uifabric/utilities';\n/**\n * Internal memoized function which simply takes in the class map and the\n * disable boolean. These immutable values can be memoized.\n */\n\nvar _getGlobalClassNames = memoizeFunction(function (classNames, disableGlobalClassNames) {\n  var styleSheet = Stylesheet.getInstance();\n\n  if (disableGlobalClassNames) {\n    // disable global classnames\n    return Object.keys(classNames).reduce(function (acc, className) {\n      acc[className] = styleSheet.getClassName(classNames[className]);\n      return acc;\n    }, {});\n  } // use global classnames\n\n\n  return classNames;\n});\n/**\n * Checks for the `disableGlobalClassNames` property on the `theme` to determine if it should return `classNames`\n * Note that calls to this function are memoized.\n *\n * @param classNames - The collection of global class names that apply when the flag is false. Make sure to pass in\n * the same instance on each call to benefit from memoization.\n * @param theme - The theme to check the flag on\n * @param disableGlobalClassNames - Optional. Explicitly opt in/out of disabling global classnames. Defaults to false.\n */\n\n\nexport function getGlobalClassNames(classNames, theme, disableGlobalClassNames) {\n  return _getGlobalClassNames(classNames, disableGlobalClassNames !== undefined ? disableGlobalClassNames : theme.disableGlobalClassNames);\n}","map":{"version":3,"mappings":"AACA,SAASA,UAAT,QAA2B,wBAA3B;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAIA;;;;;AAIA,IAAMC,oBAAoB,GAAGD,eAAe,CAC1C,UAAIE,UAAJ,EAAqCC,uBAArC,EAAsE;EACpE,IAAMC,UAAU,GAAGL,UAAU,CAACM,WAAX,EAAnB;;EAEA,IAAIF,uBAAJ,EAA6B;IAC3B;IACA,OAAQG,MAAM,CAACC,IAAP,CAAYL,UAAZ,EAAwCM,MAAxC,CAA+C,UAACC,GAAD,EAAMC,SAAN,EAAe;MACpED,GAAG,CAACC,SAAD,CAAH,GAAiBN,UAAU,CAACO,YAAX,CAAwBT,UAAU,CAACQ,SAAD,CAAlC,CAAjB;MACA,OAAOD,GAAP;IACD,CAHO,EAGL,EAHK,CAAR;EAID,CATmE,CAWpE;;;EACA,OAAOP,UAAP;AACD,CAdyC,CAA5C;AAiBA;;;;;;;;;;;AASA,OAAM,SAAUU,mBAAV,CACJV,UADI,EAEJW,KAFI,EAGJV,uBAHI,EAG6B;EAEjC,OAAOF,oBAAoB,CACzBC,UADyB,EAEzBC,uBAAuB,KAAKW,SAA5B,GAAwCX,uBAAxC,GAAkEU,KAAK,CAACV,uBAF/C,CAA3B;AAID","names":["Stylesheet","memoizeFunction","_getGlobalClassNames","classNames","disableGlobalClassNames","styleSheet","getInstance","Object","keys","reduce","acc","className","getClassName","getGlobalClassNames","theme","undefined"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\node_modules\\@uifabric\\styling\\lib\\src\\styles\\getGlobalClassNames.ts"],"sourcesContent":["import { ITheme } from '../interfaces/index';\nimport { Stylesheet } from '@uifabric/merge-styles';\nimport { memoizeFunction } from '@uifabric/utilities';\n\nexport type GlobalClassNames<IStyles> = Record<keyof IStyles, string>;\n\n/**\n * Internal memoized function which simply takes in the class map and the\n * disable boolean. These immutable values can be memoized.\n */\nconst _getGlobalClassNames = memoizeFunction(\n  <T>(classNames: GlobalClassNames<T>, disableGlobalClassNames?: boolean): GlobalClassNames<T> => {\n    const styleSheet = Stylesheet.getInstance();\n\n    if (disableGlobalClassNames) {\n      // disable global classnames\n      return (Object.keys(classNames) as (keyof T)[]).reduce((acc, className) => {\n        acc[className] = styleSheet.getClassName(classNames[className]);\n        return acc;\n      }, {} as GlobalClassNames<T>);\n    }\n\n    // use global classnames\n    return classNames;\n  },\n);\n\n/**\n * Checks for the `disableGlobalClassNames` property on the `theme` to determine if it should return `classNames`\n * Note that calls to this function are memoized.\n *\n * @param classNames - The collection of global class names that apply when the flag is false. Make sure to pass in\n * the same instance on each call to benefit from memoization.\n * @param theme - The theme to check the flag on\n * @param disableGlobalClassNames - Optional. Explicitly opt in/out of disabling global classnames. Defaults to false.\n */\nexport function getGlobalClassNames<T>(\n  classNames: GlobalClassNames<T>,\n  theme: ITheme,\n  disableGlobalClassNames?: boolean,\n): GlobalClassNames<T> {\n  return _getGlobalClassNames(\n    classNames,\n    disableGlobalClassNames !== undefined ? disableGlobalClassNames : theme.disableGlobalClassNames,\n  );\n}\n"]},"metadata":{},"sourceType":"module"}