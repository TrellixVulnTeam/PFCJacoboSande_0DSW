{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Builds a map of ID to IKeytipProps\n *\n * @param config - IKeytipConfig object\n * @returns Config map\n */\n\nexport function buildKeytipConfigMap(config) {\n  var configMap = {};\n\n  for (var _i = 0, _a = config.keytips; _i < _a.length; _i++) {\n    var keytip = _a[_i];\n    constructKeytip(configMap, [], keytip);\n  }\n\n  return configMap;\n}\n/**\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\n *\n * @param configMap - IKeytipConfigMap to store the keytip in\n * @param parentSequence - string of the parent keytip\n * @param keytip - IKeytipConfigItem data\n */\n\nexport function constructKeytip(configMap, parentSequence, keytip) {\n  // Compute full key sequence\n  var sequence = keytip.sequence ? keytip.sequence : keytip.content.toLocaleLowerCase();\n  var keytipSequence = parentSequence.concat(sequence); // Save props in configMap\n\n  var keytipProps = __assign(__assign({}, keytip.optionalProps), {\n    keySequences: keytipSequence,\n    content: keytip.content\n  });\n\n  configMap[keytip.id] = keytipProps;\n\n  if (keytip.children) {\n    for (var _i = 0, _a = keytip.children; _i < _a.length; _i++) {\n      var child = _a[_i]; // Create keytips for all children\n\n      constructKeytip(configMap, keytipSequence, child);\n    }\n  }\n}","map":{"version":3,"mappings":";AAsCA;;;;;;;AAMA,OAAM,SAAUA,oBAAV,CAA+BC,MAA/B,EAAoD;AACxD,MAAMC,SAAS,GAAqB,EAApC;;AAEA,OAAqB,uBAAM,CAACC,OAA5B,EAAqBC,cAArB,EAAqBA,IAArB,EAAqC;AAAhC,QAAMC,MAAM,SAAZ;AACHC,mBAAe,CAACJ,SAAD,EAAY,EAAZ,EAAgBG,MAAhB,CAAf;AACD;;AAED,SAAOH,SAAP;AACD;AAED;;;;;;;;AAOA,OAAM,SAAUI,eAAV,CACJJ,SADI,EAEJK,cAFI,EAGJF,MAHI,EAGqB;AAEzB;AACA,MAAMG,QAAQ,GAAGH,MAAM,CAACG,QAAP,GAAkBH,MAAM,CAACG,QAAzB,GAAoCH,MAAM,CAACI,OAAP,CAAeC,iBAAf,EAArD;AACA,MAAMC,cAAc,GAAGJ,cAAc,CAACK,MAAf,CAAsBJ,QAAtB,CAAvB,CAJyB,CAMzB;;AACA,MAAMK,WAAW,yBAAsBR,MAAM,CAACS,aAA7B,GAA0C;AAAEC,gBAAY,EAAEJ,cAAhB;AAAgCF,WAAO,EAAEJ,MAAM,CAACI;AAAhD,GAA1C,CAAjB;;AACAP,WAAS,CAACG,MAAM,CAACW,EAAR,CAAT,GAAuBH,WAAvB;;AAEA,MAAIR,MAAM,CAACY,QAAX,EAAqB;AACnB,SAAoB,uBAAM,CAACA,QAA3B,EAAoBb,cAApB,EAAoBA,IAApB,EAAqC;AAAhC,UAAMc,KAAK,SAAX,CAAgC,CACnC;;AACAZ,qBAAe,CAACJ,SAAD,EAAYS,cAAZ,EAA4BO,KAA5B,CAAf;AACD;AACF;AACF","names":["buildKeytipConfigMap","config","configMap","keytips","_i","keytip","constructKeytip","parentSequence","sequence","content","toLocaleLowerCase","keytipSequence","concat","keytipProps","optionalProps","keySequences","id","children","child"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\utilities\\src\\utilities\\keytips\\KeytipConfig.ts"],"sourcesContent":["import { IKeytipProps } from '../../Keytip';\n\nexport interface IKeytipConfig {\n  keytips: IKeytipConfigItem[];\n}\n\nexport interface IKeytipConfigItem {\n  /**\n   * Key Sequence for this keytip only\n   * If sequence is not defined it will be derived from the content string\n   */\n  sequence?: string;\n\n  /**\n   * Content for the keytip\n   */\n  content: string;\n\n  /**\n   * Identifier for the keytip, to be used to access in the configMap\n   */\n  id: string;\n\n  /**\n   * Optional props in IKeytipProps\n   */\n  optionalProps?: Partial<IKeytipProps>;\n\n  /**\n   * Children keytips of this keytip\n   */\n  children?: IKeytipConfigItem[];\n}\n\nexport interface IKeytipConfigMap {\n  [id: string]: IKeytipProps;\n}\n\n/**\n * Builds a map of ID to IKeytipProps\n *\n * @param config - IKeytipConfig object\n * @returns Config map\n */\nexport function buildKeytipConfigMap(config: IKeytipConfig): IKeytipConfigMap {\n  const configMap: IKeytipConfigMap = {};\n\n  for (const keytip of config.keytips) {\n    constructKeytip(configMap, [], keytip);\n  }\n\n  return configMap;\n}\n\n/**\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\n *\n * @param configMap - IKeytipConfigMap to store the keytip in\n * @param parentSequence - string of the parent keytip\n * @param keytip - IKeytipConfigItem data\n */\nexport function constructKeytip(\n  configMap: IKeytipConfigMap,\n  parentSequence: string[],\n  keytip: IKeytipConfigItem,\n): void {\n  // Compute full key sequence\n  const sequence = keytip.sequence ? keytip.sequence : keytip.content.toLocaleLowerCase();\n  const keytipSequence = parentSequence.concat(sequence);\n\n  // Save props in configMap\n  const keytipProps: IKeytipProps = { ...keytip.optionalProps, keySequences: keytipSequence, content: keytip.content };\n  configMap[keytip.id] = keytipProps;\n\n  if (keytip.children) {\n    for (const child of keytip.children) {\n      // Create keytips for all children\n      constructKeytip(configMap, keytipSequence, child);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}