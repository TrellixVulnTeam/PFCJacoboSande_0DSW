{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Layer } from '../../Layer';\nimport { Overlay } from '../../Overlay';\nimport { Popup } from '../../Popup';\nimport { allowScrollOnElement, allowOverscrollOnElement, classNamesFunction, divProperties, elementContains, getId, getNativeProps, getRTL, css, warnDeprecations, Async, EventGroup, initializeComponentRef } from '../../Utilities';\nimport { FocusTrapZone } from '../FocusTrapZone/index';\nimport { PanelType } from './Panel.types';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Panel';\nvar PanelVisibilityState;\n\n(function (PanelVisibilityState) {\n  PanelVisibilityState[PanelVisibilityState[\"closed\"] = 0] = \"closed\";\n  PanelVisibilityState[PanelVisibilityState[\"animatingOpen\"] = 1] = \"animatingOpen\";\n  PanelVisibilityState[PanelVisibilityState[\"open\"] = 2] = \"open\";\n  PanelVisibilityState[PanelVisibilityState[\"animatingClosed\"] = 3] = \"animatingClosed\";\n})(PanelVisibilityState || (PanelVisibilityState = {}));\n\nvar PanelBase =\n/** @class */\nfunction (_super) {\n  __extends(PanelBase, _super);\n\n  function PanelBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._panel = React.createRef();\n    _this._animationCallback = null;\n    _this._hasCustomNavigation = !!(_this.props.onRenderNavigation || _this.props.onRenderNavigationContent);\n\n    _this.dismiss = function (ev) {\n      if (_this.props.onDismiss) {\n        _this.props.onDismiss(ev);\n      }\n\n      if (!ev || ev && !ev.defaultPrevented) {\n        _this.close();\n      }\n    }; // Allow the user to scroll within the panel but not on the body\n\n\n    _this._allowScrollOnPanel = function (elt) {\n      if (elt) {\n        if (_this._allowTouchBodyScroll) {\n          allowOverscrollOnElement(elt, _this._events);\n        } else {\n          allowScrollOnElement(elt, _this._events);\n        }\n      } else {\n        _this._events.off(_this._scrollableContent);\n      }\n\n      _this._scrollableContent = elt;\n    };\n\n    _this._onRenderNavigation = function (props) {\n      if (!_this.props.onRenderNavigationContent && !_this.props.onRenderNavigation && !_this.props.hasCloseButton) {\n        return null;\n      }\n\n      var _a = _this.props.onRenderNavigationContent,\n          onRenderNavigationContent = _a === void 0 ? _this._onRenderNavigationContent : _a;\n      return React.createElement(\"div\", {\n        className: _this._classNames.navigation\n      }, onRenderNavigationContent(props, _this._onRenderNavigationContent));\n    };\n\n    _this._onRenderNavigationContent = function (props) {\n      var _a;\n\n      var closeButtonAriaLabel = props.closeButtonAriaLabel,\n          hasCloseButton = props.hasCloseButton,\n          _b = props.onRenderHeader,\n          onRenderHeader = _b === void 0 ? _this._onRenderHeader : _b;\n\n      if (hasCloseButton) {\n        var iconButtonStyles = (_a = _this._classNames.subComponentStyles) === null || _a === void 0 ? void 0 : _a.closeButton();\n        return React.createElement(React.Fragment, null, !_this._hasCustomNavigation && onRenderHeader(_this.props, _this._onRenderHeader, _this._headerTextId), React.createElement(IconButton, {\n          styles: iconButtonStyles,\n          // eslint-disable-next-line deprecation/deprecation\n          className: _this._classNames.closeButton,\n          onClick: _this._onPanelClick,\n          ariaLabel: closeButtonAriaLabel,\n          title: closeButtonAriaLabel,\n          \"data-is-visible\": true,\n          iconProps: {\n            iconName: 'Cancel'\n          }\n        }));\n      }\n\n      return null;\n    };\n\n    _this._onRenderHeader = function (props, defaultRender, headerTextId) {\n      var headerText = props.headerText,\n          _a = props.headerTextProps,\n          headerTextProps = _a === void 0 ? {} : _a;\n\n      if (headerText) {\n        return React.createElement(\"div\", {\n          className: _this._classNames.header\n        }, React.createElement(\"div\", __assign({\n          id: headerTextId,\n          role: \"heading\",\n          \"aria-level\": 1\n        }, headerTextProps, {\n          className: css(_this._classNames.headerText, headerTextProps.className)\n        }), headerText));\n      }\n\n      return null;\n    };\n\n    _this._onRenderBody = function (props) {\n      return React.createElement(\"div\", {\n        className: _this._classNames.content\n      }, props.children);\n    };\n\n    _this._onRenderFooter = function (props) {\n      var _a = _this.props.onRenderFooterContent,\n          onRenderFooterContent = _a === void 0 ? null : _a;\n\n      if (onRenderFooterContent) {\n        return React.createElement(\"div\", {\n          className: _this._classNames.footer\n        }, React.createElement(\"div\", {\n          className: _this._classNames.footerInner\n        }, onRenderFooterContent()));\n      }\n\n      return null;\n    };\n\n    _this._animateTo = function (newVisibilityState) {\n      if (newVisibilityState === PanelVisibilityState.open && _this.props.onOpen) {\n        _this.props.onOpen();\n      }\n\n      _this._animationCallback = _this._async.setTimeout(function () {\n        _this.setState({\n          visibility: newVisibilityState\n        });\n\n        _this._onTransitionComplete();\n      }, 200);\n    };\n\n    _this._clearExistingAnimationTimer = function () {\n      if (_this._animationCallback !== null) {\n        _this._async.clearTimeout(_this._animationCallback);\n      }\n    };\n\n    _this._onPanelClick = function (ev) {\n      _this.dismiss(ev);\n    };\n\n    _this._onTransitionComplete = function () {\n      _this._updateFooterPosition();\n\n      if (_this.state.visibility === PanelVisibilityState.open && _this.props.onOpened) {\n        _this.props.onOpened();\n      }\n\n      if (_this.state.visibility === PanelVisibilityState.closed && _this.props.onDismissed) {\n        _this.props.onDismissed();\n      }\n    };\n\n    var _a = _this.props.allowTouchBodyScroll,\n        allowTouchBodyScroll = _a === void 0 ? false : _a;\n    _this._allowTouchBodyScroll = allowTouchBodyScroll;\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      ignoreExternalFocusing: 'focusTrapZoneProps',\n      forceFocusInsideTrap: 'focusTrapZoneProps',\n      firstFocusableSelector: 'focusTrapZoneProps'\n    });\n    _this.state = {\n      isFooterSticky: false,\n      // intentionally ignore props so animation takes place during componentDidMount\n      visibility: PanelVisibilityState.closed,\n      id: getId('Panel')\n    };\n    return _this;\n  }\n\n  PanelBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    if (nextProps.isOpen === undefined) {\n      return null; // no state update\n    }\n\n    if (nextProps.isOpen && (prevState.visibility === PanelVisibilityState.closed || prevState.visibility === PanelVisibilityState.animatingClosed)) {\n      return {\n        visibility: PanelVisibilityState.animatingOpen\n      };\n    }\n\n    if (!nextProps.isOpen && (prevState.visibility === PanelVisibilityState.open || prevState.visibility === PanelVisibilityState.animatingOpen)) {\n      return {\n        visibility: PanelVisibilityState.animatingClosed\n      };\n    }\n\n    return null;\n  };\n\n  PanelBase.prototype.componentDidMount = function () {\n    this._events.on(window, 'resize', this._updateFooterPosition);\n\n    if (this._shouldListenForOuterClick(this.props)) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n\n    if (this.props.isOpen) {\n      this.setState({\n        visibility: PanelVisibilityState.animatingOpen\n      });\n    }\n  };\n\n  PanelBase.prototype.componentDidUpdate = function (previousProps, previousState) {\n    var shouldListenOnOuterClick = this._shouldListenForOuterClick(this.props);\n\n    var previousShouldListenOnOuterClick = this._shouldListenForOuterClick(previousProps);\n\n    if (this.state.visibility !== previousState.visibility) {\n      this._clearExistingAnimationTimer();\n\n      if (this.state.visibility === PanelVisibilityState.animatingOpen) {\n        this._animateTo(PanelVisibilityState.open);\n      } else if (this.state.visibility === PanelVisibilityState.animatingClosed) {\n        this._animateTo(PanelVisibilityState.closed);\n      }\n    }\n\n    if (shouldListenOnOuterClick && !previousShouldListenOnOuterClick) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    } else if (!shouldListenOnOuterClick && previousShouldListenOnOuterClick) {\n      this._events.off(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n  };\n\n  PanelBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._events.dispose();\n  };\n\n  PanelBase.prototype.render = function () {\n    var _a = this.props,\n        _b = _a.className,\n        className = _b === void 0 ? '' : _b,\n        elementToFocusOnDismiss = _a.elementToFocusOnDismiss,\n\n    /* eslint-disable deprecation/deprecation */\n    firstFocusableSelector = _a.firstFocusableSelector,\n        focusTrapZoneProps = _a.focusTrapZoneProps,\n        forceFocusInsideTrap = _a.forceFocusInsideTrap,\n        hasCloseButton = _a.hasCloseButton,\n        headerText = _a.headerText,\n        _c = _a.headerClassName,\n        headerClassName = _c === void 0 ? '' : _c,\n        ignoreExternalFocusing = _a.ignoreExternalFocusing,\n\n    /* eslint-enable deprecation/deprecation */\n    isBlocking = _a.isBlocking,\n        isFooterAtBottom = _a.isFooterAtBottom,\n        isLightDismiss = _a.isLightDismiss,\n        isHiddenOnDismiss = _a.isHiddenOnDismiss,\n        layerProps = _a.layerProps,\n        overlayProps = _a.overlayProps,\n        popupProps = _a.popupProps,\n        type = _a.type,\n        styles = _a.styles,\n        theme = _a.theme,\n        customWidth = _a.customWidth,\n        _d = _a.onLightDismissClick,\n        onLightDismissClick = _d === void 0 ? this._onPanelClick : _d,\n        _e = _a.onRenderNavigation,\n        onRenderNavigation = _e === void 0 ? this._onRenderNavigation : _e,\n        _f = _a.onRenderHeader,\n        onRenderHeader = _f === void 0 ? this._onRenderHeader : _f,\n        _g = _a.onRenderBody,\n        onRenderBody = _g === void 0 ? this._onRenderBody : _g,\n        _h = _a.onRenderFooter,\n        onRenderFooter = _h === void 0 ? this._onRenderFooter : _h;\n    var _j = this.state,\n        isFooterSticky = _j.isFooterSticky,\n        visibility = _j.visibility,\n        id = _j.id;\n    var isLeft = type === PanelType.smallFixedNear || type === PanelType.customNear ? true : false;\n    var isRTL = getRTL(theme);\n    var isOnRightSide = isRTL ? isLeft : !isLeft;\n    var customWidthStyles = type === PanelType.custom || type === PanelType.customNear ? {\n      width: customWidth\n    } : {};\n    var nativeProps = getNativeProps(this.props, divProperties);\n    var isOpen = this.isActive;\n    var isAnimating = visibility === PanelVisibilityState.animatingClosed || visibility === PanelVisibilityState.animatingOpen;\n    this._headerTextId = headerText && id + '-headerText';\n\n    if (!isOpen && !isAnimating && !isHiddenOnDismiss) {\n      return null;\n    }\n\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      focusTrapZoneClassName: focusTrapZoneProps ? focusTrapZoneProps.className : undefined,\n      hasCloseButton: hasCloseButton,\n      headerClassName: headerClassName,\n      isAnimating: isAnimating,\n      isFooterSticky: isFooterSticky,\n      isFooterAtBottom: isFooterAtBottom,\n      isOnRightSide: isOnRightSide,\n      isOpen: isOpen,\n      isHiddenOnDismiss: isHiddenOnDismiss,\n      type: type,\n      hasCustomNavigation: this._hasCustomNavigation\n    });\n\n    var _k = this,\n        _classNames = _k._classNames,\n        _allowTouchBodyScroll = _k._allowTouchBodyScroll;\n\n    var overlay;\n\n    if (isBlocking && isOpen) {\n      overlay = React.createElement(Overlay, __assign({\n        className: _classNames.overlay,\n        isDarkThemed: false,\n        onClick: isLightDismiss ? onLightDismissClick : undefined,\n        allowTouchBodyScroll: _allowTouchBodyScroll\n      }, overlayProps));\n    }\n\n    return React.createElement(Layer, __assign({}, layerProps), React.createElement(Popup, __assign({\n      role: \"dialog\",\n      \"aria-modal\": \"true\",\n      ariaLabelledBy: this._headerTextId ? this._headerTextId : undefined,\n      onDismiss: this.dismiss,\n      className: _classNames.hiddenPanel\n    }, popupProps), React.createElement(\"div\", __assign({\n      \"aria-hidden\": !isOpen && isAnimating\n    }, nativeProps, {\n      ref: this._panel,\n      className: _classNames.root\n    }), overlay, React.createElement(FocusTrapZone, __assign({\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      forceFocusInsideTrap: !isBlocking || isHiddenOnDismiss && !isOpen ? false : forceFocusInsideTrap,\n      firstFocusableSelector: firstFocusableSelector,\n      isClickableOutsideFocusTrap: true\n    }, focusTrapZoneProps, {\n      className: _classNames.main,\n      style: customWidthStyles,\n      elementToFocusOnDismiss: elementToFocusOnDismiss\n    }), React.createElement(\"div\", {\n      className: _classNames.commands,\n      \"data-is-visible\": true\n    }, onRenderNavigation(this.props, this._onRenderNavigation)), React.createElement(\"div\", {\n      className: _classNames.contentInner\n    }, (this._hasCustomNavigation || !hasCloseButton) && onRenderHeader(this.props, this._onRenderHeader, this._headerTextId), React.createElement(\"div\", {\n      ref: this._allowScrollOnPanel,\n      className: _classNames.scrollableContent,\n      \"data-is-scrollable\": true\n    }, onRenderBody(this.props, this._onRenderBody)), onRenderFooter(this.props, this._onRenderFooter))))));\n  };\n\n  PanelBase.prototype.open = function () {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (this.isActive) {\n      return;\n    }\n\n    this.setState({\n      visibility: PanelVisibilityState.animatingOpen\n    });\n  };\n\n  PanelBase.prototype.close = function () {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (!this.isActive) {\n      return;\n    }\n\n    this.setState({\n      visibility: PanelVisibilityState.animatingClosed\n    });\n  };\n\n  Object.defineProperty(PanelBase.prototype, \"isActive\", {\n    /** isActive is true when panel is open or opening. */\n    get: function () {\n      return this.state.visibility === PanelVisibilityState.open || this.state.visibility === PanelVisibilityState.animatingOpen;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PanelBase.prototype._shouldListenForOuterClick = function (props) {\n    return !!props.isBlocking && !!props.isOpen;\n  };\n\n  PanelBase.prototype._updateFooterPosition = function () {\n    var scrollableContent = this._scrollableContent;\n\n    if (scrollableContent) {\n      var height = scrollableContent.clientHeight;\n      var innerHeight_1 = scrollableContent.scrollHeight;\n      this.setState({\n        isFooterSticky: height < innerHeight_1 ? true : false\n      });\n    }\n  };\n\n  PanelBase.prototype._dismissOnOuterClick = function (ev) {\n    var panel = this._panel.current;\n\n    if (this.isActive && panel && !ev.defaultPrevented) {\n      if (!elementContains(panel, ev.target)) {\n        if (this.props.onOuterClick) {\n          this.props.onOuterClick();\n          ev.preventDefault();\n        } else {\n          this.dismiss(ev);\n        }\n      }\n    }\n  };\n\n  PanelBase.defaultProps = {\n    isHiddenOnDismiss: false,\n    isOpen: undefined,\n    isBlocking: true,\n    hasCloseButton: true,\n    type: PanelType.smallFixedFar\n  };\n  return PanelBase;\n}(React.Component);\n\nexport { PanelBase };","map":{"version":3,"mappings":"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","names":["React","IconButton","Layer","Overlay","Popup","allowScrollOnElement","allowOverscrollOnElement","classNamesFunction","divProperties","elementContains","getId","getNativeProps","getRTL","css","warnDeprecations","Async","EventGroup","initializeComponentRef","FocusTrapZone","PanelType","getClassNames","COMPONENT_NAME","PanelVisibilityState","__extends","props","_super","_this","createRef","onRenderNavigation","onRenderNavigationContent","ev","onDismiss","defaultPrevented","close","elt","_allowTouchBodyScroll","_events","off","_scrollableContent","hasCloseButton","className","_classNames","navigation","_onRenderNavigationContent","_b","onRenderHeader","iconButtonStyles","subComponentStyles","_a","closeButton","_hasCustomNavigation","_onRenderHeader","_headerTextId","styles","onClick","_onPanelClick","ariaLabel","closeButtonAriaLabel","title","iconProps","iconName","defaultRender","headerTextId","headerTextProps","headerText","header","id","role","content","children","onRenderFooterContent","footer","footerInner","newVisibilityState","open","onOpen","_animationCallback","_async","setTimeout","setState","visibility","_onTransitionComplete","clearTimeout","dismiss","_updateFooterPosition","state","onOpened","closed","onDismissed","allowTouchBodyScroll","ignoreExternalFocusing","forceFocusInsideTrap","firstFocusableSelector","isFooterSticky","PanelBase","nextProps","prevState","isOpen","undefined","animatingClosed","animatingOpen","on","window","_shouldListenForOuterClick","document","body","_dismissOnOuterClick","previousProps","previousState","shouldListenOnOuterClick","previousShouldListenOnOuterClick","_clearExistingAnimationTimer","_animateTo","dispose","elementToFocusOnDismiss","focusTrapZoneProps","_c","headerClassName","isBlocking","isFooterAtBottom","isLightDismiss","isHiddenOnDismiss","layerProps","overlayProps","popupProps","type","theme","customWidth","_d","onLightDismissClick","_e","_f","_g","onRenderBody","_h","onRenderFooter","isLeft","smallFixedNear","customNear","isRTL","isOnRightSide","customWidthStyles","custom","width","nativeProps","isActive","isAnimating","focusTrapZoneClassName","hasCustomNavigation","overlay","__assign","isDarkThemed","ariaLabelledBy","hiddenPanel","ref","_panel","root","isClickableOutsideFocusTrap","main","style","commands","_onRenderNavigation","contentInner","_allowScrollOnPanel","scrollableContent","_onRenderBody","_onRenderFooter","Object","height","clientHeight","innerHeight_1","scrollHeight","panel","current","target","onOuterClick","preventDefault","smallFixedFar","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Panel\\Panel.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Layer } from '../../Layer';\nimport { Overlay } from '../../Overlay';\nimport { Popup } from '../../Popup';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  allowScrollOnElement,\n  allowOverscrollOnElement,\n  classNamesFunction,\n  divProperties,\n  elementContains,\n  getId,\n  getNativeProps,\n  getRTL,\n  css,\n  warnDeprecations,\n  Async,\n  EventGroup,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { FocusTrapZone } from '../FocusTrapZone/index';\nimport { IPanel, IPanelProps, IPanelStyleProps, IPanelStyles, PanelType } from './Panel.types';\n\nconst getClassNames = classNamesFunction<IPanelStyleProps, IPanelStyles>();\nconst COMPONENT_NAME = 'Panel';\n\nenum PanelVisibilityState {\n  closed,\n  animatingOpen,\n  open,\n  animatingClosed,\n}\n\ninterface IPanelState {\n  isFooterSticky?: boolean;\n  id?: string;\n  visibility: PanelVisibilityState;\n}\n\nexport class PanelBase extends React.Component<IPanelProps, IPanelState> implements IPanel {\n  public static defaultProps: IPanelProps = {\n    isHiddenOnDismiss: false,\n    isOpen: undefined,\n    isBlocking: true,\n    hasCloseButton: true,\n    type: PanelType.smallFixedFar,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _panel = React.createRef<HTMLDivElement>();\n  private _classNames: IProcessedStyleSet<IPanelStyles>;\n  private _scrollableContent: HTMLDivElement | null;\n  private _animationCallback: number | null = null;\n  private _hasCustomNavigation: boolean = !!(this.props.onRenderNavigation || this.props.onRenderNavigationContent);\n  private _headerTextId: string | undefined;\n  private _allowTouchBodyScroll: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<IPanelProps>,\n    prevState: Readonly<IPanelState>,\n  ): Partial<IPanelState> | null {\n    if (nextProps.isOpen === undefined) {\n      return null; // no state update\n    }\n    if (\n      nextProps.isOpen &&\n      (prevState.visibility === PanelVisibilityState.closed ||\n        prevState.visibility === PanelVisibilityState.animatingClosed)\n    ) {\n      return { visibility: PanelVisibilityState.animatingOpen };\n    }\n    if (\n      !nextProps.isOpen &&\n      (prevState.visibility === PanelVisibilityState.open ||\n        prevState.visibility === PanelVisibilityState.animatingOpen)\n    ) {\n      return { visibility: PanelVisibilityState.animatingClosed };\n    }\n    return null;\n  }\n\n  constructor(props: IPanelProps) {\n    super(props);\n\n    const { allowTouchBodyScroll = false } = this.props;\n    this._allowTouchBodyScroll = allowTouchBodyScroll;\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    initializeComponentRef(this);\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      ignoreExternalFocusing: 'focusTrapZoneProps',\n      forceFocusInsideTrap: 'focusTrapZoneProps',\n      firstFocusableSelector: 'focusTrapZoneProps',\n    });\n\n    this.state = {\n      isFooterSticky: false,\n      // intentionally ignore props so animation takes place during componentDidMount\n      visibility: PanelVisibilityState.closed,\n      id: getId('Panel'),\n    };\n  }\n\n  public componentDidMount(): void {\n    this._events.on(window, 'resize', this._updateFooterPosition);\n\n    if (this._shouldListenForOuterClick(this.props)) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n\n    if (this.props.isOpen) {\n      this.setState({ visibility: PanelVisibilityState.animatingOpen });\n    }\n  }\n\n  public componentDidUpdate(previousProps: IPanelProps, previousState: IPanelState): void {\n    const shouldListenOnOuterClick = this._shouldListenForOuterClick(this.props);\n    const previousShouldListenOnOuterClick = this._shouldListenForOuterClick(previousProps);\n\n    if (this.state.visibility !== previousState.visibility) {\n      this._clearExistingAnimationTimer();\n      if (this.state.visibility === PanelVisibilityState.animatingOpen) {\n        this._animateTo(PanelVisibilityState.open);\n      } else if (this.state.visibility === PanelVisibilityState.animatingClosed) {\n        this._animateTo(PanelVisibilityState.closed);\n      }\n    }\n\n    if (shouldListenOnOuterClick && !previousShouldListenOnOuterClick) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    } else if (!shouldListenOnOuterClick && previousShouldListenOnOuterClick) {\n      this._events.off(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      className = '',\n      elementToFocusOnDismiss,\n      /* eslint-disable deprecation/deprecation */\n      firstFocusableSelector,\n      focusTrapZoneProps,\n      forceFocusInsideTrap,\n      hasCloseButton,\n      headerText,\n      headerClassName = '',\n      ignoreExternalFocusing,\n      /* eslint-enable deprecation/deprecation */\n      isBlocking,\n      isFooterAtBottom,\n      isLightDismiss,\n      isHiddenOnDismiss,\n      layerProps,\n      overlayProps,\n      popupProps,\n      type,\n      styles,\n      theme,\n      customWidth,\n      onLightDismissClick = this._onPanelClick,\n      onRenderNavigation = this._onRenderNavigation,\n      onRenderHeader = this._onRenderHeader,\n      onRenderBody = this._onRenderBody,\n      onRenderFooter = this._onRenderFooter,\n    } = this.props;\n    const { isFooterSticky, visibility, id } = this.state;\n    const isLeft = type === PanelType.smallFixedNear || type === PanelType.customNear ? true : false;\n    const isRTL = getRTL(theme);\n    const isOnRightSide = isRTL ? isLeft : !isLeft;\n    const customWidthStyles = type === PanelType.custom || type === PanelType.customNear ? { width: customWidth } : {};\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n    const isOpen = this.isActive;\n    const isAnimating =\n      visibility === PanelVisibilityState.animatingClosed || visibility === PanelVisibilityState.animatingOpen;\n\n    this._headerTextId = headerText && id + '-headerText';\n\n    if (!isOpen && !isAnimating && !isHiddenOnDismiss) {\n      return null;\n    }\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      focusTrapZoneClassName: focusTrapZoneProps ? focusTrapZoneProps.className : undefined,\n      hasCloseButton,\n      headerClassName,\n      isAnimating,\n      isFooterSticky,\n      isFooterAtBottom,\n      isOnRightSide,\n      isOpen,\n      isHiddenOnDismiss,\n      type,\n      hasCustomNavigation: this._hasCustomNavigation,\n    });\n\n    const { _classNames, _allowTouchBodyScroll } = this;\n\n    let overlay;\n    if (isBlocking && isOpen) {\n      overlay = (\n        <Overlay\n          className={_classNames.overlay}\n          isDarkThemed={false}\n          onClick={isLightDismiss ? onLightDismissClick : undefined}\n          allowTouchBodyScroll={_allowTouchBodyScroll}\n          {...overlayProps}\n        />\n      );\n    }\n\n    return (\n      <Layer {...layerProps}>\n        <Popup\n          role=\"dialog\"\n          aria-modal=\"true\"\n          ariaLabelledBy={this._headerTextId ? this._headerTextId : undefined}\n          onDismiss={this.dismiss}\n          className={_classNames.hiddenPanel}\n          {...popupProps}\n        >\n          <div aria-hidden={!isOpen && isAnimating} {...nativeProps} ref={this._panel} className={_classNames.root}>\n            {overlay}\n            <FocusTrapZone\n              ignoreExternalFocusing={ignoreExternalFocusing}\n              forceFocusInsideTrap={!isBlocking || (isHiddenOnDismiss && !isOpen) ? false : forceFocusInsideTrap}\n              firstFocusableSelector={firstFocusableSelector}\n              isClickableOutsideFocusTrap={true}\n              {...focusTrapZoneProps}\n              className={_classNames.main}\n              style={customWidthStyles}\n              elementToFocusOnDismiss={elementToFocusOnDismiss}\n            >\n              <div className={_classNames.commands} data-is-visible={true}>\n                {onRenderNavigation(this.props, this._onRenderNavigation)}\n              </div>\n              <div className={_classNames.contentInner}>\n                {(this._hasCustomNavigation || !hasCloseButton) &&\n                  onRenderHeader(this.props, this._onRenderHeader, this._headerTextId)}\n                <div ref={this._allowScrollOnPanel} className={_classNames.scrollableContent} data-is-scrollable={true}>\n                  {onRenderBody(this.props, this._onRenderBody)}\n                </div>\n                {onRenderFooter(this.props, this._onRenderFooter)}\n              </div>\n            </FocusTrapZone>\n          </div>\n        </Popup>\n      </Layer>\n    );\n  }\n\n  public open() {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (this.isActive) {\n      return;\n    }\n\n    this.setState({ visibility: PanelVisibilityState.animatingOpen });\n  }\n\n  public close() {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (!this.isActive) {\n      return;\n    }\n\n    this.setState({ visibility: PanelVisibilityState.animatingClosed });\n  }\n\n  public dismiss = (ev?: React.SyntheticEvent<HTMLElement>): void => {\n    if (this.props.onDismiss) {\n      this.props.onDismiss(ev);\n    }\n\n    if (!ev || (ev && !ev.defaultPrevented)) {\n      this.close();\n    }\n  };\n\n  /** isActive is true when panel is open or opening. */\n  public get isActive(): boolean {\n    return (\n      this.state.visibility === PanelVisibilityState.open ||\n      this.state.visibility === PanelVisibilityState.animatingOpen\n    );\n  }\n\n  // Allow the user to scroll within the panel but not on the body\n  private _allowScrollOnPanel = (elt: HTMLDivElement | null): void => {\n    if (elt) {\n      if (this._allowTouchBodyScroll) {\n        allowOverscrollOnElement(elt, this._events);\n      } else {\n        allowScrollOnElement(elt, this._events);\n      }\n    } else {\n      this._events.off(this._scrollableContent);\n    }\n    this._scrollableContent = elt;\n  };\n\n  private _shouldListenForOuterClick(props: IPanelProps): boolean {\n    return !!props.isBlocking && !!props.isOpen;\n  }\n\n  private _onRenderNavigation = (props: IPanelProps): JSX.Element | null => {\n    if (!this.props.onRenderNavigationContent && !this.props.onRenderNavigation && !this.props.hasCloseButton) {\n      return null;\n    }\n    const { onRenderNavigationContent = this._onRenderNavigationContent } = this.props;\n    return (\n      <div className={this._classNames.navigation}>\n        {onRenderNavigationContent(props, this._onRenderNavigationContent)}\n      </div>\n    );\n  };\n\n  private _onRenderNavigationContent = (props: IPanelProps): JSX.Element | null => {\n    const { closeButtonAriaLabel, hasCloseButton, onRenderHeader = this._onRenderHeader } = props;\n    if (hasCloseButton) {\n      const iconButtonStyles = this._classNames.subComponentStyles?.closeButton();\n\n      return (\n        <>\n          {!this._hasCustomNavigation && onRenderHeader(this.props, this._onRenderHeader, this._headerTextId)}\n          <IconButton\n            styles={iconButtonStyles}\n            // eslint-disable-next-line deprecation/deprecation\n            className={this._classNames.closeButton}\n            onClick={this._onPanelClick}\n            ariaLabel={closeButtonAriaLabel}\n            title={closeButtonAriaLabel}\n            data-is-visible={true}\n            iconProps={{ iconName: 'Cancel' }}\n          />\n        </>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderHeader = (\n    props: IPanelProps,\n    defaultRender?: (props?: IPanelProps) => JSX.Element | null,\n    headerTextId?: string | undefined,\n  ): JSX.Element | null => {\n    const { headerText, headerTextProps = {} } = props;\n\n    if (headerText) {\n      return (\n        <div className={this._classNames.header}>\n          <div\n            id={headerTextId}\n            role=\"heading\"\n            aria-level={1}\n            {...headerTextProps}\n            className={css(this._classNames.headerText, headerTextProps.className)}\n          >\n            {headerText}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderBody = (props: IPanelProps): JSX.Element => {\n    return <div className={this._classNames.content}>{props.children}</div>;\n  };\n\n  private _onRenderFooter = (props: IPanelProps): JSX.Element | null => {\n    const { onRenderFooterContent = null } = this.props;\n    if (onRenderFooterContent) {\n      return (\n        <div className={this._classNames.footer}>\n          <div className={this._classNames.footerInner}>{onRenderFooterContent()}</div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  private _updateFooterPosition(): void {\n    const scrollableContent = this._scrollableContent;\n    if (scrollableContent) {\n      const height = scrollableContent.clientHeight;\n      const innerHeight = scrollableContent.scrollHeight;\n\n      this.setState({\n        isFooterSticky: height < innerHeight ? true : false,\n      });\n    }\n  }\n\n  private _dismissOnOuterClick(ev: React.MouseEvent<HTMLDivElement>): void {\n    const panel = this._panel.current;\n    if (this.isActive && panel && !ev.defaultPrevented) {\n      if (!elementContains(panel, ev.target as HTMLElement)) {\n        if (this.props.onOuterClick) {\n          this.props.onOuterClick();\n          ev.preventDefault();\n        } else {\n          this.dismiss(ev);\n        }\n      }\n    }\n  }\n\n  private _animateTo = (newVisibilityState: PanelVisibilityState): void => {\n    if (newVisibilityState === PanelVisibilityState.open && this.props.onOpen) {\n      this.props.onOpen();\n    }\n\n    this._animationCallback = this._async.setTimeout(() => {\n      this.setState({ visibility: newVisibilityState });\n      this._onTransitionComplete();\n    }, 200);\n  };\n\n  private _clearExistingAnimationTimer = (): void => {\n    if (this._animationCallback !== null) {\n      this._async.clearTimeout(this._animationCallback);\n    }\n  };\n\n  private _onPanelClick = (ev?: any): void => {\n    this.dismiss(ev);\n  };\n\n  private _onTransitionComplete = (): void => {\n    this._updateFooterPosition();\n\n    if (this.state.visibility === PanelVisibilityState.open && this.props.onOpened) {\n      this.props.onOpened();\n    }\n\n    if (this.state.visibility === PanelVisibilityState.closed && this.props.onDismissed) {\n      this.props.onDismissed();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}