{"ast":null,"code":"/**\n * Functions used by Stack components to simplify style-related computations\n */\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nvar _getThemedSpacing = function _getThemedSpacing(space, theme) {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space];\n  }\n\n  return space;\n}; // Helper function that takes a gap as a string and converts it into a { value, unit } representation.\n\n\nvar _getValueUnitGap = function _getValueUnitGap(gap) {\n  var numericalPart = parseFloat(gap);\n  var numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  var numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n  var unitPart = gap.substring(numericalString.toString().length);\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px'\n  };\n};\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\n\n\nexport var parseGap = function parseGap(gap, theme) {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px'\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px'\n      }\n    };\n  }\n\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px'\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px'\n      }\n    };\n  }\n\n  var splitGap = gap.split(' '); // If the array has more than two values, then return 0px.\n\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px'\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px'\n      }\n    };\n  } // If the array has two values, then parse each one.\n\n\n  if (splitGap.length === 2) {\n    return {\n      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme))\n    };\n  } // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n\n\n  var calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap\n  };\n};\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\n\nexport var parsePadding = function parsePadding(padding, theme) {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n\n  var paddingValues = padding.split(' ');\n\n  if (paddingValues.length < 2) {\n    return _getThemedSpacing(padding, theme);\n  }\n\n  return paddingValues.reduce(function (padding1, padding2) {\n    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n  });\n};","map":{"version":3,"mappings":"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","names":["_getThemedSpacing","space","theme","spacing","hasOwnProperty","_getValueUnitGap","gap","numericalPart","parseFloat","numericalValue","isNaN","numericalString","toString","unitPart","substring","length","value","unit","parseGap","undefined","rowGap","columnGap","splitGap","split","calculatedGap","parsePadding","padding","paddingValues","reduce","padding1","padding2"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Stack\\StackUtils.ts"],"sourcesContent":["/**\n * Functions used by Stack components to simplify style-related computations\n */\n\nimport { ITheme } from '../../Styling';\nimport { IStackProps } from './Stack.types';\n\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nconst _getThemedSpacing = (space: string, theme: ITheme): string => {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space as keyof typeof theme.spacing];\n  }\n  return space;\n};\n\n// Helper function that takes a gap as a string and converts it into a { value, unit } representation.\nconst _getValueUnitGap = (gap: string): { value: number; unit: string } => {\n  const numericalPart = parseFloat(gap);\n  const numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  const numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n\n  const unitPart = gap.substring(numericalString.toString().length);\n\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px',\n  };\n};\n\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\nexport const parseGap = (\n  gap: IStackProps['gap'],\n  theme: ITheme,\n): { rowGap: { value: number; unit: string }; columnGap: { value: number; unit: string } } => {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px',\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px',\n      },\n    };\n  }\n\n  const splitGap = gap.split(' ');\n\n  // If the array has more than two values, then return 0px.\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  // If the array has two values, then parse each one.\n  if (splitGap.length === 2) {\n    return {\n      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme)),\n    };\n  }\n\n  // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n  const calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap,\n  };\n};\n\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\nexport const parsePadding = (padding: number | string | undefined, theme: ITheme): number | string | undefined => {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n\n  const paddingValues = padding.split(' ');\n  if (paddingValues.length < 2) {\n    return _getThemedSpacing(padding, theme);\n  }\n\n  return paddingValues.reduce((padding1: string, padding2: string) => {\n    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}