{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { HighContrastSelector, getGlobalClassNames, getEdgeChromiumNoHighContrastAdjustSelector } from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nvar GlobalClassNames = {\n  root: 'ms-Checkbox',\n  label: 'ms-Checkbox-label',\n  checkbox: 'ms-Checkbox-checkbox',\n  checkmark: 'ms-Checkbox-checkmark',\n  text: 'ms-Checkbox-text'\n};\nvar MS_CHECKBOX_LABEL_SIZE = '20px';\nvar MS_CHECKBOX_TRANSITION_DURATION = '200ms';\nvar MS_CHECKBOX_TRANSITION_TIMING = 'cubic-bezier(.4, 0, .23, 1)';\nexport var getStyles = function getStyles(props) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n\n  var className = props.className,\n      theme = props.theme,\n      reversed = props.reversed,\n      checked = props.checked,\n      disabled = props.disabled,\n      isUsingCustomLabelRender = props.isUsingCustomLabelRender,\n      indeterminate = props.indeterminate;\n  var semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      palette = theme.palette,\n      fonts = theme.fonts;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var checkmarkFontColor = semanticColors.inputForegroundChecked; // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBorder\n\n  var checkmarkFontColorHovered = palette.neutralSecondary; // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder\n\n  var checkboxBorderColor = palette.neutralPrimary;\n  var checkboxBorderIndeterminateColor = semanticColors.inputBackgroundChecked;\n  var checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;\n  var checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;\n  var checkboxBorderHoveredColor = semanticColors.inputBorderHovered;\n  var checkboxBorderIndeterminateHoveredColor = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxBackgroundChecked = semanticColors.inputBackgroundChecked; // TODO: after updating the semanticColors slots mapping the following 2 tokens need to be\n  // semanticColors.inputBackgroundCheckedHovered\n\n  var checkboxBackgroundCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxBorderColorCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxHoveredTextColor = semanticColors.inputTextHovered;\n  var checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;\n  var checkboxTextColor = semanticColors.bodyText;\n  var checkboxTextColorDisabled = semanticColors.disabledText;\n  var indeterminateDotStyles = [(_a = {\n    content: '\"\"',\n    borderRadius: effects.roundedCorner2,\n    position: 'absolute',\n    width: 10,\n    height: 10,\n    top: 4,\n    left: 4,\n    boxSizing: 'border-box',\n    borderWidth: 5,\n    borderStyle: 'solid',\n    borderColor: disabled ? checkboxBorderColorDisabled : checkboxBorderIndeterminateColor,\n    transitionProperty: 'border-width, border, border-color',\n    transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\n    transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING\n  }, _a[HighContrastSelector] = {\n    borderColor: 'WindowText'\n  }, _a)];\n  return {\n    root: [classNames.root, {\n      position: 'relative',\n      display: 'flex'\n    }, reversed && 'reversed', checked && 'is-checked', !disabled && 'is-enabled', disabled && 'is-disabled', !disabled && [!checked && (_b = {}, _b[\":hover .\" + classNames.checkbox] = (_c = {\n      borderColor: checkboxBorderHoveredColor\n    }, _c[HighContrastSelector] = {\n      borderColor: 'Highlight'\n    }, _c), _b[\":focus .\" + classNames.checkbox] = {\n      borderColor: checkboxBorderHoveredColor\n    }, _b[\":hover .\" + classNames.checkmark] = (_d = {\n      color: checkmarkFontColorHovered,\n      opacity: '1'\n    }, _d[HighContrastSelector] = {\n      color: 'Highlight'\n    }, _d), _b), checked && !indeterminate && (_e = {}, _e[\":hover .\" + classNames.checkbox] = {\n      background: checkboxBackgroundCheckedHovered,\n      borderColor: checkboxBorderColorCheckedHovered\n    }, _e[\":focus .\" + classNames.checkbox] = {\n      background: checkboxBackgroundCheckedHovered,\n      borderColor: checkboxBorderColorCheckedHovered\n    }, _e[HighContrastSelector] = (_f = {}, _f[\":hover .\" + classNames.checkbox] = {\n      background: 'Highlight',\n      borderColor: 'Highlight'\n    }, _f[\":focus .\" + classNames.checkbox] = {\n      background: 'Highlight'\n    }, _f[\":focus:hover .\" + classNames.checkbox] = {\n      background: 'Highlight'\n    }, _f[\":focus:hover .\" + classNames.checkmark] = {\n      color: 'Window'\n    }, _f[\":hover .\" + classNames.checkmark] = {\n      color: 'Window'\n    }, _f), _e), indeterminate && (_g = {}, _g[\":hover .\" + classNames.checkbox + \", :hover .\" + classNames.checkbox + \":after\"] = (_h = {\n      borderColor: checkboxBorderIndeterminateHoveredColor\n    }, _h[HighContrastSelector] = {\n      borderColor: 'WindowText'\n    }, _h), _g[\":focus .\" + classNames.checkbox] = {\n      borderColor: checkboxBorderIndeterminateHoveredColor\n    }, _g[\":hover .\" + classNames.checkmark] = {\n      opacity: '0'\n    }, _g), (_j = {}, _j[\":hover .\" + classNames.text + \", :focus .\" + classNames.text] = (_k = {\n      color: checkboxHoveredTextColor\n    }, _k[HighContrastSelector] = {\n      color: disabled ? 'GrayText' : 'WindowText'\n    }, _k), _j)], className],\n    input: (_l = {\n      position: 'absolute',\n      background: 'none',\n      opacity: 0\n    }, _l[\".\" + IsFocusVisibleClassName + \" &:focus + label::before\"] = (_m = {\n      outline: '1px solid ' + theme.palette.neutralSecondary,\n      outlineOffset: '2px'\n    }, _m[HighContrastSelector] = {\n      outline: '1px solid ActiveBorder'\n    }, _m), _l),\n    label: [classNames.label, theme.fonts.medium, {\n      display: 'flex',\n      alignItems: isUsingCustomLabelRender ? 'center' : 'flex-start',\n      cursor: disabled ? 'default' : 'pointer',\n      position: 'relative',\n      userSelect: 'none'\n    }, reversed && {\n      flexDirection: 'row-reverse',\n      justifyContent: 'flex-end'\n    }, {\n      '&::before': {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        content: '\"\"',\n        pointerEvents: 'none'\n      }\n    }],\n    checkbox: [classNames.checkbox, __assign((_o = {\n      position: 'relative',\n      display: 'flex',\n      flexShrink: 0,\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: MS_CHECKBOX_LABEL_SIZE,\n      width: MS_CHECKBOX_LABEL_SIZE,\n      border: \"1px solid \" + checkboxBorderColor,\n      borderRadius: effects.roundedCorner2,\n      boxSizing: 'border-box',\n      transitionProperty: 'background, border, border-color',\n      transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\n      transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\n\n      /* in case the icon is bigger than the box */\n      overflow: 'hidden',\n      ':after': indeterminate ? indeterminateDotStyles : null\n    }, _o[HighContrastSelector] = {\n      borderColor: 'WindowText'\n    }, _o), getEdgeChromiumNoHighContrastAdjustSelector()), indeterminate && {\n      borderColor: checkboxBorderIndeterminateColor\n    }, !reversed ? // This margin on the checkbox is for backwards compat. Notably it has the effect where a customRender\n    // is used, there will be only a 4px margin from checkbox to label. The label by default would have\n    // another 4px margin for a total of 8px margin between checkbox and label. We don't combine the two\n    // (and move it into the text) to not incur a breaking change for everyone using custom render atm.\n    {\n      marginRight: 4\n    } : {\n      marginLeft: 4\n    }, !disabled && !indeterminate && checked && (_p = {\n      background: checkboxBackgroundChecked,\n      borderColor: checkboxBorderColorChecked\n    }, _p[HighContrastSelector] = {\n      background: 'Highlight',\n      borderColor: 'Highlight'\n    }, _p), disabled && (_q = {\n      borderColor: checkboxBorderColorDisabled\n    }, _q[HighContrastSelector] = {\n      borderColor: 'GrayText'\n    }, _q), checked && disabled && (_r = {\n      background: checkboxBackgroundDisabledChecked,\n      borderColor: checkboxBorderColorDisabled\n    }, _r[HighContrastSelector] = {\n      background: 'Window'\n    }, _r)],\n    checkmark: [classNames.checkmark, (_s = {\n      opacity: checked ? '1' : '0',\n      color: checkmarkFontColor\n    }, _s[HighContrastSelector] = {\n      color: disabled ? 'GrayText' : 'Window',\n      MsHighContrastAdjust: 'none'\n    }, _s)],\n    text: [classNames.text, __assign((_t = {\n      color: disabled ? checkboxTextColorDisabled : checkboxTextColor,\n      fontSize: fonts.medium.fontSize,\n      lineHeight: '20px'\n    }, _t[HighContrastSelector] = {\n      color: disabled ? 'GrayText' : 'WindowText'\n    }, _t), getEdgeChromiumNoHighContrastAdjustSelector()), !reversed ? {\n      marginLeft: 4\n    } : {\n      marginRight: 4\n    }]\n  };\n};","map":{"version":3,"mappings":"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","names":["HighContrastSelector","getGlobalClassNames","getEdgeChromiumNoHighContrastAdjustSelector","IsFocusVisibleClassName","GlobalClassNames","root","label","checkbox","checkmark","text","MS_CHECKBOX_LABEL_SIZE","MS_CHECKBOX_TRANSITION_DURATION","MS_CHECKBOX_TRANSITION_TIMING","getStyles","props","theme","reversed","checked","disabled","isUsingCustomLabelRender","indeterminate","effects","palette","fonts","classNames","checkmarkFontColor","semanticColors","inputForegroundChecked","checkmarkFontColorHovered","neutralSecondary","checkboxBorderColor","neutralPrimary","checkboxBorderIndeterminateColor","inputBackgroundChecked","checkboxBorderColorChecked","checkboxBorderColorDisabled","disabledBodySubtext","checkboxBorderHoveredColor","inputBorderHovered","checkboxBorderIndeterminateHoveredColor","inputBackgroundCheckedHovered","checkboxBackgroundChecked","checkboxBackgroundCheckedHovered","checkboxBorderColorCheckedHovered","checkboxHoveredTextColor","inputTextHovered","checkboxBackgroundDisabledChecked","checkboxTextColor","bodyText","checkboxTextColorDisabled","disabledText","indeterminateDotStyles","content","borderRadius","roundedCorner2","position","width","height","top","left","boxSizing","borderWidth","borderStyle","borderColor","transitionProperty","transitionDuration","transitionTimingFunction","_a","display","_b","_c","_d","color","opacity","_e","background","_f","_g","_h","_j","_k","className","input","_l","_m","outline","outlineOffset","medium","alignItems","cursor","userSelect","flexDirection","justifyContent","right","bottom","pointerEvents","flexShrink","border","overflow","_o","marginRight","marginLeft","_p","_q","_r","_s","MsHighContrastAdjust","fontSize","lineHeight","_t"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Checkbox\\Checkbox.styles.ts"],"sourcesContent":["import { ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\r\nimport {\r\n  HighContrastSelector,\r\n  getGlobalClassNames,\r\n  getEdgeChromiumNoHighContrastAdjustSelector,\r\n  IStyle,\r\n} from '../../Styling';\r\nimport { IsFocusVisibleClassName } from '../../Utilities';\r\n\r\nconst GlobalClassNames = {\r\n  root: 'ms-Checkbox',\r\n  label: 'ms-Checkbox-label',\r\n  checkbox: 'ms-Checkbox-checkbox',\r\n  checkmark: 'ms-Checkbox-checkmark',\r\n  text: 'ms-Checkbox-text',\r\n};\r\n\r\nconst MS_CHECKBOX_LABEL_SIZE = '20px';\r\nconst MS_CHECKBOX_TRANSITION_DURATION = '200ms';\r\nconst MS_CHECKBOX_TRANSITION_TIMING = 'cubic-bezier(.4, 0, .23, 1)';\r\n\r\nexport const getStyles = (props: ICheckboxStyleProps): ICheckboxStyles => {\r\n  const { className, theme, reversed, checked, disabled, isUsingCustomLabelRender, indeterminate } = props;\r\n  const { semanticColors, effects, palette, fonts } = theme;\r\n\r\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\r\n\r\n  const checkmarkFontColor = semanticColors.inputForegroundChecked;\r\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBorder\r\n  const checkmarkFontColorHovered = palette.neutralSecondary;\r\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder\r\n  const checkboxBorderColor = palette.neutralPrimary;\r\n  const checkboxBorderIndeterminateColor = semanticColors.inputBackgroundChecked;\r\n  const checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;\r\n  const checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;\r\n  const checkboxBorderHoveredColor = semanticColors.inputBorderHovered;\r\n  const checkboxBorderIndeterminateHoveredColor = semanticColors.inputBackgroundCheckedHovered;\r\n  const checkboxBackgroundChecked = semanticColors.inputBackgroundChecked;\r\n  // TODO: after updating the semanticColors slots mapping the following 2 tokens need to be\r\n  // semanticColors.inputBackgroundCheckedHovered\r\n  const checkboxBackgroundCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\r\n  const checkboxBorderColorCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\r\n  const checkboxHoveredTextColor = semanticColors.inputTextHovered;\r\n  const checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;\r\n  const checkboxTextColor = semanticColors.bodyText;\r\n  const checkboxTextColorDisabled = semanticColors.disabledText;\r\n\r\n  const indeterminateDotStyles: IStyle = [\r\n    {\r\n      content: '\"\"',\r\n      borderRadius: effects.roundedCorner2,\r\n      position: 'absolute',\r\n      width: 10,\r\n      height: 10,\r\n      top: 4,\r\n      left: 4,\r\n      boxSizing: 'border-box',\r\n      borderWidth: 5,\r\n      borderStyle: 'solid',\r\n      borderColor: disabled ? checkboxBorderColorDisabled : checkboxBorderIndeterminateColor,\r\n      transitionProperty: 'border-width, border, border-color',\r\n      transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\r\n      transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\r\n      [HighContrastSelector]: {\r\n        borderColor: 'WindowText',\r\n      },\r\n    },\r\n  ];\r\n\r\n  return {\r\n    root: [\r\n      classNames.root,\r\n      {\r\n        position: 'relative',\r\n        display: 'flex',\r\n      },\r\n      reversed && 'reversed',\r\n      checked && 'is-checked',\r\n      !disabled && 'is-enabled',\r\n      disabled && 'is-disabled',\r\n      !disabled && [\r\n        !checked && {\r\n          [`:hover .${classNames.checkbox}`]: {\r\n            borderColor: checkboxBorderHoveredColor,\r\n            [HighContrastSelector]: {\r\n              borderColor: 'Highlight',\r\n            },\r\n          },\r\n          [`:focus .${classNames.checkbox}`]: { borderColor: checkboxBorderHoveredColor },\r\n          [`:hover .${classNames.checkmark}`]: {\r\n            color: checkmarkFontColorHovered,\r\n            opacity: '1',\r\n            [HighContrastSelector]: {\r\n              color: 'Highlight',\r\n            },\r\n          },\r\n        },\r\n        checked &&\r\n          !indeterminate && {\r\n            [`:hover .${classNames.checkbox}`]: {\r\n              background: checkboxBackgroundCheckedHovered,\r\n              borderColor: checkboxBorderColorCheckedHovered,\r\n            },\r\n            [`:focus .${classNames.checkbox}`]: {\r\n              background: checkboxBackgroundCheckedHovered,\r\n              borderColor: checkboxBorderColorCheckedHovered,\r\n            },\r\n            [HighContrastSelector]: {\r\n              [`:hover .${classNames.checkbox}`]: {\r\n                background: 'Highlight',\r\n                borderColor: 'Highlight',\r\n              },\r\n              [`:focus .${classNames.checkbox}`]: {\r\n                background: 'Highlight',\r\n              },\r\n              [`:focus:hover .${classNames.checkbox}`]: {\r\n                background: 'Highlight',\r\n              },\r\n              [`:focus:hover .${classNames.checkmark}`]: {\r\n                color: 'Window',\r\n              },\r\n              [`:hover .${classNames.checkmark}`]: {\r\n                color: 'Window',\r\n              },\r\n            },\r\n          },\r\n        indeterminate && {\r\n          [`:hover .${classNames.checkbox}, :hover .${classNames.checkbox}:after`]: {\r\n            borderColor: checkboxBorderIndeterminateHoveredColor,\r\n            [HighContrastSelector]: {\r\n              borderColor: 'WindowText',\r\n            },\r\n          },\r\n          [`:focus .${classNames.checkbox}`]: {\r\n            borderColor: checkboxBorderIndeterminateHoveredColor,\r\n          },\r\n          [`:hover .${classNames.checkmark}`]: {\r\n            opacity: '0',\r\n          },\r\n        },\r\n        {\r\n          [`:hover .${classNames.text}, :focus .${classNames.text}`]: {\r\n            color: checkboxHoveredTextColor,\r\n            [HighContrastSelector]: {\r\n              color: disabled ? 'GrayText' : 'WindowText',\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      className,\r\n    ],\r\n    input: {\r\n      position: 'absolute',\r\n      background: 'none',\r\n\r\n      opacity: 0,\r\n      [`.${IsFocusVisibleClassName} &:focus + label::before`]: {\r\n        outline: '1px solid ' + theme.palette.neutralSecondary,\r\n        outlineOffset: '2px',\r\n        [HighContrastSelector]: {\r\n          outline: '1px solid ActiveBorder',\r\n        },\r\n      },\r\n    },\r\n    label: [\r\n      classNames.label,\r\n      theme.fonts.medium,\r\n      {\r\n        display: 'flex',\r\n        alignItems: isUsingCustomLabelRender ? 'center' : 'flex-start',\r\n        cursor: disabled ? 'default' : 'pointer',\r\n        position: 'relative',\r\n        userSelect: 'none',\r\n      },\r\n      reversed && {\r\n        flexDirection: 'row-reverse',\r\n        justifyContent: 'flex-end',\r\n      },\r\n      {\r\n        '&::before': {\r\n          position: 'absolute',\r\n          left: 0,\r\n          right: 0,\r\n          top: 0,\r\n          bottom: 0,\r\n          content: '\"\"',\r\n          pointerEvents: 'none',\r\n        },\r\n      },\r\n    ],\r\n    checkbox: [\r\n      classNames.checkbox,\r\n      {\r\n        position: 'relative',\r\n        display: 'flex',\r\n        flexShrink: 0,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: MS_CHECKBOX_LABEL_SIZE,\r\n        width: MS_CHECKBOX_LABEL_SIZE,\r\n        border: `1px solid ${checkboxBorderColor}`,\r\n        borderRadius: effects.roundedCorner2,\r\n        boxSizing: 'border-box',\r\n        transitionProperty: 'background, border, border-color',\r\n        transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\r\n        transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\r\n\r\n        /* in case the icon is bigger than the box */\r\n        overflow: 'hidden',\r\n        ':after': indeterminate ? indeterminateDotStyles : null,\r\n        [HighContrastSelector]: {\r\n          borderColor: 'WindowText',\r\n        },\r\n        ...getEdgeChromiumNoHighContrastAdjustSelector(),\r\n      },\r\n      indeterminate && {\r\n        borderColor: checkboxBorderIndeterminateColor,\r\n      },\r\n      !reversed\r\n        ? // This margin on the checkbox is for backwards compat. Notably it has the effect where a customRender\r\n          // is used, there will be only a 4px margin from checkbox to label. The label by default would have\r\n          // another 4px margin for a total of 8px margin between checkbox and label. We don't combine the two\r\n          // (and move it into the text) to not incur a breaking change for everyone using custom render atm.\r\n          {\r\n            marginRight: 4,\r\n          }\r\n        : {\r\n            marginLeft: 4,\r\n          },\r\n      !disabled &&\r\n        !indeterminate &&\r\n        checked && {\r\n          background: checkboxBackgroundChecked,\r\n          borderColor: checkboxBorderColorChecked,\r\n          [HighContrastSelector]: {\r\n            background: 'Highlight',\r\n            borderColor: 'Highlight',\r\n          },\r\n        },\r\n      disabled && {\r\n        borderColor: checkboxBorderColorDisabled,\r\n        [HighContrastSelector]: {\r\n          borderColor: 'GrayText',\r\n        },\r\n      },\r\n      checked &&\r\n        disabled && {\r\n          background: checkboxBackgroundDisabledChecked,\r\n          borderColor: checkboxBorderColorDisabled,\r\n          [HighContrastSelector]: {\r\n            background: 'Window',\r\n          },\r\n        },\r\n    ],\r\n    checkmark: [\r\n      classNames.checkmark,\r\n      {\r\n        opacity: checked ? '1' : '0',\r\n        color: checkmarkFontColor,\r\n        [HighContrastSelector]: {\r\n          color: disabled ? 'GrayText' : 'Window',\r\n          MsHighContrastAdjust: 'none',\r\n        },\r\n      },\r\n    ],\r\n    text: [\r\n      classNames.text,\r\n      {\r\n        color: disabled ? checkboxTextColorDisabled : checkboxTextColor,\r\n        fontSize: fonts.medium.fontSize,\r\n        lineHeight: '20px',\r\n        [HighContrastSelector]: {\r\n          color: disabled ? 'GrayText' : 'WindowText',\r\n        },\r\n        ...getEdgeChromiumNoHighContrastAdjustSelector(),\r\n      },\r\n      !reversed\r\n        ? {\r\n            marginLeft: 4,\r\n          }\r\n        : {\r\n            marginRight: 4,\r\n          },\r\n    ],\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}