{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { GlobalSettings, warn } from '@uifabric/utilities';\nimport { fontFace, mergeStyles, Stylesheet } from '@uifabric/merge-styles';\nvar ICON_SETTING_NAME = 'icons';\n\nvar _iconSettings = GlobalSettings.getValue(ICON_SETTING_NAME, {\n  __options: {\n    disableWarnings: false,\n    warnOnMissingIcons: true\n  },\n  __remapped: {}\n}); // Reset icon registration on stylesheet resets.\n\n\nvar stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(function () {\n    for (var name_1 in _iconSettings) {\n      if (_iconSettings.hasOwnProperty(name_1) && !!_iconSettings[name_1].subset) {\n        _iconSettings[name_1].subset.className = undefined;\n      }\n    }\n  });\n}\n/**\n * Normalizes an icon name for consistent mapping.\n * Current implementation is to convert the icon name to lower case.\n *\n * @param name - Icon name to normalize.\n * @returns {string} Normalized icon name to use for indexing and mapping.\n */\n\n\nvar normalizeIconName = function normalizeIconName(name) {\n  return name.toLowerCase();\n};\n/**\n * Registers a given subset of icons.\n *\n * @param iconSubset - the icon subset definition.\n */\n\n\nexport function registerIcons(iconSubset, options) {\n  var subset = __assign(__assign({}, iconSubset), {\n    isRegistered: false,\n    className: undefined\n  });\n\n  var icons = iconSubset.icons; // Grab options, optionally mix user provided ones on top.\n\n  options = options ? __assign(__assign({}, _iconSettings.__options), options) : _iconSettings.__options;\n\n  for (var iconName in icons) {\n    if (icons.hasOwnProperty(iconName)) {\n      var code = icons[iconName];\n      var normalizedIconName = normalizeIconName(iconName);\n\n      if (_iconSettings[normalizedIconName]) {\n        _warnDuplicateIcon(iconName);\n      } else {\n        _iconSettings[normalizedIconName] = {\n          code: code,\n          subset: subset\n        };\n      }\n    }\n  }\n}\n/**\n * Unregisters icons by name.\n *\n * @param iconNames - List of icons to unregister.\n */\n\nexport function unregisterIcons(iconNames) {\n  var options = _iconSettings.__options;\n\n  var _loop_1 = function _loop_1(iconName) {\n    var normalizedIconName = normalizeIconName(iconName);\n\n    if (_iconSettings[normalizedIconName]) {\n      delete _iconSettings[normalizedIconName];\n    } else {\n      // Warn that we are trying to delete an icon that doesn't exist\n      if (!options.disableWarnings) {\n        warn(\"The icon \\\"\" + iconName + \"\\\" tried to unregister but was not registered.\");\n      }\n    } // Delete any aliases for this iconName\n\n\n    if (_iconSettings.__remapped[normalizedIconName]) {\n      delete _iconSettings.__remapped[normalizedIconName];\n    } // Delete any items that were an alias for this iconName\n\n\n    Object.keys(_iconSettings.__remapped).forEach(function (key) {\n      if (_iconSettings.__remapped[key] === normalizedIconName) {\n        delete _iconSettings.__remapped[key];\n      }\n    });\n  };\n\n  for (var _i = 0, iconNames_1 = iconNames; _i < iconNames_1.length; _i++) {\n    var iconName = iconNames_1[_i];\n\n    _loop_1(iconName);\n  }\n}\n/**\n * Remaps one icon name to another.\n */\n\nexport function registerIconAlias(iconName, mappedToName) {\n  _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);\n}\n/**\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\n * it will get registered immediately.\n *\n * @public\n * @param name - Name of icon.\n */\n\nexport function getIcon(name) {\n  var icon = undefined;\n  var options = _iconSettings.__options;\n  name = name ? normalizeIconName(name) : '';\n  name = _iconSettings.__remapped[name] || name;\n\n  if (name) {\n    icon = _iconSettings[name];\n\n    if (icon) {\n      var subset = icon.subset;\n\n      if (subset && subset.fontFace) {\n        if (!subset.isRegistered) {\n          fontFace(subset.fontFace);\n          subset.isRegistered = true;\n        }\n\n        if (!subset.className) {\n          subset.className = mergeStyles(subset.style, {\n            fontFamily: subset.fontFace.fontFamily,\n            fontWeight: subset.fontFace.fontWeight || 'normal',\n            fontStyle: subset.fontFace.fontStyle || 'normal'\n          });\n        }\n      }\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!options.disableWarnings && options.warnOnMissingIcons) {\n        warn(\"The icon \\\"\" + name + \"\\\" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.\");\n      }\n    }\n  }\n\n  return icon;\n}\n/**\n * Sets the icon options.\n *\n * @public\n */\n\nexport function setIconOptions(options) {\n  _iconSettings.__options = __assign(__assign({}, _iconSettings.__options), options);\n}\nvar _missingIcons = [];\nvar _missingIconsTimer = undefined;\n\nfunction _warnDuplicateIcon(iconName) {\n  var options = _iconSettings.__options;\n  var warningDelay = 2000;\n  var maxIconsInMessage = 10;\n\n  if (!options.disableWarnings) {\n    _missingIcons.push(iconName);\n\n    if (_missingIconsTimer === undefined) {\n      _missingIconsTimer = setTimeout(function () {\n        warn(\"Some icons were re-registered. Applications should only call registerIcons for any given \" + \"icon once. Redefining what an icon is may have unintended consequences. Duplicates \" + \"include: \\n\" + _missingIcons.slice(0, maxIconsInMessage).join(', ') + (_missingIcons.length > maxIconsInMessage ? \" (+ \" + (_missingIcons.length - maxIconsInMessage) + \" more)\" : ''));\n        _missingIconsTimer = undefined;\n        _missingIcons = [];\n      }, warningDelay);\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["GlobalSettings","warn","fontFace","mergeStyles","Stylesheet","ICON_SETTING_NAME","_iconSettings","getValue","__options","disableWarnings","warnOnMissingIcons","__remapped","stylesheet","getInstance","onReset","name_1","hasOwnProperty","subset","className","undefined","normalizeIconName","name","toLowerCase","registerIcons","iconSubset","options","isRegistered","__assign","iconName","icons","code","normalizedIconName","_warnDuplicateIcon","unregisterIcons","iconNames","Object","keys","forEach","key","_i","registerIconAlias","mappedToName","getIcon","icon","style","fontFamily","fontWeight","fontStyle","setIconOptions","_missingIcons","_missingIconsTimer","warningDelay","maxIconsInMessage","push","setTimeout","slice","join","length"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\styling\\lib\\src\\utilities\\icons.ts"],"sourcesContent":["import { GlobalSettings, warn } from '@uifabric/utilities';\nimport { IRawStyle, IFontFace, fontFace, mergeStyles, Stylesheet } from '@uifabric/merge-styles';\n\nexport interface IIconSubset {\n  fontFace?: IFontFace;\n  icons: {\n    [key: string]: string | JSX.Element;\n  };\n\n  style?: IRawStyle;\n  /**\n   * Indicates to the icon renderer that it is safe to merge any props on the original `Icon` element\n   * onto the child content element registered for the icon which are valid for HTML images.\n   */\n  mergeImageProps?: boolean;\n}\n\nexport interface IIconSubsetRecord extends IIconSubset {\n  isRegistered?: boolean;\n  className?: string;\n}\n\nexport interface IIconRecord {\n  code: string | undefined;\n  subset: IIconSubsetRecord;\n}\n\nexport interface IIconOptions {\n  /**\n   * By default, registering the same set of icons will generate a console warning per duplicate icon\n   * registered, because this scenario can create unexpected consequences.\n   *\n   * Some scenarios include:\n   *\n   * Icon set was previously registered using a different base url.\n   * Icon set was previously registered but a different version was provided.\n   * Icons in a previous registered set overlap with a new set.\n   *\n   * To simply ignore previously registered icons, you can specify to disable warnings. This means\n   * that if an icon which was previous registered is registered again, it will be silently ignored.\n   * However, consider whether the problems listed above will cause issues.\n   **/\n  disableWarnings: boolean;\n\n  /**\n   * @deprecated\n   * Use 'disableWarnings' instead.\n   */\n  warnOnMissingIcons?: boolean;\n}\n\nexport interface IIconRecords {\n  __options: IIconOptions;\n  __remapped: { [key: string]: string };\n  [key: string]: IIconRecord | {};\n}\n\nconst ICON_SETTING_NAME = 'icons';\n\nconst _iconSettings = GlobalSettings.getValue<IIconRecords>(ICON_SETTING_NAME, {\n  __options: {\n    disableWarnings: false,\n    warnOnMissingIcons: true,\n  },\n  __remapped: {},\n});\n\n// Reset icon registration on stylesheet resets.\nconst stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(() => {\n    for (const name in _iconSettings) {\n      if (_iconSettings.hasOwnProperty(name) && !!(_iconSettings[name] as IIconRecord).subset) {\n        (_iconSettings[name] as IIconRecord).subset.className = undefined;\n      }\n    }\n  });\n}\n\n/**\n * Normalizes an icon name for consistent mapping.\n * Current implementation is to convert the icon name to lower case.\n *\n * @param name - Icon name to normalize.\n * @returns {string} Normalized icon name to use for indexing and mapping.\n */\nconst normalizeIconName = (name: string): string => name.toLowerCase();\n\n/**\n * Registers a given subset of icons.\n *\n * @param iconSubset - the icon subset definition.\n */\nexport function registerIcons(iconSubset: IIconSubset, options?: Partial<IIconOptions>): void {\n  let subset = {\n    ...iconSubset,\n    isRegistered: false,\n    className: undefined,\n  };\n  let { icons } = iconSubset;\n\n  // Grab options, optionally mix user provided ones on top.\n  options = options ? { ..._iconSettings.__options, ...options } : _iconSettings.__options;\n\n  for (const iconName in icons) {\n    if (icons.hasOwnProperty(iconName)) {\n      const code = icons[iconName];\n      const normalizedIconName = normalizeIconName(iconName);\n\n      if (_iconSettings[normalizedIconName]) {\n        _warnDuplicateIcon(iconName);\n      } else {\n        _iconSettings[normalizedIconName] = {\n          code,\n          subset,\n        } as IIconRecord;\n      }\n    }\n  }\n}\n\n/**\n * Unregisters icons by name.\n *\n * @param iconNames - List of icons to unregister.\n */\nexport function unregisterIcons(iconNames: string[]): void {\n  const options = _iconSettings.__options;\n\n  for (const iconName of iconNames) {\n    const normalizedIconName = normalizeIconName(iconName);\n    if (_iconSettings[normalizedIconName]) {\n      delete _iconSettings[normalizedIconName];\n    } else {\n      // Warn that we are trying to delete an icon that doesn't exist\n      if (!options.disableWarnings) {\n        warn(`The icon \"${iconName}\" tried to unregister but was not registered.`);\n      }\n    }\n\n    // Delete any aliases for this iconName\n    if (_iconSettings.__remapped[normalizedIconName]) {\n      delete _iconSettings.__remapped[normalizedIconName];\n    }\n\n    // Delete any items that were an alias for this iconName\n    Object.keys(_iconSettings.__remapped).forEach((key: string) => {\n      if (_iconSettings.__remapped[key] === normalizedIconName) {\n        delete _iconSettings.__remapped[key];\n      }\n    });\n  }\n}\n\n/**\n * Remaps one icon name to another.\n */\nexport function registerIconAlias(iconName: string, mappedToName: string): void {\n  _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);\n}\n\n/**\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\n * it will get registered immediately.\n *\n * @public\n * @param name - Name of icon.\n */\nexport function getIcon(name?: string): IIconRecord | undefined {\n  let icon: IIconRecord | undefined = undefined;\n  const options = _iconSettings.__options;\n\n  name = name ? normalizeIconName(name) : '';\n  name = _iconSettings.__remapped[name] || name;\n\n  if (name) {\n    icon = _iconSettings[name!] as IIconRecord;\n\n    if (icon) {\n      let { subset } = icon;\n      if (subset && subset.fontFace) {\n        if (!subset.isRegistered) {\n          fontFace(subset.fontFace);\n          subset.isRegistered = true;\n        }\n\n        if (!subset.className) {\n          subset.className = mergeStyles(subset.style, {\n            fontFamily: subset.fontFace.fontFamily,\n            fontWeight: subset.fontFace.fontWeight || 'normal',\n            fontStyle: subset.fontFace.fontStyle || 'normal',\n          });\n        }\n      }\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!options.disableWarnings && options.warnOnMissingIcons) {\n        warn(\n          `The icon \"${name}\" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.`,\n        );\n      }\n    }\n  }\n\n  return icon;\n}\n\n/**\n * Sets the icon options.\n *\n * @public\n */\nexport function setIconOptions(options: Partial<IIconOptions>): void {\n  _iconSettings.__options = {\n    ..._iconSettings.__options,\n    ...options,\n  };\n}\n\nlet _missingIcons: string[] = [];\nlet _missingIconsTimer: number | undefined = undefined;\n\nfunction _warnDuplicateIcon(iconName: string): void {\n  const options = _iconSettings.__options;\n  const warningDelay = 2000;\n  const maxIconsInMessage = 10;\n\n  if (!options.disableWarnings) {\n    _missingIcons.push(iconName);\n    if (_missingIconsTimer === undefined) {\n      _missingIconsTimer = setTimeout(() => {\n        warn(\n          `Some icons were re-registered. Applications should only call registerIcons for any given ` +\n            `icon once. Redefining what an icon is may have unintended consequences. Duplicates ` +\n            `include: \\n` +\n            _missingIcons.slice(0, maxIconsInMessage).join(', ') +\n            (_missingIcons.length > maxIconsInMessage ? ` (+ ${_missingIcons.length - maxIconsInMessage} more)` : ''),\n        );\n        _missingIconsTimer = undefined;\n        _missingIcons = [];\n      }, warningDelay);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}