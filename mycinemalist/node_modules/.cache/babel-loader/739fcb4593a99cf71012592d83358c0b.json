{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, shallowCompare, getNativeProps, divProperties } from '../../Utilities';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { classNamesFunction } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\nvar NO_COLUMNS = [];\n\nvar DetailsRowBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsRowBase, _super);\n\n  function DetailsRowBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._cellMeasurer = React.createRef();\n    _this._focusZone = React.createRef();\n\n    _this._onSelectionChanged = function () {\n      var selectionState = getSelectionState(_this.props);\n\n      if (!shallowCompare(selectionState, _this.state.selectionState)) {\n        _this.setState({\n          selectionState: selectionState\n        });\n      }\n    };\n    /**\n     * update isDropping state based on the input value, which is used to change style during drag and drop\n     *\n     * when change to true, that means drag enter. we will add default dropping class name\n     * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n     *\n     * when change to false, that means drag leave. we will remove the dropping class name from root element.\n     *\n     * @param newValue - New isDropping state value\n     * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n     */\n\n\n    _this._updateDroppingState = function (newValue, event) {\n      var isDropping = _this.state.isDropping;\n      var _a = _this.props,\n          dragDropEvents = _a.dragDropEvents,\n          item = _a.item;\n\n      if (!newValue) {\n        if (dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(item, event);\n        }\n      } else if (dragDropEvents.onDragEnter) {\n        _this._droppingClassNames = dragDropEvents.onDragEnter(item, event);\n      }\n\n      if (isDropping !== newValue) {\n        _this.setState({\n          isDropping: newValue\n        });\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false\n    };\n    _this._droppingClassNames = '';\n    return _this;\n  }\n\n  DetailsRowBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    return __assign(__assign({}, previousState), {\n      selectionState: getSelectionState(nextProps)\n    });\n  };\n\n  DetailsRowBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n        dragDropHelper = _a.dragDropHelper,\n        selection = _a.selection,\n        item = _a.item,\n        onDidMount = _a.onDidMount;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  };\n\n  DetailsRowBase.prototype.componentDidUpdate = function (previousProps) {\n    var state = this.state;\n    var _a = this.props,\n        item = _a.item,\n        onDidMount = _a.onDidMount;\n    var columnMeasureInfo = state.columnMeasureInfo;\n\n    if (this.props.itemIndex !== previousProps.itemIndex || this.props.item !== previousProps.item || this.props.dragDropHelper !== previousProps.dragDropHelper) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      var newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n      this.setState({\n        columnMeasureInfo: undefined\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  };\n\n  DetailsRowBase.prototype.componentWillUnmount = function () {\n    var _a = this.props,\n        item = _a.item,\n        onWillUnmount = _a.onWillUnmount; // Only call the onWillUnmount callback if we have an item.\n\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  };\n\n  DetailsRowBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    if (this.props.useReducedRowRenderer) {\n      var newSelectionState = getSelectionState(nextProps);\n\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  };\n\n  DetailsRowBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b,\n        dragDropEvents = _a.dragDropEvents,\n        item = _a.item,\n        itemIndex = _a.itemIndex,\n        _c = _a.onRenderCheck,\n        onRenderCheck = _c === void 0 ? this._onRenderCheck : _c,\n        onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox,\n        onRenderItemColumn = _a.onRenderItemColumn,\n        getCellValueKey = _a.getCellValueKey,\n        selectionMode = _a.selectionMode,\n        _d = _a.rowWidth,\n        rowWidth = _d === void 0 ? 0 : _d,\n        checkboxVisibility = _a.checkboxVisibility,\n        getRowAriaLabel = _a.getRowAriaLabel,\n        getRowAriaDescribedBy = _a.getRowAriaDescribedBy,\n        checkButtonAriaLabel = _a.checkButtonAriaLabel,\n        checkboxCellClassName = _a.checkboxCellClassName,\n\n    /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n    _e = _a.rowFieldsAs,\n\n    /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n    RowFields = _e === void 0 ? DetailsRowFields : _e,\n        selection = _a.selection,\n        indentWidth = _a.indentWidth,\n        enableUpdateAnimations = _a.enableUpdateAnimations,\n        compact = _a.compact,\n        theme = _a.theme,\n        styles = _a.styles,\n        cellsByColumn = _a.cellsByColumn,\n        groupNestingDepth = _a.groupNestingDepth,\n        _f = _a.useFastIcons,\n        useFastIcons = _f === void 0 ? true : _f,\n        cellStyleProps = _a.cellStyleProps;\n    var _g = this.state,\n        columnMeasureInfo = _g.columnMeasureInfo,\n        isDropping = _g.isDropping;\n    var _h = this.state.selectionState,\n        _j = _h.isSelected,\n        isSelected = _j === void 0 ? false : _j,\n        _k = _h.isSelectionModal,\n        isSelectionModal = _k === void 0 ? false : _k;\n    var isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    var droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    var ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    var ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    var canSelect = !!selection && selection.canSelectItem(item, itemIndex);\n    var isContentUnselectable = selectionMode === SelectionMode.multiple;\n    var showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    var ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n    this._classNames = __assign(__assign({}, this._classNames), getClassNames(styles, {\n      theme: theme,\n      isSelected: isSelected,\n      canSelect: !isContentUnselectable,\n      anySelected: isSelectionModal,\n      checkboxCellClassName: checkboxCellClassName,\n      droppingClassName: droppingClassName,\n      className: className,\n      compact: compact,\n      enableUpdateAnimations: enableUpdateAnimations,\n      cellStyleProps: cellStyleProps\n    }));\n    var rowClassNames = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields\n    }; // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    var rowFields = React.createElement(RowFields, {\n      rowClassNames: this._rowClassNames,\n      cellsByColumn: cellsByColumn,\n      columns: columns,\n      item: item,\n      itemIndex: itemIndex,\n      columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0),\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey,\n      enableUpdateAnimations: enableUpdateAnimations,\n      cellStyleProps: cellStyleProps\n    });\n    return React.createElement(FocusZone, __assign({\n      \"data-is-focusable\": true\n    }, getNativeProps(this.props, divProperties), typeof isDraggable === 'boolean' ? {\n      'data-is-draggable': isDraggable,\n      draggable: isDraggable\n    } : {}, {\n      direction: FocusZoneDirection.horizontal,\n      elementRef: this._root,\n      componentRef: this._focusZone,\n      role: \"row\",\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescribedBy,\n      className: this._classNames.root,\n      \"data-selection-index\": itemIndex,\n      \"data-selection-touch-invoke\": true,\n      \"data-item-index\": itemIndex,\n      \"aria-rowindex\": itemIndex + 1,\n      \"aria-level\": groupNestingDepth && groupNestingDepth + 1 || undefined,\n      \"data-automationid\": \"DetailsRow\",\n      style: {\n        minWidth: rowWidth\n      },\n      \"aria-selected\": ariaSelected,\n      allowFocusRoot: true\n    }), showCheckbox && React.createElement(\"div\", {\n      role: \"gridcell\",\n      \"aria-colindex\": 1,\n      \"data-selection-toggle\": true,\n      className: this._classNames.checkCell\n    }, onRenderCheck({\n      selected: isSelected,\n      anySelected: isSelectionModal,\n      'aria-label': checkButtonAriaLabel,\n      canSelect: canSelect,\n      compact: compact,\n      className: this._classNames.check,\n      theme: theme,\n      isVisible: checkboxVisibility === CheckboxVisibility.always,\n      onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n      useFastIcons: useFastIcons\n    })), React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      role: \"gridcell\",\n      count: groupNestingDepth - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)\n    }), item && rowFields, columnMeasureInfo && React.createElement(\"span\", {\n      role: \"presentation\",\n      className: css(this._classNames.cellMeasurer, this._classNames.cell),\n      ref: this._cellMeasurer\n    }, React.createElement(RowFields, {\n      rowClassNames: this._rowClassNames,\n      columns: [columnMeasureInfo.column],\n      item: item,\n      itemIndex: itemIndex,\n      columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length,\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey\n    })), React.createElement(\"span\", {\n      role: \"checkbox\",\n      className: this._classNames.checkCover,\n      \"aria-checked\": isSelected,\n      \"data-selection-toggle\": true\n    }));\n  };\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n\n\n  DetailsRowBase.prototype.measureCell = function (index, onMeasureDone) {\n    var _a = this.props.columns,\n        columns = _a === void 0 ? NO_COLUMNS : _a;\n\n    var column = __assign({}, columns[index]);\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n    delete column.calculatedWidth;\n    this.setState({\n      columnMeasureInfo: {\n        index: index,\n        column: column,\n        onMeasureDone: onMeasureDone\n      }\n    });\n  };\n\n  DetailsRowBase.prototype.focus = function (forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    var _a;\n\n    return !!((_a = this._focusZone.current) === null || _a === void 0 ? void 0 : _a.focus(forceIntoFirstElement));\n  };\n\n  DetailsRowBase.prototype._onRenderCheck = function (props) {\n    return React.createElement(DetailsRowCheck, __assign({}, props));\n  };\n\n  DetailsRowBase.prototype._getRowDragDropOptions = function () {\n    var _a = this.props,\n        item = _a.item,\n        itemIndex = _a.itemIndex,\n        dragDropEvents = _a.dragDropEvents,\n        eventsToRegister = _a.eventsToRegister;\n    var options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: {\n        data: item,\n        index: itemIndex\n      },\n      canDrag: dragDropEvents.canDrag,\n      canDrop: dragDropEvents.canDrop,\n      onDragStart: dragDropEvents.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents.onDrop,\n      onDragEnd: dragDropEvents.onDragEnd,\n      onDragOver: dragDropEvents.onDragOver\n    };\n    return options;\n  };\n\n  return DetailsRowBase;\n}(React.Component);\n\nexport { DetailsRowBase };\n\nfunction getSelectionState(props) {\n  var _a, _b, _c, _d;\n\n  var itemIndex = props.itemIndex,\n      selection = props.selection;\n  return {\n    isSelected: !!((_a = selection) === null || _a === void 0 ? void 0 : _a.isIndexSelected(itemIndex)),\n    isSelectionModal: !!((_d = (_b = selection) === null || _b === void 0 ? void 0 : (_c = _b).isModal) === null || _d === void 0 ? void 0 : _d.call(_c))\n  };\n}","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","EventGroup","css","shallowCompare","getNativeProps","divProperties","CheckboxVisibility","DetailsRowCheck","GroupSpacer","DetailsRowFields","FocusZone","FocusZoneDirection","SelectionMode","SELECTION_CHANGE","CollapseAllVisibility","classNamesFunction","getClassNames","DEFAULT_DROPPING_CSS_CLASS","NO_COLUMNS","__extends","props","_super","_this","createRef","selectionState","getSelectionState","state","setState","newValue","event","dragDropEvents","item","onDragLeave","onDragEnter","_droppingClassNames","isDropping","_events","columnMeasureInfo","undefined","DetailsRowBase","nextProps","previousState","dragDropHelper","selection","onDidMount","_root","current","_dragDropSubscription","subscribe","_getRowDragDropOptions","on","_onSelectionChanged","_onDidMountCalled","previousProps","itemIndex","dispose","index","_cellMeasurer","newWidth","getBoundingClientRect","width","onMeasureDone","onWillUnmount","nextState","useReducedRowRenderer","newSelectionState","isSelected","className","_b","columns","_c","onRenderCheck","onRenderDetailsCheckbox","onRenderItemColumn","getCellValueKey","selectionMode","_d","rowWidth","checkboxVisibility","getRowAriaLabel","getRowAriaDescribedBy","checkButtonAriaLabel","checkboxCellClassName","_e","RowFields","indentWidth","enableUpdateAnimations","compact","theme","styles","cellsByColumn","groupNestingDepth","_f","useFastIcons","cellStyleProps","_j","_k","isSelectionModal","isDraggable","canDrag","droppingClassName","ariaLabel","ariaDescribedBy","canSelect","canSelectItem","isContentUnselectable","multiple","showCheckbox","none","hidden","ariaSelected","_classNames","__assign","anySelected","rowClassNames","isMultiline","isRowHeader","cell","cellAnimation","cellPadded","cellUnpadded","fields","_rowClassNames","rowFields","columnStartIndex","draggable","direction","horizontal","elementRef","componentRef","_focusZone","role","root","style","minWidth","allowFocusRoot","checkCell","selected","check","isVisible","always","count","collapseAllVisibility","cellMeasurer","ref","column","length","checkCover","maxWidth","calculatedWidth","forceIntoFirstElement","_a","focus","eventsToRegister","options","eventMap","selectionIndex","context","data","canDrop","onDragStart","updateDropState","_updateDroppingState","onDrop","onDragEnd","onDragOver","Component","isIndexSelected","isModal"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\DetailsList\\DetailsRow.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  IDisposable,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties,\n} from '../../Utilities';\nimport { IColumn, CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection, IFocusZone } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { IDetailsRowBaseProps } from './DetailsRow.types';\nimport { IDetailsRowCheckProps } from './DetailsRowCheck.types';\nimport { IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport { classNamesFunction } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { IProcessedStyleSet } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  isSelectionModal: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLElement>();\n  private _cellMeasurer = React.createRef<HTMLSpanElement>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _droppingClassNames: string;\n  /** Whether this.props.onDidMount has been called */\n  private _onDidMountCalled: boolean;\n  private _dragDropSubscription: IDisposable;\n\n  private _classNames: IProcessedStyleSet<IDetailsRowStyles>;\n  private _rowClassNames: IDetailsRowFieldsProps['rowClassNames'];\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsRowBaseProps,\n    previousState: IDetailsRowState,\n  ): IDetailsRowState {\n    return {\n      ...previousState,\n      selectionState: getSelectionState(nextProps),\n    };\n  }\n\n  constructor(props: IDetailsRowBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n    };\n\n    this._droppingClassNames = '';\n  }\n  public componentDidMount(): void {\n    const { dragDropHelper, selection, item, onDidMount } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getRowDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowBaseProps) {\n    const state = this.state;\n    const { item, onDidMount } = this.props;\n    const { columnMeasureInfo } = state;\n\n    if (\n      this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getRowDragDropOptions(),\n        );\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      const newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined,\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  }\n\n  public shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean {\n    if (this.props.useReducedRowRenderer) {\n      const newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      columns = NO_COLUMNS,\n      dragDropEvents,\n      item,\n      itemIndex,\n      onRenderCheck = this._onRenderCheck,\n      onRenderDetailsCheckbox,\n      onRenderItemColumn,\n      getCellValueKey,\n      selectionMode,\n      rowWidth = 0,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs: RowFields = DetailsRowFields,\n      selection,\n      indentWidth,\n      enableUpdateAnimations,\n      compact,\n      theme,\n      styles,\n      cellsByColumn,\n      groupNestingDepth,\n      useFastIcons = true,\n      cellStyleProps,\n    } = this.props;\n    const { columnMeasureInfo, isDropping } = this.state;\n    const { isSelected = false, isSelectionModal = false } = this.state.selectionState;\n    const isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    const droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    const ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    const canSelect = !!selection && selection.canSelectItem(item, itemIndex);\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    const ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n\n    this._classNames = {\n      ...this._classNames,\n      ...getClassNames(styles, {\n        theme: theme!,\n        isSelected,\n        canSelect: !isContentUnselectable,\n        anySelected: isSelectionModal,\n        checkboxCellClassName,\n        droppingClassName,\n        className,\n        compact,\n        enableUpdateAnimations,\n        cellStyleProps,\n      }),\n    };\n\n    const rowClassNames: IDetailsRowFieldsProps['rowClassNames'] = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields,\n    };\n\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    const rowFields = (\n      <RowFields\n        rowClassNames={this._rowClassNames}\n        cellsByColumn={cellsByColumn}\n        columns={columns}\n        item={item}\n        itemIndex={itemIndex}\n        columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0)}\n        onRenderItemColumn={onRenderItemColumn}\n        getCellValueKey={getCellValueKey}\n        enableUpdateAnimations={enableUpdateAnimations}\n        cellStyleProps={cellStyleProps}\n      />\n    );\n\n    return (\n      <FocusZone\n        data-is-focusable={true}\n        {...getNativeProps(this.props, divProperties)}\n        {...(typeof isDraggable === 'boolean'\n          ? {\n              'data-is-draggable': isDraggable, // This data attribute is used by some host applications.\n              draggable: isDraggable,\n            }\n          : {})}\n        direction={FocusZoneDirection.horizontal}\n        elementRef={this._root}\n        componentRef={this._focusZone}\n        role=\"row\"\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedBy}\n        className={this._classNames.root}\n        data-selection-index={itemIndex}\n        data-selection-touch-invoke={true}\n        data-item-index={itemIndex}\n        aria-rowindex={itemIndex + 1}\n        aria-level={(groupNestingDepth && groupNestingDepth + 1) || undefined}\n        data-automationid=\"DetailsRow\"\n        style={{ minWidth: rowWidth }}\n        aria-selected={ariaSelected}\n        allowFocusRoot={true}\n      >\n        {showCheckbox && (\n          <div role=\"gridcell\" aria-colindex={1} data-selection-toggle={true} className={this._classNames.checkCell}>\n            {onRenderCheck({\n              selected: isSelected,\n              anySelected: isSelectionModal,\n              'aria-label': checkButtonAriaLabel,\n              canSelect,\n              compact,\n              className: this._classNames.check,\n              theme,\n              isVisible: checkboxVisibility === CheckboxVisibility.always,\n              onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n              useFastIcons,\n            })}\n          </div>\n        )}\n\n        <GroupSpacer\n          indentWidth={indentWidth}\n          role=\"gridcell\"\n          count={groupNestingDepth! - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)}\n        />\n\n        {item && rowFields}\n        {columnMeasureInfo && (\n          <span\n            role=\"presentation\"\n            className={css(this._classNames.cellMeasurer, this._classNames.cell)}\n            ref={this._cellMeasurer}\n          >\n            <RowFields\n              rowClassNames={this._rowClassNames}\n              columns={[columnMeasureInfo.column]}\n              item={item}\n              itemIndex={itemIndex}\n              columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length}\n              onRenderItemColumn={onRenderItemColumn}\n              getCellValueKey={getCellValueKey}\n            />\n          </span>\n        )}\n\n        <span\n          role=\"checkbox\"\n          className={this._classNames.checkCover}\n          aria-checked={isSelected}\n          data-selection-toggle={true}\n        />\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void): void {\n    const { columns = NO_COLUMNS } = this.props;\n    const column: IColumn = { ...columns[index] };\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone,\n      },\n    });\n  }\n\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    return !!this._focusZone.current?.focus(forceIntoFirstElement);\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck {...props} />;\n  }\n\n  private _onSelectionChanged = (): void => {\n    const selectionState = getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({\n        selectionState: selectionState,\n      });\n    }\n  };\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @param newValue - New isDropping state value\n   * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave(item, event);\n      }\n    } else if (dragDropEvents!.onDragEnter) {\n      this._droppingClassNames = dragDropEvents!.onDragEnter(item, event);\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ isDropping: newValue });\n    }\n  };\n}\n\nfunction getSelectionState(props: IDetailsRowBaseProps): IDetailsRowSelectionState {\n  const { itemIndex, selection } = props;\n\n  return {\n    isSelected: !!selection?.isIndexSelected(itemIndex),\n    isSelectionModal: !!selection?.isModal?.(),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}