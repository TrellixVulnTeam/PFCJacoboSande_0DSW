{"ast":null,"code":"import { getGlobalClassNames, getInputFocusStyle, hiddenContentStyle, HighContrastSelector } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-BasePicker',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input'\n};\nexport function getStyles(props) {\n  var _a;\n\n  var className = props.className,\n      theme = props.theme,\n      isFocused = props.isFocused,\n      inputClassName = props.inputClassName,\n      disabled = props.disabled;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n\n  var semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      fonts = theme.fonts;\n  var inputBorder = semanticColors.inputBorder,\n      inputBorderHovered = semanticColors.inputBorderHovered,\n      inputFocusBorderAlt = semanticColors.inputFocusBorderAlt;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme); // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n\n  var disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n  return {\n    root: [classNames.root, className],\n    text: [classNames.text, {\n      display: 'flex',\n      position: 'relative',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      boxSizing: 'border-box',\n      minWidth: 180,\n      minHeight: 30,\n      border: \"1px solid \" + inputBorder,\n      borderRadius: effects.roundedCorner2\n    }, !isFocused && !disabled && {\n      selectors: {\n        ':hover': {\n          borderColor: inputBorderHovered\n        }\n      }\n    }, isFocused && !disabled && getInputFocusStyle(inputFocusBorderAlt, effects.roundedCorner2), disabled && {\n      borderColor: disabledOverlayColor,\n      selectors: (_a = {\n        ':after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n          background: disabledOverlayColor\n        }\n      }, _a[HighContrastSelector] = {\n        borderColor: 'GrayText',\n        selectors: {\n          ':after': {\n            background: 'none'\n          }\n        }\n      }, _a)\n    }],\n    itemsWrapper: [classNames.itemsWrapper, {\n      display: 'flex',\n      flexWrap: 'wrap',\n      maxWidth: '100%'\n    }],\n    input: [classNames.input, fonts.medium, {\n      height: 30,\n      border: 'none',\n      flexGrow: 1,\n      outline: 'none',\n      padding: '0 6px 0',\n      alignSelf: 'flex-end',\n      borderRadius: effects.roundedCorner2,\n      backgroundColor: 'transparent',\n      color: semanticColors.inputText,\n      selectors: {\n        '::-ms-clear': {\n          display: 'none'\n        }\n      }\n    }, inputClassName],\n    screenReaderText: hiddenContentStyle\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,mBAAT,EAA8BC,kBAA9B,EAAkDC,kBAAlD,EAAsEC,oBAAtE,QAAkG,eAAlG;AAGA,IAAMC,gBAAgB,GAAG;EACvBC,IAAI,EAAE,eADiB;EAEvBC,IAAI,EAAE,oBAFiB;EAGvBC,YAAY,EAAE,4BAHS;EAIvBC,KAAK,EAAE;AAJgB,CAAzB;AAOA,OAAM,SAAUC,SAAV,CAAoBC,KAApB,EAAgD;;;EAC5C;EAAA,IAAWC,mBAAX;EAAA,IAAkBC,2BAAlB;EAAA,IAA6BC,qCAA7B;EAAA,IAA6CC,yBAA7C;;EAER,IAAI,CAACH,KAAL,EAAY;IACV,MAAM,IAAII,KAAJ,CAAU,mEAAV,CAAN;EACD;;EACO;EAAA,IAAgBC,uBAAhB;EAAA,IAAyBC,mBAAzB;EACA;EAAA,IAAaC,sDAAb;EAAA,IAAiCC,wDAAjC;EAER,IAAMC,UAAU,GAAGpB,mBAAmB,CAACI,gBAAD,EAAmBO,KAAnB,CAAtC,CAToD,CAWpD;EACA;EACA;EACA;EACA;;EACA,IAAMU,oBAAoB,GAAG,2BAA7B;EAEA,OAAO;IACLhB,IAAI,EAAE,CAACe,UAAU,CAACf,IAAZ,EAAkBiB,SAAlB,CADD;IAELhB,IAAI,EAAE,CACJc,UAAU,CAACd,IADP,EAEJ;MACEiB,OAAO,EAAE,MADX;MAEEC,QAAQ,EAAE,UAFZ;MAGEC,QAAQ,EAAE,MAHZ;MAIEC,UAAU,EAAE,QAJd;MAKEC,SAAS,EAAE,YALb;MAMEC,QAAQ,EAAE,GANZ;MAOEC,SAAS,EAAE,EAPb;MAQEC,MAAM,EAAE,eAAaC,WARvB;MASEC,YAAY,EAAEhB,OAAO,CAACiB;IATxB,CAFI,EAaJ,CAACrB,SAAD,IACE,CAACE,QADH,IACe;MACXoB,SAAS,EAAE;QACT,UAAU;UACRC,WAAW,EAAEjB;QADL;MADD;IADA,CAdX,EAqBJN,SAAS,IAAI,CAACE,QAAd,IAA0Bb,kBAAkB,CAACkB,mBAAD,EAAsBH,OAAO,CAACiB,cAA9B,CArBxC,EAsBJnB,QAAQ,IAAI;MACVqB,WAAW,EAAEd,oBADH;MAEVa,SAAS;QACP,UAAU;UACRE,OAAO,EAAE,IADD;UAERZ,QAAQ,EAAE,UAFF;UAGRa,GAAG,EAAE,CAHG;UAIRC,KAAK,EAAE,CAJC;UAKRC,MAAM,EAAE,CALA;UAMRC,IAAI,EAAE,CANE;UAORC,UAAU,EAAEpB;QAPJ;MADH,GAUPqB,GAACvC,oBAAD,IAAwB;QACtBgC,WAAW,EAAE,UADS;QAEtBD,SAAS,EAAE;UACT,UAAU;YACRO,UAAU,EAAE;UADJ;QADD;MAFW,CAVjB;IAFC,CAtBR,CAFD;IA+CLlC,YAAY,EAAE,CACZa,UAAU,CAACb,YADC,EAEZ;MACEgB,OAAO,EAAE,MADX;MAEEE,QAAQ,EAAE,MAFZ;MAGEkB,QAAQ,EAAE;IAHZ,CAFY,CA/CT;IAuDLnC,KAAK,EAAE,CACLY,UAAU,CAACZ,KADN,EAELS,KAAK,CAAC2B,MAFD,EAGL;MACEC,MAAM,EAAE,EADV;MAEEf,MAAM,EAAE,MAFV;MAGEgB,QAAQ,EAAE,CAHZ;MAIEC,OAAO,EAAE,MAJX;MAKEC,OAAO,EAAE,SALX;MAMEC,SAAS,EAAE,UANb;MAOEjB,YAAY,EAAEhB,OAAO,CAACiB,cAPxB;MAQEiB,eAAe,EAAE,aARnB;MASEC,KAAK,EAAEC,cAAc,CAACC,SATxB;MAUEnB,SAAS,EAAE;QACT,eAAe;UACbX,OAAO,EAAE;QADI;MADN;IAVb,CAHK,EAmBLV,cAnBK,CAvDF;IA4ELyC,gBAAgB,EAAEpD;EA5Eb,CAAP;AA8ED","names":["getGlobalClassNames","getInputFocusStyle","hiddenContentStyle","HighContrastSelector","GlobalClassNames","root","text","itemsWrapper","input","getStyles","props","theme","isFocused","inputClassName","disabled","Error","effects","fonts","inputBorderHovered","inputFocusBorderAlt","classNames","disabledOverlayColor","className","display","position","flexWrap","alignItems","boxSizing","minWidth","minHeight","border","inputBorder","borderRadius","roundedCorner2","selectors","borderColor","content","top","right","bottom","left","background","_a","maxWidth","medium","height","flexGrow","outline","padding","alignSelf","backgroundColor","color","semanticColors","inputText","screenReaderText"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\pickers\\BasePicker.styles.ts"],"sourcesContent":["import { getGlobalClassNames, getInputFocusStyle, hiddenContentStyle, HighContrastSelector } from '../../Styling';\nimport { IBasePickerStyleProps, IBasePickerStyles } from './BasePicker.types';\n\nconst GlobalClassNames = {\n  root: 'ms-BasePicker',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input',\n};\n\nexport function getStyles(props: IBasePickerStyleProps): IBasePickerStyles {\n  const { className, theme, isFocused, inputClassName, disabled } = props;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n  const { semanticColors, effects, fonts } = theme;\n  const { inputBorder, inputBorderHovered, inputFocusBorderAlt } = semanticColors;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n  const disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n\n  return {\n    root: [classNames.root, className],\n    text: [\n      classNames.text,\n      {\n        display: 'flex',\n        position: 'relative',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        boxSizing: 'border-box',\n        minWidth: 180,\n        minHeight: 30,\n        border: `1px solid ${inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n      },\n      !isFocused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: inputBorderHovered,\n            },\n          },\n        },\n      isFocused && !disabled && getInputFocusStyle(inputFocusBorderAlt, effects.roundedCorner2),\n      disabled && {\n        borderColor: disabledOverlayColor,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            background: disabledOverlayColor,\n          },\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n            selectors: {\n              ':after': {\n                background: 'none',\n              },\n            },\n          },\n        },\n      },\n    ],\n    itemsWrapper: [\n      classNames.itemsWrapper,\n      {\n        display: 'flex',\n        flexWrap: 'wrap',\n        maxWidth: '100%',\n      },\n    ],\n    input: [\n      classNames.input,\n      fonts.medium,\n      {\n        height: 30,\n        border: 'none',\n        flexGrow: 1,\n        outline: 'none',\n        padding: '0 6px 0',\n        alignSelf: 'flex-end',\n        borderRadius: effects.roundedCorner2,\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        selectors: {\n          '::-ms-clear': {\n            display: 'none',\n          },\n        },\n      },\n      inputClassName,\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}