{"ast":null,"code":"import { Shade } from '../../utilities/color/shades';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { mapEnumByName } from '../../Utilities';\n/* This is the set of rules for our default theme.\n   We start with three base slots, defining the background, foreground (text), and\n   primary color (sometimes called theme color). Each Fabric slot is generated from\n   shades (or tints) of one of those three, creating the Fabric palette.\n   Then, we have semantic slots, the new thing intended to eventually replace the\n   Fabric palette. The semantic slots inherit from the Fabric palette. */\n\n/* The most minimal set of slots we start with. All other ones can be generated based on rules.\n * This is not so much an enum as it is a list. The enum is used to insure \"type\"-safety.\n * For now, we are only dealing with color. */\n\nexport var BaseSlots;\n\n(function (BaseSlots) {\n  BaseSlots[BaseSlots[\"primaryColor\"] = 0] = \"primaryColor\";\n  BaseSlots[BaseSlots[\"backgroundColor\"] = 1] = \"backgroundColor\";\n  BaseSlots[BaseSlots[\"foregroundColor\"] = 2] = \"foregroundColor\";\n})(BaseSlots || (BaseSlots = {}));\n/* The original Fabric palette, only for back-compat. */\n\n\nexport var FabricSlots;\n\n(function (FabricSlots) {\n  FabricSlots[FabricSlots[\"themePrimary\"] = 0] = \"themePrimary\";\n  FabricSlots[FabricSlots[\"themeLighterAlt\"] = 1] = \"themeLighterAlt\";\n  FabricSlots[FabricSlots[\"themeLighter\"] = 2] = \"themeLighter\";\n  FabricSlots[FabricSlots[\"themeLight\"] = 3] = \"themeLight\";\n  FabricSlots[FabricSlots[\"themeTertiary\"] = 4] = \"themeTertiary\";\n  FabricSlots[FabricSlots[\"themeSecondary\"] = 5] = \"themeSecondary\";\n  FabricSlots[FabricSlots[\"themeDarkAlt\"] = 6] = \"themeDarkAlt\";\n  FabricSlots[FabricSlots[\"themeDark\"] = 7] = \"themeDark\";\n  FabricSlots[FabricSlots[\"themeDarker\"] = 8] = \"themeDarker\";\n  FabricSlots[FabricSlots[\"neutralLighterAlt\"] = 9] = \"neutralLighterAlt\";\n  FabricSlots[FabricSlots[\"neutralLighter\"] = 10] = \"neutralLighter\";\n  FabricSlots[FabricSlots[\"neutralLight\"] = 11] = \"neutralLight\";\n  FabricSlots[FabricSlots[\"neutralQuaternaryAlt\"] = 12] = \"neutralQuaternaryAlt\";\n  FabricSlots[FabricSlots[\"neutralQuaternary\"] = 13] = \"neutralQuaternary\";\n  FabricSlots[FabricSlots[\"neutralTertiaryAlt\"] = 14] = \"neutralTertiaryAlt\";\n  FabricSlots[FabricSlots[\"neutralTertiary\"] = 15] = \"neutralTertiary\"; // deprecated: neutralSecondaryAlt, // BaseSlots.foregroundColor, Shade[Shade.Shade4]);\n\n  FabricSlots[FabricSlots[\"neutralSecondary\"] = 16] = \"neutralSecondary\";\n  FabricSlots[FabricSlots[\"neutralPrimaryAlt\"] = 17] = \"neutralPrimaryAlt\";\n  FabricSlots[FabricSlots[\"neutralPrimary\"] = 18] = \"neutralPrimary\";\n  FabricSlots[FabricSlots[\"neutralDark\"] = 19] = \"neutralDark\";\n  FabricSlots[FabricSlots[\"black\"] = 20] = \"black\";\n  FabricSlots[FabricSlots[\"white\"] = 21] = \"white\";\n})(FabricSlots || (FabricSlots = {}));\n/* List of all the semantic color slots for this theme.\n * This is not so much an enum as it is a list. The enum is used to insure \"type\"-safety. */\n\n\nexport var SemanticColorSlots;\n\n(function (SemanticColorSlots) {\n  SemanticColorSlots[SemanticColorSlots[\"bodyBackground\"] = 0] = \"bodyBackground\";\n  SemanticColorSlots[SemanticColorSlots[\"bodyText\"] = 1] = \"bodyText\";\n  SemanticColorSlots[SemanticColorSlots[\"disabledBackground\"] = 2] = \"disabledBackground\";\n  SemanticColorSlots[SemanticColorSlots[\"disabledText\"] = 3] = \"disabledText\";\n})(SemanticColorSlots || (SemanticColorSlots = {}));\n\nexport function themeRulesStandardCreator() {\n  var slotRules = {};\n  /*** BASE COLORS and their SHADES */\n  // iterate through each base slot and make the SlotRules for those\n\n  mapEnumByName(BaseSlots, function (baseSlot) {\n    // first make the SlotRule for the unshaded base Color\n    slotRules[baseSlot] = {\n      name: baseSlot,\n      isCustomized: true,\n      dependentRules: []\n    }; // then make a rule for each shade of this base color, but skip unshaded\n\n    mapEnumByName(Shade, function (shadeName, shadeValue) {\n      if (shadeName === Shade[Shade.Unshaded]) {\n        return;\n      }\n\n      var inherits = slotRules[baseSlot];\n      var thisSlotRule = {\n        name: baseSlot + shadeName,\n        inherits: slotRules[baseSlot],\n        asShade: shadeValue,\n        isCustomized: false,\n        isBackgroundShade: baseSlot === BaseSlots[BaseSlots.backgroundColor] ? true : false,\n        dependentRules: []\n      };\n      slotRules[baseSlot + shadeName] = thisSlotRule;\n      inherits.dependentRules.push(thisSlotRule);\n      return undefined;\n    });\n    return undefined;\n  }); // set default colors for the base colors\n\n  slotRules[BaseSlots[BaseSlots.primaryColor]].color = getColorFromString('#0078d4');\n  slotRules[BaseSlots[BaseSlots.backgroundColor]].color = getColorFromString('#ffffff');\n  slotRules[BaseSlots[BaseSlots.foregroundColor]].color = getColorFromString('#323130');\n\n  function _makeFabricSlotRule(slotName, inheritedBase, inheritedShade, isBackgroundShade) {\n    if (isBackgroundShade === void 0) {\n      isBackgroundShade = false;\n    }\n\n    var inherits = slotRules[BaseSlots[inheritedBase]];\n    var thisSlotRule = {\n      name: slotName,\n      inherits: inherits,\n      asShade: inheritedShade,\n      isCustomized: false,\n      isBackgroundShade: isBackgroundShade,\n      dependentRules: []\n    };\n    slotRules[slotName] = thisSlotRule;\n    inherits.dependentRules.push(thisSlotRule);\n  }\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themePrimary], BaseSlots.primaryColor, Shade.Unshaded);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLighterAlt], BaseSlots.primaryColor, Shade.Shade1);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLighter], BaseSlots.primaryColor, Shade.Shade2);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLight], BaseSlots.primaryColor, Shade.Shade3);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeTertiary], BaseSlots.primaryColor, Shade.Shade4);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeSecondary], BaseSlots.primaryColor, Shade.Shade5);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDarkAlt], BaseSlots.primaryColor, Shade.Shade6);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDark], BaseSlots.primaryColor, Shade.Shade7);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDarker], BaseSlots.primaryColor, Shade.Shade8);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLighterAlt], BaseSlots.backgroundColor, Shade.Shade1, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLighter], BaseSlots.backgroundColor, Shade.Shade2, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLight], BaseSlots.backgroundColor, Shade.Shade3, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralQuaternaryAlt], BaseSlots.backgroundColor, Shade.Shade4, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralQuaternary], BaseSlots.backgroundColor, Shade.Shade5, true); // bg6 or fg2\n\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralTertiaryAlt], BaseSlots.backgroundColor, Shade.Shade6, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralTertiary], BaseSlots.foregroundColor, Shade.Shade3);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralSecondary], BaseSlots.foregroundColor, Shade.Shade4);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralPrimaryAlt], BaseSlots.foregroundColor, Shade.Shade5);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralPrimary], BaseSlots.foregroundColor, Shade.Unshaded);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralDark], BaseSlots.foregroundColor, Shade.Shade7);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.black], BaseSlots.foregroundColor, Shade.Shade8);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.white], BaseSlots.backgroundColor, Shade.Unshaded, true);\n\n  slotRules[FabricSlots[FabricSlots.neutralLighterAlt]].color = getColorFromString('#faf9f8');\n  slotRules[FabricSlots[FabricSlots.neutralLighter]].color = getColorFromString('#f3f2f1');\n  slotRules[FabricSlots[FabricSlots.neutralLight]].color = getColorFromString('#edebe9');\n  slotRules[FabricSlots[FabricSlots.neutralQuaternaryAlt]].color = getColorFromString('#e1dfdd');\n  slotRules[FabricSlots[FabricSlots.neutralDark]].color = getColorFromString('#201f1e');\n  slotRules[FabricSlots[FabricSlots.neutralTertiaryAlt]].color = getColorFromString('#c8c6c4');\n  slotRules[FabricSlots[FabricSlots.black]].color = getColorFromString('#000000');\n  slotRules[FabricSlots[FabricSlots.neutralDark]].color = getColorFromString('#201f1e');\n  slotRules[FabricSlots[FabricSlots.neutralPrimaryAlt]].color = getColorFromString('#3b3a39');\n  slotRules[FabricSlots[FabricSlots.neutralSecondary]].color = getColorFromString('#605e5c');\n  slotRules[FabricSlots[FabricSlots.neutralTertiary]].color = getColorFromString('#a19f9d');\n  slotRules[FabricSlots[FabricSlots.white]].color = getColorFromString('#ffffff');\n  slotRules[FabricSlots[FabricSlots.themeDarker]].color = getColorFromString('#004578');\n  slotRules[FabricSlots[FabricSlots.themeDark]].color = getColorFromString('#005a9e');\n  slotRules[FabricSlots[FabricSlots.themeDarkAlt]].color = getColorFromString('#106ebe');\n  slotRules[FabricSlots[FabricSlots.themeSecondary]].color = getColorFromString('#2b88d8');\n  slotRules[FabricSlots[FabricSlots.themeTertiary]].color = getColorFromString('#71afe5');\n  slotRules[FabricSlots[FabricSlots.themeLight]].color = getColorFromString('#c7e0f4');\n  slotRules[FabricSlots[FabricSlots.themeLighter]].color = getColorFromString('#deecf9');\n  slotRules[FabricSlots[FabricSlots.themeLighterAlt]].color = getColorFromString('#eff6fc');\n  slotRules[FabricSlots[FabricSlots.neutralLighterAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralLighter]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralLight]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralQuaternaryAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralDark]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralTertiaryAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.black]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralDark]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralPrimaryAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralSecondary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralTertiary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.white]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeDarker]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeDark]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeDarkAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themePrimary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeSecondary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeTertiary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLight]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLighter]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLighterAlt]].isCustomized = true;\n  return slotRules;\n}","map":{"version":3,"mappings":"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","names":["Shade","getColorFromString","mapEnumByName","BaseSlots","FabricSlots","SemanticColorSlots","themeRulesStandardCreator","slotRules","baseSlot","name","isCustomized","dependentRules","shadeName","shadeValue","Unshaded","inherits","thisSlotRule","asShade","isBackgroundShade","backgroundColor","push","undefined","primaryColor","color","foregroundColor","_makeFabricSlotRule","slotName","inheritedBase","inheritedShade","themePrimary","themeLighterAlt","Shade1","themeLighter","Shade2","themeLight","Shade3","themeTertiary","Shade4","themeSecondary","Shade5","themeDarkAlt","Shade6","themeDark","Shade7","themeDarker","Shade8","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\ThemeGenerator\\ThemeRulesStandard.ts"],"sourcesContent":["import { Shade } from '../../utilities/color/shades';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { mapEnumByName } from '../../Utilities';\n\nimport { IThemeRules } from './IThemeRules';\n\n/* This is the set of rules for our default theme.\n   We start with three base slots, defining the background, foreground (text), and\n   primary color (sometimes called theme color). Each Fabric slot is generated from\n   shades (or tints) of one of those three, creating the Fabric palette.\n   Then, we have semantic slots, the new thing intended to eventually replace the\n   Fabric palette. The semantic slots inherit from the Fabric palette. */\n\n/* The most minimal set of slots we start with. All other ones can be generated based on rules.\n * This is not so much an enum as it is a list. The enum is used to insure \"type\"-safety.\n * For now, we are only dealing with color. */\nexport enum BaseSlots {\n  primaryColor,\n  backgroundColor,\n  foregroundColor,\n}\n\n/* The original Fabric palette, only for back-compat. */\nexport enum FabricSlots {\n  themePrimary, // BaseSlots.primaryColor, Shade[Shade.Unshaded]);\n  themeLighterAlt, // BaseSlots.primaryColor, Shade[Shade.Shade1]);\n  themeLighter, // BaseSlots.primaryColor, Shade[Shade.Shade2]);\n  themeLight, // BaseSlots.primaryColor, Shade[Shade.Shade3]);\n  themeTertiary, // BaseSlots.primaryColor, Shade[Shade.Shade4]);\n  themeSecondary, // BaseSlots.primaryColor, Shade[Shade.Shade5]);\n  themeDarkAlt, // BaseSlots.primaryColor, Shade[Shade.Shade6]);\n  themeDark, // BaseSlots.primaryColor, Shade[Shade.Shade7]);\n  themeDarker, // BaseSlots.primaryColor, Shade[Shade.Shade8]);\n\n  neutralLighterAlt, // BaseSlots.backgroundColor, Shade[Shade.Shade1]);\n  neutralLighter, // BaseSlots.backgroundColor, Shade[Shade.Shade2]);\n  neutralLight, // BaseSlots.backgroundColor, Shade[Shade.Shade3]);\n  neutralQuaternaryAlt, // BaseSlots.backgroundColor, Shade[Shade.Shade4]);\n  neutralQuaternary, // BaseSlots.backgroundColor, Shade[Shade.Shade5]);\n  neutralTertiaryAlt, // BaseSlots.backgroundColor, Shade[Shade.Shade6]); // bg6 or fg2\n  neutralTertiary, // BaseSlots.foregroundColor, Shade[Shade.Shade3]);\n  // deprecated: neutralSecondaryAlt, // BaseSlots.foregroundColor, Shade[Shade.Shade4]);\n  neutralSecondary, // BaseSlots.foregroundColor, Shade[Shade.Shade5]);\n  neutralPrimaryAlt, // BaseSlots.foregroundColor, Shade[Shade.Shade6]);\n  neutralPrimary, // BaseSlots.foregroundColor, Shade[Shade.Unshaded]);\n  neutralDark, // BaseSlots.foregroundColor, Shade[Shade.Shade7]);\n\n  black, // BaseSlots.foregroundColor, Shade[Shade.Shade8]);\n  white, // BaseSlots.backgroundColor, Shade[Shade.Unshaded]);\n}\n\n/* List of all the semantic color slots for this theme.\n * This is not so much an enum as it is a list. The enum is used to insure \"type\"-safety. */\nexport enum SemanticColorSlots {\n  bodyBackground,\n  bodyText,\n  disabledBackground,\n  disabledText,\n}\n\nexport function themeRulesStandardCreator(): IThemeRules {\n  const slotRules: IThemeRules = {};\n\n  /*** BASE COLORS and their SHADES */\n  // iterate through each base slot and make the SlotRules for those\n  mapEnumByName(BaseSlots, (baseSlot: string) => {\n    // first make the SlotRule for the unshaded base Color\n    slotRules[baseSlot] = {\n      name: baseSlot,\n      isCustomized: true,\n      dependentRules: [],\n    };\n\n    // then make a rule for each shade of this base color, but skip unshaded\n    mapEnumByName(Shade, (shadeName: string, shadeValue: Shade) => {\n      if (shadeName === Shade[Shade.Unshaded]) {\n        return;\n      }\n      const inherits = slotRules[baseSlot];\n      const thisSlotRule = {\n        name: baseSlot + shadeName,\n        inherits: slotRules[baseSlot],\n        asShade: shadeValue,\n        isCustomized: false,\n        isBackgroundShade: baseSlot === BaseSlots[BaseSlots.backgroundColor] ? true : false,\n        dependentRules: [],\n      };\n      slotRules[baseSlot + shadeName] = thisSlotRule;\n      inherits.dependentRules.push(thisSlotRule);\n\n      return undefined;\n    });\n\n    return undefined;\n  });\n\n  // set default colors for the base colors\n  slotRules[BaseSlots[BaseSlots.primaryColor]].color = getColorFromString('#0078d4');\n  slotRules[BaseSlots[BaseSlots.backgroundColor]].color = getColorFromString('#ffffff');\n  slotRules[BaseSlots[BaseSlots.foregroundColor]].color = getColorFromString('#323130');\n\n  function _makeFabricSlotRule(\n    slotName: string,\n    inheritedBase: BaseSlots,\n    inheritedShade: Shade,\n    isBackgroundShade = false,\n  ): void {\n    const inherits = slotRules[BaseSlots[inheritedBase]];\n    const thisSlotRule = {\n      name: slotName,\n      inherits: inherits,\n      asShade: inheritedShade,\n      isCustomized: false,\n      isBackgroundShade: isBackgroundShade,\n      dependentRules: [],\n    };\n    slotRules[slotName] = thisSlotRule;\n    inherits.dependentRules.push(thisSlotRule);\n  }\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themePrimary], BaseSlots.primaryColor, Shade.Unshaded);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLighterAlt], BaseSlots.primaryColor, Shade.Shade1);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLighter], BaseSlots.primaryColor, Shade.Shade2);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLight], BaseSlots.primaryColor, Shade.Shade3);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeTertiary], BaseSlots.primaryColor, Shade.Shade4);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeSecondary], BaseSlots.primaryColor, Shade.Shade5);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDarkAlt], BaseSlots.primaryColor, Shade.Shade6);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDark], BaseSlots.primaryColor, Shade.Shade7);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDarker], BaseSlots.primaryColor, Shade.Shade8);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLighterAlt], BaseSlots.backgroundColor, Shade.Shade1, true);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLighter], BaseSlots.backgroundColor, Shade.Shade2, true);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLight], BaseSlots.backgroundColor, Shade.Shade3, true);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralQuaternaryAlt], BaseSlots.backgroundColor, Shade.Shade4, true);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralQuaternary], BaseSlots.backgroundColor, Shade.Shade5, true);\n  // bg6 or fg2\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralTertiaryAlt], BaseSlots.backgroundColor, Shade.Shade6, true);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralTertiary], BaseSlots.foregroundColor, Shade.Shade3);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralSecondary], BaseSlots.foregroundColor, Shade.Shade4);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralPrimaryAlt], BaseSlots.foregroundColor, Shade.Shade5);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralPrimary], BaseSlots.foregroundColor, Shade.Unshaded);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralDark], BaseSlots.foregroundColor, Shade.Shade7);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.black], BaseSlots.foregroundColor, Shade.Shade8);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.white], BaseSlots.backgroundColor, Shade.Unshaded, true);\n\n  slotRules[FabricSlots[FabricSlots.neutralLighterAlt]].color = getColorFromString('#faf9f8');\n  slotRules[FabricSlots[FabricSlots.neutralLighter]].color = getColorFromString('#f3f2f1');\n  slotRules[FabricSlots[FabricSlots.neutralLight]].color = getColorFromString('#edebe9');\n  slotRules[FabricSlots[FabricSlots.neutralQuaternaryAlt]].color = getColorFromString('#e1dfdd');\n  slotRules[FabricSlots[FabricSlots.neutralDark]].color = getColorFromString('#201f1e');\n  slotRules[FabricSlots[FabricSlots.neutralTertiaryAlt]].color = getColorFromString('#c8c6c4');\n\n  slotRules[FabricSlots[FabricSlots.black]].color = getColorFromString('#000000');\n  slotRules[FabricSlots[FabricSlots.neutralDark]].color = getColorFromString('#201f1e');\n  slotRules[FabricSlots[FabricSlots.neutralPrimaryAlt]].color = getColorFromString('#3b3a39');\n  slotRules[FabricSlots[FabricSlots.neutralSecondary]].color = getColorFromString('#605e5c');\n  slotRules[FabricSlots[FabricSlots.neutralTertiary]].color = getColorFromString('#a19f9d');\n  slotRules[FabricSlots[FabricSlots.white]].color = getColorFromString('#ffffff');\n\n  slotRules[FabricSlots[FabricSlots.themeDarker]].color = getColorFromString('#004578');\n  slotRules[FabricSlots[FabricSlots.themeDark]].color = getColorFromString('#005a9e');\n  slotRules[FabricSlots[FabricSlots.themeDarkAlt]].color = getColorFromString('#106ebe');\n  slotRules[FabricSlots[FabricSlots.themeSecondary]].color = getColorFromString('#2b88d8');\n  slotRules[FabricSlots[FabricSlots.themeTertiary]].color = getColorFromString('#71afe5');\n  slotRules[FabricSlots[FabricSlots.themeLight]].color = getColorFromString('#c7e0f4');\n  slotRules[FabricSlots[FabricSlots.themeLighter]].color = getColorFromString('#deecf9');\n  slotRules[FabricSlots[FabricSlots.themeLighterAlt]].color = getColorFromString('#eff6fc');\n\n  slotRules[FabricSlots[FabricSlots.neutralLighterAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralLighter]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralLight]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralQuaternaryAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralDark]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralTertiaryAlt]].isCustomized = true;\n\n  slotRules[FabricSlots[FabricSlots.black]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralDark]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralPrimaryAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralSecondary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralTertiary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.white]].isCustomized = true;\n\n  slotRules[FabricSlots[FabricSlots.themeDarker]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeDark]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeDarkAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themePrimary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeSecondary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeTertiary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLight]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLighter]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLighterAlt]].isCustomized = true;\n\n  return slotRules;\n}\n"]},"metadata":{},"sourceType":"module"}