{"ast":null,"code":"import { warn } from './warn';\n/**\n * Warns when a deprecated props are being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n * either null or a replacement prop name.\n */\n\nexport function warnDeprecations(componentName, props, deprecationMap) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var propName in deprecationMap) {\n      if (props && propName in props) {\n        var deprecationMessage = componentName + \" property '\" + propName + \"' was used but has been deprecated.\";\n        var replacementPropName = deprecationMap[propName];\n\n        if (replacementPropName) {\n          deprecationMessage += \" Use '\" + replacementPropName + \"' instead.\";\n        }\n\n        warn(deprecationMessage);\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAuBA,IAAvB,QAAmC,QAAnC;AACA;;;;;;;;;;AASA,OAAM,SAAUC,gBAAV,CAA8BC,aAA9B,EAAqDC,KAArD,EAA+DC,cAA/D,EAA8F;AAClG,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,SAAK,IAAMC,QAAX,IAAuBJ,cAAvB,EAAuC;AACrC,UAAID,KAAK,IAAIK,QAAQ,IAAIL,KAAzB,EAAgC;AAC9B,YAAIM,kBAAkB,GAAMP,aAAa,gBAAb,GAA2BM,QAA3B,GAAmC,qCAA/D;AACA,YAAME,mBAAmB,GAAGN,cAAc,CAACI,QAAD,CAA1C;;AACA,YAAIE,mBAAJ,EAAyB;AACvBD,4BAAkB,IAAI,WAASC,mBAAT,GAA4B,YAAlD;AACD;;AACDV,YAAI,CAACS,kBAAD,CAAJ;AACD;AACF;AACF;AACF","names":["warn","warnDeprecations","componentName","props","deprecationMap","process","env","NODE_ENV","propName","deprecationMessage","replacementPropName"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\lib\\src\\warn\\warnDeprecations.ts"],"sourcesContent":["import { ISettingsMap, warn } from './warn';\n/**\n * Warns when a deprecated props are being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n * either null or a replacement prop name.\n */\nexport function warnDeprecations<P>(componentName: string, props: P, deprecationMap: ISettingsMap<P>): void {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const propName in deprecationMap) {\n      if (props && propName in props) {\n        let deprecationMessage = `${componentName} property '${propName}' was used but has been deprecated.`;\n        const replacementPropName = deprecationMap[propName];\n        if (replacementPropName) {\n          deprecationMessage += ` Use '${replacementPropName}' instead.`;\n        }\n        warn(deprecationMessage);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}