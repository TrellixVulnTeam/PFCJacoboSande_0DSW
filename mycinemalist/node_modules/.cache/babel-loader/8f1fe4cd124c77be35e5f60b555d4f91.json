{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Customizer, getNativeProps, divProperties, classNamesFunction, getDocument, memoizeFunction, getRTL, FocusRects } from '../../Utilities';\nimport { createTheme } from '../../Styling';\nvar getClassNames = classNamesFunction();\nvar getFabricTheme = memoizeFunction(function (theme, isRTL) {\n  return createTheme(__assign(__assign({}, theme), {\n    rtl: isRTL\n  }));\n});\n\nvar getDir = function (theme, dir) {\n  var contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  var pageDir = getRTL() ? 'rtl' : 'ltr';\n  var componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir\n  };\n};\n\nvar FabricBase =\n/** @class */\nfunction (_super) {\n  __extends(FabricBase, _super);\n\n  function FabricBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._rootElement = React.createRef();\n    _this._removeClassNameFromBody = undefined;\n    return _this;\n  }\n\n  FabricBase.prototype.render = function () {\n    var _a = this.props,\n        _b = _a.as,\n        Root = _b === void 0 ? 'div' : _b,\n        theme = _a.theme,\n        dir = _a.dir;\n\n    var classNames = this._getClassNames();\n\n    var divProps = getNativeProps(this.props, divProperties, ['dir']);\n\n    var _c = getDir(theme, dir),\n        rootDir = _c.rootDir,\n        needsTheme = _c.needsTheme;\n\n    var renderedContent = React.createElement(Root, __assign({\n      dir: rootDir\n    }, divProps, {\n      className: classNames.root,\n      ref: this._rootElement\n    }));\n\n    if (needsTheme) {\n      renderedContent = React.createElement(Customizer, {\n        settings: {\n          theme: getFabricTheme(theme, dir === 'rtl')\n        }\n      }, renderedContent);\n    }\n\n    return React.createElement(React.Fragment, null, renderedContent, React.createElement(FocusRects, {\n      rootRef: this._rootElement\n    }));\n  };\n\n  FabricBase.prototype.componentDidMount = function () {\n    this._addClassNameToBody();\n  };\n\n  FabricBase.prototype.componentWillUnmount = function () {\n    if (this._removeClassNameFromBody) {\n      this._removeClassNameFromBody();\n    }\n  };\n\n  FabricBase.prototype._getClassNames = function () {\n    var _a = this.props,\n        className = _a.className,\n        theme = _a.theme,\n        applyTheme = _a.applyTheme,\n        styles = _a.styles;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      applyTheme: applyTheme,\n      className: className\n    });\n    return classNames;\n  };\n\n  FabricBase.prototype._addClassNameToBody = function () {\n    if (this.props.applyThemeToBody) {\n      var classNames_1 = this._getClassNames();\n\n      var currentDoc_1 = getDocument(this._rootElement.current);\n\n      if (currentDoc_1) {\n        currentDoc_1.body.classList.add(classNames_1.bodyThemed);\n\n        this._removeClassNameFromBody = function () {\n          currentDoc_1.body.classList.remove(classNames_1.bodyThemed);\n        };\n      }\n    }\n  };\n\n  return FabricBase;\n}(React.Component);\n\nexport { FabricBase };","map":{"version":3,"mappings":"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","names":["React","Customizer","getNativeProps","divProperties","classNamesFunction","getDocument","memoizeFunction","getRTL","FocusRects","createTheme","getClassNames","getFabricTheme","theme","isRTL","rtl","getDir","dir","contextDir","pageDir","componentDir","rootDir","needsTheme","__extends","_this","createRef","undefined","FabricBase","_b","Root","classNames","_getClassNames","divProps","props","renderedContent","__assign","className","root","ref","_rootElement","settings","rootRef","_addClassNameToBody","_removeClassNameFromBody","applyTheme","styles","applyThemeToBody","classNames_1","currentDoc_1","current","body","classList","add","bodyThemed","remove","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Fabric\\Fabric.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Customizer,\n  getNativeProps,\n  divProperties,\n  classNamesFunction,\n  getDocument,\n  memoizeFunction,\n  getRTL,\n  FocusRects,\n} from '../../Utilities';\nimport { IFabricProps, IFabricStyleProps, IFabricStyles } from './Fabric.types';\nimport { IProcessedStyleSet } from '@uifabric/merge-styles';\nimport { ITheme, createTheme } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IFabricStyleProps, IFabricStyles>();\nconst getFabricTheme = memoizeFunction((theme?: ITheme, isRTL?: boolean) => createTheme({ ...theme, rtl: isRTL }));\n\nconst getDir = (theme?: ITheme, dir?: IFabricProps['dir']) => {\n  const contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  const pageDir = getRTL() ? 'rtl' : 'ltr';\n  const componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir,\n  };\n};\n\nexport class FabricBase extends React.Component<IFabricProps> {\n  private _rootElement = React.createRef<HTMLDivElement>();\n  private _removeClassNameFromBody?: () => void = undefined;\n\n  public render() {\n    const { as: Root = 'div', theme, dir } = this.props;\n    const classNames = this._getClassNames();\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['dir']);\n    const { rootDir, needsTheme } = getDir(theme, dir);\n\n    let renderedContent = <Root dir={rootDir} {...divProps} className={classNames.root} ref={this._rootElement} />;\n\n    if (needsTheme) {\n      renderedContent = (\n        <Customizer settings={{ theme: getFabricTheme(theme, dir === 'rtl') }}>{renderedContent}</Customizer>\n      );\n    }\n\n    return (\n      <>\n        {renderedContent}\n        <FocusRects rootRef={this._rootElement} />\n      </>\n    );\n  }\n\n  public componentDidMount(): void {\n    this._addClassNameToBody();\n  }\n\n  public componentWillUnmount(): void {\n    if (this._removeClassNameFromBody) {\n      this._removeClassNameFromBody();\n    }\n  }\n\n  private _getClassNames(): IProcessedStyleSet<IFabricStyles> {\n    const { className, theme, applyTheme, styles } = this.props;\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      applyTheme: applyTheme,\n      className,\n    });\n    return classNames;\n  }\n\n  private _addClassNameToBody(): void {\n    if (this.props.applyThemeToBody) {\n      const classNames = this._getClassNames();\n      const currentDoc = getDocument(this._rootElement.current);\n      if (currentDoc) {\n        currentDoc.body.classList.add(classNames.bodyThemed);\n        this._removeClassNameFromBody = () => {\n          currentDoc.body.classList.remove(classNames.bodyThemed);\n        };\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}