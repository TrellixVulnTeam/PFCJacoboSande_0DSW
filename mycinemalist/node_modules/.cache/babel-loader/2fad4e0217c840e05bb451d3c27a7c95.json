{"ast":null,"code":"import { KeyCodes } from './KeyCodes';\nimport { getDocument } from './dom/getDocument';\nimport { getItem, setItem } from './sessionStorage';\nimport { setRTL as mergeStylesSetRTL } from '@uifabric/merge-styles';\nvar RTL_LOCAL_STORAGE_KEY = 'isRTL'; // Default to undefined so that we initialize on first read.\n\nvar _isRTL;\n/**\n * Gets the rtl state of the page (returns true if in rtl.)\n */\n\n\nexport function getRTL(theme) {\n  if (theme === void 0) {\n    theme = {};\n  }\n\n  if (theme.rtl !== undefined) {\n    return theme.rtl;\n  }\n\n  if (_isRTL === undefined) {\n    // Fabric supports persisting the RTL setting between page refreshes via session storage\n    var savedRTL = getItem(RTL_LOCAL_STORAGE_KEY);\n\n    if (savedRTL !== null) {\n      _isRTL = savedRTL === '1';\n      setRTL(_isRTL);\n    }\n\n    var doc = getDocument();\n\n    if (_isRTL === undefined && doc) {\n      _isRTL = (doc.body && doc.body.getAttribute('dir') || doc.documentElement.getAttribute('dir')) === 'rtl';\n      mergeStylesSetRTL(_isRTL);\n    }\n  }\n\n  return !!_isRTL;\n}\n/**\n * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)\n */\n\nexport function setRTL(isRTL, persistSetting) {\n  if (persistSetting === void 0) {\n    persistSetting = false;\n  }\n\n  var doc = getDocument();\n\n  if (doc) {\n    doc.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');\n  }\n\n  if (persistSetting) {\n    setItem(RTL_LOCAL_STORAGE_KEY, isRTL ? '1' : '0');\n  }\n\n  _isRTL = isRTL;\n  mergeStylesSetRTL(_isRTL);\n}\n/**\n * Returns the given key, but flips right/left arrows if necessary.\n */\n\nexport function getRTLSafeKeyCode(key, theme) {\n  if (theme === void 0) {\n    theme = {};\n  }\n\n  if (getRTL(theme)) {\n    if (key === KeyCodes.left) {\n      key = KeyCodes.right;\n    } else if (key === KeyCodes.right) {\n      key = KeyCodes.left;\n    }\n  }\n\n  return key;\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,kBAAjC;AACA,SAASC,MAAM,IAAIC,iBAAnB,QAA4C,wBAA5C;AAEA,IAAMC,qBAAqB,GAAG,OAA9B,C,CAEA;;AACA,IAAIC,MAAJ;AAEA;;;;;AAGA,OAAM,SAAUC,MAAV,CAAiBC,KAAjB,EAA8C;AAA7B;AAAAA;AAA6B;;AAClD,MAAIA,KAAK,CAACC,GAAN,KAAcC,SAAlB,EAA6B;AAC3B,WAAOF,KAAK,CAACC,GAAb;AACD;;AACD,MAAIH,MAAM,KAAKI,SAAf,EAA0B;AACxB;AACA,QAAIC,QAAQ,GAAGV,OAAO,CAACI,qBAAD,CAAtB;;AACA,QAAIM,QAAQ,KAAK,IAAjB,EAAuB;AACrBL,YAAM,GAAGK,QAAQ,KAAK,GAAtB;AACAR,YAAM,CAACG,MAAD,CAAN;AACD;;AAED,QAAIM,GAAG,GAAGZ,WAAW,EAArB;;AACA,QAAIM,MAAM,KAAKI,SAAX,IAAwBE,GAA5B,EAAiC;AAC/BN,YAAM,GAAG,CAAEM,GAAG,CAACC,IAAJ,IAAYD,GAAG,CAACC,IAAJ,CAASC,YAAT,CAAsB,KAAtB,CAAb,IAA8CF,GAAG,CAACG,eAAJ,CAAoBD,YAApB,CAAiC,KAAjC,CAA/C,MAA4F,KAArG;AACAV,uBAAiB,CAACE,MAAD,CAAjB;AACD;AACF;;AAED,SAAO,CAAC,CAACA,MAAT;AACD;AAED;;;;AAGA,OAAM,SAAUH,MAAV,CAAiBa,KAAjB,EAAiCC,cAAjC,EAAgE;AAA/B;AAAAA;AAA+B;;AACpE,MAAIL,GAAG,GAAGZ,WAAW,EAArB;;AACA,MAAIY,GAAJ,EAAS;AACPA,OAAG,CAACG,eAAJ,CAAoBG,YAApB,CAAiC,KAAjC,EAAwCF,KAAK,GAAG,KAAH,GAAW,KAAxD;AACD;;AAED,MAAIC,cAAJ,EAAoB;AAClBf,WAAO,CAACG,qBAAD,EAAwBW,KAAK,GAAG,GAAH,GAAS,GAAtC,CAAP;AACD;;AAEDV,QAAM,GAAGU,KAAT;AACAZ,mBAAiB,CAACE,MAAD,CAAjB;AACD;AAED;;;;AAGA,OAAM,SAAUa,iBAAV,CAA4BC,GAA5B,EAAyCZ,KAAzC,EAAsE;AAA7B;AAAAA;AAA6B;;AAC1E,MAAID,MAAM,CAACC,KAAD,CAAV,EAAmB;AACjB,QAAIY,GAAG,KAAKrB,QAAQ,CAACsB,IAArB,EAA2B;AACzBD,SAAG,GAAGrB,QAAQ,CAACuB,KAAf;AACD,KAFD,MAEO,IAAIF,GAAG,KAAKrB,QAAQ,CAACuB,KAArB,EAA4B;AACjCF,SAAG,GAAGrB,QAAQ,CAACsB,IAAf;AACD;AACF;;AAED,SAAOD,GAAP;AACD","names":["KeyCodes","getDocument","getItem","setItem","setRTL","mergeStylesSetRTL","RTL_LOCAL_STORAGE_KEY","_isRTL","getRTL","theme","rtl","undefined","savedRTL","doc","body","getAttribute","documentElement","isRTL","persistSetting","setAttribute","getRTLSafeKeyCode","key","left","right"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\@uifabric\\utilities\\src\\rtl.ts"],"sourcesContent":["import { KeyCodes } from './KeyCodes';\nimport { getDocument } from './dom/getDocument';\nimport { getItem, setItem } from './sessionStorage';\nimport { setRTL as mergeStylesSetRTL } from '@uifabric/merge-styles';\n\nconst RTL_LOCAL_STORAGE_KEY = 'isRTL';\n\n// Default to undefined so that we initialize on first read.\nlet _isRTL: boolean | undefined;\n\n/**\n * Gets the rtl state of the page (returns true if in rtl.)\n */\nexport function getRTL(theme: { rtl?: boolean } = {}): boolean {\n  if (theme.rtl !== undefined) {\n    return theme.rtl;\n  }\n  if (_isRTL === undefined) {\n    // Fabric supports persisting the RTL setting between page refreshes via session storage\n    let savedRTL = getItem(RTL_LOCAL_STORAGE_KEY);\n    if (savedRTL !== null) {\n      _isRTL = savedRTL === '1';\n      setRTL(_isRTL);\n    }\n\n    let doc = getDocument();\n    if (_isRTL === undefined && doc) {\n      _isRTL = ((doc.body && doc.body.getAttribute('dir')) || doc.documentElement.getAttribute('dir')) === 'rtl';\n      mergeStylesSetRTL(_isRTL);\n    }\n  }\n\n  return !!_isRTL;\n}\n\n/**\n * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)\n */\nexport function setRTL(isRTL: boolean, persistSetting: boolean = false): void {\n  let doc = getDocument();\n  if (doc) {\n    doc.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');\n  }\n\n  if (persistSetting) {\n    setItem(RTL_LOCAL_STORAGE_KEY, isRTL ? '1' : '0');\n  }\n\n  _isRTL = isRTL;\n  mergeStylesSetRTL(_isRTL);\n}\n\n/**\n * Returns the given key, but flips right/left arrows if necessary.\n */\nexport function getRTLSafeKeyCode(key: number, theme: { rtl?: boolean } = {}): number {\n  if (getRTL(theme)) {\n    if (key === KeyCodes.left) {\n      key = KeyCodes.right;\n    } else if (key === KeyCodes.right) {\n      key = KeyCodes.left;\n    }\n  }\n\n  return key;\n}\n"]},"metadata":{},"sourceType":"module"}