{"ast":null,"code":"import { MAX_COLOR_RGB } from './consts';\n/** Converts HSV components to an RGB color. Does not set the alpha value. */\n\nexport function hsv2rgb(h, s, v) {\n  s = s / 100;\n  v = v / 100;\n  var rgb = [];\n  var c = v * s;\n  var hh = h / 60;\n  var x = c * (1 - Math.abs(hh % 2 - 1));\n  var m = v - c;\n\n  switch (Math.floor(hh)) {\n    case 0:\n      rgb = [c, x, 0];\n      break;\n\n    case 1:\n      rgb = [x, c, 0];\n      break;\n\n    case 2:\n      rgb = [0, c, x];\n      break;\n\n    case 3:\n      rgb = [0, x, c];\n      break;\n\n    case 4:\n      rgb = [x, 0, c];\n      break;\n\n    case 5:\n      rgb = [c, 0, x];\n      break;\n  }\n\n  return {\n    r: Math.round(MAX_COLOR_RGB * (rgb[0] + m)),\n    g: Math.round(MAX_COLOR_RGB * (rgb[1] + m)),\n    b: Math.round(MAX_COLOR_RGB * (rgb[2] + m))\n  };\n}","map":{"version":3,"mappings":"AACA,SAASA,aAAT,QAA8B,UAA9B;AAEA;;AACA,OAAM,SAAUC,OAAV,CAAkBC,CAAlB,EAA6BC,CAA7B,EAAwCC,CAAxC,EAAiD;AACrDD,GAAC,GAAGA,CAAC,GAAG,GAAR;AACAC,GAAC,GAAGA,CAAC,GAAG,GAAR;AAEA,MAAIC,GAAG,GAAa,EAApB;AAEA,MAAMC,CAAC,GAAGF,CAAC,GAAGD,CAAd;AACA,MAAMI,EAAE,GAAGL,CAAC,GAAG,EAAf;AACA,MAAMM,CAAC,GAAGF,CAAC,IAAI,IAAIG,IAAI,CAACC,GAAL,CAAUH,EAAE,GAAG,CAAN,GAAW,CAApB,CAAR,CAAX;AACA,MAAMI,CAAC,GAAGP,CAAC,GAAGE,CAAd;;AAEA,UAAQG,IAAI,CAACG,KAAL,CAAWL,EAAX,CAAR;AACE,SAAK,CAAL;AACEF,SAAG,GAAG,CAACC,CAAD,EAAIE,CAAJ,EAAO,CAAP,CAAN;AACA;;AAEF,SAAK,CAAL;AACEH,SAAG,GAAG,CAACG,CAAD,EAAIF,CAAJ,EAAO,CAAP,CAAN;AACA;;AAEF,SAAK,CAAL;AACED,SAAG,GAAG,CAAC,CAAD,EAAIC,CAAJ,EAAOE,CAAP,CAAN;AACA;;AAEF,SAAK,CAAL;AACEH,SAAG,GAAG,CAAC,CAAD,EAAIG,CAAJ,EAAOF,CAAP,CAAN;AACA;;AAEF,SAAK,CAAL;AACED,SAAG,GAAG,CAACG,CAAD,EAAI,CAAJ,EAAOF,CAAP,CAAN;AACA;;AAEF,SAAK,CAAL;AACED,SAAG,GAAG,CAACC,CAAD,EAAI,CAAJ,EAAOE,CAAP,CAAN;AACA;AAvBJ;;AA0BA,SAAO;AACLK,KAAC,EAAEJ,IAAI,CAACK,KAAL,CAAWd,aAAa,IAAIK,GAAG,CAAC,CAAD,CAAH,GAASM,CAAb,CAAxB,CADE;AAELI,KAAC,EAAEN,IAAI,CAACK,KAAL,CAAWd,aAAa,IAAIK,GAAG,CAAC,CAAD,CAAH,GAASM,CAAb,CAAxB,CAFE;AAGLK,KAAC,EAAEP,IAAI,CAACK,KAAL,CAAWd,aAAa,IAAIK,GAAG,CAAC,CAAD,CAAH,GAASM,CAAb,CAAxB;AAHE,GAAP;AAKD","names":["MAX_COLOR_RGB","hsv2rgb","h","s","v","rgb","c","hh","x","Math","abs","m","floor","r","round","g","b"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\utilities\\src\\utilities\\color\\hsv2rgb.ts"],"sourcesContent":["import { IRGB } from './interfaces';\nimport { MAX_COLOR_RGB } from './consts';\n\n/** Converts HSV components to an RGB color. Does not set the alpha value. */\nexport function hsv2rgb(h: number, s: number, v: number): IRGB {\n  s = s / 100;\n  v = v / 100;\n\n  let rgb: number[] = [];\n\n  const c = v * s;\n  const hh = h / 60;\n  const x = c * (1 - Math.abs((hh % 2) - 1));\n  const m = v - c;\n\n  switch (Math.floor(hh)) {\n    case 0:\n      rgb = [c, x, 0];\n      break;\n\n    case 1:\n      rgb = [x, c, 0];\n      break;\n\n    case 2:\n      rgb = [0, c, x];\n      break;\n\n    case 3:\n      rgb = [0, x, c];\n      break;\n\n    case 4:\n      rgb = [x, 0, c];\n      break;\n\n    case 5:\n      rgb = [c, 0, x];\n      break;\n  }\n\n  return {\n    r: Math.round(MAX_COLOR_RGB * (rgb[0] + m)),\n    g: Math.round(MAX_COLOR_RGB * (rgb[1] + m)),\n    b: Math.round(MAX_COLOR_RGB * (rgb[2] + m)),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}