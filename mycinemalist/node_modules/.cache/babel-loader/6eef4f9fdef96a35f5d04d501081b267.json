{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, initializeComponentRef } from '../../Utilities';\nimport { KeytipData } from '../../KeytipData';\nvar getClassNames = classNamesFunction();\n\nvar LinkBase =\n/** @class */\nfunction (_super) {\n  __extends(LinkBase, _super);\n\n  function LinkBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._link = React.createRef();\n\n    _this._renderContent = function (keytipAttributes) {\n      if (keytipAttributes === void 0) {\n        keytipAttributes = {};\n      }\n\n      var _a = _this.props,\n          disabled = _a.disabled,\n          children = _a.children,\n          className = _a.className,\n          href = _a.href,\n          theme = _a.theme,\n          styles = _a.styles;\n      var classNames = getClassNames(styles, {\n        className: className,\n        isButton: !href,\n        isDisabled: disabled,\n        theme: theme\n      });\n\n      var RootType = _this._getRootType(_this.props);\n\n      return React.createElement(RootType, __assign({}, keytipAttributes, _this._adjustPropsForRootType(RootType, _this.props), {\n        className: classNames.root,\n        onClick: _this._onClick,\n        ref: _this._link,\n        \"aria-disabled\": disabled\n      }), children);\n    };\n\n    _this._onClick = function (ev) {\n      var _a = _this.props,\n          onClick = _a.onClick,\n          disabled = _a.disabled;\n\n      if (disabled) {\n        ev.preventDefault();\n      } else if (onClick) {\n        onClick(ev);\n      }\n    };\n\n    initializeComponentRef(_this);\n    return _this;\n  }\n\n  LinkBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        disabled = _a.disabled,\n        keytipProps = _a.keytipProps;\n\n    if (keytipProps) {\n      return React.createElement(KeytipData, {\n        keytipProps: keytipProps,\n        ariaDescribedBy: this.props['aria-describedby'],\n        disabled: disabled\n      }, function (keytipAttributes) {\n        return _this._renderContent(keytipAttributes);\n      });\n    }\n\n    return this._renderContent();\n  };\n\n  LinkBase.prototype.focus = function () {\n    var current = this._link.current;\n\n    if (current && current.focus) {\n      current.focus();\n    }\n  };\n\n  LinkBase.prototype._adjustPropsForRootType = function (RootType, props) {\n    // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n    // as those will always be removed. We also take some props that are optional\n    // based on the RootType.\n    var children = props.children,\n        as = props.as,\n        disabled = props.disabled,\n        target = props.target,\n        href = props.href,\n        theme = props.theme,\n        getStyles = props.getStyles,\n        styles = props.styles,\n        componentRef = props.componentRef,\n        keytipProps = props.keytipProps,\n        restProps = __rest(props, [\"children\", \"as\", \"disabled\", \"target\", \"href\", \"theme\", \"getStyles\", \"styles\", \"componentRef\", \"keytipProps\"]); // RootType will be a string if we're dealing with an html component\n\n\n    if (typeof RootType === 'string') {\n      // Remove the disabled prop for anchor elements\n      if (RootType === 'a') {\n        return __assign({\n          target: target,\n          href: disabled ? undefined : href\n        }, restProps);\n      } // Add the type='button' prop for button elements\n\n\n      if (RootType === 'button') {\n        return __assign({\n          type: 'button',\n          disabled: disabled\n        }, restProps);\n      } // Remove the target and href props for all other non anchor elements\n\n\n      return __assign(__assign({}, restProps), {\n        disabled: disabled\n      });\n    } // Retain all props except 'as' for ReactComponents\n\n\n    return __assign({\n      target: target,\n      href: href,\n      disabled: disabled\n    }, restProps);\n  };\n\n  LinkBase.prototype._getRootType = function (props) {\n    if (props.as) {\n      return props.as;\n    }\n\n    if (props.href) {\n      return 'a';\n    }\n\n    return 'button';\n  };\n\n  return LinkBase;\n}(React.Component);\n\nexport { LinkBase };","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","initializeComponentRef","KeytipData","getClassNames","__extends","props","_super","_this","createRef","keytipAttributes","disabled","children","className","href","theme","styles","classNames","isButton","isDisabled","RootType","_getRootType","__assign","_adjustPropsForRootType","root","onClick","_onClick","ref","_link","ev","preventDefault","LinkBase","keytipProps","ariaDescribedBy","_renderContent","current","focus","as","target","getStyles","componentRef","restProps","undefined","type","Component"],"sources":["D:\\PFCJACOBO\\PFC\\mycinemalist\\node_modules\\office-ui-fabric-react\\lib\\components\\src\\components\\Link\\Link.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef } from '../../Utilities';\nimport { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\nimport { KeytipData } from '../../KeytipData';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\nexport class LinkBase extends React.Component<ILinkProps, {}> implements ILink {\n  private _link = React.createRef<HTMLAnchorElement | HTMLButtonElement | null>();\n\n  constructor(props: ILinkProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const { disabled, keytipProps } = this.props;\n\n    if (keytipProps) {\n      return (\n        <KeytipData\n          keytipProps={keytipProps}\n          ariaDescribedBy={(this.props as { 'aria-describedby': string })['aria-describedby']}\n          disabled={disabled}\n        >\n          {(keytipAttributes: any): JSX.Element => this._renderContent(keytipAttributes)}\n        </KeytipData>\n      );\n    }\n\n    return this._renderContent();\n  }\n\n  public focus() {\n    const { current } = this._link;\n\n    if (current && current.focus) {\n      current.focus();\n    }\n  }\n\n  private _renderContent = (keytipAttributes: any = {}): JSX.Element => {\n    const { disabled, children, className, href, theme, styles } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      className,\n      isButton: !href,\n      isDisabled: disabled,\n      theme: theme!,\n    });\n\n    const RootType = this._getRootType(this.props);\n\n    return (\n      <RootType\n        {...keytipAttributes}\n        {...this._adjustPropsForRootType(RootType, this.props)}\n        className={classNames.root}\n        onClick={this._onClick}\n        ref={this._link}\n        aria-disabled={disabled}\n      >\n        {children}\n      </RootType>\n    );\n  };\n\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    const { onClick, disabled } = this.props;\n\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  private _adjustPropsForRootType(\n    RootType: string | React.ComponentClass | React.FunctionComponent,\n    props: ILinkProps & { getStyles?: any },\n  ): Partial<ILinkProps> {\n    // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n    // as those will always be removed. We also take some props that are optional\n    // based on the RootType.\n    const {\n      children,\n      as,\n      disabled,\n      target,\n      href,\n      theme,\n      getStyles,\n      styles,\n      componentRef,\n      keytipProps,\n      ...restProps\n    } = props;\n\n    // RootType will be a string if we're dealing with an html component\n    if (typeof RootType === 'string') {\n      // Remove the disabled prop for anchor elements\n      if (RootType === 'a') {\n        return {\n          target,\n          href: disabled ? undefined : href,\n          ...restProps,\n        };\n      }\n\n      // Add the type='button' prop for button elements\n      if (RootType === 'button') {\n        return {\n          type: 'button',\n          disabled,\n          ...restProps,\n        };\n      }\n\n      // Remove the target and href props for all other non anchor elements\n      return { ...restProps, disabled };\n    }\n\n    // Retain all props except 'as' for ReactComponents\n    return { target, href, disabled, ...restProps };\n  }\n\n  private _getRootType(props: ILinkProps): string | React.ComponentClass | React.FunctionComponent {\n    if (props.as) {\n      return props.as;\n    }\n\n    if (props.href) {\n      return 'a';\n    }\n\n    return 'button';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}